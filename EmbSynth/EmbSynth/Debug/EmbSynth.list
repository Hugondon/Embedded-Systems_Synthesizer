
EmbSynth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000990c  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  08009b08  08009b08  00019b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a278  0800a278  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  0800a278  0800a278  0001a278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a280  0800a280  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a280  0800a280  0001a280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a284  0800a284  0001a284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  0800a288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000038  0800a2c0  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  0800a2c0  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001284d  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002411  00000000  00000000  000328b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001160  00000000  00000000  00034cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001060  00000000  00000000  00035e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002770e  00000000  00000000  00036e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc58  00000000  00000000  0005e596  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fcd0a  00000000  00000000  0006b1ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167ef8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba0  00000000  00000000  00167f74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000038 	.word	0x20000038
 8000214:	00000000 	.word	0x00000000
 8000218:	08009aec 	.word	0x08009aec

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000003c 	.word	0x2000003c
 8000234:	08009aec 	.word	0x08009aec

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f004 ff8e 	bl	800545e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 fb19 	bl	8000b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 fd65 	bl	8001014 <MX_GPIO_Init>
  MX_DMA_Init();
 800054a:	f000 fd35 	bl	8000fb8 <MX_DMA_Init>
  MX_UART4_Init();
 800054e:	f000 fcd3 	bl	8000ef8 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000552:	f000 fd01 	bl	8000f58 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000556:	f000 fc27 	bl	8000da8 <MX_TIM2_Init>
  MX_TIM14_Init();
 800055a:	f000 fca9 	bl	8000eb0 <MX_TIM14_Init>
  MX_TIM1_Init();
 800055e:	f000 fbcf 	bl	8000d00 <MX_TIM1_Init>
  MX_DAC_Init();
 8000562:	f000 fb99 	bl	8000c98 <MX_DAC_Init>
  MX_TIM6_Init();
 8000566:	f000 fc6d 	bl	8000e44 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800056a:	4891      	ldr	r0, [pc, #580]	; (80007b0 <main+0x278>)
 800056c:	f007 fa0a 	bl	8007984 <HAL_TIM_Base_Start>
  HAL_UART_Receive_DMA(&huart4, rx_buffer, sizeof(rx_buffer)/sizeof(char));
 8000570:	2203      	movs	r2, #3
 8000572:	4990      	ldr	r1, [pc, #576]	; (80007b4 <main+0x27c>)
 8000574:	4890      	ldr	r0, [pc, #576]	; (80007b8 <main+0x280>)
 8000576:	f007 ff4d 	bl	8008414 <HAL_UART_Receive_DMA>

  ID = readID();
 800057a:	f002 fe29 	bl	80031d0 <readID>
 800057e:	4603      	mov	r3, r0
 8000580:	461a      	mov	r2, r3
 8000582:	4b8e      	ldr	r3, [pc, #568]	; (80007bc <main+0x284>)
 8000584:	801a      	strh	r2, [r3, #0]
  HAL_Delay(100);
 8000586:	2064      	movs	r0, #100	; 0x64
 8000588:	f004 ffc6 	bl	8005518 <HAL_Delay>
  tft_init(ID);
 800058c:	4b8b      	ldr	r3, [pc, #556]	; (80007bc <main+0x284>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f002 faff 	bl	8002b94 <tft_init>
  setRotation(3);
 8000596:	2003      	movs	r0, #3
 8000598:	f003 fd38 	bl	800400c <setRotation>

  // INTERFAZ GLOBAL
  fillRect(0 , 0, 320, 240,(11)&BLUE | (((16)*2)<<5)&GREEN |  ((26)<<(5+6))&RED );//Color base
 800059c:	f24d 430b 	movw	r3, #54283	; 0xd40b
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	23f0      	movs	r3, #240	; 0xf0
 80005a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80005a8:	2100      	movs	r1, #0
 80005aa:	2000      	movs	r0, #0
 80005ac:	f004 fbb4 	bl	8004d18 <fillRect>
  fillRect(20 , 80, 280, 120,BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));//Color de tablero
 80005b0:	f648 23ca 	movw	r3, #35530	; 0x8aca
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2378      	movs	r3, #120	; 0x78
 80005b8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	2014      	movs	r0, #20
 80005c0:	f004 fbaa 	bl	8004d18 <fillRect>
  fillRect(20 , 20, 280, 50,BLUE_LEV(2) | GREEN_LEV(2) | RED_LEV(2));//Color de señales
 80005c4:	f241 0382 	movw	r3, #4226	; 0x1082
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2332      	movs	r3, #50	; 0x32
 80005cc:	f44f 728c 	mov.w	r2, #280	; 0x118
 80005d0:	2114      	movs	r1, #20
 80005d2:	2014      	movs	r0, #20
 80005d4:	f004 fba0 	bl	8004d18 <fillRect>

  // AM
  fillTriangle(62, 105, 72, 90, 82, 105, RED);
 80005d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80005dc:	9302      	str	r3, [sp, #8]
 80005de:	2369      	movs	r3, #105	; 0x69
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2352      	movs	r3, #82	; 0x52
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	235a      	movs	r3, #90	; 0x5a
 80005e8:	2248      	movs	r2, #72	; 0x48
 80005ea:	2169      	movs	r1, #105	; 0x69
 80005ec:	203e      	movs	r0, #62	; 0x3e
 80005ee:	f004 fdad 	bl	800514c <fillTriangle>

  // FM
  fillTriangle(45, 140, 55, 125, 65, 140, RED);
 80005f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80005f6:	9302      	str	r3, [sp, #8]
 80005f8:	238c      	movs	r3, #140	; 0x8c
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2341      	movs	r3, #65	; 0x41
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	237d      	movs	r3, #125	; 0x7d
 8000602:	2237      	movs	r2, #55	; 0x37
 8000604:	218c      	movs	r1, #140	; 0x8c
 8000606:	202d      	movs	r0, #45	; 0x2d
 8000608:	f004 fda0 	bl	800514c <fillTriangle>
  fillTriangle(76, 140, 86, 125, 96, 140, RED);
 800060c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000610:	9302      	str	r3, [sp, #8]
 8000612:	238c      	movs	r3, #140	; 0x8c
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2360      	movs	r3, #96	; 0x60
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	237d      	movs	r3, #125	; 0x7d
 800061c:	2256      	movs	r2, #86	; 0x56
 800061e:	218c      	movs	r1, #140	; 0x8c
 8000620:	204c      	movs	r0, #76	; 0x4c
 8000622:	f004 fd93 	bl	800514c <fillTriangle>

  // LP
  fillTriangle(76, 175, 76, 160, 90, 175, RED);
 8000626:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800062a:	9302      	str	r3, [sp, #8]
 800062c:	23af      	movs	r3, #175	; 0xaf
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	235a      	movs	r3, #90	; 0x5a
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	23a0      	movs	r3, #160	; 0xa0
 8000636:	224c      	movs	r2, #76	; 0x4c
 8000638:	21af      	movs	r1, #175	; 0xaf
 800063a:	204c      	movs	r0, #76	; 0x4c
 800063c:	f004 fd86 	bl	800514c <fillTriangle>
  fillRect(40, 160, 40, 15,RED);
 8000640:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	230f      	movs	r3, #15
 8000648:	2228      	movs	r2, #40	; 0x28
 800064a:	21a0      	movs	r1, #160	; 0xa0
 800064c:	2028      	movs	r0, #40	; 0x28
 800064e:	f004 fb63 	bl	8004d18 <fillRect>

  // PIANO
  fillRect(65 , 205, 190, 35,WHITE);
 8000652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2323      	movs	r3, #35	; 0x23
 800065a:	22be      	movs	r2, #190	; 0xbe
 800065c:	21cd      	movs	r1, #205	; 0xcd
 800065e:	2041      	movs	r0, #65	; 0x41
 8000660:	f004 fb5a 	bl	8004d18 <fillRect>
  fillRect(85 , 205, 10 ,22,BLACK);
 8000664:	2300      	movs	r3, #0
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2316      	movs	r3, #22
 800066a:	220a      	movs	r2, #10
 800066c:	21cd      	movs	r1, #205	; 0xcd
 800066e:	2055      	movs	r0, #85	; 0x55
 8000670:	f004 fb52 	bl	8004d18 <fillRect>
  fillRect(115 , 205, 10 ,22,BLACK);
 8000674:	2300      	movs	r3, #0
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2316      	movs	r3, #22
 800067a:	220a      	movs	r2, #10
 800067c:	21cd      	movs	r1, #205	; 0xcd
 800067e:	2073      	movs	r0, #115	; 0x73
 8000680:	f004 fb4a 	bl	8004d18 <fillRect>
  fillRect(165 , 205, 10 ,22,BLACK);
 8000684:	2300      	movs	r3, #0
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2316      	movs	r3, #22
 800068a:	220a      	movs	r2, #10
 800068c:	21cd      	movs	r1, #205	; 0xcd
 800068e:	20a5      	movs	r0, #165	; 0xa5
 8000690:	f004 fb42 	bl	8004d18 <fillRect>
  fillRect(195 , 205, 10 ,22,BLACK);
 8000694:	2300      	movs	r3, #0
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2316      	movs	r3, #22
 800069a:	220a      	movs	r2, #10
 800069c:	21cd      	movs	r1, #205	; 0xcd
 800069e:	20c3      	movs	r0, #195	; 0xc3
 80006a0:	f004 fb3a 	bl	8004d18 <fillRect>
  fillRect(225 , 205, 10 ,22,BLACK);
 80006a4:	2300      	movs	r3, #0
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2316      	movs	r3, #22
 80006aa:	220a      	movs	r2, #10
 80006ac:	21cd      	movs	r1, #205	; 0xcd
 80006ae:	20e1      	movs	r0, #225	; 0xe1
 80006b0:	f004 fb32 	bl	8004d18 <fillRect>

  //CAJAS DE VOLUMEN
  	//HORIZONTALES
  fillRect(130 , 95, 152, 3,BLACK);
 80006b4:	2300      	movs	r3, #0
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2303      	movs	r3, #3
 80006ba:	2298      	movs	r2, #152	; 0x98
 80006bc:	215f      	movs	r1, #95	; 0x5f
 80006be:	2082      	movs	r0, #130	; 0x82
 80006c0:	f004 fb2a 	bl	8004d18 <fillRect>
  fillRect(130 , 112, 152, 3,BLACK);
 80006c4:	2300      	movs	r3, #0
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2303      	movs	r3, #3
 80006ca:	2298      	movs	r2, #152	; 0x98
 80006cc:	2170      	movs	r1, #112	; 0x70
 80006ce:	2082      	movs	r0, #130	; 0x82
 80006d0:	f004 fb22 	bl	8004d18 <fillRect>
  fillRect(130 , 130, 152, 3,BLACK);
 80006d4:	2300      	movs	r3, #0
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2303      	movs	r3, #3
 80006da:	2298      	movs	r2, #152	; 0x98
 80006dc:	2182      	movs	r1, #130	; 0x82
 80006de:	2082      	movs	r0, #130	; 0x82
 80006e0:	f004 fb1a 	bl	8004d18 <fillRect>
  fillRect(130 , 147, 152, 3,BLACK);
 80006e4:	2300      	movs	r3, #0
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2303      	movs	r3, #3
 80006ea:	2298      	movs	r2, #152	; 0x98
 80006ec:	2193      	movs	r1, #147	; 0x93
 80006ee:	2082      	movs	r0, #130	; 0x82
 80006f0:	f004 fb12 	bl	8004d18 <fillRect>
  fillRect(130 , 165, 152, 3,BLACK);
 80006f4:	2300      	movs	r3, #0
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	2303      	movs	r3, #3
 80006fa:	2298      	movs	r2, #152	; 0x98
 80006fc:	21a5      	movs	r1, #165	; 0xa5
 80006fe:	2082      	movs	r0, #130	; 0x82
 8000700:	f004 fb0a 	bl	8004d18 <fillRect>
  fillRect(130 , 182, 152, 3,BLACK);
 8000704:	2300      	movs	r3, #0
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2303      	movs	r3, #3
 800070a:	2298      	movs	r2, #152	; 0x98
 800070c:	21b6      	movs	r1, #182	; 0xb6
 800070e:	2082      	movs	r0, #130	; 0x82
 8000710:	f004 fb02 	bl	8004d18 <fillRect>

  	  //VERTICALES
  for(i = 0; i < 5; i++){
 8000714:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <main+0x288>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	e040      	b.n	800079e <main+0x266>
  	fillRect(130+(i*38) , 95, 3, 20,BLACK);
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <main+0x288>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	b29b      	uxth	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	00d2      	lsls	r2, r2, #3
 8000726:	441a      	add	r2, r3
 8000728:	0052      	lsls	r2, r2, #1
 800072a:	4413      	add	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	b29b      	uxth	r3, r3
 8000730:	3382      	adds	r3, #130	; 0x82
 8000732:	b29b      	uxth	r3, r3
 8000734:	b218      	sxth	r0, r3
 8000736:	2300      	movs	r3, #0
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2314      	movs	r3, #20
 800073c:	2203      	movs	r2, #3
 800073e:	215f      	movs	r1, #95	; 0x5f
 8000740:	f004 faea 	bl	8004d18 <fillRect>
  	fillRect(130+(i*38) , 130, 3, 20,BLACK);
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <main+0x288>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	b29b      	uxth	r3, r3
 800074a:	461a      	mov	r2, r3
 800074c:	00d2      	lsls	r2, r2, #3
 800074e:	441a      	add	r2, r3
 8000750:	0052      	lsls	r2, r2, #1
 8000752:	4413      	add	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	b29b      	uxth	r3, r3
 8000758:	3382      	adds	r3, #130	; 0x82
 800075a:	b29b      	uxth	r3, r3
 800075c:	b218      	sxth	r0, r3
 800075e:	2300      	movs	r3, #0
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2314      	movs	r3, #20
 8000764:	2203      	movs	r2, #3
 8000766:	2182      	movs	r1, #130	; 0x82
 8000768:	f004 fad6 	bl	8004d18 <fillRect>
  	fillRect(130+(i*38) , 165, 3, 20,BLACK);
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <main+0x288>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	b29b      	uxth	r3, r3
 8000772:	461a      	mov	r2, r3
 8000774:	00d2      	lsls	r2, r2, #3
 8000776:	441a      	add	r2, r3
 8000778:	0052      	lsls	r2, r2, #1
 800077a:	4413      	add	r3, r2
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	b29b      	uxth	r3, r3
 8000780:	3382      	adds	r3, #130	; 0x82
 8000782:	b29b      	uxth	r3, r3
 8000784:	b218      	sxth	r0, r3
 8000786:	2300      	movs	r3, #0
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2314      	movs	r3, #20
 800078c:	2203      	movs	r2, #3
 800078e:	21a5      	movs	r1, #165	; 0xa5
 8000790:	f004 fac2 	bl	8004d18 <fillRect>
  for(i = 0; i < 5; i++){
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <main+0x288>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <main+0x288>)
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <main+0x288>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	d9ba      	bls.n	800071c <main+0x1e4>
  }

  // Imagenes que identifican
  for(i=0; i < 3; i++){
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <main+0x288>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	e039      	b.n	8000822 <main+0x2ea>
 80007ae:	bf00      	nop
 80007b0:	20000258 	.word	0x20000258
 80007b4:	2000005c 	.word	0x2000005c
 80007b8:	2000029c 	.word	0x2000029c
 80007bc:	20000054 	.word	0x20000054
 80007c0:	20000068 	.word	0x20000068
  	fillRect(40 , 90+(i*35), 2, 20,RED);
 80007c4:	4b8f      	ldr	r3, [pc, #572]	; (8000a04 <main+0x4cc>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	461a      	mov	r2, r3
 80007cc:	0092      	lsls	r2, r2, #2
 80007ce:	4413      	add	r3, r2
 80007d0:	461a      	mov	r2, r3
 80007d2:	00d2      	lsls	r2, r2, #3
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	335a      	adds	r3, #90	; 0x5a
 80007da:	b29b      	uxth	r3, r3
 80007dc:	b219      	sxth	r1, r3
 80007de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2314      	movs	r3, #20
 80007e6:	2202      	movs	r2, #2
 80007e8:	2028      	movs	r0, #40	; 0x28
 80007ea:	f004 fa95 	bl	8004d18 <fillRect>
  	fillRect(30 , 105+(i*35), 70, 2,RED);
 80007ee:	4b85      	ldr	r3, [pc, #532]	; (8000a04 <main+0x4cc>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	461a      	mov	r2, r3
 80007f6:	0092      	lsls	r2, r2, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	461a      	mov	r2, r3
 80007fc:	00d2      	lsls	r2, r2, #3
 80007fe:	1ad3      	subs	r3, r2, r3
 8000800:	b29b      	uxth	r3, r3
 8000802:	3369      	adds	r3, #105	; 0x69
 8000804:	b29b      	uxth	r3, r3
 8000806:	b219      	sxth	r1, r3
 8000808:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2302      	movs	r3, #2
 8000810:	2246      	movs	r2, #70	; 0x46
 8000812:	201e      	movs	r0, #30
 8000814:	f004 fa80 	bl	8004d18 <fillRect>
  for(i=0; i < 3; i++){
 8000818:	4b7a      	ldr	r3, [pc, #488]	; (8000a04 <main+0x4cc>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	4a79      	ldr	r2, [pc, #484]	; (8000a04 <main+0x4cc>)
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	4b78      	ldr	r3, [pc, #480]	; (8000a04 <main+0x4cc>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d9cc      	bls.n	80007c4 <main+0x28c>
  }
  HAL_TIM_Base_Start(&htim6);
 800082a:	4877      	ldr	r0, [pc, #476]	; (8000a08 <main+0x4d0>)
 800082c:	f007 f8aa 	bl	8007984 <HAL_TIM_Base_Start>
  get_sineval();
 8000830:	f000 fe2a 	bl	8001488 <get_sineval>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_val, NS, DAC_ALIGN_12B_R);
 8000834:	2300      	movs	r3, #0
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2314      	movs	r3, #20
 800083a:	4a74      	ldr	r2, [pc, #464]	; (8000a0c <main+0x4d4>)
 800083c:	2100      	movs	r1, #0
 800083e:	4874      	ldr	r0, [pc, #464]	; (8000a10 <main+0x4d8>)
 8000840:	f004 ffc0 	bl	80057c4 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sine_val, NS, DAC_ALIGN_12B_R);
 8000844:	2300      	movs	r3, #0
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	2314      	movs	r3, #20
 800084a:	4a70      	ldr	r2, [pc, #448]	; (8000a0c <main+0x4d4>)
 800084c:	2110      	movs	r1, #16
 800084e:	4870      	ldr	r0, [pc, #448]	; (8000a10 <main+0x4d8>)
 8000850:	f004 ffb8 	bl	80057c4 <HAL_DAC_Start_DMA>
  HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(message)/sizeof(char) - 1, 1000);
 8000854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000858:	221b      	movs	r2, #27
 800085a:	496e      	ldr	r1, [pc, #440]	; (8000a14 <main+0x4dc>)
 800085c:	486e      	ldr	r0, [pc, #440]	; (8000a18 <main+0x4e0>)
 800085e:	f007 fd47 	bl	80082f0 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)okay_message, sizeof(okay_message)/sizeof(char) - 1, 1000);
 8000862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000866:	2204      	movs	r2, #4
 8000868:	496c      	ldr	r1, [pc, #432]	; (8000a1c <main+0x4e4>)
 800086a:	486b      	ldr	r0, [pc, #428]	; (8000a18 <main+0x4e0>)
 800086c:	f007 fd40 	bl	80082f0 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		  if(!EXT_BTN_1_state){
 8000870:	4b6b      	ldr	r3, [pc, #428]	; (8000a20 <main+0x4e8>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	f083 0301 	eor.w	r3, r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d011      	beq.n	80008a4 <main+0x36c>
			  HAL_UART_Transmit(&huart3, (uint8_t *)okay_message, sizeof(okay_message)/sizeof(char) - 1, 1000);
 8000880:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000884:	2204      	movs	r2, #4
 8000886:	4965      	ldr	r1, [pc, #404]	; (8000a1c <main+0x4e4>)
 8000888:	4863      	ldr	r0, [pc, #396]	; (8000a18 <main+0x4e0>)
 800088a:	f007 fd31 	bl	80082f0 <HAL_UART_Transmit>
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800088e:	2101      	movs	r1, #1
 8000890:	4864      	ldr	r0, [pc, #400]	; (8000a24 <main+0x4ec>)
 8000892:	f005 ff3c 	bl	800670e <HAL_GPIO_TogglePin>
			  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000896:	2100      	movs	r1, #0
 8000898:	485d      	ldr	r0, [pc, #372]	; (8000a10 <main+0x4d8>)
 800089a:	f005 f841 	bl	8005920 <HAL_DAC_Stop_DMA>
			  EXT_BTN_1_state = true;
 800089e:	4b60      	ldr	r3, [pc, #384]	; (8000a20 <main+0x4e8>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_2_state){
 80008a4:	4b60      	ldr	r3, [pc, #384]	; (8000a28 <main+0x4f0>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	f083 0301 	eor.w	r3, r3, #1
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d061      	beq.n	8000978 <main+0x440>
			  HAL_UART_Transmit(&huart3, (uint8_t *)okay_message, sizeof(okay_message)/sizeof(char) - 1, 1000);
 80008b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b8:	2204      	movs	r2, #4
 80008ba:	4958      	ldr	r1, [pc, #352]	; (8000a1c <main+0x4e4>)
 80008bc:	4856      	ldr	r0, [pc, #344]	; (8000a18 <main+0x4e0>)
 80008be:	f007 fd17 	bl	80082f0 <HAL_UART_Transmit>
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80008c2:	2101      	movs	r1, #1
 80008c4:	4857      	ldr	r0, [pc, #348]	; (8000a24 <main+0x4ec>)
 80008c6:	f005 ff22 	bl	800670e <HAL_GPIO_TogglePin>
			  cont_am++;
 80008ca:	4b58      	ldr	r3, [pc, #352]	; (8000a2c <main+0x4f4>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	3301      	adds	r3, #1
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b56      	ldr	r3, [pc, #344]	; (8000a2c <main+0x4f4>)
 80008d4:	701a      	strb	r2, [r3, #0]
			  if(cont_am < 5){
 80008d6:	4b55      	ldr	r3, [pc, #340]	; (8000a2c <main+0x4f4>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d824      	bhi.n	8000928 <main+0x3f0>
				  for (i = 0; i < cont_am; i++) fillRect(133+(i*38), 98, 35,14,BLUE);
 80008de:	4b49      	ldr	r3, [pc, #292]	; (8000a04 <main+0x4cc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	e018      	b.n	8000918 <main+0x3e0>
 80008e6:	4b47      	ldr	r3, [pc, #284]	; (8000a04 <main+0x4cc>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	461a      	mov	r2, r3
 80008ee:	00d2      	lsls	r2, r2, #3
 80008f0:	441a      	add	r2, r3
 80008f2:	0052      	lsls	r2, r2, #1
 80008f4:	4413      	add	r3, r2
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	3385      	adds	r3, #133	; 0x85
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	b218      	sxth	r0, r3
 8000900:	231f      	movs	r3, #31
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	230e      	movs	r3, #14
 8000906:	2223      	movs	r2, #35	; 0x23
 8000908:	2162      	movs	r1, #98	; 0x62
 800090a:	f004 fa05 	bl	8004d18 <fillRect>
 800090e:	4b3d      	ldr	r3, [pc, #244]	; (8000a04 <main+0x4cc>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	3301      	adds	r3, #1
 8000914:	4a3b      	ldr	r2, [pc, #236]	; (8000a04 <main+0x4cc>)
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b44      	ldr	r3, [pc, #272]	; (8000a2c <main+0x4f4>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b39      	ldr	r3, [pc, #228]	; (8000a04 <main+0x4cc>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	429a      	cmp	r2, r3
 8000924:	d8df      	bhi.n	80008e6 <main+0x3ae>
 8000926:	e024      	b.n	8000972 <main+0x43a>
			  }else{
			  		for (i = 0; i < 4; i++) fillRect(133+(i*38), 98, 35,14,BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));
 8000928:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <main+0x4cc>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	e019      	b.n	8000964 <main+0x42c>
 8000930:	4b34      	ldr	r3, [pc, #208]	; (8000a04 <main+0x4cc>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	b29b      	uxth	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	00d2      	lsls	r2, r2, #3
 800093a:	441a      	add	r2, r3
 800093c:	0052      	lsls	r2, r2, #1
 800093e:	4413      	add	r3, r2
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	b29b      	uxth	r3, r3
 8000944:	3385      	adds	r3, #133	; 0x85
 8000946:	b29b      	uxth	r3, r3
 8000948:	b218      	sxth	r0, r3
 800094a:	f648 23ca 	movw	r3, #35530	; 0x8aca
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	230e      	movs	r3, #14
 8000952:	2223      	movs	r2, #35	; 0x23
 8000954:	2162      	movs	r1, #98	; 0x62
 8000956:	f004 f9df 	bl	8004d18 <fillRect>
 800095a:	4b2a      	ldr	r3, [pc, #168]	; (8000a04 <main+0x4cc>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	4a28      	ldr	r2, [pc, #160]	; (8000a04 <main+0x4cc>)
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <main+0x4cc>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b03      	cmp	r3, #3
 800096a:	d9e1      	bls.n	8000930 <main+0x3f8>
			  		cont_am = 0;
 800096c:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <main+0x4f4>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
			  }
			  EXT_BTN_2_state = true;
 8000972:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <main+0x4f0>)
 8000974:	2201      	movs	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_3_state){
 8000978:	4b2d      	ldr	r3, [pc, #180]	; (8000a30 <main+0x4f8>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f083 0301 	eor.w	r3, r3, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	d07b      	beq.n	8000a80 <main+0x548>
			  HAL_UART_Transmit(&huart3, (uint8_t *)okay_message, sizeof(okay_message)/sizeof(char) - 1, 1000);
 8000988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098c:	2204      	movs	r2, #4
 800098e:	4923      	ldr	r1, [pc, #140]	; (8000a1c <main+0x4e4>)
 8000990:	4821      	ldr	r0, [pc, #132]	; (8000a18 <main+0x4e0>)
 8000992:	f007 fcad 	bl	80082f0 <HAL_UART_Transmit>
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000996:	2101      	movs	r1, #1
 8000998:	4822      	ldr	r0, [pc, #136]	; (8000a24 <main+0x4ec>)
 800099a:	f005 feb8 	bl	800670e <HAL_GPIO_TogglePin>
			  cont_fm++;
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <main+0x4fc>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <main+0x4fc>)
 80009a8:	701a      	strb	r2, [r3, #0]
			  if(cont_fm < 5){
 80009aa:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <main+0x4fc>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	d824      	bhi.n	80009fc <main+0x4c4>
				  for (i = 0; i < cont_fm; i++) fillRect(133+(i*38), 133, 35,14,BLUE);
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <main+0x4cc>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	e018      	b.n	80009ec <main+0x4b4>
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <main+0x4cc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	461a      	mov	r2, r3
 80009c2:	00d2      	lsls	r2, r2, #3
 80009c4:	441a      	add	r2, r3
 80009c6:	0052      	lsls	r2, r2, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	3385      	adds	r3, #133	; 0x85
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	b218      	sxth	r0, r3
 80009d4:	231f      	movs	r3, #31
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	230e      	movs	r3, #14
 80009da:	2223      	movs	r2, #35	; 0x23
 80009dc:	2185      	movs	r1, #133	; 0x85
 80009de:	f004 f99b 	bl	8004d18 <fillRect>
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <main+0x4cc>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	3301      	adds	r3, #1
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <main+0x4cc>)
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <main+0x4fc>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <main+0x4cc>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d8df      	bhi.n	80009ba <main+0x482>
 80009fa:	e03e      	b.n	8000a7a <main+0x542>
			  }else{
				  for (i = 0; i < 4; i++) fillRect(133+(i*38), 133, 35,14,BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));
 80009fc:	4b01      	ldr	r3, [pc, #4]	; (8000a04 <main+0x4cc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	e033      	b.n	8000a6c <main+0x534>
 8000a04:	20000068 	.word	0x20000068
 8000a08:	20000218 	.word	0x20000218
 8000a0c:	20000154 	.word	0x20000154
 8000a10:	20000204 	.word	0x20000204
 8000a14:	20000000 	.word	0x20000000
 8000a18:	200000d4 	.word	0x200000d4
 8000a1c:	2000001c 	.word	0x2000001c
 8000a20:	20000021 	.word	0x20000021
 8000a24:	40020400 	.word	0x40020400
 8000a28:	20000022 	.word	0x20000022
 8000a2c:	20000056 	.word	0x20000056
 8000a30:	20000023 	.word	0x20000023
 8000a34:	20000057 	.word	0x20000057
 8000a38:	4b47      	ldr	r3, [pc, #284]	; (8000b58 <main+0x620>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	461a      	mov	r2, r3
 8000a40:	00d2      	lsls	r2, r2, #3
 8000a42:	441a      	add	r2, r3
 8000a44:	0052      	lsls	r2, r2, #1
 8000a46:	4413      	add	r3, r2
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	3385      	adds	r3, #133	; 0x85
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	b218      	sxth	r0, r3
 8000a52:	f648 23ca 	movw	r3, #35530	; 0x8aca
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	230e      	movs	r3, #14
 8000a5a:	2223      	movs	r2, #35	; 0x23
 8000a5c:	2185      	movs	r1, #133	; 0x85
 8000a5e:	f004 f95b 	bl	8004d18 <fillRect>
 8000a62:	4b3d      	ldr	r3, [pc, #244]	; (8000b58 <main+0x620>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	3301      	adds	r3, #1
 8000a68:	4a3b      	ldr	r2, [pc, #236]	; (8000b58 <main+0x620>)
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	4b3a      	ldr	r3, [pc, #232]	; (8000b58 <main+0x620>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	d9e1      	bls.n	8000a38 <main+0x500>
				  cont_fm = 0;
 8000a74:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <main+0x624>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
			  }
			  EXT_BTN_3_state = true;
 8000a7a:	4b39      	ldr	r3, [pc, #228]	; (8000b60 <main+0x628>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_4_state){
 8000a80:	4b38      	ldr	r3, [pc, #224]	; (8000b64 <main+0x62c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	f083 0301 	eor.w	r3, r3, #1
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	f43f aeef 	beq.w	8000870 <main+0x338>
			  HAL_UART_Transmit(&huart3, (uint8_t *)okay_message, sizeof(okay_message)/sizeof(char) - 1, 1000);
 8000a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a96:	2204      	movs	r2, #4
 8000a98:	4933      	ldr	r1, [pc, #204]	; (8000b68 <main+0x630>)
 8000a9a:	4834      	ldr	r0, [pc, #208]	; (8000b6c <main+0x634>)
 8000a9c:	f007 fc28 	bl	80082f0 <HAL_UART_Transmit>
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4833      	ldr	r0, [pc, #204]	; (8000b70 <main+0x638>)
 8000aa4:	f005 fe33 	bl	800670e <HAL_GPIO_TogglePin>
			  cont_lp ++;
 8000aa8:	4b32      	ldr	r3, [pc, #200]	; (8000b74 <main+0x63c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	3301      	adds	r3, #1
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <main+0x63c>)
 8000ab2:	701a      	strb	r2, [r3, #0]
			  if(cont_lp < 5){
 8000ab4:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <main+0x63c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b04      	cmp	r3, #4
 8000aba:	d824      	bhi.n	8000b06 <main+0x5ce>
				  for (i = 0; i < cont_lp; i++) fillRect(133+(i*38), 168, 35,14,BLUE);
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <main+0x620>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	e018      	b.n	8000af6 <main+0x5be>
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <main+0x620>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	461a      	mov	r2, r3
 8000acc:	00d2      	lsls	r2, r2, #3
 8000ace:	441a      	add	r2, r3
 8000ad0:	0052      	lsls	r2, r2, #1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	3385      	adds	r3, #133	; 0x85
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	b218      	sxth	r0, r3
 8000ade:	231f      	movs	r3, #31
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	230e      	movs	r3, #14
 8000ae4:	2223      	movs	r2, #35	; 0x23
 8000ae6:	21a8      	movs	r1, #168	; 0xa8
 8000ae8:	f004 f916 	bl	8004d18 <fillRect>
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <main+0x620>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3301      	adds	r3, #1
 8000af2:	4a19      	ldr	r2, [pc, #100]	; (8000b58 <main+0x620>)
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <main+0x63c>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <main+0x620>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d8df      	bhi.n	8000ac4 <main+0x58c>
 8000b04:	e024      	b.n	8000b50 <main+0x618>
			  }else{
				  for (i = 0; i < 4; i++) fillRect(133+(i*38), 168, 35,14,BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <main+0x620>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	e019      	b.n	8000b42 <main+0x60a>
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <main+0x620>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	461a      	mov	r2, r3
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	441a      	add	r2, r3
 8000b1a:	0052      	lsls	r2, r2, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	3385      	adds	r3, #133	; 0x85
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	b218      	sxth	r0, r3
 8000b28:	f648 23ca 	movw	r3, #35530	; 0x8aca
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	230e      	movs	r3, #14
 8000b30:	2223      	movs	r2, #35	; 0x23
 8000b32:	21a8      	movs	r1, #168	; 0xa8
 8000b34:	f004 f8f0 	bl	8004d18 <fillRect>
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <main+0x620>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <main+0x620>)
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <main+0x620>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d9e1      	bls.n	8000b0e <main+0x5d6>
				  cont_lp = 0;
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <main+0x63c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
			  }
			  EXT_BTN_4_state = true;
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <main+0x62c>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
		  if(!EXT_BTN_1_state){
 8000b56:	e68b      	b.n	8000870 <main+0x338>
 8000b58:	20000068 	.word	0x20000068
 8000b5c:	20000057 	.word	0x20000057
 8000b60:	20000023 	.word	0x20000023
 8000b64:	20000024 	.word	0x20000024
 8000b68:	2000001c 	.word	0x2000001c
 8000b6c:	200000d4 	.word	0x200000d4
 8000b70:	40020400 	.word	0x40020400
 8000b74:	20000058 	.word	0x20000058

08000b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b0b8      	sub	sp, #224	; 0xe0
 8000b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b82:	2234      	movs	r2, #52	; 0x34
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f008 f9be 	bl	8008f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	2290      	movs	r2, #144	; 0x90
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f008 f9af 	bl	8008f08 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000baa:	f005 fde3 	bl	8006774 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <SystemClock_Config+0x118>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a37      	ldr	r2, [pc, #220]	; (8000c90 <SystemClock_Config+0x118>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b35      	ldr	r3, [pc, #212]	; (8000c90 <SystemClock_Config+0x118>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bc6:	4b33      	ldr	r3, [pc, #204]	; (8000c94 <SystemClock_Config+0x11c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bce:	4a31      	ldr	r2, [pc, #196]	; (8000c94 <SystemClock_Config+0x11c>)
 8000bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <SystemClock_Config+0x11c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be8:	2301      	movs	r3, #1
 8000bea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bee:	2310      	movs	r3, #16
 8000bf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c00:	2308      	movs	r3, #8
 8000c02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000c06:	2390      	movs	r3, #144	; 0x90
 8000c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c12:	2304      	movs	r3, #4
 8000c14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c18:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f005 fdb9 	bl	8006794 <HAL_RCC_OscConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c28:	f000 fc74 	bl	8001514 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c32:	2302      	movs	r3, #2
 8000c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000c3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000c46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c4e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c52:	2104      	movs	r1, #4
 8000c54:	4618      	mov	r0, r3
 8000c56:	f006 f84b 	bl	8006cf0 <HAL_RCC_ClockConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000c60:	f000 fc58 	bl	8001514 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4;
 8000c64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c68:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	4618      	mov	r0, r3
 8000c78:	f006 fa32 	bl	80070e0 <HAL_RCCEx_PeriphCLKConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000c82:	f000 fc47 	bl	8001514 <Error_Handler>
  }
}
 8000c86:	bf00      	nop
 8000c88:	37e0      	adds	r7, #224	; 0xe0
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40007000 	.word	0x40007000

08000c98 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_DAC_Init+0x60>)
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <MX_DAC_Init+0x64>)
 8000caa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000cac:	4812      	ldr	r0, [pc, #72]	; (8000cf8 <MX_DAC_Init+0x60>)
 8000cae:	f004 fd66 	bl	800577e <HAL_DAC_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000cb8:	f000 fc2c 	bl	8001514 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <MX_DAC_Init+0x60>)
 8000ccc:	f004 fe87 	bl	80059de <HAL_DAC_ConfigChannel>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000cd6:	f000 fc1d 	bl	8001514 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000cda:	463b      	mov	r3, r7
 8000cdc:	2210      	movs	r2, #16
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_DAC_Init+0x60>)
 8000ce2:	f004 fe7c 	bl	80059de <HAL_DAC_ConfigChannel>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000cec:	f000 fc12 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000204 	.word	0x20000204
 8000cfc:	40007400 	.word	0x40007400

08000d00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <MX_TIM1_Init+0xa0>)
 8000d20:	4a20      	ldr	r2, [pc, #128]	; (8000da4 <MX_TIM1_Init+0xa4>)
 8000d22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <MX_TIM1_Init+0xa0>)
 8000d26:	2247      	movs	r2, #71	; 0x47
 8000d28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <MX_TIM1_Init+0xa0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <MX_TIM1_Init+0xa0>)
 8000d32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_TIM1_Init+0xa0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_TIM1_Init+0xa0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <MX_TIM1_Init+0xa0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d4a:	4815      	ldr	r0, [pc, #84]	; (8000da0 <MX_TIM1_Init+0xa0>)
 8000d4c:	f006 fdee 	bl	800792c <HAL_TIM_Base_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d56:	f000 fbdd 	bl	8001514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	4619      	mov	r1, r3
 8000d66:	480e      	ldr	r0, [pc, #56]	; (8000da0 <MX_TIM1_Init+0xa0>)
 8000d68:	f006 ffac 	bl	8007cc4 <HAL_TIM_ConfigClockSource>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d72:	f000 fbcf 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	4619      	mov	r1, r3
 8000d86:	4806      	ldr	r0, [pc, #24]	; (8000da0 <MX_TIM1_Init+0xa0>)
 8000d88:	f007 f9b8 	bl	80080fc <HAL_TIMEx_MasterConfigSynchronization>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d92:	f000 fbbf 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	3720      	adds	r7, #32
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000258 	.word	0x20000258
 8000da4:	40010000 	.word	0x40010000

08000da8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <MX_TIM2_Init+0x98>)
 8000dc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dcc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000-1;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <MX_TIM2_Init+0x98>)
 8000dd0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000dd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_TIM2_Init+0x98>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20-1;
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <MX_TIM2_Init+0x98>)
 8000dde:	2213      	movs	r2, #19
 8000de0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <MX_TIM2_Init+0x98>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <MX_TIM2_Init+0x98>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dee:	4814      	ldr	r0, [pc, #80]	; (8000e40 <MX_TIM2_Init+0x98>)
 8000df0:	f006 fd9c 	bl	800792c <HAL_TIM_Base_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000dfa:	f000 fb8b 	bl	8001514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <MX_TIM2_Init+0x98>)
 8000e0c:	f006 ff5a 	bl	8007cc4 <HAL_TIM_ConfigClockSource>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e16:	f000 fb7d 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_TIM2_Init+0x98>)
 8000e28:	f007 f968 	bl	80080fc <HAL_TIMEx_MasterConfigSynchronization>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e32:	f000 fb6f 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3720      	adds	r7, #32
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000031c 	.word	0x2000031c

08000e44 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <MX_TIM6_Init+0x64>)
 8000e56:	4a15      	ldr	r2, [pc, #84]	; (8000eac <MX_TIM6_Init+0x68>)
 8000e58:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 36-1;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <MX_TIM6_Init+0x64>)
 8000e5c:	2223      	movs	r2, #35	; 0x23
 8000e5e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_TIM6_Init+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <MX_TIM6_Init+0x64>)
 8000e68:	2263      	movs	r2, #99	; 0x63
 8000e6a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_TIM6_Init+0x64>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e72:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <MX_TIM6_Init+0x64>)
 8000e74:	f006 fd5a 	bl	800792c <HAL_TIM_Base_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000e7e:	f000 fb49 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e82:	2320      	movs	r3, #32
 8000e84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <MX_TIM6_Init+0x64>)
 8000e90:	f007 f934 	bl	80080fc <HAL_TIMEx_MasterConfigSynchronization>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000e9a:	f000 fb3b 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000218 	.word	0x20000218
 8000eac:	40001000 	.word	0x40001000

08000eb0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <MX_TIM14_Init+0x44>)
 8000eb8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ecc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000edc:	f006 fd26 	bl	800792c <HAL_TIM_Base_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000ee6:	f000 fb15 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	40002000 	.word	0x40002000

08000ef8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_UART4_Init+0x58>)
 8000efe:	4a15      	ldr	r2, [pc, #84]	; (8000f54 <MX_UART4_Init+0x5c>)
 8000f00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <MX_UART4_Init+0x58>)
 8000f04:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000f08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_UART4_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_UART4_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_UART4_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_UART4_Init+0x58>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_UART4_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_UART4_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_UART4_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_UART4_Init+0x58>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_UART4_Init+0x58>)
 8000f3c:	f007 f98a 	bl	8008254 <HAL_UART_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000f46:	f000 fae5 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	2000029c 	.word	0x2000029c
 8000f54:	40004c00 	.word	0x40004c00

08000f58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f5e:	4a15      	ldr	r2, [pc, #84]	; (8000fb4 <MX_USART3_UART_Init+0x5c>)
 8000f60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f9c:	f007 f95a 	bl	8008254 <HAL_UART_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fa6:	f000 fab5 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200000d4 	.word	0x200000d4
 8000fb4:	40004800 	.word	0x40004800

08000fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_DMA_Init+0x58>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a13      	ldr	r2, [pc, #76]	; (8001010 <MX_DMA_Init+0x58>)
 8000fc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_DMA_Init+0x58>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	200d      	movs	r0, #13
 8000fdc:	f004 fb99 	bl	8005712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000fe0:	200d      	movs	r0, #13
 8000fe2:	f004 fbb2 	bl	800574a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2010      	movs	r0, #16
 8000fec:	f004 fb91 	bl	8005712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ff0:	2010      	movs	r0, #16
 8000ff2:	f004 fbaa 	bl	800574a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2011      	movs	r0, #17
 8000ffc:	f004 fb89 	bl	8005712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001000:	2011      	movs	r0, #17
 8001002:	f004 fba2 	bl	800574a <HAL_NVIC_EnableIRQ>

}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08e      	sub	sp, #56	; 0x38
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800102a:	4bb3      	ldr	r3, [pc, #716]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4ab2      	ldr	r2, [pc, #712]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 8001030:	f043 0310 	orr.w	r3, r3, #16
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4bb0      	ldr	r3, [pc, #704]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0310 	and.w	r3, r3, #16
 800103e:	623b      	str	r3, [r7, #32]
 8001040:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4bad      	ldr	r3, [pc, #692]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4aac      	ldr	r2, [pc, #688]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4baa      	ldr	r3, [pc, #680]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800105a:	4ba7      	ldr	r3, [pc, #668]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4aa6      	ldr	r2, [pc, #664]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 8001060:	f043 0320 	orr.w	r3, r3, #32
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4ba4      	ldr	r3, [pc, #656]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0320 	and.w	r3, r3, #32
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001072:	4ba1      	ldr	r3, [pc, #644]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4aa0      	ldr	r2, [pc, #640]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 8001078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b9e      	ldr	r3, [pc, #632]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b9b      	ldr	r3, [pc, #620]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a9a      	ldr	r2, [pc, #616]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b98      	ldr	r3, [pc, #608]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	4b95      	ldr	r3, [pc, #596]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a94      	ldr	r2, [pc, #592]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b92      	ldr	r3, [pc, #584]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ba:	4b8f      	ldr	r3, [pc, #572]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a8e      	ldr	r2, [pc, #568]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 80010c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b8c      	ldr	r3, [pc, #560]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d2:	4b89      	ldr	r3, [pc, #548]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a88      	ldr	r2, [pc, #544]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 80010d8:	f043 0308 	orr.w	r3, r3, #8
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b86      	ldr	r3, [pc, #536]	; (80012f8 <MX_GPIO_Init+0x2e4>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80010ea:	2200      	movs	r2, #0
 80010ec:	f24c 0178 	movw	r1, #49272	; 0xc078
 80010f0:	4882      	ldr	r0, [pc, #520]	; (80012fc <MX_GPIO_Init+0x2e8>)
 80010f2:	f005 faf3 	bl	80066dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 7160 	mov.w	r1, #896	; 0x380
 80010fc:	4880      	ldr	r0, [pc, #512]	; (8001300 <MX_GPIO_Init+0x2ec>)
 80010fe:	f005 faed 	bl	80066dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	f644 0181 	movw	r1, #18561	; 0x4881
 8001108:	487e      	ldr	r0, [pc, #504]	; (8001304 <MX_GPIO_Init+0x2f0>)
 800110a:	f005 fae7 	bl	80066dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	2142      	movs	r1, #66	; 0x42
 8001112:	487d      	ldr	r0, [pc, #500]	; (8001308 <MX_GPIO_Init+0x2f4>)
 8001114:	f005 fae2 	bl	80066dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001118:	f24c 0378 	movw	r3, #49272	; 0xc078
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	4872      	ldr	r0, [pc, #456]	; (80012fc <MX_GPIO_Init+0x2e8>)
 8001132:	f005 f911 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001136:	f44f 7360 	mov.w	r3, #896	; 0x380
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114c:	4619      	mov	r1, r3
 800114e:	486c      	ldr	r0, [pc, #432]	; (8001300 <MX_GPIO_Init+0x2ec>)
 8001150:	f005 f902 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001154:	2332      	movs	r3, #50	; 0x32
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001164:	230b      	movs	r3, #11
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116c:	4619      	mov	r1, r3
 800116e:	4867      	ldr	r0, [pc, #412]	; (800130c <MX_GPIO_Init+0x2f8>)
 8001170:	f005 f8f2 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001174:	2386      	movs	r3, #134	; 0x86
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001184:	230b      	movs	r3, #11
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118c:	4619      	mov	r1, r3
 800118e:	4860      	ldr	r0, [pc, #384]	; (8001310 <MX_GPIO_Init+0x2fc>)
 8001190:	f005 f8e2 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB11 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin;
 8001194:	f644 0381 	movw	r3, #18561	; 0x4881
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011aa:	4619      	mov	r1, r3
 80011ac:	4855      	ldr	r0, [pc, #340]	; (8001304 <MX_GPIO_Init+0x2f0>)
 80011ae:	f005 f8d3 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_BTN_1_Pin EXT_BTN_4_Pin */
  GPIO_InitStruct.Pin = EXT_BTN_1_Pin|EXT_BTN_4_Pin;
 80011b2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b8:	4b56      	ldr	r3, [pc, #344]	; (8001314 <MX_GPIO_Init+0x300>)
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011bc:	2301      	movs	r3, #1
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c4:	4619      	mov	r1, r3
 80011c6:	484e      	ldr	r0, [pc, #312]	; (8001300 <MX_GPIO_Init+0x2ec>)
 80011c8:	f005 f8c6 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|USB_PowerSwitchOn_Pin;
 80011cc:	2342      	movs	r3, #66	; 0x42
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e0:	4619      	mov	r1, r3
 80011e2:	4849      	ldr	r0, [pc, #292]	; (8001308 <MX_GPIO_Init+0x2f4>)
 80011e4:	f005 f8b8 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_BTN_2_Pin EXT_BTN_3_Pin */
  GPIO_InitStruct.Pin = EXT_BTN_2_Pin|EXT_BTN_3_Pin;
 80011e8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ee:	4b49      	ldr	r3, [pc, #292]	; (8001314 <MX_GPIO_Init+0x300>)
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	4619      	mov	r1, r3
 80011fc:	483f      	ldr	r0, [pc, #252]	; (80012fc <MX_GPIO_Init+0x2e8>)
 80011fe:	f005 f8ab 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001214:	4619      	mov	r1, r3
 8001216:	4839      	ldr	r0, [pc, #228]	; (80012fc <MX_GPIO_Init+0x2e8>)
 8001218:	f005 f89e 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800121c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001222:	2303      	movs	r3, #3
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	4619      	mov	r1, r3
 8001230:	4834      	ldr	r0, [pc, #208]	; (8001304 <MX_GPIO_Init+0x2f0>)
 8001232:	f005 f891 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001248:	230b      	movs	r3, #11
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	482c      	ldr	r0, [pc, #176]	; (8001304 <MX_GPIO_Init+0x2f0>)
 8001254:	f005 f880 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125c:	2300      	movs	r3, #0
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001268:	4619      	mov	r1, r3
 800126a:	4827      	ldr	r0, [pc, #156]	; (8001308 <MX_GPIO_Init+0x2f4>)
 800126c:	f005 f874 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001270:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001282:	230a      	movs	r3, #10
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128a:	4619      	mov	r1, r3
 800128c:	4820      	ldr	r0, [pc, #128]	; (8001310 <MX_GPIO_Init+0x2fc>)
 800128e:	f005 f863 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	481a      	ldr	r0, [pc, #104]	; (8001310 <MX_GPIO_Init+0x2fc>)
 80012a8:	f005 f856 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012be:	230b      	movs	r3, #11
 80012c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	480f      	ldr	r0, [pc, #60]	; (8001308 <MX_GPIO_Init+0x2f4>)
 80012ca:	f005 f845 	bl	8006358 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2017      	movs	r0, #23
 80012d4:	f004 fa1d 	bl	8005712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012d8:	2017      	movs	r0, #23
 80012da:	f004 fa36 	bl	800574a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	2028      	movs	r0, #40	; 0x28
 80012e4:	f004 fa15 	bl	8005712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012e8:	2028      	movs	r0, #40	; 0x28
 80012ea:	f004 fa2e 	bl	800574a <HAL_NVIC_EnableIRQ>

}
 80012ee:	bf00      	nop
 80012f0:	3738      	adds	r7, #56	; 0x38
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40021000 	.word	0x40021000
 8001300:	40021400 	.word	0x40021400
 8001304:	40020400 	.word	0x40020400
 8001308:	40021800 	.word	0x40021800
 800130c:	40020800 	.word	0x40020800
 8001310:	40020000 	.word	0x40020000
 8001314:	10210000 	.word	0x10210000

08001318 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// Callback para GPIOs
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXT_BTN_1_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001328:	d102      	bne.n	8001330 <HAL_GPIO_EXTI_Callback+0x18>
 800132a:	480e      	ldr	r0, [pc, #56]	; (8001364 <HAL_GPIO_EXTI_Callback+0x4c>)
 800132c:	f006 fb80 	bl	8007a30 <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_2_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001336:	d102      	bne.n	800133e <HAL_GPIO_EXTI_Callback+0x26>
 8001338:	480a      	ldr	r0, [pc, #40]	; (8001364 <HAL_GPIO_EXTI_Callback+0x4c>)
 800133a:	f006 fb79 	bl	8007a30 <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_3_Pin) HAL_TIM_Base_Start_IT(&htim2);
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001344:	d102      	bne.n	800134c <HAL_GPIO_EXTI_Callback+0x34>
 8001346:	4807      	ldr	r0, [pc, #28]	; (8001364 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001348:	f006 fb72 	bl	8007a30 <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_4_Pin) HAL_TIM_Base_Start_IT(&htim2);
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001352:	d102      	bne.n	800135a <HAL_GPIO_EXTI_Callback+0x42>
 8001354:	4803      	ldr	r0, [pc, #12]	; (8001364 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001356:	f006 fb6b 	bl	8007a30 <HAL_TIM_Base_Start_IT>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000031c 	.word	0x2000031c

08001368 <HAL_TIM_PeriodElapsedCallback>:
// Callback para Timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  if(htim == &htim2){
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a1f      	ldr	r2, [pc, #124]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d137      	bne.n	80013e8 <HAL_TIM_PeriodElapsedCallback+0x80>
	  // Ya pasaron 20ms y sigue en 0, es real esto.
	  if(!HAL_GPIO_ReadPin(EXT_BTN_1_GPIO_Port, EXT_BTN_1_Pin)){
 8001378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137c:	481d      	ldr	r0, [pc, #116]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800137e:	f005 f995 	bl	80066ac <HAL_GPIO_ReadPin>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d105      	bne.n	8001394 <HAL_TIM_PeriodElapsedCallback+0x2c>
		  EXT_BTN_1_state = false;
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 800138e:	4818      	ldr	r0, [pc, #96]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001390:	f006 fb22 	bl	80079d8 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_2_GPIO_Port, EXT_BTN_2_Pin)){
 8001394:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001398:	4818      	ldr	r0, [pc, #96]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x94>)
 800139a:	f005 f987 	bl	80066ac <HAL_GPIO_ReadPin>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d105      	bne.n	80013b0 <HAL_TIM_PeriodElapsedCallback+0x48>
		  EXT_BTN_2_state = false;
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 80013aa:	4811      	ldr	r0, [pc, #68]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80013ac:	f006 fb14 	bl	80079d8 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_3_GPIO_Port, EXT_BTN_3_Pin)){
 80013b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b4:	4811      	ldr	r0, [pc, #68]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x94>)
 80013b6:	f005 f979 	bl	80066ac <HAL_GPIO_ReadPin>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d105      	bne.n	80013cc <HAL_TIM_PeriodElapsedCallback+0x64>
		  EXT_BTN_3_state = false;
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 80013c6:	480a      	ldr	r0, [pc, #40]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80013c8:	f006 fb06 	bl	80079d8 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_4_GPIO_Port, EXT_BTN_4_Pin)){
 80013cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013d0:	4808      	ldr	r0, [pc, #32]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80013d2:	f005 f96b 	bl	80066ac <HAL_GPIO_ReadPin>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d105      	bne.n	80013e8 <HAL_TIM_PeriodElapsedCallback+0x80>
		  EXT_BTN_4_state = false;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80013e4:	f006 faf8 	bl	80079d8 <HAL_TIM_Base_Stop>
	  }
  }
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	2000031c 	.word	0x2000031c
 80013f4:	40021400 	.word	0x40021400
 80013f8:	20000021 	.word	0x20000021
 80013fc:	40021000 	.word	0x40021000
 8001400:	20000022 	.word	0x20000022
 8001404:	20000023 	.word	0x20000023
 8001408:	20000024 	.word	0x20000024

0800140c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < RX_BUFFER_SIZE; i++){
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e024      	b.n	8001464 <HAL_UART_RxCpltCallback+0x58>
		if(rx_buffer[i] >= C2 && rx_buffer[i] <= B5){
 800141a:	4a17      	ldr	r2, [pc, #92]	; (8001478 <HAL_UART_RxCpltCallback+0x6c>)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b23      	cmp	r3, #35	; 0x23
 8001424:	d91b      	bls.n	800145e <HAL_UART_RxCpltCallback+0x52>
 8001426:	4a14      	ldr	r2, [pc, #80]	; (8001478 <HAL_UART_RxCpltCallback+0x6c>)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b53      	cmp	r3, #83	; 0x53
 8001430:	d815      	bhi.n	800145e <HAL_UART_RxCpltCallback+0x52>
			note_buffer[current_note_in_buffer] = rx_buffer[i];
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_UART_RxCpltCallback+0x70>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4619      	mov	r1, r3
 8001438:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <HAL_UART_RxCpltCallback+0x6c>)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4413      	add	r3, r2
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_UART_RxCpltCallback+0x74>)
 8001442:	545a      	strb	r2, [r3, r1]
			current_note_in_buffer++;
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_UART_RxCpltCallback+0x70>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_UART_RxCpltCallback+0x70>)
 800144e:	701a      	strb	r2, [r3, #0]
			if(current_note_in_buffer >= NOTE_BUFFER_SIZE){
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_UART_RxCpltCallback+0x70>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b05      	cmp	r3, #5
 8001456:	d902      	bls.n	800145e <HAL_UART_RxCpltCallback+0x52>
				current_note_in_buffer = 0;
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_UART_RxCpltCallback+0x70>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < RX_BUFFER_SIZE; i++){
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3301      	adds	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b02      	cmp	r3, #2
 8001468:	ddd7      	ble.n	800141a <HAL_UART_RxCpltCallback+0xe>
			}
		}
	}
}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	2000005c 	.word	0x2000005c
 800147c:	20000066 	.word	0x20000066
 8001480:	20000060 	.word	0x20000060
 8001484:	00000000 	.word	0x00000000

08001488 <get_sineval>:
void get_sineval(){
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
	for(int cnt = 0; cnt < NS; cnt++){
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	e02a      	b.n	80014ea <get_sineval+0x62>
		sine_val[cnt] = (sin(2*cnt*2*PI/NS - PI/2)+1)*(4096/2);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	ee07 3a90 	vmov	s15, r3
 800149c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80014a0:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80014f8 <get_sineval+0x70>
 80014a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80014a8:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 80014ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014b0:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8001500 <get_sineval+0x78>
 80014b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80014b8:	eeb0 0b47 	vmov.f64	d0, d7
 80014bc:	f007 fd2c 	bl	8008f18 <sin>
 80014c0:	eeb0 6b40 	vmov.f64	d6, d0
 80014c4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80014c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014cc:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001508 <get_sineval+0x80>
 80014d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014d8:	ee17 1a90 	vmov	r1, s15
 80014dc:	4a0c      	ldr	r2, [pc, #48]	; (8001510 <get_sineval+0x88>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int cnt = 0; cnt < NS; cnt++){
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3301      	adds	r3, #1
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b13      	cmp	r3, #19
 80014ee:	ddd1      	ble.n	8001494 <get_sineval+0xc>
	}
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	4d12d84a 	.word	0x4d12d84a
 80014fc:	400921fb 	.word	0x400921fb
 8001500:	4d12d84a 	.word	0x4d12d84a
 8001504:	3ff921fb 	.word	0x3ff921fb
 8001508:	00000000 	.word	0x00000000
 800150c:	40a00000 	.word	0x40a00000
 8001510:	20000154 	.word	0x20000154

08001514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_MspInit+0x44>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_MspInit+0x44>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_MspInit+0x44>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_MspInit+0x44>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_MspInit+0x44>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154c:	6453      	str	r3, [r2, #68]	; 0x44
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_MspInit+0x44>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800

0800156c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a47      	ldr	r2, [pc, #284]	; (80016a8 <HAL_DAC_MspInit+0x13c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	f040 8088 	bne.w	80016a0 <HAL_DAC_MspInit+0x134>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001590:	4b46      	ldr	r3, [pc, #280]	; (80016ac <HAL_DAC_MspInit+0x140>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	4a45      	ldr	r2, [pc, #276]	; (80016ac <HAL_DAC_MspInit+0x140>)
 8001596:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800159a:	6413      	str	r3, [r2, #64]	; 0x40
 800159c:	4b43      	ldr	r3, [pc, #268]	; (80016ac <HAL_DAC_MspInit+0x140>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	4b40      	ldr	r3, [pc, #256]	; (80016ac <HAL_DAC_MspInit+0x140>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	4a3f      	ldr	r2, [pc, #252]	; (80016ac <HAL_DAC_MspInit+0x140>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6313      	str	r3, [r2, #48]	; 0x30
 80015b4:	4b3d      	ldr	r3, [pc, #244]	; (80016ac <HAL_DAC_MspInit+0x140>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015c0:	2330      	movs	r3, #48	; 0x30
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c4:	2303      	movs	r3, #3
 80015c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	4837      	ldr	r0, [pc, #220]	; (80016b0 <HAL_DAC_MspInit+0x144>)
 80015d4:	f004 fec0 	bl	8006358 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80015d8:	4b36      	ldr	r3, [pc, #216]	; (80016b4 <HAL_DAC_MspInit+0x148>)
 80015da:	4a37      	ldr	r2, [pc, #220]	; (80016b8 <HAL_DAC_MspInit+0x14c>)
 80015dc:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80015de:	4b35      	ldr	r3, [pc, #212]	; (80016b4 <HAL_DAC_MspInit+0x148>)
 80015e0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80015e4:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015e6:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <HAL_DAC_MspInit+0x148>)
 80015e8:	2240      	movs	r2, #64	; 0x40
 80015ea:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ec:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <HAL_DAC_MspInit+0x148>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80015f2:	4b30      	ldr	r3, [pc, #192]	; (80016b4 <HAL_DAC_MspInit+0x148>)
 80015f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f8:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015fa:	4b2e      	ldr	r3, [pc, #184]	; (80016b4 <HAL_DAC_MspInit+0x148>)
 80015fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001600:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001602:	4b2c      	ldr	r3, [pc, #176]	; (80016b4 <HAL_DAC_MspInit+0x148>)
 8001604:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001608:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <HAL_DAC_MspInit+0x148>)
 800160c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001610:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8001612:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <HAL_DAC_MspInit+0x148>)
 8001614:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001618:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <HAL_DAC_MspInit+0x148>)
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001620:	4824      	ldr	r0, [pc, #144]	; (80016b4 <HAL_DAC_MspInit+0x148>)
 8001622:	f004 fab3 	bl	8005b8c <HAL_DMA_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_DAC_MspInit+0xc4>
    {
      Error_Handler();
 800162c:	f7ff ff72 	bl	8001514 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a20      	ldr	r2, [pc, #128]	; (80016b4 <HAL_DAC_MspInit+0x148>)
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	4a1f      	ldr	r2, [pc, #124]	; (80016b4 <HAL_DAC_MspInit+0x148>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <HAL_DAC_MspInit+0x150>)
 800163e:	4a20      	ldr	r2, [pc, #128]	; (80016c0 <HAL_DAC_MspInit+0x154>)
 8001640:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8001642:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <HAL_DAC_MspInit+0x150>)
 8001644:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001648:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_DAC_MspInit+0x150>)
 800164c:	2240      	movs	r2, #64	; 0x40
 800164e:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_DAC_MspInit+0x150>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_DAC_MspInit+0x150>)
 8001658:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800165c:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <HAL_DAC_MspInit+0x150>)
 8001660:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001664:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_DAC_MspInit+0x150>)
 8001668:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800166c:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <HAL_DAC_MspInit+0x150>)
 8001670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001674:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_HIGH;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_DAC_MspInit+0x150>)
 8001678:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800167c:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <HAL_DAC_MspInit+0x150>)
 8001680:	2200      	movs	r2, #0
 8001682:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8001684:	480d      	ldr	r0, [pc, #52]	; (80016bc <HAL_DAC_MspInit+0x150>)
 8001686:	f004 fa81 	bl	8005b8c <HAL_DMA_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_DAC_MspInit+0x128>
    {
      Error_Handler();
 8001690:	f7ff ff40 	bl	8001514 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a09      	ldr	r2, [pc, #36]	; (80016bc <HAL_DAC_MspInit+0x150>)
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	4a08      	ldr	r2, [pc, #32]	; (80016bc <HAL_DAC_MspInit+0x150>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	; 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40007400 	.word	0x40007400
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	200001a4 	.word	0x200001a4
 80016b8:	40026088 	.word	0x40026088
 80016bc:	2000039c 	.word	0x2000039c
 80016c0:	400260a0 	.word	0x400260a0

080016c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a28      	ldr	r2, [pc, #160]	; (8001774 <HAL_TIM_Base_MspInit+0xb0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d10c      	bne.n	80016f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016d6:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_TIM_Base_MspInit+0xb4>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a27      	ldr	r2, [pc, #156]	; (8001778 <HAL_TIM_Base_MspInit+0xb4>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <HAL_TIM_Base_MspInit+0xb4>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80016ee:	e03c      	b.n	800176a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f8:	d114      	bne.n	8001724 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <HAL_TIM_Base_MspInit+0xb4>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <HAL_TIM_Base_MspInit+0xb4>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <HAL_TIM_Base_MspInit+0xb4>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	201c      	movs	r0, #28
 8001718:	f003 fffb 	bl	8005712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800171c:	201c      	movs	r0, #28
 800171e:	f004 f814 	bl	800574a <HAL_NVIC_EnableIRQ>
}
 8001722:	e022      	b.n	800176a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a14      	ldr	r2, [pc, #80]	; (800177c <HAL_TIM_Base_MspInit+0xb8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d10c      	bne.n	8001748 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_TIM_Base_MspInit+0xb4>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	4a11      	ldr	r2, [pc, #68]	; (8001778 <HAL_TIM_Base_MspInit+0xb4>)
 8001734:	f043 0310 	orr.w	r3, r3, #16
 8001738:	6413      	str	r3, [r2, #64]	; 0x40
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <HAL_TIM_Base_MspInit+0xb4>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
}
 8001746:	e010      	b.n	800176a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <HAL_TIM_Base_MspInit+0xbc>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d10b      	bne.n	800176a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_TIM_Base_MspInit+0xb4>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <HAL_TIM_Base_MspInit+0xb4>)
 8001758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_TIM_Base_MspInit+0xb4>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40010000 	.word	0x40010000
 8001778:	40023800 	.word	0x40023800
 800177c:	40001000 	.word	0x40001000
 8001780:	40002000 	.word	0x40002000

08001784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	; 0x30
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a55      	ldr	r2, [pc, #340]	; (80018f8 <HAL_UART_MspInit+0x174>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d175      	bne.n	8001892 <HAL_UART_MspInit+0x10e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017a6:	4b55      	ldr	r3, [pc, #340]	; (80018fc <HAL_UART_MspInit+0x178>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a54      	ldr	r2, [pc, #336]	; (80018fc <HAL_UART_MspInit+0x178>)
 80017ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b52      	ldr	r3, [pc, #328]	; (80018fc <HAL_UART_MspInit+0x178>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b4f      	ldr	r3, [pc, #316]	; (80018fc <HAL_UART_MspInit+0x178>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a4e      	ldr	r2, [pc, #312]	; (80018fc <HAL_UART_MspInit+0x178>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b4c      	ldr	r3, [pc, #304]	; (80018fc <HAL_UART_MspInit+0x178>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	4b49      	ldr	r3, [pc, #292]	; (80018fc <HAL_UART_MspInit+0x178>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a48      	ldr	r2, [pc, #288]	; (80018fc <HAL_UART_MspInit+0x178>)
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b46      	ldr	r3, [pc, #280]	; (80018fc <HAL_UART_MspInit+0x178>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ee:	2301      	movs	r3, #1
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017fe:	2308      	movs	r3, #8
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	4619      	mov	r1, r3
 8001808:	483d      	ldr	r0, [pc, #244]	; (8001900 <HAL_UART_MspInit+0x17c>)
 800180a:	f004 fda5 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800180e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001820:	2308      	movs	r3, #8
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	4836      	ldr	r0, [pc, #216]	; (8001904 <HAL_UART_MspInit+0x180>)
 800182c:	f004 fd94 	bl	8006358 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001830:	4b35      	ldr	r3, [pc, #212]	; (8001908 <HAL_UART_MspInit+0x184>)
 8001832:	4a36      	ldr	r2, [pc, #216]	; (800190c <HAL_UART_MspInit+0x188>)
 8001834:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001836:	4b34      	ldr	r3, [pc, #208]	; (8001908 <HAL_UART_MspInit+0x184>)
 8001838:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800183c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183e:	4b32      	ldr	r3, [pc, #200]	; (8001908 <HAL_UART_MspInit+0x184>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001844:	4b30      	ldr	r3, [pc, #192]	; (8001908 <HAL_UART_MspInit+0x184>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800184a:	4b2f      	ldr	r3, [pc, #188]	; (8001908 <HAL_UART_MspInit+0x184>)
 800184c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001850:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <HAL_UART_MspInit+0x184>)
 8001854:	2200      	movs	r2, #0
 8001856:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001858:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <HAL_UART_MspInit+0x184>)
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_UART_MspInit+0x184>)
 8001860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001864:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <HAL_UART_MspInit+0x184>)
 8001868:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800186c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <HAL_UART_MspInit+0x184>)
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001874:	4824      	ldr	r0, [pc, #144]	; (8001908 <HAL_UART_MspInit+0x184>)
 8001876:	f004 f989 	bl	8005b8c <HAL_DMA_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001880:	f7ff fe48 	bl	8001514 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a20      	ldr	r2, [pc, #128]	; (8001908 <HAL_UART_MspInit+0x184>)
 8001888:	66da      	str	r2, [r3, #108]	; 0x6c
 800188a:	4a1f      	ldr	r2, [pc, #124]	; (8001908 <HAL_UART_MspInit+0x184>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001890:	e02d      	b.n	80018ee <HAL_UART_MspInit+0x16a>
  else if(huart->Instance==USART3)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a1e      	ldr	r2, [pc, #120]	; (8001910 <HAL_UART_MspInit+0x18c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d128      	bne.n	80018ee <HAL_UART_MspInit+0x16a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <HAL_UART_MspInit+0x178>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	4a16      	ldr	r2, [pc, #88]	; (80018fc <HAL_UART_MspInit+0x178>)
 80018a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a6:	6413      	str	r3, [r2, #64]	; 0x40
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_UART_MspInit+0x178>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_UART_MspInit+0x178>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	4a10      	ldr	r2, [pc, #64]	; (80018fc <HAL_UART_MspInit+0x178>)
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	6313      	str	r3, [r2, #48]	; 0x30
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_UART_MspInit+0x178>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018de:	2307      	movs	r3, #7
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	480a      	ldr	r0, [pc, #40]	; (8001914 <HAL_UART_MspInit+0x190>)
 80018ea:	f004 fd35 	bl	8006358 <HAL_GPIO_Init>
}
 80018ee:	bf00      	nop
 80018f0:	3730      	adds	r7, #48	; 0x30
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40004c00 	.word	0x40004c00
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020000 	.word	0x40020000
 8001904:	40020800 	.word	0x40020800
 8001908:	20000074 	.word	0x20000074
 800190c:	40026040 	.word	0x40026040
 8001910:	40004800 	.word	0x40004800
 8001914:	40020c00 	.word	0x40020c00

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <MemManage_Handler+0x4>

08001932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <UsageFault_Handler+0x4>

0800193e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196c:	f003 fdb4 	bl	80054d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}

08001974 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <DMA1_Stream2_IRQHandler+0x10>)
 800197a:	f004 fa85 	bl	8005e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000074 	.word	0x20000074

08001988 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <DMA1_Stream5_IRQHandler+0x10>)
 800198e:	f004 fa7b 	bl	8005e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200001a4 	.word	0x200001a4

0800199c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <DMA1_Stream6_IRQHandler+0x10>)
 80019a2:	f004 fa71 	bl	8005e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000039c 	.word	0x2000039c

080019b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80019b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019b8:	f004 fec4 	bl	8006744 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <TIM2_IRQHandler+0x10>)
 80019c6:	f006 f85d 	bl	8007a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000031c 	.word	0x2000031c

080019d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80019d8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80019dc:	f004 feb2 	bl	8006744 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80019e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019e4:	f004 feae 	bl	8006744 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80019e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019ec:	f004 feaa 	bl	8006744 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <SystemInit+0x28>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fe:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <SystemInit+0x28>)
 8001a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SystemInit+0x28>)
 8001a0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a0e:	609a      	str	r2, [r3, #8]
#endif
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <delay+0x2c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8001a30:	bf00      	nop
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <delay+0x2c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d8f9      	bhi.n	8001a32 <delay+0x12>
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000258 	.word	0x20000258

08001a50 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001a5c:	887b      	ldrh	r3, [r7, #2]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4619      	mov	r1, r3
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f004 fe3a 	bl	80066dc <HAL_GPIO_WritePin>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4619      	mov	r1, r3
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f004 fe2a 	bl	80066dc <HAL_GPIO_WritePin>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001a9c:	887b      	ldrh	r3, [r7, #2]
 8001a9e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	4619      	mov	r1, r3
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f004 fc52 	bl	8006358 <HAL_GPIO_Init>
}
 8001ab4:	bf00      	nop
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	4619      	mov	r1, r3
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f004 fc3a 	bl	8006358 <HAL_GPIO_Init>
}
 8001ae4:	bf00      	nop
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <width+0x14>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	2000002c 	.word	0x2000002c

08001b04 <height>:

uint16_t height(void)
{ return _height; }
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <height+0x14>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	2000002e 	.word	0x2000002e

08001b1c <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8001b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b2e:	b21a      	sxth	r2, r3
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	b29b      	uxth	r3, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 8001b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	115b      	asrs	r3, r3, #5
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	b21a      	sxth	r2, r3
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	105b      	asrs	r3, r3, #1
 8001b84:	b21b      	sxth	r3, r3
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	b21b      	sxth	r3, r3
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	b29b      	uxth	r3, r3
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	121b      	asrs	r3, r3, #8
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f023 0307 	bic.w	r3, r3, #7
 8001bb2:	b2db      	uxtb	r3, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	10db      	asrs	r3, r3, #3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f023 0303 	bic.w	r3, r3, #3
 8001bd4:	b2db      	uxtb	r3, r3
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	b2db      	uxtb	r3, r3
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	71bb      	strb	r3, [r7, #6]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	717b      	strb	r3, [r7, #5]
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	b21a      	sxth	r2, r3
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <color565+0x48>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	b21a      	sxth	r2, r3
 8001c1e:	79bb      	ldrb	r3, [r7, #6]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	b21a      	sxth	r2, r3
 8001c2e:	797b      	ldrb	r3, [r7, #5]
 8001c30:	08db      	lsrs	r3, r3, #3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	4313      	orrs	r3, r2
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	fffff800 	.word	0xfffff800

08001c4c <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	4603      	mov	r3, r0
 8001c54:	460a      	mov	r2, r1
 8001c56:	80fb      	strh	r3, [r7, #6]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	80bb      	strh	r3, [r7, #4]
 8001c5c:	f107 020e 	add.w	r2, r7, #14
 8001c60:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c64:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001c68:	2301      	movs	r3, #1
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f001 fbef 	bl	8003450 <readGRAM>
 8001c72:	89fb      	ldrh	r3, [r7, #14]
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	460a      	mov	r2, r1
 8001c86:	80fb      	strh	r3, [r7, #6]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	80bb      	strh	r3, [r7, #4]
 8001c8c:	88ba      	ldrh	r2, [r7, #4]
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f964 	bl	8001f60 <writecmddata>
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	80fb      	strh	r3, [r7, #6]
 8001cac:	4613      	mov	r3, r2
 8001cae:	717b      	strb	r3, [r7, #5]
 8001cb0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 fa9d 	bl	80021f8 <WriteCmdParamN>
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <setReadDir>:


//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8001ccc:	2102      	movs	r1, #2
 8001cce:	4811      	ldr	r0, [pc, #68]	; (8001d14 <setReadDir+0x4c>)
 8001cd0:	f7ff fede 	bl	8001a90 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8001cd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cd8:	480f      	ldr	r0, [pc, #60]	; (8001d18 <setReadDir+0x50>)
 8001cda:	f7ff fed9 	bl	8001a90 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8001cde:	2180      	movs	r1, #128	; 0x80
 8001ce0:	480d      	ldr	r0, [pc, #52]	; (8001d18 <setReadDir+0x50>)
 8001ce2:	f7ff fed5 	bl	8001a90 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8001ce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cea:	480b      	ldr	r0, [pc, #44]	; (8001d18 <setReadDir+0x50>)
 8001cec:	f7ff fed0 	bl	8001a90 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8001cf0:	2108      	movs	r1, #8
 8001cf2:	480a      	ldr	r0, [pc, #40]	; (8001d1c <setReadDir+0x54>)
 8001cf4:	f7ff fecc 	bl	8001a90 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8001cf8:	2140      	movs	r1, #64	; 0x40
 8001cfa:	4808      	ldr	r0, [pc, #32]	; (8001d1c <setReadDir+0x54>)
 8001cfc:	f7ff fec8 	bl	8001a90 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8001d00:	2120      	movs	r1, #32
 8001d02:	4806      	ldr	r0, [pc, #24]	; (8001d1c <setReadDir+0x54>)
 8001d04:	f7ff fec4 	bl	8001a90 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8001d08:	2110      	movs	r1, #16
 8001d0a:	4804      	ldr	r0, [pc, #16]	; (8001d1c <setReadDir+0x54>)
 8001d0c:	f7ff fec0 	bl	8001a90 <PIN_INPUT>
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021800 	.word	0x40021800
 8001d18:	40021400 	.word	0x40021400
 8001d1c:	40021000 	.word	0x40021000

08001d20 <setWriteDir>:

void setWriteDir (void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8001d24:	2102      	movs	r1, #2
 8001d26:	4811      	ldr	r0, [pc, #68]	; (8001d6c <setWriteDir+0x4c>)
 8001d28:	f7ff fec8 	bl	8001abc <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8001d2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d30:	480f      	ldr	r0, [pc, #60]	; (8001d70 <setWriteDir+0x50>)
 8001d32:	f7ff fec3 	bl	8001abc <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8001d36:	2180      	movs	r1, #128	; 0x80
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <setWriteDir+0x50>)
 8001d3a:	f7ff febf 	bl	8001abc <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8001d3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d42:	480b      	ldr	r0, [pc, #44]	; (8001d70 <setWriteDir+0x50>)
 8001d44:	f7ff feba 	bl	8001abc <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8001d48:	2108      	movs	r1, #8
 8001d4a:	480a      	ldr	r0, [pc, #40]	; (8001d74 <setWriteDir+0x54>)
 8001d4c:	f7ff feb6 	bl	8001abc <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8001d50:	2140      	movs	r1, #64	; 0x40
 8001d52:	4808      	ldr	r0, [pc, #32]	; (8001d74 <setWriteDir+0x54>)
 8001d54:	f7ff feb2 	bl	8001abc <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8001d58:	2120      	movs	r1, #32
 8001d5a:	4806      	ldr	r0, [pc, #24]	; (8001d74 <setWriteDir+0x54>)
 8001d5c:	f7ff feae 	bl	8001abc <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8001d60:	2110      	movs	r1, #16
 8001d62:	4804      	ldr	r0, [pc, #16]	; (8001d74 <setWriteDir+0x54>)
 8001d64:	f7ff feaa 	bl	8001abc <PIN_OUTPUT>
}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40021800 	.word	0x40021800
 8001d70:	40021400 	.word	0x40021400
 8001d74:	40021000 	.word	0x40021000

08001d78 <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff0a 	bl	8001b9e <color565_to_r>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff15 	bl	8001bc0 <color565_to_g>
 8001d96:	4603      	mov	r3, r0
 8001d98:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff20 	bl	8001be2 <color565_to_b>
 8001da2:	4603      	mov	r3, r0
 8001da4:	737b      	strb	r3, [r7, #13]
    write8(r);
 8001da6:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <write24+0x1dc>)
 8001da8:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001dac:	619a      	str	r2, [r3, #24]
 8001dae:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <write24+0x1e0>)
 8001db0:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8001db4:	619a      	str	r2, [r3, #24]
 8001db6:	4b69      	ldr	r3, [pc, #420]	; (8001f5c <write24+0x1e4>)
 8001db8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dbc:	619a      	str	r2, [r3, #24]
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4a66      	ldr	r2, [pc, #408]	; (8001f5c <write24+0x1e4>)
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	6193      	str	r3, [r2, #24]
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	015b      	lsls	r3, r3, #5
 8001dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	015b      	lsls	r3, r3, #5
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	431a      	orrs	r2, r3
 8001de6:	4b5c      	ldr	r3, [pc, #368]	; (8001f58 <write24+0x1e0>)
 8001de8:	619a      	str	r2, [r3, #24]
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	105b      	asrs	r3, r3, #1
 8001dee:	f003 0208 	and.w	r2, r3, #8
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	105b      	asrs	r3, r3, #1
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	431a      	orrs	r2, r3
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	10db      	asrs	r3, r3, #3
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	4b50      	ldr	r3, [pc, #320]	; (8001f54 <write24+0x1dc>)
 8001e12:	619a      	str	r2, [r3, #24]
 8001e14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e18:	484e      	ldr	r0, [pc, #312]	; (8001f54 <write24+0x1dc>)
 8001e1a:	f7ff fe19 	bl	8001a50 <PIN_LOW>
 8001e1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e22:	484c      	ldr	r0, [pc, #304]	; (8001f54 <write24+0x1dc>)
 8001e24:	f7ff fe24 	bl	8001a70 <PIN_HIGH>
 8001e28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e2c:	4849      	ldr	r0, [pc, #292]	; (8001f54 <write24+0x1dc>)
 8001e2e:	f7ff fe1f 	bl	8001a70 <PIN_HIGH>
    write8(g);
 8001e32:	4b48      	ldr	r3, [pc, #288]	; (8001f54 <write24+0x1dc>)
 8001e34:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001e38:	619a      	str	r2, [r3, #24]
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <write24+0x1e0>)
 8001e3c:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8001e40:	619a      	str	r2, [r3, #24]
 8001e42:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <write24+0x1e4>)
 8001e44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e48:	619a      	str	r2, [r3, #24]
 8001e4a:	7bbb      	ldrb	r3, [r7, #14]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4a43      	ldr	r2, [pc, #268]	; (8001f5c <write24+0x1e4>)
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	6193      	str	r3, [r2, #24]
 8001e56:	7bbb      	ldrb	r3, [r7, #14]
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001e5e:	7bbb      	ldrb	r3, [r7, #14]
 8001e60:	015b      	lsls	r3, r3, #5
 8001e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e66:	431a      	orrs	r2, r3
 8001e68:	7bbb      	ldrb	r3, [r7, #14]
 8001e6a:	015b      	lsls	r3, r3, #5
 8001e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e70:	431a      	orrs	r2, r3
 8001e72:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <write24+0x1e0>)
 8001e74:	619a      	str	r2, [r3, #24]
 8001e76:	7bbb      	ldrb	r3, [r7, #14]
 8001e78:	105b      	asrs	r3, r3, #1
 8001e7a:	f003 0208 	and.w	r2, r3, #8
 8001e7e:	7bbb      	ldrb	r3, [r7, #14]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	431a      	orrs	r2, r3
 8001e88:	7bbb      	ldrb	r3, [r7, #14]
 8001e8a:	105b      	asrs	r3, r3, #1
 8001e8c:	f003 0320 	and.w	r3, r3, #32
 8001e90:	431a      	orrs	r2, r3
 8001e92:	7bbb      	ldrb	r3, [r7, #14]
 8001e94:	10db      	asrs	r3, r3, #3
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <write24+0x1dc>)
 8001e9e:	619a      	str	r2, [r3, #24]
 8001ea0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ea4:	482b      	ldr	r0, [pc, #172]	; (8001f54 <write24+0x1dc>)
 8001ea6:	f7ff fdd3 	bl	8001a50 <PIN_LOW>
 8001eaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eae:	4829      	ldr	r0, [pc, #164]	; (8001f54 <write24+0x1dc>)
 8001eb0:	f7ff fdde 	bl	8001a70 <PIN_HIGH>
 8001eb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eb8:	4826      	ldr	r0, [pc, #152]	; (8001f54 <write24+0x1dc>)
 8001eba:	f7ff fdd9 	bl	8001a70 <PIN_HIGH>
    write8(b);
 8001ebe:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <write24+0x1dc>)
 8001ec0:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001ec4:	619a      	str	r2, [r3, #24]
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <write24+0x1e0>)
 8001ec8:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8001ecc:	619a      	str	r2, [r3, #24]
 8001ece:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <write24+0x1e4>)
 8001ed0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ed4:	619a      	str	r2, [r3, #24]
 8001ed6:	7b7b      	ldrb	r3, [r7, #13]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4a20      	ldr	r2, [pc, #128]	; (8001f5c <write24+0x1e4>)
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	6193      	str	r3, [r2, #24]
 8001ee2:	7b7b      	ldrb	r3, [r7, #13]
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001eea:	7b7b      	ldrb	r3, [r7, #13]
 8001eec:	015b      	lsls	r3, r3, #5
 8001eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	7b7b      	ldrb	r3, [r7, #13]
 8001ef6:	015b      	lsls	r3, r3, #5
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	431a      	orrs	r2, r3
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <write24+0x1e0>)
 8001f00:	619a      	str	r2, [r3, #24]
 8001f02:	7b7b      	ldrb	r3, [r7, #13]
 8001f04:	105b      	asrs	r3, r3, #1
 8001f06:	f003 0208 	and.w	r2, r3, #8
 8001f0a:	7b7b      	ldrb	r3, [r7, #13]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f12:	431a      	orrs	r2, r3
 8001f14:	7b7b      	ldrb	r3, [r7, #13]
 8001f16:	105b      	asrs	r3, r3, #1
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	7b7b      	ldrb	r3, [r7, #13]
 8001f20:	10db      	asrs	r3, r3, #3
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <write24+0x1dc>)
 8001f2a:	619a      	str	r2, [r3, #24]
 8001f2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f30:	4808      	ldr	r0, [pc, #32]	; (8001f54 <write24+0x1dc>)
 8001f32:	f7ff fd8d 	bl	8001a50 <PIN_LOW>
 8001f36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f3a:	4806      	ldr	r0, [pc, #24]	; (8001f54 <write24+0x1dc>)
 8001f3c:	f7ff fd98 	bl	8001a70 <PIN_HIGH>
 8001f40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f44:	4803      	ldr	r0, [pc, #12]	; (8001f54 <write24+0x1dc>)
 8001f46:	f7ff fd93 	bl	8001a70 <PIN_HIGH>
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40021400 	.word	0x40021400
 8001f5c:	40021800 	.word	0x40021800

08001f60 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	460a      	mov	r2, r1
 8001f6a:	80fb      	strh	r3, [r7, #6]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 8001f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f74:	489c      	ldr	r0, [pc, #624]	; (80021e8 <writecmddata+0x288>)
 8001f76:	f7ff fd6b 	bl	8001a50 <PIN_LOW>
    WriteCmd(cmd);
 8001f7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f7e:	489b      	ldr	r0, [pc, #620]	; (80021ec <writecmddata+0x28c>)
 8001f80:	f7ff fd66 	bl	8001a50 <PIN_LOW>
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	0a1b      	lsrs	r3, r3, #8
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	73bb      	strb	r3, [r7, #14]
 8001f90:	4b96      	ldr	r3, [pc, #600]	; (80021ec <writecmddata+0x28c>)
 8001f92:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001f96:	619a      	str	r2, [r3, #24]
 8001f98:	4b95      	ldr	r3, [pc, #596]	; (80021f0 <writecmddata+0x290>)
 8001f9a:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8001f9e:	619a      	str	r2, [r3, #24]
 8001fa0:	4b94      	ldr	r3, [pc, #592]	; (80021f4 <writecmddata+0x294>)
 8001fa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fa6:	619a      	str	r2, [r3, #24]
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4a91      	ldr	r2, [pc, #580]	; (80021f4 <writecmddata+0x294>)
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	6193      	str	r3, [r2, #24]
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	015b      	lsls	r3, r3, #5
 8001fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	015b      	lsls	r3, r3, #5
 8001fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	4b87      	ldr	r3, [pc, #540]	; (80021f0 <writecmddata+0x290>)
 8001fd2:	619a      	str	r2, [r3, #24]
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	105b      	asrs	r3, r3, #1
 8001fd8:	f003 0208 	and.w	r2, r3, #8
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	105b      	asrs	r3, r3, #1
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	10db      	asrs	r3, r3, #3
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	4b7c      	ldr	r3, [pc, #496]	; (80021ec <writecmddata+0x28c>)
 8001ffc:	619a      	str	r2, [r3, #24]
 8001ffe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002002:	487a      	ldr	r0, [pc, #488]	; (80021ec <writecmddata+0x28c>)
 8002004:	f7ff fd24 	bl	8001a50 <PIN_LOW>
 8002008:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800200c:	4877      	ldr	r0, [pc, #476]	; (80021ec <writecmddata+0x28c>)
 800200e:	f7ff fd2f 	bl	8001a70 <PIN_HIGH>
 8002012:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002016:	4875      	ldr	r0, [pc, #468]	; (80021ec <writecmddata+0x28c>)
 8002018:	f7ff fd2a 	bl	8001a70 <PIN_HIGH>
 800201c:	4b73      	ldr	r3, [pc, #460]	; (80021ec <writecmddata+0x28c>)
 800201e:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002022:	619a      	str	r2, [r3, #24]
 8002024:	4b72      	ldr	r3, [pc, #456]	; (80021f0 <writecmddata+0x290>)
 8002026:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800202a:	619a      	str	r2, [r3, #24]
 800202c:	4b71      	ldr	r3, [pc, #452]	; (80021f4 <writecmddata+0x294>)
 800202e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002032:	619a      	str	r2, [r3, #24]
 8002034:	7bbb      	ldrb	r3, [r7, #14]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4a6e      	ldr	r2, [pc, #440]	; (80021f4 <writecmddata+0x294>)
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	7bbb      	ldrb	r3, [r7, #14]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002048:	7bbb      	ldrb	r3, [r7, #14]
 800204a:	015b      	lsls	r3, r3, #5
 800204c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002050:	431a      	orrs	r2, r3
 8002052:	7bbb      	ldrb	r3, [r7, #14]
 8002054:	015b      	lsls	r3, r3, #5
 8002056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205a:	431a      	orrs	r2, r3
 800205c:	4b64      	ldr	r3, [pc, #400]	; (80021f0 <writecmddata+0x290>)
 800205e:	619a      	str	r2, [r3, #24]
 8002060:	7bbb      	ldrb	r3, [r7, #14]
 8002062:	105b      	asrs	r3, r3, #1
 8002064:	f003 0208 	and.w	r2, r3, #8
 8002068:	7bbb      	ldrb	r3, [r7, #14]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	431a      	orrs	r2, r3
 8002072:	7bbb      	ldrb	r3, [r7, #14]
 8002074:	105b      	asrs	r3, r3, #1
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	431a      	orrs	r2, r3
 800207c:	7bbb      	ldrb	r3, [r7, #14]
 800207e:	10db      	asrs	r3, r3, #3
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	431a      	orrs	r2, r3
 8002086:	4b59      	ldr	r3, [pc, #356]	; (80021ec <writecmddata+0x28c>)
 8002088:	619a      	str	r2, [r3, #24]
 800208a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800208e:	4857      	ldr	r0, [pc, #348]	; (80021ec <writecmddata+0x28c>)
 8002090:	f7ff fcde 	bl	8001a50 <PIN_LOW>
 8002094:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002098:	4854      	ldr	r0, [pc, #336]	; (80021ec <writecmddata+0x28c>)
 800209a:	f7ff fce9 	bl	8001a70 <PIN_HIGH>
 800209e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020a2:	4852      	ldr	r0, [pc, #328]	; (80021ec <writecmddata+0x28c>)
 80020a4:	f7ff fce4 	bl	8001a70 <PIN_HIGH>
 80020a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020ac:	484f      	ldr	r0, [pc, #316]	; (80021ec <writecmddata+0x28c>)
 80020ae:	f7ff fcdf 	bl	8001a70 <PIN_HIGH>
    WriteData(dat);
 80020b2:	88bb      	ldrh	r3, [r7, #4]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	737b      	strb	r3, [r7, #13]
 80020ba:	88bb      	ldrh	r3, [r7, #4]
 80020bc:	733b      	strb	r3, [r7, #12]
 80020be:	4b4b      	ldr	r3, [pc, #300]	; (80021ec <writecmddata+0x28c>)
 80020c0:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80020c4:	619a      	str	r2, [r3, #24]
 80020c6:	4b4a      	ldr	r3, [pc, #296]	; (80021f0 <writecmddata+0x290>)
 80020c8:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80020cc:	619a      	str	r2, [r3, #24]
 80020ce:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <writecmddata+0x294>)
 80020d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020d4:	619a      	str	r2, [r3, #24]
 80020d6:	7b7b      	ldrb	r3, [r7, #13]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4a46      	ldr	r2, [pc, #280]	; (80021f4 <writecmddata+0x294>)
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	6193      	str	r3, [r2, #24]
 80020e2:	7b7b      	ldrb	r3, [r7, #13]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80020ea:	7b7b      	ldrb	r3, [r7, #13]
 80020ec:	015b      	lsls	r3, r3, #5
 80020ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f2:	431a      	orrs	r2, r3
 80020f4:	7b7b      	ldrb	r3, [r7, #13]
 80020f6:	015b      	lsls	r3, r3, #5
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	431a      	orrs	r2, r3
 80020fe:	4b3c      	ldr	r3, [pc, #240]	; (80021f0 <writecmddata+0x290>)
 8002100:	619a      	str	r2, [r3, #24]
 8002102:	7b7b      	ldrb	r3, [r7, #13]
 8002104:	105b      	asrs	r3, r3, #1
 8002106:	f003 0208 	and.w	r2, r3, #8
 800210a:	7b7b      	ldrb	r3, [r7, #13]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	431a      	orrs	r2, r3
 8002114:	7b7b      	ldrb	r3, [r7, #13]
 8002116:	105b      	asrs	r3, r3, #1
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	431a      	orrs	r2, r3
 800211e:	7b7b      	ldrb	r3, [r7, #13]
 8002120:	10db      	asrs	r3, r3, #3
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	431a      	orrs	r2, r3
 8002128:	4b30      	ldr	r3, [pc, #192]	; (80021ec <writecmddata+0x28c>)
 800212a:	619a      	str	r2, [r3, #24]
 800212c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002130:	482e      	ldr	r0, [pc, #184]	; (80021ec <writecmddata+0x28c>)
 8002132:	f7ff fc8d 	bl	8001a50 <PIN_LOW>
 8002136:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800213a:	482c      	ldr	r0, [pc, #176]	; (80021ec <writecmddata+0x28c>)
 800213c:	f7ff fc98 	bl	8001a70 <PIN_HIGH>
 8002140:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002144:	4829      	ldr	r0, [pc, #164]	; (80021ec <writecmddata+0x28c>)
 8002146:	f7ff fc93 	bl	8001a70 <PIN_HIGH>
 800214a:	4b28      	ldr	r3, [pc, #160]	; (80021ec <writecmddata+0x28c>)
 800214c:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002150:	619a      	str	r2, [r3, #24]
 8002152:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <writecmddata+0x290>)
 8002154:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002158:	619a      	str	r2, [r3, #24]
 800215a:	4b26      	ldr	r3, [pc, #152]	; (80021f4 <writecmddata+0x294>)
 800215c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002160:	619a      	str	r2, [r3, #24]
 8002162:	7b3b      	ldrb	r3, [r7, #12]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4a23      	ldr	r2, [pc, #140]	; (80021f4 <writecmddata+0x294>)
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	6193      	str	r3, [r2, #24]
 800216e:	7b3b      	ldrb	r3, [r7, #12]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002176:	7b3b      	ldrb	r3, [r7, #12]
 8002178:	015b      	lsls	r3, r3, #5
 800217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217e:	431a      	orrs	r2, r3
 8002180:	7b3b      	ldrb	r3, [r7, #12]
 8002182:	015b      	lsls	r3, r3, #5
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	431a      	orrs	r2, r3
 800218a:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <writecmddata+0x290>)
 800218c:	619a      	str	r2, [r3, #24]
 800218e:	7b3b      	ldrb	r3, [r7, #12]
 8002190:	105b      	asrs	r3, r3, #1
 8002192:	f003 0208 	and.w	r2, r3, #8
 8002196:	7b3b      	ldrb	r3, [r7, #12]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	431a      	orrs	r2, r3
 80021a0:	7b3b      	ldrb	r3, [r7, #12]
 80021a2:	105b      	asrs	r3, r3, #1
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	431a      	orrs	r2, r3
 80021aa:	7b3b      	ldrb	r3, [r7, #12]
 80021ac:	10db      	asrs	r3, r3, #3
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	431a      	orrs	r2, r3
 80021b4:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <writecmddata+0x28c>)
 80021b6:	619a      	str	r2, [r3, #24]
 80021b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021bc:	480b      	ldr	r0, [pc, #44]	; (80021ec <writecmddata+0x28c>)
 80021be:	f7ff fc47 	bl	8001a50 <PIN_LOW>
 80021c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021c6:	4809      	ldr	r0, [pc, #36]	; (80021ec <writecmddata+0x28c>)
 80021c8:	f7ff fc52 	bl	8001a70 <PIN_HIGH>
 80021cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021d0:	4806      	ldr	r0, [pc, #24]	; (80021ec <writecmddata+0x28c>)
 80021d2:	f7ff fc4d 	bl	8001a70 <PIN_HIGH>
    CS_IDLE;
 80021d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021da:	4803      	ldr	r0, [pc, #12]	; (80021e8 <writecmddata+0x288>)
 80021dc:	f7ff fc48 	bl	8001a70 <PIN_HIGH>
}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40020400 	.word	0x40020400
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40021400 	.word	0x40021400
 80021f4:	40021800 	.word	0x40021800

080021f8 <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	603a      	str	r2, [r7, #0]
 8002202:	80fb      	strh	r3, [r7, #6]
 8002204:	460b      	mov	r3, r1
 8002206:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8002208:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800220c:	484f      	ldr	r0, [pc, #316]	; (800234c <WriteCmdParamN+0x154>)
 800220e:	f7ff fc1f 	bl	8001a50 <PIN_LOW>
    WriteCmd(cmd);
 8002212:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002216:	484e      	ldr	r0, [pc, #312]	; (8002350 <WriteCmdParamN+0x158>)
 8002218:	f7ff fc1a 	bl	8001a50 <PIN_LOW>
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	b29b      	uxth	r3, r3
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	73bb      	strb	r3, [r7, #14]
 8002228:	4b49      	ldr	r3, [pc, #292]	; (8002350 <WriteCmdParamN+0x158>)
 800222a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800222e:	619a      	str	r2, [r3, #24]
 8002230:	4b48      	ldr	r3, [pc, #288]	; (8002354 <WriteCmdParamN+0x15c>)
 8002232:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002236:	619a      	str	r2, [r3, #24]
 8002238:	4b47      	ldr	r3, [pc, #284]	; (8002358 <WriteCmdParamN+0x160>)
 800223a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800223e:	619a      	str	r2, [r3, #24]
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4a44      	ldr	r2, [pc, #272]	; (8002358 <WriteCmdParamN+0x160>)
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	6193      	str	r3, [r2, #24]
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	015b      	lsls	r3, r3, #5
 8002258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225c:	431a      	orrs	r2, r3
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	015b      	lsls	r3, r3, #5
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	431a      	orrs	r2, r3
 8002268:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <WriteCmdParamN+0x15c>)
 800226a:	619a      	str	r2, [r3, #24]
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	105b      	asrs	r3, r3, #1
 8002270:	f003 0208 	and.w	r2, r3, #8
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227c:	431a      	orrs	r2, r3
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	105b      	asrs	r3, r3, #1
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	431a      	orrs	r2, r3
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	10db      	asrs	r3, r3, #3
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	431a      	orrs	r2, r3
 8002292:	4b2f      	ldr	r3, [pc, #188]	; (8002350 <WriteCmdParamN+0x158>)
 8002294:	619a      	str	r2, [r3, #24]
 8002296:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800229a:	482d      	ldr	r0, [pc, #180]	; (8002350 <WriteCmdParamN+0x158>)
 800229c:	f7ff fbd8 	bl	8001a50 <PIN_LOW>
 80022a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022a4:	482a      	ldr	r0, [pc, #168]	; (8002350 <WriteCmdParamN+0x158>)
 80022a6:	f7ff fbe3 	bl	8001a70 <PIN_HIGH>
 80022aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022ae:	4828      	ldr	r0, [pc, #160]	; (8002350 <WriteCmdParamN+0x158>)
 80022b0:	f7ff fbde 	bl	8001a70 <PIN_HIGH>
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <WriteCmdParamN+0x158>)
 80022b6:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80022ba:	619a      	str	r2, [r3, #24]
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <WriteCmdParamN+0x15c>)
 80022be:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80022c2:	619a      	str	r2, [r3, #24]
 80022c4:	4b24      	ldr	r3, [pc, #144]	; (8002358 <WriteCmdParamN+0x160>)
 80022c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022ca:	619a      	str	r2, [r3, #24]
 80022cc:	7bbb      	ldrb	r3, [r7, #14]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4a21      	ldr	r2, [pc, #132]	; (8002358 <WriteCmdParamN+0x160>)
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	6193      	str	r3, [r2, #24]
 80022d8:	7bbb      	ldrb	r3, [r7, #14]
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80022e0:	7bbb      	ldrb	r3, [r7, #14]
 80022e2:	015b      	lsls	r3, r3, #5
 80022e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e8:	431a      	orrs	r2, r3
 80022ea:	7bbb      	ldrb	r3, [r7, #14]
 80022ec:	015b      	lsls	r3, r3, #5
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	431a      	orrs	r2, r3
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <WriteCmdParamN+0x15c>)
 80022f6:	619a      	str	r2, [r3, #24]
 80022f8:	7bbb      	ldrb	r3, [r7, #14]
 80022fa:	105b      	asrs	r3, r3, #1
 80022fc:	f003 0208 	and.w	r2, r3, #8
 8002300:	7bbb      	ldrb	r3, [r7, #14]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002308:	431a      	orrs	r2, r3
 800230a:	7bbb      	ldrb	r3, [r7, #14]
 800230c:	105b      	asrs	r3, r3, #1
 800230e:	f003 0320 	and.w	r3, r3, #32
 8002312:	431a      	orrs	r2, r3
 8002314:	7bbb      	ldrb	r3, [r7, #14]
 8002316:	10db      	asrs	r3, r3, #3
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	431a      	orrs	r2, r3
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <WriteCmdParamN+0x158>)
 8002320:	619a      	str	r2, [r3, #24]
 8002322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002326:	480a      	ldr	r0, [pc, #40]	; (8002350 <WriteCmdParamN+0x158>)
 8002328:	f7ff fb92 	bl	8001a50 <PIN_LOW>
 800232c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002330:	4807      	ldr	r0, [pc, #28]	; (8002350 <WriteCmdParamN+0x158>)
 8002332:	f7ff fb9d 	bl	8001a70 <PIN_HIGH>
 8002336:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800233a:	4805      	ldr	r0, [pc, #20]	; (8002350 <WriteCmdParamN+0x158>)
 800233c:	f7ff fb98 	bl	8001a70 <PIN_HIGH>
 8002340:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002344:	4802      	ldr	r0, [pc, #8]	; (8002350 <WriteCmdParamN+0x158>)
 8002346:	f7ff fb93 	bl	8001a70 <PIN_HIGH>
    while (N-- > 0) {
 800234a:	e0fb      	b.n	8002544 <WriteCmdParamN+0x34c>
 800234c:	40020400 	.word	0x40020400
 8002350:	40021000 	.word	0x40021000
 8002354:	40021400 	.word	0x40021400
 8002358:	40021800 	.word	0x40021800
        uint8_t u8 = *block++;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	603a      	str	r2, [r7, #0]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	737b      	strb	r3, [r7, #13]
        write8(u8);
 8002366:	4b80      	ldr	r3, [pc, #512]	; (8002568 <WriteCmdParamN+0x370>)
 8002368:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800236c:	619a      	str	r2, [r3, #24]
 800236e:	4b7f      	ldr	r3, [pc, #508]	; (800256c <WriteCmdParamN+0x374>)
 8002370:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002374:	619a      	str	r2, [r3, #24]
 8002376:	4b7e      	ldr	r3, [pc, #504]	; (8002570 <WriteCmdParamN+0x378>)
 8002378:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800237c:	619a      	str	r2, [r3, #24]
 800237e:	7b7b      	ldrb	r3, [r7, #13]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4a7b      	ldr	r2, [pc, #492]	; (8002570 <WriteCmdParamN+0x378>)
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	6193      	str	r3, [r2, #24]
 800238a:	7b7b      	ldrb	r3, [r7, #13]
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002392:	7b7b      	ldrb	r3, [r7, #13]
 8002394:	015b      	lsls	r3, r3, #5
 8002396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239a:	431a      	orrs	r2, r3
 800239c:	7b7b      	ldrb	r3, [r7, #13]
 800239e:	015b      	lsls	r3, r3, #5
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	431a      	orrs	r2, r3
 80023a6:	4b71      	ldr	r3, [pc, #452]	; (800256c <WriteCmdParamN+0x374>)
 80023a8:	619a      	str	r2, [r3, #24]
 80023aa:	7b7b      	ldrb	r3, [r7, #13]
 80023ac:	105b      	asrs	r3, r3, #1
 80023ae:	f003 0208 	and.w	r2, r3, #8
 80023b2:	7b7b      	ldrb	r3, [r7, #13]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ba:	431a      	orrs	r2, r3
 80023bc:	7b7b      	ldrb	r3, [r7, #13]
 80023be:	105b      	asrs	r3, r3, #1
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	431a      	orrs	r2, r3
 80023c6:	7b7b      	ldrb	r3, [r7, #13]
 80023c8:	10db      	asrs	r3, r3, #3
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	431a      	orrs	r2, r3
 80023d0:	4b65      	ldr	r3, [pc, #404]	; (8002568 <WriteCmdParamN+0x370>)
 80023d2:	619a      	str	r2, [r3, #24]
 80023d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023d8:	4863      	ldr	r0, [pc, #396]	; (8002568 <WriteCmdParamN+0x370>)
 80023da:	f7ff fb39 	bl	8001a50 <PIN_LOW>
 80023de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023e2:	4861      	ldr	r0, [pc, #388]	; (8002568 <WriteCmdParamN+0x370>)
 80023e4:	f7ff fb44 	bl	8001a70 <PIN_HIGH>
 80023e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023ec:	485e      	ldr	r0, [pc, #376]	; (8002568 <WriteCmdParamN+0x370>)
 80023ee:	f7ff fb3f 	bl	8001a70 <PIN_HIGH>
        if (N && is8347) {
 80023f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 80a4 	beq.w	8002544 <WriteCmdParamN+0x34c>
 80023fc:	4b5d      	ldr	r3, [pc, #372]	; (8002574 <WriteCmdParamN+0x37c>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 809f 	beq.w	8002544 <WriteCmdParamN+0x34c>
            cmd++;
 8002406:	88fb      	ldrh	r3, [r7, #6]
 8002408:	3301      	adds	r3, #1
 800240a:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 800240c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002410:	4855      	ldr	r0, [pc, #340]	; (8002568 <WriteCmdParamN+0x370>)
 8002412:	f7ff fb1d 	bl	8001a50 <PIN_LOW>
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	b29b      	uxth	r3, r3
 800241c:	733b      	strb	r3, [r7, #12]
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	72fb      	strb	r3, [r7, #11]
 8002422:	4b51      	ldr	r3, [pc, #324]	; (8002568 <WriteCmdParamN+0x370>)
 8002424:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002428:	619a      	str	r2, [r3, #24]
 800242a:	4b50      	ldr	r3, [pc, #320]	; (800256c <WriteCmdParamN+0x374>)
 800242c:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002430:	619a      	str	r2, [r3, #24]
 8002432:	4b4f      	ldr	r3, [pc, #316]	; (8002570 <WriteCmdParamN+0x378>)
 8002434:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002438:	619a      	str	r2, [r3, #24]
 800243a:	7b3b      	ldrb	r3, [r7, #12]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4a4c      	ldr	r2, [pc, #304]	; (8002570 <WriteCmdParamN+0x378>)
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	6193      	str	r3, [r2, #24]
 8002446:	7b3b      	ldrb	r3, [r7, #12]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800244e:	7b3b      	ldrb	r3, [r7, #12]
 8002450:	015b      	lsls	r3, r3, #5
 8002452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002456:	431a      	orrs	r2, r3
 8002458:	7b3b      	ldrb	r3, [r7, #12]
 800245a:	015b      	lsls	r3, r3, #5
 800245c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002460:	431a      	orrs	r2, r3
 8002462:	4b42      	ldr	r3, [pc, #264]	; (800256c <WriteCmdParamN+0x374>)
 8002464:	619a      	str	r2, [r3, #24]
 8002466:	7b3b      	ldrb	r3, [r7, #12]
 8002468:	105b      	asrs	r3, r3, #1
 800246a:	f003 0208 	and.w	r2, r3, #8
 800246e:	7b3b      	ldrb	r3, [r7, #12]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002476:	431a      	orrs	r2, r3
 8002478:	7b3b      	ldrb	r3, [r7, #12]
 800247a:	105b      	asrs	r3, r3, #1
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	431a      	orrs	r2, r3
 8002482:	7b3b      	ldrb	r3, [r7, #12]
 8002484:	10db      	asrs	r3, r3, #3
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	431a      	orrs	r2, r3
 800248c:	4b36      	ldr	r3, [pc, #216]	; (8002568 <WriteCmdParamN+0x370>)
 800248e:	619a      	str	r2, [r3, #24]
 8002490:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002494:	4834      	ldr	r0, [pc, #208]	; (8002568 <WriteCmdParamN+0x370>)
 8002496:	f7ff fadb 	bl	8001a50 <PIN_LOW>
 800249a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800249e:	4832      	ldr	r0, [pc, #200]	; (8002568 <WriteCmdParamN+0x370>)
 80024a0:	f7ff fae6 	bl	8001a70 <PIN_HIGH>
 80024a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024a8:	482f      	ldr	r0, [pc, #188]	; (8002568 <WriteCmdParamN+0x370>)
 80024aa:	f7ff fae1 	bl	8001a70 <PIN_HIGH>
 80024ae:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <WriteCmdParamN+0x370>)
 80024b0:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80024b4:	619a      	str	r2, [r3, #24]
 80024b6:	4b2d      	ldr	r3, [pc, #180]	; (800256c <WriteCmdParamN+0x374>)
 80024b8:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80024bc:	619a      	str	r2, [r3, #24]
 80024be:	4b2c      	ldr	r3, [pc, #176]	; (8002570 <WriteCmdParamN+0x378>)
 80024c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024c4:	619a      	str	r2, [r3, #24]
 80024c6:	7afb      	ldrb	r3, [r7, #11]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4a29      	ldr	r2, [pc, #164]	; (8002570 <WriteCmdParamN+0x378>)
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	6193      	str	r3, [r2, #24]
 80024d2:	7afb      	ldrb	r3, [r7, #11]
 80024d4:	021b      	lsls	r3, r3, #8
 80024d6:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80024da:	7afb      	ldrb	r3, [r7, #11]
 80024dc:	015b      	lsls	r3, r3, #5
 80024de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e2:	431a      	orrs	r2, r3
 80024e4:	7afb      	ldrb	r3, [r7, #11]
 80024e6:	015b      	lsls	r3, r3, #5
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	431a      	orrs	r2, r3
 80024ee:	4b1f      	ldr	r3, [pc, #124]	; (800256c <WriteCmdParamN+0x374>)
 80024f0:	619a      	str	r2, [r3, #24]
 80024f2:	7afb      	ldrb	r3, [r7, #11]
 80024f4:	105b      	asrs	r3, r3, #1
 80024f6:	f003 0208 	and.w	r2, r3, #8
 80024fa:	7afb      	ldrb	r3, [r7, #11]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	431a      	orrs	r2, r3
 8002504:	7afb      	ldrb	r3, [r7, #11]
 8002506:	105b      	asrs	r3, r3, #1
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	431a      	orrs	r2, r3
 800250e:	7afb      	ldrb	r3, [r7, #11]
 8002510:	10db      	asrs	r3, r3, #3
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	431a      	orrs	r2, r3
 8002518:	4b13      	ldr	r3, [pc, #76]	; (8002568 <WriteCmdParamN+0x370>)
 800251a:	619a      	str	r2, [r3, #24]
 800251c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002520:	4811      	ldr	r0, [pc, #68]	; (8002568 <WriteCmdParamN+0x370>)
 8002522:	f7ff fa95 	bl	8001a50 <PIN_LOW>
 8002526:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800252a:	480f      	ldr	r0, [pc, #60]	; (8002568 <WriteCmdParamN+0x370>)
 800252c:	f7ff faa0 	bl	8001a70 <PIN_HIGH>
 8002530:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002534:	480c      	ldr	r0, [pc, #48]	; (8002568 <WriteCmdParamN+0x370>)
 8002536:	f7ff fa9b 	bl	8001a70 <PIN_HIGH>
 800253a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800253e:	480a      	ldr	r0, [pc, #40]	; (8002568 <WriteCmdParamN+0x370>)
 8002540:	f7ff fa96 	bl	8001a70 <PIN_HIGH>
    while (N-- > 0) {
 8002544:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	3a01      	subs	r2, #1
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	717a      	strb	r2, [r7, #5]
 8002550:	2b00      	cmp	r3, #0
 8002552:	f73f af03 	bgt.w	800235c <WriteCmdParamN+0x164>
        }
    }
    CS_IDLE;
 8002556:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800255a:	4807      	ldr	r0, [pc, #28]	; (8002578 <WriteCmdParamN+0x380>)
 800255c:	f7ff fa88 	bl	8001a70 <PIN_HIGH>
}
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40021000 	.word	0x40021000
 800256c:	40021400 	.word	0x40021400
 8002570:	40021800 	.word	0x40021800
 8002574:	2000006d 	.word	0x2000006d
 8002578:	40020400 	.word	0x40020400

0800257c <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	4604      	mov	r4, r0
 8002584:	4608      	mov	r0, r1
 8002586:	4611      	mov	r1, r2
 8002588:	461a      	mov	r2, r3
 800258a:	4623      	mov	r3, r4
 800258c:	71fb      	strb	r3, [r7, #7]
 800258e:	4603      	mov	r3, r0
 8002590:	71bb      	strb	r3, [r7, #6]
 8002592:	460b      	mov	r3, r1
 8002594:	717b      	strb	r3, [r7, #5]
 8002596:	4613      	mov	r3, r2
 8002598:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 800259a:	79bb      	ldrb	r3, [r7, #6]
 800259c:	733b      	strb	r3, [r7, #12]
 800259e:	797b      	ldrb	r3, [r7, #5]
 80025a0:	737b      	strb	r3, [r7, #13]
 80025a2:	793b      	ldrb	r3, [r7, #4]
 80025a4:	73bb      	strb	r3, [r7, #14]
 80025a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025aa:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f107 020c 	add.w	r2, r7, #12
 80025b4:	2104      	movs	r1, #4
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fe1e 	bl	80021f8 <WriteCmdParamN>
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd90      	pop	{r4, r7, pc}

080025c4 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	; 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 80025d4:	e046      	b.n	8002664 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	627a      	str	r2, [r7, #36]	; 0x24
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	627a      	str	r2, [r7, #36]	; 0x24
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 80025ee:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80025f2:	2b7f      	cmp	r3, #127	; 0x7f
 80025f4:	d108      	bne.n	8002608 <init_table+0x44>
        {
            delay(len);
 80025f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fa10 	bl	8001a20 <delay>
            len = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002606:	e024      	b.n	8002652 <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8002608:	2300      	movs	r3, #0
 800260a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800260e:	e010      	b.n	8002632 <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	627a      	str	r2, [r7, #36]	; 0x24
 8002616:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800261a:	7819      	ldrb	r1, [r3, #0]
 800261c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002620:	4413      	add	r3, r2
 8002622:	460a      	mov	r2, r1
 8002624:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 8002628:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800262c:	3301      	adds	r3, #1
 800262e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002632:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002636:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800263a:	429a      	cmp	r2, r3
 800263c:	d3e8      	bcc.n	8002610 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 800263e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002642:	b29b      	uxth	r3, r3
 8002644:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8002648:	f107 0208 	add.w	r2, r7, #8
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fdd3 	bl	80021f8 <WriteCmdParamN>
        }
        size -= len + 2;
 8002652:	887a      	ldrh	r2, [r7, #2]
 8002654:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002658:	b29b      	uxth	r3, r3
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b02      	subs	r3, #2
 8002660:	b29b      	uxth	r3, r3
 8002662:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 8002664:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002668:	2b00      	cmp	r3, #0
 800266a:	dcb4      	bgt.n	80025d6 <init_table+0x12>
    }
}
 800266c:	bf00      	nop
 800266e:	3728      	adds	r7, #40	; 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 8002684:	e01d      	b.n	80026c2 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1c9a      	adds	r2, r3, #2
 800268a:	60fa      	str	r2, [r7, #12]
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1c9a      	adds	r2, r3, #2
 8002694:	60fa      	str	r2, [r7, #12]
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 800269a:	897b      	ldrh	r3, [r7, #10]
 800269c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d104      	bne.n	80026ae <init_table16+0x3a>
            delay(d);
 80026a4:	893b      	ldrh	r3, [r7, #8]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff f9ba 	bl	8001a20 <delay>
 80026ac:	e005      	b.n	80026ba <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 80026ae:	893a      	ldrh	r2, [r7, #8]
 80026b0:	897b      	ldrh	r3, [r7, #10]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fc53 	bl	8001f60 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 80026ba:	887b      	ldrh	r3, [r7, #2]
 80026bc:	3b04      	subs	r3, #4
 80026be:	b29b      	uxth	r3, r3
 80026c0:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 80026c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	dcdd      	bgt.n	8002686 <init_table16+0x12>
    }
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <reset>:



void reset(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
    done_reset = 1;
 80026d8:	4b25      	ldr	r3, [pc, #148]	; (8002770 <reset+0x9c>)
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 80026de:	f7ff fb1f 	bl	8001d20 <setWriteDir>
    CTL_INIT();
 80026e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026e6:	4823      	ldr	r0, [pc, #140]	; (8002774 <reset+0xa0>)
 80026e8:	f7ff f9e8 	bl	8001abc <PIN_OUTPUT>
 80026ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026f0:	4820      	ldr	r0, [pc, #128]	; (8002774 <reset+0xa0>)
 80026f2:	f7ff f9e3 	bl	8001abc <PIN_OUTPUT>
 80026f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026fa:	481e      	ldr	r0, [pc, #120]	; (8002774 <reset+0xa0>)
 80026fc:	f7ff f9de 	bl	8001abc <PIN_OUTPUT>
 8002700:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002704:	481c      	ldr	r0, [pc, #112]	; (8002778 <reset+0xa4>)
 8002706:	f7ff f9d9 	bl	8001abc <PIN_OUTPUT>
 800270a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800270e:	481a      	ldr	r0, [pc, #104]	; (8002778 <reset+0xa4>)
 8002710:	f7ff f9d4 	bl	8001abc <PIN_OUTPUT>
    CS_IDLE;
 8002714:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002718:	4817      	ldr	r0, [pc, #92]	; (8002778 <reset+0xa4>)
 800271a:	f7ff f9a9 	bl	8001a70 <PIN_HIGH>
    RD_IDLE;
 800271e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002722:	4814      	ldr	r0, [pc, #80]	; (8002774 <reset+0xa0>)
 8002724:	f7ff f9a4 	bl	8001a70 <PIN_HIGH>
    WR_IDLE;
 8002728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800272c:	4811      	ldr	r0, [pc, #68]	; (8002774 <reset+0xa0>)
 800272e:	f7ff f99f 	bl	8001a70 <PIN_HIGH>
    RESET_IDLE;
 8002732:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002736:	4810      	ldr	r0, [pc, #64]	; (8002778 <reset+0xa4>)
 8002738:	f7ff f99a 	bl	8001a70 <PIN_HIGH>
    delay(50);
 800273c:	2032      	movs	r0, #50	; 0x32
 800273e:	f7ff f96f 	bl	8001a20 <delay>
    RESET_ACTIVE;
 8002742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002746:	480c      	ldr	r0, [pc, #48]	; (8002778 <reset+0xa4>)
 8002748:	f7ff f982 	bl	8001a50 <PIN_LOW>
    delay(100);
 800274c:	2064      	movs	r0, #100	; 0x64
 800274e:	f7ff f967 	bl	8001a20 <delay>
    RESET_IDLE;
 8002752:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002756:	4808      	ldr	r0, [pc, #32]	; (8002778 <reset+0xa4>)
 8002758:	f7ff f98a 	bl	8001a70 <PIN_HIGH>
    delay(100);
 800275c:	2064      	movs	r0, #100	; 0x64
 800275e:	f7ff f95f 	bl	8001a20 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8002762:	2100      	movs	r1, #0
 8002764:	20b0      	movs	r0, #176	; 0xb0
 8002766:	f7ff fa89 	bl	8001c7c <WriteCmdData>
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2000006c 	.word	0x2000006c
 8002774:	40021000 	.word	0x40021000
 8002778:	40020400 	.word	0x40020400

0800277c <read16bits>:

static uint16_t read16bits(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8002782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002786:	4871      	ldr	r0, [pc, #452]	; (800294c <read16bits+0x1d0>)
 8002788:	f7ff f972 	bl	8001a70 <PIN_HIGH>
 800278c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002790:	486e      	ldr	r0, [pc, #440]	; (800294c <read16bits+0x1d0>)
 8002792:	f7ff f95d 	bl	8001a50 <PIN_LOW>
 8002796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800279a:	486c      	ldr	r0, [pc, #432]	; (800294c <read16bits+0x1d0>)
 800279c:	f7ff f958 	bl	8001a50 <PIN_LOW>
 80027a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027a4:	4869      	ldr	r0, [pc, #420]	; (800294c <read16bits+0x1d0>)
 80027a6:	f7ff f953 	bl	8001a50 <PIN_LOW>
 80027aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ae:	4867      	ldr	r0, [pc, #412]	; (800294c <read16bits+0x1d0>)
 80027b0:	f7ff f94e 	bl	8001a50 <PIN_LOW>
 80027b4:	4b66      	ldr	r3, [pc, #408]	; (8002950 <read16bits+0x1d4>)
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	4b64      	ldr	r3, [pc, #400]	; (8002954 <read16bits+0x1d8>)
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	4313      	orrs	r3, r2
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	4b5f      	ldr	r3, [pc, #380]	; (8002954 <read16bits+0x1d8>)
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	4313      	orrs	r3, r2
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	4b5b      	ldr	r3, [pc, #364]	; (8002954 <read16bits+0x1d8>)
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	4313      	orrs	r3, r2
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	4b54      	ldr	r3, [pc, #336]	; (800294c <read16bits+0x1d0>)
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	b29b      	uxth	r3, r3
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	b29b      	uxth	r3, r3
 8002808:	4313      	orrs	r3, r2
 800280a:	b29a      	uxth	r2, r3
 800280c:	4b4f      	ldr	r3, [pc, #316]	; (800294c <read16bits+0x1d0>)
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	085b      	lsrs	r3, r3, #1
 8002812:	b29b      	uxth	r3, r3
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	b29b      	uxth	r3, r3
 800281a:	4313      	orrs	r3, r2
 800281c:	b29a      	uxth	r2, r3
 800281e:	4b4b      	ldr	r3, [pc, #300]	; (800294c <read16bits+0x1d0>)
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	b29b      	uxth	r3, r3
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	b29b      	uxth	r3, r3
 8002828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282c:	b29b      	uxth	r3, r3
 800282e:	4313      	orrs	r3, r2
 8002830:	b29a      	uxth	r2, r3
 8002832:	4b46      	ldr	r3, [pc, #280]	; (800294c <read16bits+0x1d0>)
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	b29b      	uxth	r3, r3
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	b29b      	uxth	r3, r3
 800283c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002840:	b29b      	uxth	r3, r3
 8002842:	4313      	orrs	r3, r2
 8002844:	80fb      	strh	r3, [r7, #6]
 8002846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800284a:	4840      	ldr	r0, [pc, #256]	; (800294c <read16bits+0x1d0>)
 800284c:	f7ff f910 	bl	8001a70 <PIN_HIGH>
 8002850:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002854:	483d      	ldr	r0, [pc, #244]	; (800294c <read16bits+0x1d0>)
 8002856:	f7ff f90b 	bl	8001a70 <PIN_HIGH>
    READ_8(lo);
 800285a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800285e:	483b      	ldr	r0, [pc, #236]	; (800294c <read16bits+0x1d0>)
 8002860:	f7ff f906 	bl	8001a70 <PIN_HIGH>
 8002864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002868:	4838      	ldr	r0, [pc, #224]	; (800294c <read16bits+0x1d0>)
 800286a:	f7ff f8f1 	bl	8001a50 <PIN_LOW>
 800286e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002872:	4836      	ldr	r0, [pc, #216]	; (800294c <read16bits+0x1d0>)
 8002874:	f7ff f8ec 	bl	8001a50 <PIN_LOW>
 8002878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800287c:	4833      	ldr	r0, [pc, #204]	; (800294c <read16bits+0x1d0>)
 800287e:	f7ff f8e7 	bl	8001a50 <PIN_LOW>
 8002882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002886:	4831      	ldr	r0, [pc, #196]	; (800294c <read16bits+0x1d0>)
 8002888:	f7ff f8e2 	bl	8001a50 <PIN_LOW>
 800288c:	4b30      	ldr	r3, [pc, #192]	; (8002950 <read16bits+0x1d4>)
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4b2e      	ldr	r3, [pc, #184]	; (8002954 <read16bits+0x1d8>)
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	4313      	orrs	r3, r2
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	4b29      	ldr	r3, [pc, #164]	; (8002954 <read16bits+0x1d8>)
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	4313      	orrs	r3, r2
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4b25      	ldr	r3, [pc, #148]	; (8002954 <read16bits+0x1d8>)
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	4313      	orrs	r3, r2
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	4b1e      	ldr	r3, [pc, #120]	; (800294c <read16bits+0x1d0>)
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	4313      	orrs	r3, r2
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	4b19      	ldr	r3, [pc, #100]	; (800294c <read16bits+0x1d0>)
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	4313      	orrs	r3, r2
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <read16bits+0x1d0>)
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002904:	b2db      	uxtb	r3, r3
 8002906:	4313      	orrs	r3, r2
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <read16bits+0x1d0>)
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	b2db      	uxtb	r3, r3
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002918:	b2db      	uxtb	r3, r3
 800291a:	4313      	orrs	r3, r2
 800291c:	717b      	strb	r3, [r7, #5]
 800291e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002922:	480a      	ldr	r0, [pc, #40]	; (800294c <read16bits+0x1d0>)
 8002924:	f7ff f8a4 	bl	8001a70 <PIN_HIGH>
 8002928:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800292c:	4807      	ldr	r0, [pc, #28]	; (800294c <read16bits+0x1d0>)
 800292e:	f7ff f89f 	bl	8001a70 <PIN_HIGH>
    return (ret << 8) | lo;
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	b21a      	sxth	r2, r3
 8002938:	797b      	ldrb	r3, [r7, #5]
 800293a:	b21b      	sxth	r3, r3
 800293c:	4313      	orrs	r3, r2
 800293e:	b21b      	sxth	r3, r3
 8002940:	b29b      	uxth	r3, r3
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	40021800 	.word	0x40021800
 8002954:	40021400 	.word	0x40021400

08002958 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	460a      	mov	r2, r1
 8002962:	80fb      	strh	r3, [r7, #6]
 8002964:	4613      	mov	r3, r2
 8002966:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8002968:	4b64      	ldr	r3, [pc, #400]	; (8002afc <readReg+0x1a4>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <readReg+0x1c>
        reset();
 8002970:	f7ff feb0 	bl	80026d4 <reset>
    CS_ACTIVE;
 8002974:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002978:	4861      	ldr	r0, [pc, #388]	; (8002b00 <readReg+0x1a8>)
 800297a:	f7ff f869 	bl	8001a50 <PIN_LOW>
    WriteCmd(reg);
 800297e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002982:	4860      	ldr	r0, [pc, #384]	; (8002b04 <readReg+0x1ac>)
 8002984:	f7ff f864 	bl	8001a50 <PIN_LOW>
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	b29b      	uxth	r3, r3
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	73bb      	strb	r3, [r7, #14]
 8002994:	4b5b      	ldr	r3, [pc, #364]	; (8002b04 <readReg+0x1ac>)
 8002996:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800299a:	619a      	str	r2, [r3, #24]
 800299c:	4b5a      	ldr	r3, [pc, #360]	; (8002b08 <readReg+0x1b0>)
 800299e:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80029a2:	619a      	str	r2, [r3, #24]
 80029a4:	4b59      	ldr	r3, [pc, #356]	; (8002b0c <readReg+0x1b4>)
 80029a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029aa:	619a      	str	r2, [r3, #24]
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4a56      	ldr	r2, [pc, #344]	; (8002b0c <readReg+0x1b4>)
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	6193      	str	r3, [r2, #24]
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	015b      	lsls	r3, r3, #5
 80029c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c8:	431a      	orrs	r2, r3
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	015b      	lsls	r3, r3, #5
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	431a      	orrs	r2, r3
 80029d4:	4b4c      	ldr	r3, [pc, #304]	; (8002b08 <readReg+0x1b0>)
 80029d6:	619a      	str	r2, [r3, #24]
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	105b      	asrs	r3, r3, #1
 80029dc:	f003 0208 	and.w	r2, r3, #8
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e8:	431a      	orrs	r2, r3
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	105b      	asrs	r3, r3, #1
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	431a      	orrs	r2, r3
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	10db      	asrs	r3, r3, #3
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	431a      	orrs	r2, r3
 80029fe:	4b41      	ldr	r3, [pc, #260]	; (8002b04 <readReg+0x1ac>)
 8002a00:	619a      	str	r2, [r3, #24]
 8002a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a06:	483f      	ldr	r0, [pc, #252]	; (8002b04 <readReg+0x1ac>)
 8002a08:	f7ff f822 	bl	8001a50 <PIN_LOW>
 8002a0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a10:	483c      	ldr	r0, [pc, #240]	; (8002b04 <readReg+0x1ac>)
 8002a12:	f7ff f82d 	bl	8001a70 <PIN_HIGH>
 8002a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a1a:	483a      	ldr	r0, [pc, #232]	; (8002b04 <readReg+0x1ac>)
 8002a1c:	f7ff f828 	bl	8001a70 <PIN_HIGH>
 8002a20:	4b38      	ldr	r3, [pc, #224]	; (8002b04 <readReg+0x1ac>)
 8002a22:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002a26:	619a      	str	r2, [r3, #24]
 8002a28:	4b37      	ldr	r3, [pc, #220]	; (8002b08 <readReg+0x1b0>)
 8002a2a:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002a2e:	619a      	str	r2, [r3, #24]
 8002a30:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <readReg+0x1b4>)
 8002a32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a36:	619a      	str	r2, [r3, #24]
 8002a38:	7bbb      	ldrb	r3, [r7, #14]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4a33      	ldr	r2, [pc, #204]	; (8002b0c <readReg+0x1b4>)
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	6193      	str	r3, [r2, #24]
 8002a44:	7bbb      	ldrb	r3, [r7, #14]
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002a4c:	7bbb      	ldrb	r3, [r7, #14]
 8002a4e:	015b      	lsls	r3, r3, #5
 8002a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a54:	431a      	orrs	r2, r3
 8002a56:	7bbb      	ldrb	r3, [r7, #14]
 8002a58:	015b      	lsls	r3, r3, #5
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <readReg+0x1b0>)
 8002a62:	619a      	str	r2, [r3, #24]
 8002a64:	7bbb      	ldrb	r3, [r7, #14]
 8002a66:	105b      	asrs	r3, r3, #1
 8002a68:	f003 0208 	and.w	r2, r3, #8
 8002a6c:	7bbb      	ldrb	r3, [r7, #14]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a74:	431a      	orrs	r2, r3
 8002a76:	7bbb      	ldrb	r3, [r7, #14]
 8002a78:	105b      	asrs	r3, r3, #1
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	7bbb      	ldrb	r3, [r7, #14]
 8002a82:	10db      	asrs	r3, r3, #3
 8002a84:	f003 0310 	and.w	r3, r3, #16
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <readReg+0x1ac>)
 8002a8c:	619a      	str	r2, [r3, #24]
 8002a8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a92:	481c      	ldr	r0, [pc, #112]	; (8002b04 <readReg+0x1ac>)
 8002a94:	f7fe ffdc 	bl	8001a50 <PIN_LOW>
 8002a98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a9c:	4819      	ldr	r0, [pc, #100]	; (8002b04 <readReg+0x1ac>)
 8002a9e:	f7fe ffe7 	bl	8001a70 <PIN_HIGH>
 8002aa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002aa6:	4817      	ldr	r0, [pc, #92]	; (8002b04 <readReg+0x1ac>)
 8002aa8:	f7fe ffe2 	bl	8001a70 <PIN_HIGH>
 8002aac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ab0:	4814      	ldr	r0, [pc, #80]	; (8002b04 <readReg+0x1ac>)
 8002ab2:	f7fe ffdd 	bl	8001a70 <PIN_HIGH>
    setReadDir();
 8002ab6:	f7ff f907 	bl	8001cc8 <setReadDir>
    delay(1);    //1us should be adequate
 8002aba:	2001      	movs	r0, #1
 8002abc:	f7fe ffb0 	bl	8001a20 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8002ac0:	f7ff fe5c 	bl	800277c <read16bits>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	81bb      	strh	r3, [r7, #12]
 8002ac8:	797b      	ldrb	r3, [r7, #5]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	717b      	strb	r3, [r7, #5]
 8002ad0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	daf3      	bge.n	8002ac0 <readReg+0x168>
    RD_IDLE;
 8002ad8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002adc:	4809      	ldr	r0, [pc, #36]	; (8002b04 <readReg+0x1ac>)
 8002ade:	f7fe ffc7 	bl	8001a70 <PIN_HIGH>
    CS_IDLE;
 8002ae2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ae6:	4806      	ldr	r0, [pc, #24]	; (8002b00 <readReg+0x1a8>)
 8002ae8:	f7fe ffc2 	bl	8001a70 <PIN_HIGH>
    setWriteDir();
 8002aec:	f7ff f918 	bl	8001d20 <setWriteDir>
    return ret;
 8002af0:	89bb      	ldrh	r3, [r7, #12]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	2000006c 	.word	0x2000006c
 8002b00:	40020400 	.word	0x40020400
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40021400 	.word	0x40021400
 8002b0c:	40021800 	.word	0x40021800

08002b10 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff1a 	bl	8002958 <readReg>
 8002b24:	4603      	mov	r3, r0
 8002b26:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff13 	bl	8002958 <readReg>
 8002b32:	4603      	mov	r3, r0
 8002b34:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 8002b36:	89fb      	ldrh	r3, [r7, #14]
 8002b38:	041a      	lsls	r2, r3, #16
 8002b3a:	89bb      	ldrh	r3, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	2100      	movs	r1, #0
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff feff 	bl	8002958 <readReg>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	2101      	movs	r1, #1
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fef8 	bl	8002958 <readReg>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	2102      	movs	r1, #2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fef1 	bl	8002958 <readReg>
 8002b76:	4603      	mov	r3, r0
 8002b78:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8002b7a:	89fb      	ldrh	r3, [r7, #14]
 8002b7c:	061b      	lsls	r3, r3, #24
 8002b7e:	89ba      	ldrh	r2, [r7, #12]
 8002b80:	0212      	lsls	r2, r2, #8
 8002b82:	4313      	orrs	r3, r2
 8002b84:	897a      	ldrh	r2, [r7, #10]
 8002b86:	0a12      	lsrs	r2, r2, #8
 8002b88:	b292      	uxth	r2, r2
 8002b8a:	4313      	orrs	r3, r2
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <tft_init>:


void tft_init(uint16_t ID)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 8002ba6:	4bc4      	ldr	r3, [pc, #784]	; (8002eb8 <tft_init+0x324>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 8002bac:	4ac3      	ldr	r2, [pc, #780]	; (8002ebc <tft_init+0x328>)
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	8013      	strh	r3, [r2, #0]
 8002bb2:	4bc2      	ldr	r3, [pc, #776]	; (8002ebc <tft_init+0x328>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	f249 0290 	movw	r2, #37008	; 0x9090
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	f000 8164 	beq.w	8002e88 <tft_init+0x2f4>
 8002bc0:	f249 0290 	movw	r2, #37008	; 0x9090
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	dc7f      	bgt.n	8002cc8 <tft_init+0x134>
 8002bc8:	f244 7247 	movw	r2, #18247	; 0x4747
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	f000 8145 	beq.w	8002e5c <tft_init+0x2c8>
 8002bd2:	f244 7247 	movw	r2, #18247	; 0x4747
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	dc34      	bgt.n	8002c44 <tft_init+0xb0>
 8002bda:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8002bde:	f000 8104 	beq.w	8002dea <tft_init+0x256>
 8002be2:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8002be6:	dc13      	bgt.n	8002c10 <tft_init+0x7c>
 8002be8:	2b99      	cmp	r3, #153	; 0x99
 8002bea:	f000 8181 	beq.w	8002ef0 <tft_init+0x35c>
 8002bee:	2b99      	cmp	r3, #153	; 0x99
 8002bf0:	dc03      	bgt.n	8002bfa <tft_init+0x66>
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	f000 8191 	beq.w	8002f1a <tft_init+0x386>
 8002bf8:	e268      	b.n	80030cc <tft_init+0x538>
 8002bfa:	f241 5205 	movw	r2, #5381	; 0x1505
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	f000 8195 	beq.w	8002f2e <tft_init+0x39a>
 8002c04:	f241 5211 	movw	r2, #5393	; 0x1511
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	f000 80da 	beq.w	8002dc2 <tft_init+0x22e>
 8002c0e:	e25d      	b.n	80030cc <tft_init+0x538>
 8002c10:	f241 5281 	movw	r2, #5505	; 0x1581
 8002c14:	4293      	cmp	r3, r2
 8002c16:	f000 81f4 	beq.w	8003002 <tft_init+0x46e>
 8002c1a:	f241 5281 	movw	r2, #5505	; 0x1581
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	dc05      	bgt.n	8002c2e <tft_init+0x9a>
 8002c22:	f241 5226 	movw	r2, #5414	; 0x1526
 8002c26:	4293      	cmp	r3, r2
 8002c28:	f000 80e8 	beq.w	8002dfc <tft_init+0x268>
 8002c2c:	e24e      	b.n	80030cc <tft_init+0x538>
 8002c2e:	f241 6202 	movw	r2, #5634	; 0x1602
 8002c32:	4293      	cmp	r3, r2
 8002c34:	f000 81af 	beq.w	8002f96 <tft_init+0x402>
 8002c38:	f242 0253 	movw	r2, #8275	; 0x2053
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	f000 81b3 	beq.w	8002fa8 <tft_init+0x414>
 8002c42:	e243      	b.n	80030cc <tft_init+0x538>
 8002c44:	f247 5275 	movw	r2, #30069	; 0x7575
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	f000 810c 	beq.w	8002e66 <tft_init+0x2d2>
 8002c4e:	f247 5275 	movw	r2, #30069	; 0x7575
 8002c52:	4293      	cmp	r3, r2
 8002c54:	dc19      	bgt.n	8002c8a <tft_init+0xf6>
 8002c56:	f245 4208 	movw	r2, #21512	; 0x5408
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	f000 8162 	beq.w	8002f24 <tft_init+0x390>
 8002c60:	f245 4208 	movw	r2, #21512	; 0x5408
 8002c64:	4293      	cmp	r3, r2
 8002c66:	dc05      	bgt.n	8002c74 <tft_init+0xe0>
 8002c68:	f245 3210 	movw	r2, #21264	; 0x5310
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	f000 80ce 	beq.w	8002e0e <tft_init+0x27a>
 8002c72:	e22b      	b.n	80030cc <tft_init+0x538>
 8002c74:	f246 7267 	movw	r2, #26471	; 0x6767
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	f000 80f4 	beq.w	8002e66 <tft_init+0x2d2>
 8002c7e:	f646 0209 	movw	r2, #26633	; 0x6809
 8002c82:	4293      	cmp	r3, r2
 8002c84:	f000 815e 	beq.w	8002f44 <tft_init+0x3b0>
 8002c88:	e220      	b.n	80030cc <tft_init+0x538>
 8002c8a:	f247 7296 	movw	r2, #30614	; 0x7796
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	f000 81e8 	beq.w	8003064 <tft_init+0x4d0>
 8002c94:	f247 7296 	movw	r2, #30614	; 0x7796
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	dc0a      	bgt.n	8002cb2 <tft_init+0x11e>
 8002c9c:	f247 7289 	movw	r2, #30601	; 0x7789
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	f000 80c9 	beq.w	8002e38 <tft_init+0x2a4>
 8002ca6:	f247 7293 	movw	r2, #30611	; 0x7793
 8002caa:	4293      	cmp	r3, r2
 8002cac:	f000 81ff 	beq.w	80030ae <tft_init+0x51a>
 8002cb0:	e20c      	b.n	80030cc <tft_init+0x538>
 8002cb2:	f248 0231 	movw	r2, #32817	; 0x8031
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	f000 80c7 	beq.w	8002e4a <tft_init+0x2b6>
 8002cbc:	f248 3257 	movw	r2, #33623	; 0x8357
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	f000 80dc 	beq.w	8002e7e <tft_init+0x2ea>
 8002cc6:	e201      	b.n	80030cc <tft_init+0x538>
 8002cc8:	f249 3240 	movw	r2, #37696	; 0x9340
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	f000 818a 	beq.w	8002fe6 <tft_init+0x452>
 8002cd2:	f249 3240 	movw	r2, #37696	; 0x9340
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	dc3c      	bgt.n	8002d54 <tft_init+0x1c0>
 8002cda:	f249 3228 	movw	r2, #37672	; 0x9328
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	f000 8135 	beq.w	8002f4e <tft_init+0x3ba>
 8002ce4:	f249 3228 	movw	r2, #37672	; 0x9328
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	dc19      	bgt.n	8002d20 <tft_init+0x18c>
 8002cec:	f249 3220 	movw	r2, #37664	; 0x9320
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	f000 811c 	beq.w	8002f2e <tft_init+0x39a>
 8002cf6:	f249 3220 	movw	r2, #37664	; 0x9320
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	dc05      	bgt.n	8002d0a <tft_init+0x176>
 8002cfe:	f249 3202 	movw	r2, #37634	; 0x9302
 8002d02:	4293      	cmp	r3, r2
 8002d04:	f000 815a 	beq.w	8002fbc <tft_init+0x428>
 8002d08:	e1e0      	b.n	80030cc <tft_init+0x538>
 8002d0a:	f249 3225 	movw	r2, #37669	; 0x9325
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	f000 811d 	beq.w	8002f4e <tft_init+0x3ba>
 8002d14:	f249 3227 	movw	r2, #37671	; 0x9327
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	f000 8128 	beq.w	8002f6e <tft_init+0x3da>
 8002d1e:	e1d5      	b.n	80030cc <tft_init+0x538>
 8002d20:	f249 3231 	movw	r2, #37681	; 0x9331
 8002d24:	4293      	cmp	r3, r2
 8002d26:	f000 8117 	beq.w	8002f58 <tft_init+0x3c4>
 8002d2a:	f249 3231 	movw	r2, #37681	; 0x9331
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	dc05      	bgt.n	8002d3e <tft_init+0x1aa>
 8002d32:	f249 3229 	movw	r2, #37673	; 0x9329
 8002d36:	4293      	cmp	r3, r2
 8002d38:	f000 814a 	beq.w	8002fd0 <tft_init+0x43c>
 8002d3c:	e1c6      	b.n	80030cc <tft_init+0x538>
 8002d3e:	f249 3235 	movw	r2, #37685	; 0x9335
 8002d42:	4293      	cmp	r3, r2
 8002d44:	f000 8108 	beq.w	8002f58 <tft_init+0x3c4>
 8002d48:	f249 3238 	movw	r2, #37688	; 0x9338
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	f000 813a 	beq.w	8002fc6 <tft_init+0x432>
 8002d52:	e1bb      	b.n	80030cc <tft_init+0x538>
 8002d54:	f249 4288 	movw	r2, #38024	; 0x9488
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	dc14      	bgt.n	8002d86 <tft_init+0x1f2>
 8002d5c:	f249 4287 	movw	r2, #38023	; 0x9487
 8002d60:	4293      	cmp	r3, r2
 8002d62:	f280 8184 	bge.w	800306e <tft_init+0x4da>
 8002d66:	f249 4281 	movw	r2, #38017	; 0x9481
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	f000 814e 	beq.w	800300c <tft_init+0x478>
 8002d70:	f249 4286 	movw	r2, #38022	; 0x9486
 8002d74:	4293      	cmp	r3, r2
 8002d76:	f000 8160 	beq.w	800303a <tft_init+0x4a6>
 8002d7a:	f249 3241 	movw	r2, #37697	; 0x9341
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	f000 8136 	beq.w	8002ff0 <tft_init+0x45c>
 8002d84:	e1a2      	b.n	80030cc <tft_init+0x538>
 8002d86:	f24b 5205 	movw	r2, #46341	; 0xb505
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	f000 8186 	beq.w	800309c <tft_init+0x508>
 8002d90:	f24b 5205 	movw	r2, #46341	; 0xb505
 8002d94:	4293      	cmp	r3, r2
 8002d96:	dc09      	bgt.n	8002dac <tft_init+0x218>
 8002d98:	f249 5295 	movw	r2, #38293	; 0x9595
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d062      	beq.n	8002e66 <tft_init+0x2d2>
 8002da0:	f64a 4211 	movw	r2, #44049	; 0xac11
 8002da4:	4293      	cmp	r3, r2
 8002da6:	f000 8104 	beq.w	8002fb2 <tft_init+0x41e>
 8002daa:	e18f      	b.n	80030cc <tft_init+0x538>
 8002dac:	f24b 5209 	movw	r2, #46345	; 0xb509
 8002db0:	4293      	cmp	r3, r2
 8002db2:	f000 817c 	beq.w	80030ae <tft_init+0x51a>
 8002db6:	f24c 5205 	movw	r2, #50437	; 0xc505
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	f000 816e 	beq.w	800309c <tft_init+0x508>
 8002dc0:	e184      	b.n	80030cc <tft_init+0x538>
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8002dc2:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <tft_init+0x32c>)
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 8002dc8:	4b3e      	ldr	r3, [pc, #248]	; (8002ec4 <tft_init+0x330>)
 8002dca:	61fb      	str	r3, [r7, #28]
 8002dcc:	2303      	movs	r3, #3
 8002dce:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002dd0:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <tft_init+0x334>)
 8002dd2:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002dda:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002ddc:	4b3b      	ldr	r3, [pc, #236]	; (8002ecc <tft_init+0x338>)
 8002dde:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002de6:	801a      	strh	r2, [r3, #0]
        break;
 8002de8:	e176      	b.n	80030d8 <tft_init+0x544>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002dea:	4b35      	ldr	r3, [pc, #212]	; (8002ec0 <tft_init+0x32c>)
 8002dec:	f240 4213 	movw	r2, #1043	; 0x413
 8002df0:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 8002df2:	4b37      	ldr	r3, [pc, #220]	; (8002ed0 <tft_init+0x33c>)
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	2306      	movs	r3, #6
 8002df8:	837b      	strh	r3, [r7, #26]
        break;
 8002dfa:	e16d      	b.n	80030d8 <tft_init+0x544>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002dfc:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <tft_init+0x32c>)
 8002dfe:	f240 4213 	movw	r2, #1043	; 0x413
 8002e02:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 8002e04:	4b33      	ldr	r3, [pc, #204]	; (8002ed4 <tft_init+0x340>)
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	230c      	movs	r3, #12
 8002e0a:	837b      	strh	r3, [r7, #26]
        break;
 8002e0c:	e164      	b.n	80030d8 <tft_init+0x544>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8002e0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <tft_init+0x32c>)
 8002e10:	f640 6213 	movw	r2, #3603	; 0xe13
 8002e14:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 8002e16:	4b30      	ldr	r3, [pc, #192]	; (8002ed8 <tft_init+0x344>)
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002e1e:	4b2a      	ldr	r3, [pc, #168]	; (8002ec8 <tft_init+0x334>)
 8002e20:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002e28:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002e2a:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <tft_init+0x338>)
 8002e2c:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e34:	801a      	strh	r2, [r3, #0]
        break;
 8002e36:	e14f      	b.n	80030d8 <tft_init+0x544>
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002e38:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <tft_init+0x32c>)
 8002e3a:	f240 4213 	movw	r2, #1043	; 0x413
 8002e3e:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 8002e40:	4b26      	ldr	r3, [pc, #152]	; (8002edc <tft_init+0x348>)
 8002e42:	61fb      	str	r3, [r7, #28]
 8002e44:	2341      	movs	r3, #65	; 0x41
 8002e46:	837b      	strh	r3, [r7, #26]
        break;
 8002e48:	e146      	b.n	80030d8 <tft_init+0x544>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <tft_init+0x32c>)
 8002e4c:	f241 4213 	movw	r2, #5139	; 0x1413
 8002e50:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 8002e52:	4b23      	ldr	r3, [pc, #140]	; (8002ee0 <tft_init+0x34c>)
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	2312      	movs	r3, #18
 8002e58:	837b      	strh	r3, [r7, #26]
        break;
 8002e5a:	e13d      	b.n	80030d8 <tft_init+0x544>

#ifdef SUPPORT_8347D
    case 0x4747:       //HX8347-D
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | AUTO_READINC | READ_24BITS;
 8002e5c:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <tft_init+0x32c>)
 8002e5e:	f241 6213 	movw	r2, #5651	; 0x1613
 8002e62:	801a      	strh	r2, [r3, #0]
		goto common_8347DGI;
 8002e64:	e003      	b.n	8002e6e <tft_init+0x2da>
    case 0x6767:       //HX8367-A
	case 0x7575:       //HX8347-G
	case 0x9595:       //HX8347-I
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS;
 8002e66:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <tft_init+0x32c>)
 8002e68:	f241 4201 	movw	r2, #5121	; 0x1401
 8002e6c:	801a      	strh	r2, [r3, #0]
      common_8347DGI:
		is8347 = 1;
 8002e6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <tft_init+0x350>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
            TFTLCD_DELAY8, 40,
            0x28, 1, 0x3F,      //GON=1, DTE=1, D=1100

            0x16, 1, 0x18,
        };
        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
 8002e74:	2170      	movs	r1, #112	; 0x70
 8002e76:	481c      	ldr	r0, [pc, #112]	; (8002ee8 <tft_init+0x354>)
 8002e78:	f7ff fba4 	bl	80025c4 <init_table>
        break;
 8002e7c:	e12c      	b.n	80030d8 <tft_init+0x544>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <tft_init+0x32c>)
 8002e80:	f241 4203 	movw	r2, #5123	; 0x1403
 8002e84:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 8002e86:	e003      	b.n	8002e90 <tft_init+0x2fc>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8002e88:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <tft_init+0x32c>)
 8002e8a:	f241 4213 	movw	r2, #5139	; 0x1413
 8002e8e:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 8002e90:	2301      	movs	r3, #1
 8002e92:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 8002e94:	4b15      	ldr	r3, [pc, #84]	; (8002eec <tft_init+0x358>)
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	2302      	movs	r3, #2
 8002e9a:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <tft_init+0x334>)
 8002e9e:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002ea6:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <tft_init+0x338>)
 8002eaa:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002eb2:	801a      	strh	r2, [r3, #0]
        break;
 8002eb4:	e110      	b.n	80030d8 <tft_init+0x544>
 8002eb6:	bf00      	nop
 8002eb8:	20000410 	.word	0x20000410
 8002ebc:	2000040e 	.word	0x2000040e
 8002ec0:	20000400 	.word	0x20000400
 8002ec4:	08009b24 	.word	0x08009b24
 8002ec8:	08001b05 	.word	0x08001b05
 8002ecc:	08001aed 	.word	0x08001aed
 8002ed0:	08009b28 	.word	0x08009b28
 8002ed4:	08009b30 	.word	0x08009b30
 8002ed8:	08009b3c 	.word	0x08009b3c
 8002edc:	08009b40 	.word	0x08009b40
 8002ee0:	08009b84 	.word	0x08009b84
 8002ee4:	2000006d 	.word	0x2000006d
 8002ee8:	08009b98 	.word	0x08009b98
 8002eec:	08009c08 	.word	0x08009c08

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8002ef0:	4ba3      	ldr	r3, [pc, #652]	; (8003180 <tft_init+0x5ec>)
 8002ef2:	f241 4213 	movw	r2, #5139	; 0x1413
 8002ef6:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 8002ef8:	4ba2      	ldr	r3, [pc, #648]	; (8003184 <tft_init+0x5f0>)
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	231d      	movs	r3, #29
 8002efe:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002f00:	4ba1      	ldr	r3, [pc, #644]	; (8003188 <tft_init+0x5f4>)
 8002f02:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002f0a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002f0c:	4b9f      	ldr	r3, [pc, #636]	; (800318c <tft_init+0x5f8>)
 8002f0e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002f16:	801a      	strh	r2, [r3, #0]
        break;
 8002f18:	e0de      	b.n	80030d8 <tft_init+0x544>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 8002f1a:	4b99      	ldr	r3, [pc, #612]	; (8003180 <tft_init+0x5ec>)
 8002f1c:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8002f20:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 8002f22:	e008      	b.n	8002f36 <tft_init+0x3a2>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 8002f24:	4b96      	ldr	r3, [pc, #600]	; (8003180 <tft_init+0x5ec>)
 8002f26:	f241 0204 	movw	r2, #4100	; 0x1004
 8002f2a:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 8002f2c:	e003      	b.n	8002f36 <tft_init+0x3a2>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 8002f2e:	4b94      	ldr	r3, [pc, #592]	; (8003180 <tft_init+0x5ec>)
 8002f30:	f241 0204 	movw	r2, #4100	; 0x1004
 8002f34:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 8002f36:	2301      	movs	r3, #1
 8002f38:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 8002f3a:	21d8      	movs	r1, #216	; 0xd8
 8002f3c:	4894      	ldr	r0, [pc, #592]	; (8003190 <tft_init+0x5fc>)
 8002f3e:	f7ff fb99 	bl	8002674 <init_table16>
        break;
 8002f42:	e0c9      	b.n	80030d8 <tft_init+0x544>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8002f44:	4b8e      	ldr	r3, [pc, #568]	; (8003180 <tft_init+0x5ec>)
 8002f46:	f241 1202 	movw	r2, #4354	; 0x1102
 8002f4a:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8002f4c:	e008      	b.n	8002f60 <tft_init+0x3cc>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 8002f4e:	4b8c      	ldr	r3, [pc, #560]	; (8003180 <tft_init+0x5ec>)
 8002f50:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8002f54:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8002f56:	e003      	b.n	8002f60 <tft_init+0x3cc>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 8002f58:	4b89      	ldr	r3, [pc, #548]	; (8003180 <tft_init+0x5ec>)
 8002f5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f5e:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 8002f60:	2301      	movs	r3, #1
 8002f62:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8002f64:	21cc      	movs	r1, #204	; 0xcc
 8002f66:	488b      	ldr	r0, [pc, #556]	; (8003194 <tft_init+0x600>)
 8002f68:	f7ff fb84 	bl	8002674 <init_table16>
        break;
 8002f6c:	e0b4      	b.n	80030d8 <tft_init+0x544>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8002f6e:	4b84      	ldr	r3, [pc, #528]	; (8003180 <tft_init+0x5ec>)
 8002f70:	f240 4203 	movw	r2, #1027	; 0x403
 8002f74:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 8002f76:	4b88      	ldr	r3, [pc, #544]	; (8003198 <tft_init+0x604>)
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	231e      	movs	r3, #30
 8002f7c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002f7e:	4b82      	ldr	r3, [pc, #520]	; (8003188 <tft_init+0x5f4>)
 8002f80:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002f88:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002f8a:	4b80      	ldr	r3, [pc, #512]	; (800318c <tft_init+0x5f8>)
 8002f8c:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	22f0      	movs	r2, #240	; 0xf0
 8002f92:	801a      	strh	r2, [r3, #0]
        break;
 8002f94:	e0a0      	b.n	80030d8 <tft_init+0x544>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 8002f96:	4b7a      	ldr	r3, [pc, #488]	; (8003180 <tft_init+0x5ec>)
 8002f98:	f240 4203 	movw	r2, #1027	; 0x403
 8002f9c:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 8002f9e:	4b7f      	ldr	r3, [pc, #508]	; (800319c <tft_init+0x608>)
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	2306      	movs	r3, #6
 8002fa4:	837b      	strh	r3, [r7, #26]
        break;
 8002fa6:	e097      	b.n	80030d8 <tft_init+0x544>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 8002fa8:	4b75      	ldr	r3, [pc, #468]	; (8003180 <tft_init+0x5ec>)
 8002faa:	f241 4217 	movw	r2, #5143	; 0x1417
 8002fae:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8002fb0:	e012      	b.n	8002fd8 <tft_init+0x444>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 8002fb2:	4b73      	ldr	r3, [pc, #460]	; (8003180 <tft_init+0x5ec>)
 8002fb4:	f241 4213 	movw	r2, #5139	; 0x1413
 8002fb8:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8002fba:	e00d      	b.n	8002fd8 <tft_init+0x444>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8002fbc:	4b70      	ldr	r3, [pc, #448]	; (8003180 <tft_init+0x5ec>)
 8002fbe:	f240 4203 	movw	r2, #1027	; 0x403
 8002fc2:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8002fc4:	e008      	b.n	8002fd8 <tft_init+0x444>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002fc6:	4b6e      	ldr	r3, [pc, #440]	; (8003180 <tft_init+0x5ec>)
 8002fc8:	f240 4213 	movw	r2, #1043	; 0x413
 8002fcc:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8002fce:	e003      	b.n	8002fd8 <tft_init+0x444>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 8002fd0:	4b6b      	ldr	r3, [pc, #428]	; (8003180 <tft_init+0x5ec>)
 8002fd2:	f241 6203 	movw	r2, #5635	; 0x1603
 8002fd6:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8002fdc:	4b70      	ldr	r3, [pc, #448]	; (80031a0 <tft_init+0x60c>)
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	837b      	strh	r3, [r7, #26]
        break;
 8002fe4:	e078      	b.n	80030d8 <tft_init+0x544>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8002fe6:	4b66      	ldr	r3, [pc, #408]	; (8003180 <tft_init+0x5ec>)
 8002fe8:	f241 4213 	movw	r2, #5139	; 0x1413
 8002fec:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 8002fee:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002ff0:	4b63      	ldr	r3, [pc, #396]	; (8003180 <tft_init+0x5ec>)
 8002ff2:	f240 4213 	movw	r2, #1043	; 0x413
 8002ff6:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 8002ff8:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <tft_init+0x610>)
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	2365      	movs	r3, #101	; 0x65
 8002ffe:	837b      	strh	r3, [r7, #26]
        break;
 8003000:	e06a      	b.n	80030d8 <tft_init+0x544>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 8003002:	4b5f      	ldr	r3, [pc, #380]	; (8003180 <tft_init+0x5ec>)
 8003004:	f240 4213 	movw	r2, #1043	; 0x413
 8003008:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 800300a:	e003      	b.n	8003014 <tft_init+0x480>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 800300c:	4b5c      	ldr	r3, [pc, #368]	; (8003180 <tft_init+0x5ec>)
 800300e:	f240 4207 	movw	r2, #1031	; 0x407
 8003012:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 8003014:	2301      	movs	r3, #1
 8003016:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 8003018:	4b63      	ldr	r3, [pc, #396]	; (80031a8 <tft_init+0x614>)
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	2345      	movs	r3, #69	; 0x45
 800301e:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 8003020:	4b59      	ldr	r3, [pc, #356]	; (8003188 <tft_init+0x5f4>)
 8003022:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800302a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800302c:	4b57      	ldr	r3, [pc, #348]	; (800318c <tft_init+0x5f8>)
 800302e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003036:	801a      	strh	r2, [r3, #0]
        break;
 8003038:	e04e      	b.n	80030d8 <tft_init+0x544>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 800303a:	4b51      	ldr	r3, [pc, #324]	; (8003180 <tft_init+0x5ec>)
 800303c:	f240 4203 	movw	r2, #1027	; 0x403
 8003040:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 8003042:	4b5a      	ldr	r3, [pc, #360]	; (80031ac <tft_init+0x618>)
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	233b      	movs	r3, #59	; 0x3b
 8003048:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800304a:	4b4f      	ldr	r3, [pc, #316]	; (8003188 <tft_init+0x5f4>)
 800304c:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003054:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003056:	4b4d      	ldr	r3, [pc, #308]	; (800318c <tft_init+0x5f8>)
 8003058:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003060:	801a      	strh	r2, [r3, #0]
        break;
 8003062:	e039      	b.n	80030d8 <tft_init+0x544>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 8003064:	4b46      	ldr	r3, [pc, #280]	; (8003180 <tft_init+0x5ec>)
 8003066:	f240 4203 	movw	r2, #1027	; 0x403
 800306a:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 800306c:	e003      	b.n	8003076 <tft_init+0x4e2>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800306e:	4b44      	ldr	r3, [pc, #272]	; (8003180 <tft_init+0x5ec>)
 8003070:	f240 4213 	movw	r2, #1043	; 0x413
 8003074:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 8003076:	2301      	movs	r3, #1
 8003078:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 800307a:	4b4d      	ldr	r3, [pc, #308]	; (80031b0 <tft_init+0x61c>)
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	232b      	movs	r3, #43	; 0x2b
 8003080:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003082:	4b41      	ldr	r3, [pc, #260]	; (8003188 <tft_init+0x5f4>)
 8003084:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800308c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800308e:	4b3f      	ldr	r3, [pc, #252]	; (800318c <tft_init+0x5f8>)
 8003090:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003098:	801a      	strh	r2, [r3, #0]
        break;
 800309a:	e01d      	b.n	80030d8 <tft_init+0x544>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 800309c:	4b38      	ldr	r3, [pc, #224]	; (8003180 <tft_init+0x5ec>)
 800309e:	f241 0208 	movw	r2, #4104	; 0x1008
 80030a2:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 80030a4:	21b0      	movs	r1, #176	; 0xb0
 80030a6:	4843      	ldr	r0, [pc, #268]	; (80031b4 <tft_init+0x620>)
 80030a8:	f7ff fae4 	bl	8002674 <init_table16>
        break;
 80030ac:	e014      	b.n	80030d8 <tft_init+0x544>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 80030ae:	4b34      	ldr	r3, [pc, #208]	; (8003180 <tft_init+0x5ec>)
 80030b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030b4:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 80030b6:	21c0      	movs	r1, #192	; 0xc0
 80030b8:	483f      	ldr	r0, [pc, #252]	; (80031b8 <tft_init+0x624>)
 80030ba:	f7ff fadb 	bl	8002674 <init_table16>
        p16 = (int16_t *) & height;
 80030be:	4b32      	ldr	r3, [pc, #200]	; (8003188 <tft_init+0x5f4>)
 80030c0:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80030c8:	801a      	strh	r2, [r3, #0]
        break;
 80030ca:	e005      	b.n	80030d8 <tft_init+0x544>
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 80030cc:	4b2f      	ldr	r3, [pc, #188]	; (800318c <tft_init+0x5f8>)
 80030ce:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	2200      	movs	r2, #0
 80030d4:	801a      	strh	r2, [r3, #0]
        break;
 80030d6:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 80030d8:	4b29      	ldr	r3, [pc, #164]	; (8003180 <tft_init+0x5ec>)
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf14      	ite	ne
 80030e4:	2301      	movne	r3, #1
 80030e6:	2300      	moveq	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	4b33      	ldr	r3, [pc, #204]	; (80031bc <tft_init+0x628>)
 80030ee:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <tft_init+0x57e>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 80030f6:	2109      	movs	r1, #9
 80030f8:	4831      	ldr	r0, [pc, #196]	; (80031c0 <tft_init+0x62c>)
 80030fa:	f7ff fa63 	bl	80025c4 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 80030fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003102:	4619      	mov	r1, r3
 8003104:	69f8      	ldr	r0, [r7, #28]
 8003106:	f7ff fa5d 	bl	80025c4 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 800310a:	2106      	movs	r1, #6
 800310c:	482d      	ldr	r0, [pc, #180]	; (80031c4 <tft_init+0x630>)
 800310e:	f7ff fa59 	bl	80025c4 <init_table>
    }
    setRotation(0);             //PORTRAIT
 8003112:	2000      	movs	r0, #0
 8003114:	f000 ff7a 	bl	800400c <setRotation>
    invertDisplay(false);
 8003118:	2000      	movs	r0, #0
 800311a:	f001 fd45 	bl	8004ba8 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 800311e:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <tft_init+0x634>)
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	f249 4288 	movw	r2, #38024	; 0x9488
 8003126:	4293      	cmp	r3, r2
 8003128:	d125      	bne.n	8003176 <tft_init+0x5e2>
		is555 = 0;
 800312a:	4b28      	ldr	r3, [pc, #160]	; (80031cc <tft_init+0x638>)
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 8003130:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003134:	2100      	movs	r1, #0
 8003136:	2000      	movs	r0, #0
 8003138:	f001 f9e8 	bl	800450c <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 800313c:	2100      	movs	r1, #0
 800313e:	2000      	movs	r0, #0
 8003140:	f7fe fd84 	bl	8001c4c <readPixel>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	f64f 731f 	movw	r3, #65311	; 0xff1f
 800314c:	429a      	cmp	r2, r3
 800314e:	d112      	bne.n	8003176 <tft_init+0x5e2>
			uint8_t pixfmt = 0x06;
 8003150:	2306      	movs	r3, #6
 8003152:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8003154:	f107 030f 	add.w	r3, r7, #15
 8003158:	2201      	movs	r2, #1
 800315a:	4619      	mov	r1, r3
 800315c:	203a      	movs	r0, #58	; 0x3a
 800315e:	f7fe fd9f 	bl	8001ca0 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <tft_init+0x5ec>)
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	f023 0310 	bic.w	r3, r3, #16
 800316a:	b29a      	uxth	r2, r3
 800316c:	4b04      	ldr	r3, [pc, #16]	; (8003180 <tft_init+0x5ec>)
 800316e:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 8003170:	4b16      	ldr	r3, [pc, #88]	; (80031cc <tft_init+0x638>)
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 8003176:	bf00      	nop
 8003178:	3720      	adds	r7, #32
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000400 	.word	0x20000400
 8003184:	08009c0c 	.word	0x08009c0c
 8003188:	08001b05 	.word	0x08001b05
 800318c:	08001aed 	.word	0x08001aed
 8003190:	08009c2c 	.word	0x08009c2c
 8003194:	08009d04 	.word	0x08009d04
 8003198:	08009dd0 	.word	0x08009dd0
 800319c:	08009df0 	.word	0x08009df0
 80031a0:	08009df8 	.word	0x08009df8
 80031a4:	08009dfc 	.word	0x08009dfc
 80031a8:	08009e64 	.word	0x08009e64
 80031ac:	08009eac 	.word	0x08009eac
 80031b0:	08009ee8 	.word	0x08009ee8
 80031b4:	08009f14 	.word	0x08009f14
 80031b8:	08009fc4 	.word	0x08009fc4
 80031bc:	20000404 	.word	0x20000404
 80031c0:	0800a084 	.word	0x0800a084
 80031c4:	0800a090 	.word	0x0800a090
 80031c8:	2000040e 	.word	0x2000040e
 80031cc:	2000006e 	.word	0x2000006e

080031d0 <readID>:




uint16_t readID(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 80031d6:	2100      	movs	r1, #0
 80031d8:	2000      	movs	r0, #0
 80031da:	f7ff fbbd 	bl	8002958 <readReg>
 80031de:	4603      	mov	r3, r0
 80031e0:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 80031e2:	89fb      	ldrh	r3, [r7, #14]
 80031e4:	f245 4208 	movw	r2, #21512	; 0x5408
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d102      	bne.n	80031f2 <readID+0x22>
        return 0x5408;
 80031ec:	f245 4308 	movw	r3, #21512	; 0x5408
 80031f0:	e128      	b.n	8003444 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 80031f2:	89fb      	ldrh	r3, [r7, #14]
 80031f4:	f245 4220 	movw	r2, #21536	; 0x5420
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d102      	bne.n	8003202 <readID+0x32>
        return 0x5420;
 80031fc:	f245 4320 	movw	r3, #21536	; 0x5420
 8003200:	e120      	b.n	8003444 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 8003202:	89fb      	ldrh	r3, [r7, #14]
 8003204:	f648 1289 	movw	r2, #35209	; 0x8989
 8003208:	4293      	cmp	r3, r2
 800320a:	d102      	bne.n	8003212 <readID+0x42>
        return 0x1289;
 800320c:	f241 2389 	movw	r3, #4745	; 0x1289
 8003210:	e118      	b.n	8003444 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 8003212:	2100      	movs	r1, #0
 8003214:	2067      	movs	r0, #103	; 0x67
 8003216:	f7ff fb9f 	bl	8002958 <readReg>
 800321a:	4603      	mov	r3, r0
 800321c:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 800321e:	89fb      	ldrh	r3, [r7, #14]
 8003220:	f244 7247 	movw	r2, #18247	; 0x4747
 8003224:	4293      	cmp	r3, r2
 8003226:	d102      	bne.n	800322e <readID+0x5e>
        return 0x8347;
 8003228:	f248 3347 	movw	r3, #33607	; 0x8347
 800322c:	e10a      	b.n	8003444 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 800322e:	20a1      	movs	r0, #161	; 0xa1
 8003230:	f7ff fc6e 	bl	8002b10 <readReg32>
 8003234:	4603      	mov	r3, r0
 8003236:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	f246 1201 	movw	r2, #24833	; 0x6101
 800323e:	4293      	cmp	r3, r2
 8003240:	d102      	bne.n	8003248 <readID+0x78>
        return 0x1963;
 8003242:	f641 1363 	movw	r3, #6499	; 0x1963
 8003246:	e0fd      	b.n	8003444 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8003248:	89fb      	ldrh	r3, [r7, #14]
 800324a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800324e:	4293      	cmp	r3, r2
 8003250:	d102      	bne.n	8003258 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8003252:	f241 5326 	movw	r3, #5414	; 0x1526
 8003256:	e0f5      	b.n	8003444 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 8003258:	20bf      	movs	r0, #191	; 0xbf
 800325a:	f7ff fc74 	bl	8002b46 <readReg40>
 800325e:	4603      	mov	r3, r0
 8003260:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8003262:	89fb      	ldrh	r3, [r7, #14]
 8003264:	f248 3257 	movw	r2, #33623	; 0x8357
 8003268:	4293      	cmp	r3, r2
 800326a:	d102      	bne.n	8003272 <readID+0xa2>
        return 0x8357;
 800326c:	f248 3357 	movw	r3, #33623	; 0x8357
 8003270:	e0e8      	b.n	8003444 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8003272:	89fb      	ldrh	r3, [r7, #14]
 8003274:	f249 4281 	movw	r2, #38017	; 0x9481
 8003278:	4293      	cmp	r3, r2
 800327a:	d102      	bne.n	8003282 <readID+0xb2>
        return 0x9481;
 800327c:	f249 4381 	movw	r3, #38017	; 0x9481
 8003280:	e0e0      	b.n	8003444 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8003282:	89fb      	ldrh	r3, [r7, #14]
 8003284:	f241 5211 	movw	r2, #5393	; 0x1511
 8003288:	4293      	cmp	r3, r2
 800328a:	d102      	bne.n	8003292 <readID+0xc2>
        return 0x1511;
 800328c:	f241 5311 	movw	r3, #5393	; 0x1511
 8003290:	e0d8      	b.n	8003444 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8003292:	89fb      	ldrh	r3, [r7, #14]
 8003294:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8003298:	d102      	bne.n	80032a0 <readID+0xd0>
        return 0x1520;
 800329a:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 800329e:	e0d1      	b.n	8003444 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 80032a0:	89fb      	ldrh	r3, [r7, #14]
 80032a2:	f241 5226 	movw	r2, #5414	; 0x1526
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d102      	bne.n	80032b0 <readID+0xe0>
        return 0x1526;
 80032aa:	f241 5326 	movw	r3, #5414	; 0x1526
 80032ae:	e0c9      	b.n	8003444 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 80032b0:	89fb      	ldrh	r3, [r7, #14]
 80032b2:	f241 5281 	movw	r2, #5505	; 0x1581
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d102      	bne.n	80032c0 <readID+0xf0>
        return 0x1581;
 80032ba:	f241 5381 	movw	r3, #5505	; 0x1581
 80032be:	e0c1      	b.n	8003444 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 80032c0:	89fb      	ldrh	r3, [r7, #14]
 80032c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80032c6:	d102      	bne.n	80032ce <readID+0xfe>
        return 0x6814;
 80032c8:	f646 0314 	movw	r3, #26644	; 0x6814
 80032cc:	e0ba      	b.n	8003444 <readID+0x274>
    ret = readReg32(0xD4);
 80032ce:	20d4      	movs	r0, #212	; 0xd4
 80032d0:	f7ff fc1e 	bl	8002b10 <readReg32>
 80032d4:	4603      	mov	r3, r0
 80032d6:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 80032d8:	89fb      	ldrh	r3, [r7, #14]
 80032da:	f245 3210 	movw	r2, #21264	; 0x5310
 80032de:	4293      	cmp	r3, r2
 80032e0:	d102      	bne.n	80032e8 <readID+0x118>
        return 0x5310;
 80032e2:	f245 3310 	movw	r3, #21264	; 0x5310
 80032e6:	e0ad      	b.n	8003444 <readID+0x274>
    ret = readReg32(0xD7);
 80032e8:	20d7      	movs	r0, #215	; 0xd7
 80032ea:	f7ff fc11 	bl	8002b10 <readReg32>
 80032ee:	4603      	mov	r3, r0
 80032f0:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 80032f2:	89fb      	ldrh	r3, [r7, #14]
 80032f4:	f248 0231 	movw	r2, #32817	; 0x8031
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d102      	bne.n	8003302 <readID+0x132>
        return 0x8031;
 80032fc:	f248 0331 	movw	r3, #32817	; 0x8031
 8003300:	e0a0      	b.n	8003444 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8003302:	20ef      	movs	r0, #239	; 0xef
 8003304:	f7ff fc1f 	bl	8002b46 <readReg40>
 8003308:	4603      	mov	r3, r0
 800330a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 800330c:	89fb      	ldrh	r3, [r7, #14]
 800330e:	f249 3227 	movw	r2, #37671	; 0x9327
 8003312:	4293      	cmp	r3, r2
 8003314:	d102      	bne.n	800331c <readID+0x14c>
        return 0x9327;
 8003316:	f249 3327 	movw	r3, #37671	; 0x9327
 800331a:	e093      	b.n	8003444 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 800331c:	20fe      	movs	r0, #254	; 0xfe
 800331e:	f7ff fbf7 	bl	8002b10 <readReg32>
 8003322:	4603      	mov	r3, r0
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8003328:	89fb      	ldrh	r3, [r7, #14]
 800332a:	f242 0253 	movw	r2, #8275	; 0x2053
 800332e:	4293      	cmp	r3, r2
 8003330:	d102      	bne.n	8003338 <readID+0x168>
        return 0x2053;
 8003332:	f242 0353 	movw	r3, #8275	; 0x2053
 8003336:	e085      	b.n	8003444 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8003338:	2004      	movs	r0, #4
 800333a:	f7ff fbe9 	bl	8002b10 <readReg32>
 800333e:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	0c1b      	lsrs	r3, r3, #16
 8003344:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d122      	bne.n	8003396 <readID+0x1c6>
 8003350:	89fb      	ldrh	r3, [r7, #14]
 8003352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003356:	d11e      	bne.n	8003396 <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8003358:	4a3c      	ldr	r2, [pc, #240]	; (800344c <readID+0x27c>)
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	4611      	mov	r1, r2
 8003360:	8019      	strh	r1, [r3, #0]
 8003362:	3302      	adds	r3, #2
 8003364:	0c12      	lsrs	r2, r2, #16
 8003366:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	2203      	movs	r2, #3
 800336c:	4619      	mov	r1, r3
 800336e:	20b9      	movs	r0, #185	; 0xb9
 8003370:	f7fe fc96 	bl	8001ca0 <pushCommand>
        msb = readReg(0xD0,0);
 8003374:	2100      	movs	r1, #0
 8003376:	20d0      	movs	r0, #208	; 0xd0
 8003378:	f7ff faee 	bl	8002958 <readReg>
 800337c:	4603      	mov	r3, r0
 800337e:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	2b99      	cmp	r3, #153	; 0x99
 8003384:	d101      	bne.n	800338a <readID+0x1ba>
 8003386:	2399      	movs	r3, #153	; 0x99
 8003388:	e05c      	b.n	8003444 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	2b90      	cmp	r3, #144	; 0x90
 800338e:	d102      	bne.n	8003396 <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8003390:	f249 0390 	movw	r3, #37008	; 0x9090
 8003394:	e056      	b.n	8003444 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8003396:	89fb      	ldrh	r3, [r7, #14]
 8003398:	f241 5226 	movw	r2, #5414	; 0x1526
 800339c:	4293      	cmp	r3, r2
 800339e:	d102      	bne.n	80033a6 <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 80033a0:	f241 5326 	movw	r3, #5414	; 0x1526
 80033a4:	e04e      	b.n	8003444 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 80033a6:	89fb      	ldrh	r3, [r7, #14]
 80033a8:	f648 12f0 	movw	r2, #35312	; 0x89f0
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d102      	bne.n	80033b6 <readID+0x1e6>
        return 0x7735;
 80033b0:	f247 7335 	movw	r3, #30517	; 0x7735
 80033b4:	e046      	b.n	8003444 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 80033b6:	89fb      	ldrh	r3, [r7, #14]
 80033b8:	f248 5252 	movw	r2, #34130	; 0x8552
 80033bc:	4293      	cmp	r3, r2
 80033be:	d102      	bne.n	80033c6 <readID+0x1f6>
        return 0x7789;
 80033c0:	f247 7389 	movw	r3, #30601	; 0x7789
 80033c4:	e03e      	b.n	8003444 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 80033c6:	89fb      	ldrh	r3, [r7, #14]
 80033c8:	f64a 4211 	movw	r2, #44049	; 0xac11
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d102      	bne.n	80033d6 <readID+0x206>
        return 0xAC11;
 80033d0:	f64a 4311 	movw	r3, #44049	; 0xac11
 80033d4:	e036      	b.n	8003444 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 80033d6:	20d3      	movs	r0, #211	; 0xd3
 80033d8:	f7ff fb9a 	bl	8002b10 <readReg32>
 80033dc:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	0a1b      	lsrs	r3, r3, #8
 80033e2:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 80033e4:	89fb      	ldrh	r3, [r7, #14]
 80033e6:	f249 1263 	movw	r2, #37219	; 0x9163
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d101      	bne.n	80033f2 <readID+0x222>
 80033ee:	89fb      	ldrh	r3, [r7, #14]
 80033f0:	e028      	b.n	8003444 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 80033f2:	20d3      	movs	r0, #211	; 0xd3
 80033f4:	f7ff fb8c 	bl	8002b10 <readReg32>
 80033f8:	4603      	mov	r3, r0
 80033fa:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 80033fc:	89fb      	ldrh	r3, [r7, #14]
 80033fe:	0a1b      	lsrs	r3, r3, #8
 8003400:	b29b      	uxth	r3, r3
 8003402:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	2b93      	cmp	r3, #147	; 0x93
 8003408:	d00b      	beq.n	8003422 <readID+0x252>
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	2b94      	cmp	r3, #148	; 0x94
 800340e:	d008      	beq.n	8003422 <readID+0x252>
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	2b98      	cmp	r3, #152	; 0x98
 8003414:	d005      	beq.n	8003422 <readID+0x252>
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	2b77      	cmp	r3, #119	; 0x77
 800341a:	d002      	beq.n	8003422 <readID+0x252>
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	2b16      	cmp	r3, #22
 8003420:	d101      	bne.n	8003426 <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8003422:	89fb      	ldrh	r3, [r7, #14]
 8003424:	e00e      	b.n	8003444 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 8003426:	89fb      	ldrh	r3, [r7, #14]
 8003428:	2bd3      	cmp	r3, #211	; 0xd3
 800342a:	d004      	beq.n	8003436 <readID+0x266>
 800342c:	89fb      	ldrh	r3, [r7, #14]
 800342e:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 8003432:	4293      	cmp	r3, r2
 8003434:	d101      	bne.n	800343a <readID+0x26a>
        return ret;             //16-bit write-only bus
 8003436:	89fb      	ldrh	r3, [r7, #14]
 8003438:	e004      	b.n	8003444 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 800343a:	2100      	movs	r1, #0
 800343c:	2000      	movs	r0, #0
 800343e:	f7ff fa8b 	bl	8002958 <readReg>
 8003442:	4603      	mov	r3, r0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	08009b08 	.word	0x08009b08

08003450 <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b08b      	sub	sp, #44	; 0x2c
 8003454:	af00      	add	r7, sp, #0
 8003456:	60ba      	str	r2, [r7, #8]
 8003458:	461a      	mov	r2, r3
 800345a:	4603      	mov	r3, r0
 800345c:	81fb      	strh	r3, [r7, #14]
 800345e:	460b      	mov	r3, r1
 8003460:	81bb      	strh	r3, [r7, #12]
 8003462:	4613      	mov	r3, r2
 8003464:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 8003466:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <readGRAM+0x88>)
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 800346c:	88fa      	ldrh	r2, [r7, #6]
 800346e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003470:	fb12 f303 	smulbb	r3, r2, r3
 8003474:	b29b      	uxth	r3, r3
 8003476:	847b      	strh	r3, [r7, #34]	; 0x22
 8003478:	2300      	movs	r3, #0
 800347a:	843b      	strh	r3, [r7, #32]
 800347c:	2300      	movs	r3, #0
 800347e:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8003480:	4b16      	ldr	r3, [pc, #88]	; (80034dc <readGRAM+0x8c>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d107      	bne.n	8003498 <readGRAM+0x48>
 8003488:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <readGRAM+0x90>)
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <readGRAM+0x48>
        _MR = 0x2E;
 8003494:	232e      	movs	r3, #46	; 0x2e
 8003496:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <readGRAM+0x94>)
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	f241 6202 	movw	r2, #5634	; 0x1602
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d101      	bne.n	80034a8 <readGRAM+0x58>
 80034a4:	232e      	movs	r3, #46	; 0x2e
 80034a6:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 80034a8:	89fa      	ldrh	r2, [r7, #14]
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	4413      	add	r3, r2
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	b21c      	sxth	r4, r3
 80034b6:	89ba      	ldrh	r2, [r7, #12]
 80034b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80034ba:	4413      	add	r3, r2
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	b21b      	sxth	r3, r3
 80034c4:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80034c8:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80034cc:	4622      	mov	r2, r4
 80034ce:	f001 f921 	bl	8004714 <setAddrWindow>
    while (n > 0) {
 80034d2:	f000 bd74 	b.w	8003fbe <readGRAM+0xb6e>
 80034d6:	bf00      	nop
 80034d8:	200003fe 	.word	0x200003fe
 80034dc:	2000006d 	.word	0x2000006d
 80034e0:	20000400 	.word	0x20000400
 80034e4:	2000040e 	.word	0x2000040e
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 80034e8:	4b9d      	ldr	r3, [pc, #628]	; (8003760 <readGRAM+0x310>)
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d111      	bne.n	8003518 <readGRAM+0xc8>
            WriteCmdData(_MC, x + col);
 80034f4:	4b9b      	ldr	r3, [pc, #620]	; (8003764 <readGRAM+0x314>)
 80034f6:	8818      	ldrh	r0, [r3, #0]
 80034f8:	89fa      	ldrh	r2, [r7, #14]
 80034fa:	8bfb      	ldrh	r3, [r7, #30]
 80034fc:	4413      	add	r3, r2
 80034fe:	b29b      	uxth	r3, r3
 8003500:	4619      	mov	r1, r3
 8003502:	f7fe fbbb 	bl	8001c7c <WriteCmdData>
            WriteCmdData(_MP, y + row);
 8003506:	4b98      	ldr	r3, [pc, #608]	; (8003768 <readGRAM+0x318>)
 8003508:	8818      	ldrh	r0, [r3, #0]
 800350a:	89ba      	ldrh	r2, [r7, #12]
 800350c:	8c3b      	ldrh	r3, [r7, #32]
 800350e:	4413      	add	r3, r2
 8003510:	b29b      	uxth	r3, r3
 8003512:	4619      	mov	r1, r3
 8003514:	f7fe fbb2 	bl	8001c7c <WriteCmdData>
        }
        CS_ACTIVE;
 8003518:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800351c:	4893      	ldr	r0, [pc, #588]	; (800376c <readGRAM+0x31c>)
 800351e:	f7fe fa97 	bl	8001a50 <PIN_LOW>
        WriteCmd(_MR);
 8003522:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003526:	4892      	ldr	r0, [pc, #584]	; (8003770 <readGRAM+0x320>)
 8003528:	f7fe fa92 	bl	8001a50 <PIN_LOW>
 800352c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	b29b      	uxth	r3, r3
 8003532:	777b      	strb	r3, [r7, #29]
 8003534:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003536:	773b      	strb	r3, [r7, #28]
 8003538:	4b8d      	ldr	r3, [pc, #564]	; (8003770 <readGRAM+0x320>)
 800353a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800353e:	619a      	str	r2, [r3, #24]
 8003540:	4b8c      	ldr	r3, [pc, #560]	; (8003774 <readGRAM+0x324>)
 8003542:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8003546:	619a      	str	r2, [r3, #24]
 8003548:	4b8b      	ldr	r3, [pc, #556]	; (8003778 <readGRAM+0x328>)
 800354a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800354e:	619a      	str	r2, [r3, #24]
 8003550:	7f7b      	ldrb	r3, [r7, #29]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4a88      	ldr	r2, [pc, #544]	; (8003778 <readGRAM+0x328>)
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	6193      	str	r3, [r2, #24]
 800355c:	7f7b      	ldrb	r3, [r7, #29]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8003564:	7f7b      	ldrb	r3, [r7, #29]
 8003566:	015b      	lsls	r3, r3, #5
 8003568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356c:	431a      	orrs	r2, r3
 800356e:	7f7b      	ldrb	r3, [r7, #29]
 8003570:	015b      	lsls	r3, r3, #5
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	431a      	orrs	r2, r3
 8003578:	4b7e      	ldr	r3, [pc, #504]	; (8003774 <readGRAM+0x324>)
 800357a:	619a      	str	r2, [r3, #24]
 800357c:	7f7b      	ldrb	r3, [r7, #29]
 800357e:	105b      	asrs	r3, r3, #1
 8003580:	f003 0208 	and.w	r2, r3, #8
 8003584:	7f7b      	ldrb	r3, [r7, #29]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358c:	431a      	orrs	r2, r3
 800358e:	7f7b      	ldrb	r3, [r7, #29]
 8003590:	105b      	asrs	r3, r3, #1
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	431a      	orrs	r2, r3
 8003598:	7f7b      	ldrb	r3, [r7, #29]
 800359a:	10db      	asrs	r3, r3, #3
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	431a      	orrs	r2, r3
 80035a2:	4b73      	ldr	r3, [pc, #460]	; (8003770 <readGRAM+0x320>)
 80035a4:	619a      	str	r2, [r3, #24]
 80035a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035aa:	4871      	ldr	r0, [pc, #452]	; (8003770 <readGRAM+0x320>)
 80035ac:	f7fe fa50 	bl	8001a50 <PIN_LOW>
 80035b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035b4:	486e      	ldr	r0, [pc, #440]	; (8003770 <readGRAM+0x320>)
 80035b6:	f7fe fa5b 	bl	8001a70 <PIN_HIGH>
 80035ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035be:	486c      	ldr	r0, [pc, #432]	; (8003770 <readGRAM+0x320>)
 80035c0:	f7fe fa56 	bl	8001a70 <PIN_HIGH>
 80035c4:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <readGRAM+0x320>)
 80035c6:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80035ca:	619a      	str	r2, [r3, #24]
 80035cc:	4b69      	ldr	r3, [pc, #420]	; (8003774 <readGRAM+0x324>)
 80035ce:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80035d2:	619a      	str	r2, [r3, #24]
 80035d4:	4b68      	ldr	r3, [pc, #416]	; (8003778 <readGRAM+0x328>)
 80035d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035da:	619a      	str	r2, [r3, #24]
 80035dc:	7f3b      	ldrb	r3, [r7, #28]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4a65      	ldr	r2, [pc, #404]	; (8003778 <readGRAM+0x328>)
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	6193      	str	r3, [r2, #24]
 80035e8:	7f3b      	ldrb	r3, [r7, #28]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80035f0:	7f3b      	ldrb	r3, [r7, #28]
 80035f2:	015b      	lsls	r3, r3, #5
 80035f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f8:	431a      	orrs	r2, r3
 80035fa:	7f3b      	ldrb	r3, [r7, #28]
 80035fc:	015b      	lsls	r3, r3, #5
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	431a      	orrs	r2, r3
 8003604:	4b5b      	ldr	r3, [pc, #364]	; (8003774 <readGRAM+0x324>)
 8003606:	619a      	str	r2, [r3, #24]
 8003608:	7f3b      	ldrb	r3, [r7, #28]
 800360a:	105b      	asrs	r3, r3, #1
 800360c:	f003 0208 	and.w	r2, r3, #8
 8003610:	7f3b      	ldrb	r3, [r7, #28]
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003618:	431a      	orrs	r2, r3
 800361a:	7f3b      	ldrb	r3, [r7, #28]
 800361c:	105b      	asrs	r3, r3, #1
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	431a      	orrs	r2, r3
 8003624:	7f3b      	ldrb	r3, [r7, #28]
 8003626:	10db      	asrs	r3, r3, #3
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	431a      	orrs	r2, r3
 800362e:	4b50      	ldr	r3, [pc, #320]	; (8003770 <readGRAM+0x320>)
 8003630:	619a      	str	r2, [r3, #24]
 8003632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003636:	484e      	ldr	r0, [pc, #312]	; (8003770 <readGRAM+0x320>)
 8003638:	f7fe fa0a 	bl	8001a50 <PIN_LOW>
 800363c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003640:	484b      	ldr	r0, [pc, #300]	; (8003770 <readGRAM+0x320>)
 8003642:	f7fe fa15 	bl	8001a70 <PIN_HIGH>
 8003646:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800364a:	4849      	ldr	r0, [pc, #292]	; (8003770 <readGRAM+0x320>)
 800364c:	f7fe fa10 	bl	8001a70 <PIN_HIGH>
 8003650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003654:	4846      	ldr	r0, [pc, #280]	; (8003770 <readGRAM+0x320>)
 8003656:	f7fe fa0b 	bl	8001a70 <PIN_HIGH>
        setReadDir();
 800365a:	f7fe fb35 	bl	8001cc8 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 800365e:	4b40      	ldr	r3, [pc, #256]	; (8003760 <readGRAM+0x310>)
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	f040 816a 	bne.w	8003940 <readGRAM+0x4f0>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 800366c:	4b3c      	ldr	r3, [pc, #240]	; (8003760 <readGRAM+0x310>)
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d105      	bne.n	8003684 <readGRAM+0x234>
 8003678:	4b40      	ldr	r3, [pc, #256]	; (800377c <readGRAM+0x32c>)
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	f241 2289 	movw	r2, #4745	; 0x1289
 8003680:	4293      	cmp	r3, r2
 8003682:	d17d      	bne.n	8003780 <readGRAM+0x330>
            READ_8(r);
 8003684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003688:	4839      	ldr	r0, [pc, #228]	; (8003770 <readGRAM+0x320>)
 800368a:	f7fe f9f1 	bl	8001a70 <PIN_HIGH>
 800368e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003692:	4837      	ldr	r0, [pc, #220]	; (8003770 <readGRAM+0x320>)
 8003694:	f7fe f9dc 	bl	8001a50 <PIN_LOW>
 8003698:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800369c:	4834      	ldr	r0, [pc, #208]	; (8003770 <readGRAM+0x320>)
 800369e:	f7fe f9d7 	bl	8001a50 <PIN_LOW>
 80036a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036a6:	4832      	ldr	r0, [pc, #200]	; (8003770 <readGRAM+0x320>)
 80036a8:	f7fe f9d2 	bl	8001a50 <PIN_LOW>
 80036ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036b0:	482f      	ldr	r0, [pc, #188]	; (8003770 <readGRAM+0x320>)
 80036b2:	f7fe f9cd 	bl	8001a50 <PIN_LOW>
 80036b6:	4b30      	ldr	r3, [pc, #192]	; (8003778 <readGRAM+0x328>)
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <readGRAM+0x324>)
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	0a1b      	lsrs	r3, r3, #8
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	4313      	orrs	r3, r2
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	4b27      	ldr	r3, [pc, #156]	; (8003774 <readGRAM+0x324>)
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	4313      	orrs	r3, r2
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	4b22      	ldr	r3, [pc, #136]	; (8003774 <readGRAM+0x324>)
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	4313      	orrs	r3, r2
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <readGRAM+0x320>)
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	b2db      	uxtb	r3, r3
 8003704:	f003 0310 	and.w	r3, r3, #16
 8003708:	b2db      	uxtb	r3, r3
 800370a:	4313      	orrs	r3, r2
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4b18      	ldr	r3, [pc, #96]	; (8003770 <readGRAM+0x320>)
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	085b      	lsrs	r3, r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	b2db      	uxtb	r3, r3
 800371c:	4313      	orrs	r3, r2
 800371e:	b2da      	uxtb	r2, r3
 8003720:	4b13      	ldr	r3, [pc, #76]	; (8003770 <readGRAM+0x320>)
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	b2db      	uxtb	r3, r3
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	b2db      	uxtb	r3, r3
 8003730:	4313      	orrs	r3, r2
 8003732:	b2da      	uxtb	r2, r3
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <readGRAM+0x320>)
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003742:	b2db      	uxtb	r3, r3
 8003744:	4313      	orrs	r3, r2
 8003746:	75fb      	strb	r3, [r7, #23]
 8003748:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800374c:	4808      	ldr	r0, [pc, #32]	; (8003770 <readGRAM+0x320>)
 800374e:	f7fe f98f 	bl	8001a70 <PIN_HIGH>
 8003752:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003756:	4806      	ldr	r0, [pc, #24]	; (8003770 <readGRAM+0x320>)
 8003758:	f7fe f98a 	bl	8001a70 <PIN_HIGH>
 800375c:	e0f0      	b.n	8003940 <readGRAM+0x4f0>
 800375e:	bf00      	nop
 8003760:	20000400 	.word	0x20000400
 8003764:	20000408 	.word	0x20000408
 8003768:	20000406 	.word	0x20000406
 800376c:	40020400 	.word	0x40020400
 8003770:	40021000 	.word	0x40021000
 8003774:	40021400 	.word	0x40021400
 8003778:	40021800 	.word	0x40021800
 800377c:	2000040e 	.word	0x2000040e
        } else {
            READ_16(dummy);
 8003780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003784:	48a8      	ldr	r0, [pc, #672]	; (8003a28 <readGRAM+0x5d8>)
 8003786:	f7fe f973 	bl	8001a70 <PIN_HIGH>
 800378a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800378e:	48a6      	ldr	r0, [pc, #664]	; (8003a28 <readGRAM+0x5d8>)
 8003790:	f7fe f95e 	bl	8001a50 <PIN_LOW>
 8003794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003798:	48a3      	ldr	r0, [pc, #652]	; (8003a28 <readGRAM+0x5d8>)
 800379a:	f7fe f959 	bl	8001a50 <PIN_LOW>
 800379e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037a2:	48a1      	ldr	r0, [pc, #644]	; (8003a28 <readGRAM+0x5d8>)
 80037a4:	f7fe f954 	bl	8001a50 <PIN_LOW>
 80037a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037ac:	489e      	ldr	r0, [pc, #632]	; (8003a28 <readGRAM+0x5d8>)
 80037ae:	f7fe f94f 	bl	8001a50 <PIN_LOW>
 80037b2:	4b9e      	ldr	r3, [pc, #632]	; (8003a2c <readGRAM+0x5dc>)
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	085b      	lsrs	r3, r3, #1
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	4b9b      	ldr	r3, [pc, #620]	; (8003a30 <readGRAM+0x5e0>)
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	0a1b      	lsrs	r3, r3, #8
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	4313      	orrs	r3, r2
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	4b97      	ldr	r3, [pc, #604]	; (8003a30 <readGRAM+0x5e0>)
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	4313      	orrs	r3, r2
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	4b92      	ldr	r3, [pc, #584]	; (8003a30 <readGRAM+0x5e0>)
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	4313      	orrs	r3, r2
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	4b8c      	ldr	r3, [pc, #560]	; (8003a28 <readGRAM+0x5d8>)
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	b2db      	uxtb	r3, r3
 8003806:	4313      	orrs	r3, r2
 8003808:	b2da      	uxtb	r2, r3
 800380a:	4b87      	ldr	r3, [pc, #540]	; (8003a28 <readGRAM+0x5d8>)
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	b2db      	uxtb	r3, r3
 8003818:	4313      	orrs	r3, r2
 800381a:	b2da      	uxtb	r2, r3
 800381c:	4b82      	ldr	r3, [pc, #520]	; (8003a28 <readGRAM+0x5d8>)
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	b2db      	uxtb	r3, r3
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	b2db      	uxtb	r3, r3
 800382c:	4313      	orrs	r3, r2
 800382e:	b2da      	uxtb	r2, r3
 8003830:	4b7d      	ldr	r3, [pc, #500]	; (8003a28 <readGRAM+0x5d8>)
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800383e:	b2db      	uxtb	r3, r3
 8003840:	4313      	orrs	r3, r2
 8003842:	76fb      	strb	r3, [r7, #27]
 8003844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003848:	4877      	ldr	r0, [pc, #476]	; (8003a28 <readGRAM+0x5d8>)
 800384a:	f7fe f911 	bl	8001a70 <PIN_HIGH>
 800384e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003852:	4875      	ldr	r0, [pc, #468]	; (8003a28 <readGRAM+0x5d8>)
 8003854:	f7fe f90c 	bl	8001a70 <PIN_HIGH>
 8003858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800385c:	4872      	ldr	r0, [pc, #456]	; (8003a28 <readGRAM+0x5d8>)
 800385e:	f7fe f907 	bl	8001a70 <PIN_HIGH>
 8003862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003866:	4870      	ldr	r0, [pc, #448]	; (8003a28 <readGRAM+0x5d8>)
 8003868:	f7fe f8f2 	bl	8001a50 <PIN_LOW>
 800386c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003870:	486d      	ldr	r0, [pc, #436]	; (8003a28 <readGRAM+0x5d8>)
 8003872:	f7fe f8ed 	bl	8001a50 <PIN_LOW>
 8003876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800387a:	486b      	ldr	r0, [pc, #428]	; (8003a28 <readGRAM+0x5d8>)
 800387c:	f7fe f8e8 	bl	8001a50 <PIN_LOW>
 8003880:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003884:	4868      	ldr	r0, [pc, #416]	; (8003a28 <readGRAM+0x5d8>)
 8003886:	f7fe f8e3 	bl	8001a50 <PIN_LOW>
 800388a:	4b68      	ldr	r3, [pc, #416]	; (8003a2c <readGRAM+0x5dc>)
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	085b      	lsrs	r3, r3, #1
 8003890:	b29b      	uxth	r3, r3
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	4b65      	ldr	r3, [pc, #404]	; (8003a30 <readGRAM+0x5e0>)
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	4313      	orrs	r3, r2
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	4b61      	ldr	r3, [pc, #388]	; (8003a30 <readGRAM+0x5e0>)
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	4313      	orrs	r3, r2
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	4b5c      	ldr	r3, [pc, #368]	; (8003a30 <readGRAM+0x5e0>)
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	4313      	orrs	r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	4b56      	ldr	r3, [pc, #344]	; (8003a28 <readGRAM+0x5d8>)
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	b29b      	uxth	r3, r3
 80038de:	4313      	orrs	r3, r2
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	4b51      	ldr	r3, [pc, #324]	; (8003a28 <readGRAM+0x5d8>)
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	4313      	orrs	r3, r2
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	4b4c      	ldr	r3, [pc, #304]	; (8003a28 <readGRAM+0x5d8>)
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003902:	b29b      	uxth	r3, r3
 8003904:	4313      	orrs	r3, r2
 8003906:	b29a      	uxth	r2, r3
 8003908:	4b47      	ldr	r3, [pc, #284]	; (8003a28 <readGRAM+0x5d8>)
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	b29b      	uxth	r3, r3
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	b29b      	uxth	r3, r3
 8003912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003916:	b29b      	uxth	r3, r3
 8003918:	4313      	orrs	r3, r2
 800391a:	833b      	strh	r3, [r7, #24]
 800391c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003920:	4841      	ldr	r0, [pc, #260]	; (8003a28 <readGRAM+0x5d8>)
 8003922:	f7fe f8a5 	bl	8001a70 <PIN_HIGH>
 8003926:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800392a:	483f      	ldr	r0, [pc, #252]	; (8003a28 <readGRAM+0x5d8>)
 800392c:	f7fe f8a0 	bl	8001a70 <PIN_HIGH>
 8003930:	7efb      	ldrb	r3, [r7, #27]
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	b21a      	sxth	r2, r3
 8003936:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	b21b      	sxth	r3, r3
 800393e:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8003940:	4b3c      	ldr	r3, [pc, #240]	; (8003a34 <readGRAM+0x5e4>)
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	f241 5211 	movw	r2, #5393	; 0x1511
 8003948:	4293      	cmp	r3, r2
 800394a:	f040 8302 	bne.w	8003f52 <readGRAM+0xb02>
 800394e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003952:	4835      	ldr	r0, [pc, #212]	; (8003a28 <readGRAM+0x5d8>)
 8003954:	f7fe f88c 	bl	8001a70 <PIN_HIGH>
 8003958:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800395c:	4832      	ldr	r0, [pc, #200]	; (8003a28 <readGRAM+0x5d8>)
 800395e:	f7fe f877 	bl	8001a50 <PIN_LOW>
 8003962:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003966:	4830      	ldr	r0, [pc, #192]	; (8003a28 <readGRAM+0x5d8>)
 8003968:	f7fe f872 	bl	8001a50 <PIN_LOW>
 800396c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003970:	482d      	ldr	r0, [pc, #180]	; (8003a28 <readGRAM+0x5d8>)
 8003972:	f7fe f86d 	bl	8001a50 <PIN_LOW>
 8003976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800397a:	482b      	ldr	r0, [pc, #172]	; (8003a28 <readGRAM+0x5d8>)
 800397c:	f7fe f868 	bl	8001a50 <PIN_LOW>
 8003980:	4b2a      	ldr	r3, [pc, #168]	; (8003a2c <readGRAM+0x5dc>)
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	085b      	lsrs	r3, r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	b2da      	uxtb	r2, r3
 800398e:	4b28      	ldr	r3, [pc, #160]	; (8003a30 <readGRAM+0x5e0>)
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	0a1b      	lsrs	r3, r3, #8
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	b2db      	uxtb	r3, r3
 800399c:	4313      	orrs	r3, r2
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	4b23      	ldr	r3, [pc, #140]	; (8003a30 <readGRAM+0x5e0>)
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	4313      	orrs	r3, r2
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <readGRAM+0x5e0>)
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	4313      	orrs	r3, r2
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	4b18      	ldr	r3, [pc, #96]	; (8003a28 <readGRAM+0x5d8>)
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	4313      	orrs	r3, r2
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <readGRAM+0x5d8>)
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	085b      	lsrs	r3, r3, #1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	4313      	orrs	r3, r2
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <readGRAM+0x5d8>)
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	4313      	orrs	r3, r2
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <readGRAM+0x5d8>)
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	75fb      	strb	r3, [r7, #23]
 8003a12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a16:	4804      	ldr	r0, [pc, #16]	; (8003a28 <readGRAM+0x5d8>)
 8003a18:	f7fe f82a 	bl	8001a70 <PIN_HIGH>
 8003a1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a20:	4801      	ldr	r0, [pc, #4]	; (8003a28 <readGRAM+0x5d8>)
 8003a22:	f7fe f825 	bl	8001a70 <PIN_HIGH>
        while (n)
 8003a26:	e294      	b.n	8003f52 <readGRAM+0xb02>
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40021800 	.word	0x40021800
 8003a30:	40021400 	.word	0x40021400
 8003a34:	2000040e 	.word	0x2000040e
        {
            if (_lcd_capable & READ_24BITS)
 8003a38:	4bac      	ldr	r3, [pc, #688]	; (8003cec <readGRAM+0x89c>)
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8164 	beq.w	8003d0e <readGRAM+0x8be>
            {
                READ_8(r);
 8003a46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a4a:	48a9      	ldr	r0, [pc, #676]	; (8003cf0 <readGRAM+0x8a0>)
 8003a4c:	f7fe f810 	bl	8001a70 <PIN_HIGH>
 8003a50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a54:	48a6      	ldr	r0, [pc, #664]	; (8003cf0 <readGRAM+0x8a0>)
 8003a56:	f7fd fffb 	bl	8001a50 <PIN_LOW>
 8003a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a5e:	48a4      	ldr	r0, [pc, #656]	; (8003cf0 <readGRAM+0x8a0>)
 8003a60:	f7fd fff6 	bl	8001a50 <PIN_LOW>
 8003a64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a68:	48a1      	ldr	r0, [pc, #644]	; (8003cf0 <readGRAM+0x8a0>)
 8003a6a:	f7fd fff1 	bl	8001a50 <PIN_LOW>
 8003a6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a72:	489f      	ldr	r0, [pc, #636]	; (8003cf0 <readGRAM+0x8a0>)
 8003a74:	f7fd ffec 	bl	8001a50 <PIN_LOW>
 8003a78:	4b9e      	ldr	r3, [pc, #632]	; (8003cf4 <readGRAM+0x8a4>)
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	085b      	lsrs	r3, r3, #1
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	4b9c      	ldr	r3, [pc, #624]	; (8003cf8 <readGRAM+0x8a8>)
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	4313      	orrs	r3, r2
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	4b97      	ldr	r3, [pc, #604]	; (8003cf8 <readGRAM+0x8a8>)
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4b93      	ldr	r3, [pc, #588]	; (8003cf8 <readGRAM+0x8a8>)
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	4b8c      	ldr	r3, [pc, #560]	; (8003cf0 <readGRAM+0x8a0>)
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	4313      	orrs	r3, r2
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	4b87      	ldr	r3, [pc, #540]	; (8003cf0 <readGRAM+0x8a0>)
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	4b83      	ldr	r3, [pc, #524]	; (8003cf0 <readGRAM+0x8a0>)
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	4313      	orrs	r3, r2
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	4b7e      	ldr	r3, [pc, #504]	; (8003cf0 <readGRAM+0x8a0>)
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	4313      	orrs	r3, r2
 8003b08:	75fb      	strb	r3, [r7, #23]
 8003b0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b0e:	4878      	ldr	r0, [pc, #480]	; (8003cf0 <readGRAM+0x8a0>)
 8003b10:	f7fd ffae 	bl	8001a70 <PIN_HIGH>
 8003b14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b18:	4875      	ldr	r0, [pc, #468]	; (8003cf0 <readGRAM+0x8a0>)
 8003b1a:	f7fd ffa9 	bl	8001a70 <PIN_HIGH>
                READ_8(g);
 8003b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b22:	4873      	ldr	r0, [pc, #460]	; (8003cf0 <readGRAM+0x8a0>)
 8003b24:	f7fd ffa4 	bl	8001a70 <PIN_HIGH>
 8003b28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b2c:	4870      	ldr	r0, [pc, #448]	; (8003cf0 <readGRAM+0x8a0>)
 8003b2e:	f7fd ff8f 	bl	8001a50 <PIN_LOW>
 8003b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b36:	486e      	ldr	r0, [pc, #440]	; (8003cf0 <readGRAM+0x8a0>)
 8003b38:	f7fd ff8a 	bl	8001a50 <PIN_LOW>
 8003b3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b40:	486b      	ldr	r0, [pc, #428]	; (8003cf0 <readGRAM+0x8a0>)
 8003b42:	f7fd ff85 	bl	8001a50 <PIN_LOW>
 8003b46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b4a:	4869      	ldr	r0, [pc, #420]	; (8003cf0 <readGRAM+0x8a0>)
 8003b4c:	f7fd ff80 	bl	8001a50 <PIN_LOW>
 8003b50:	4b68      	ldr	r3, [pc, #416]	; (8003cf4 <readGRAM+0x8a4>)
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	085b      	lsrs	r3, r3, #1
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	4b66      	ldr	r3, [pc, #408]	; (8003cf8 <readGRAM+0x8a8>)
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	0a1b      	lsrs	r3, r3, #8
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	4b61      	ldr	r3, [pc, #388]	; (8003cf8 <readGRAM+0x8a8>)
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	095b      	lsrs	r3, r3, #5
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	4b5d      	ldr	r3, [pc, #372]	; (8003cf8 <readGRAM+0x8a8>)
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	4313      	orrs	r3, r2
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	4b56      	ldr	r3, [pc, #344]	; (8003cf0 <readGRAM+0x8a0>)
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	4b51      	ldr	r3, [pc, #324]	; (8003cf0 <readGRAM+0x8a0>)
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	085b      	lsrs	r3, r3, #1
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	4b4d      	ldr	r3, [pc, #308]	; (8003cf0 <readGRAM+0x8a0>)
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	4b48      	ldr	r3, [pc, #288]	; (8003cf0 <readGRAM+0x8a0>)
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	4313      	orrs	r3, r2
 8003be0:	757b      	strb	r3, [r7, #21]
 8003be2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003be6:	4842      	ldr	r0, [pc, #264]	; (8003cf0 <readGRAM+0x8a0>)
 8003be8:	f7fd ff42 	bl	8001a70 <PIN_HIGH>
 8003bec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bf0:	483f      	ldr	r0, [pc, #252]	; (8003cf0 <readGRAM+0x8a0>)
 8003bf2:	f7fd ff3d 	bl	8001a70 <PIN_HIGH>
                READ_8(b);
 8003bf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bfa:	483d      	ldr	r0, [pc, #244]	; (8003cf0 <readGRAM+0x8a0>)
 8003bfc:	f7fd ff38 	bl	8001a70 <PIN_HIGH>
 8003c00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c04:	483a      	ldr	r0, [pc, #232]	; (8003cf0 <readGRAM+0x8a0>)
 8003c06:	f7fd ff23 	bl	8001a50 <PIN_LOW>
 8003c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c0e:	4838      	ldr	r0, [pc, #224]	; (8003cf0 <readGRAM+0x8a0>)
 8003c10:	f7fd ff1e 	bl	8001a50 <PIN_LOW>
 8003c14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c18:	4835      	ldr	r0, [pc, #212]	; (8003cf0 <readGRAM+0x8a0>)
 8003c1a:	f7fd ff19 	bl	8001a50 <PIN_LOW>
 8003c1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c22:	4833      	ldr	r0, [pc, #204]	; (8003cf0 <readGRAM+0x8a0>)
 8003c24:	f7fd ff14 	bl	8001a50 <PIN_LOW>
 8003c28:	4b32      	ldr	r3, [pc, #200]	; (8003cf4 <readGRAM+0x8a4>)
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	4b30      	ldr	r3, [pc, #192]	; (8003cf8 <readGRAM+0x8a8>)
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	0a1b      	lsrs	r3, r3, #8
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	4313      	orrs	r3, r2
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	4b2b      	ldr	r3, [pc, #172]	; (8003cf8 <readGRAM+0x8a8>)
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	4313      	orrs	r3, r2
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <readGRAM+0x8a8>)
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <readGRAM+0x8a0>)
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <readGRAM+0x8a0>)
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	085b      	lsrs	r3, r3, #1
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <readGRAM+0x8a0>)
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <readGRAM+0x8a0>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	753b      	strb	r3, [r7, #20]
 8003cba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cbe:	480c      	ldr	r0, [pc, #48]	; (8003cf0 <readGRAM+0x8a0>)
 8003cc0:	f7fd fed6 	bl	8001a70 <PIN_HIGH>
 8003cc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cc8:	4809      	ldr	r0, [pc, #36]	; (8003cf0 <readGRAM+0x8a0>)
 8003cca:	f7fd fed1 	bl	8001a70 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8003cce:	4b07      	ldr	r3, [pc, #28]	; (8003cec <readGRAM+0x89c>)
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d010      	beq.n	8003cfc <readGRAM+0x8ac>
                    ret = color565(b, g, r);
 8003cda:	7dfa      	ldrb	r2, [r7, #23]
 8003cdc:	7d79      	ldrb	r1, [r7, #21]
 8003cde:	7d3b      	ldrb	r3, [r7, #20]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fd ff8d 	bl	8001c00 <color565>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003cea:	e117      	b.n	8003f1c <readGRAM+0xacc>
 8003cec:	20000400 	.word	0x20000400
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40021800 	.word	0x40021800
 8003cf8:	40021400 	.word	0x40021400
                else
                    ret = color565(r, g, b);
 8003cfc:	7d3a      	ldrb	r2, [r7, #20]
 8003cfe:	7d79      	ldrb	r1, [r7, #21]
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fd ff7c 	bl	8001c00 <color565>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d0c:	e106      	b.n	8003f1c <readGRAM+0xacc>
            } else
            {
                READ_16(ret);
 8003d0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d12:	4893      	ldr	r0, [pc, #588]	; (8003f60 <readGRAM+0xb10>)
 8003d14:	f7fd feac 	bl	8001a70 <PIN_HIGH>
 8003d18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d1c:	4890      	ldr	r0, [pc, #576]	; (8003f60 <readGRAM+0xb10>)
 8003d1e:	f7fd fe97 	bl	8001a50 <PIN_LOW>
 8003d22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d26:	488e      	ldr	r0, [pc, #568]	; (8003f60 <readGRAM+0xb10>)
 8003d28:	f7fd fe92 	bl	8001a50 <PIN_LOW>
 8003d2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d30:	488b      	ldr	r0, [pc, #556]	; (8003f60 <readGRAM+0xb10>)
 8003d32:	f7fd fe8d 	bl	8001a50 <PIN_LOW>
 8003d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d3a:	4889      	ldr	r0, [pc, #548]	; (8003f60 <readGRAM+0xb10>)
 8003d3c:	f7fd fe88 	bl	8001a50 <PIN_LOW>
 8003d40:	4b88      	ldr	r3, [pc, #544]	; (8003f64 <readGRAM+0xb14>)
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	085b      	lsrs	r3, r3, #1
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	4b86      	ldr	r3, [pc, #536]	; (8003f68 <readGRAM+0xb18>)
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	4b81      	ldr	r3, [pc, #516]	; (8003f68 <readGRAM+0xb18>)
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	4b7d      	ldr	r3, [pc, #500]	; (8003f68 <readGRAM+0xb18>)
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	4313      	orrs	r3, r2
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	4b76      	ldr	r3, [pc, #472]	; (8003f60 <readGRAM+0xb10>)
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	4313      	orrs	r3, r2
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	4b71      	ldr	r3, [pc, #452]	; (8003f60 <readGRAM+0xb10>)
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	4313      	orrs	r3, r2
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	4b6d      	ldr	r3, [pc, #436]	; (8003f60 <readGRAM+0xb10>)
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	4b68      	ldr	r3, [pc, #416]	; (8003f60 <readGRAM+0xb10>)
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	75bb      	strb	r3, [r7, #22]
 8003dd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dd6:	4862      	ldr	r0, [pc, #392]	; (8003f60 <readGRAM+0xb10>)
 8003dd8:	f7fd fe4a 	bl	8001a70 <PIN_HIGH>
 8003ddc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003de0:	485f      	ldr	r0, [pc, #380]	; (8003f60 <readGRAM+0xb10>)
 8003de2:	f7fd fe45 	bl	8001a70 <PIN_HIGH>
 8003de6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dea:	485d      	ldr	r0, [pc, #372]	; (8003f60 <readGRAM+0xb10>)
 8003dec:	f7fd fe40 	bl	8001a70 <PIN_HIGH>
 8003df0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003df4:	485a      	ldr	r0, [pc, #360]	; (8003f60 <readGRAM+0xb10>)
 8003df6:	f7fd fe2b 	bl	8001a50 <PIN_LOW>
 8003dfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dfe:	4858      	ldr	r0, [pc, #352]	; (8003f60 <readGRAM+0xb10>)
 8003e00:	f7fd fe26 	bl	8001a50 <PIN_LOW>
 8003e04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e08:	4855      	ldr	r0, [pc, #340]	; (8003f60 <readGRAM+0xb10>)
 8003e0a:	f7fd fe21 	bl	8001a50 <PIN_LOW>
 8003e0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e12:	4853      	ldr	r0, [pc, #332]	; (8003f60 <readGRAM+0xb10>)
 8003e14:	f7fd fe1c 	bl	8001a50 <PIN_LOW>
 8003e18:	4b52      	ldr	r3, [pc, #328]	; (8003f64 <readGRAM+0xb14>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	4b50      	ldr	r3, [pc, #320]	; (8003f68 <readGRAM+0xb18>)
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	4313      	orrs	r3, r2
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	4b4b      	ldr	r3, [pc, #300]	; (8003f68 <readGRAM+0xb18>)
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	4313      	orrs	r3, r2
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	4b47      	ldr	r3, [pc, #284]	; (8003f68 <readGRAM+0xb18>)
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	4b40      	ldr	r3, [pc, #256]	; (8003f60 <readGRAM+0xb10>)
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	4b3b      	ldr	r3, [pc, #236]	; (8003f60 <readGRAM+0xb10>)
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	085b      	lsrs	r3, r3, #1
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	4b37      	ldr	r3, [pc, #220]	; (8003f60 <readGRAM+0xb10>)
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	4313      	orrs	r3, r2
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	4b32      	ldr	r3, [pc, #200]	; (8003f60 <readGRAM+0xb10>)
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003eaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003eae:	482c      	ldr	r0, [pc, #176]	; (8003f60 <readGRAM+0xb10>)
 8003eb0:	f7fd fdde 	bl	8001a70 <PIN_HIGH>
 8003eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003eb8:	4829      	ldr	r0, [pc, #164]	; (8003f60 <readGRAM+0xb10>)
 8003eba:	f7fd fdd9 	bl	8001a70 <PIN_HIGH>
 8003ebe:	7dbb      	ldrb	r3, [r7, #22]
 8003ec0:	021b      	lsls	r3, r3, #8
 8003ec2:	b21a      	sxth	r2, r3
 8003ec4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	b21b      	sxth	r3, r3
 8003ecc:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 8003ece:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <readGRAM+0xb1c>)
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <readGRAM+0xa9e>
                    ret = (ret >> 8) | (ret << 8);
 8003eda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003edc:	0a1b      	lsrs	r3, r3, #8
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	b21a      	sxth	r2, r3
 8003ee2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	b21b      	sxth	r3, r3
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	b21b      	sxth	r3, r3
 8003eec:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 8003eee:	4b1f      	ldr	r3, [pc, #124]	; (8003f6c <readGRAM+0xb1c>)
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d010      	beq.n	8003f1c <readGRAM+0xacc>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 8003efa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003efe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003f02:	b21a      	sxth	r2, r3
 8003f04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f06:	0adb      	lsrs	r3, r3, #11
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	b21b      	sxth	r3, r3
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	b21a      	sxth	r2, r3
 8003f10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f12:	02db      	lsls	r3, r3, #11
 8003f14:	b21b      	sxth	r3, r3
 8003f16:	4313      	orrs	r3, r2
 8003f18:	b21b      	sxth	r3, r3
 8003f1a:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <readGRAM+0xb20>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <readGRAM+0xae0>
 8003f24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fd fe18 	bl	8001b5c <color555_to_565>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	1c9a      	adds	r2, r3, #2
 8003f34:	60ba      	str	r2, [r7, #8]
 8003f36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003f38:	801a      	strh	r2, [r3, #0]
            n--;
 8003f3a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 8003f46:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <readGRAM+0xb1c>)
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d010      	beq.n	8003f74 <readGRAM+0xb24>
        while (n)
 8003f52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f47f ad6e 	bne.w	8003a38 <readGRAM+0x5e8>
 8003f5c:	e00b      	b.n	8003f76 <readGRAM+0xb26>
 8003f5e:	bf00      	nop
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40021800 	.word	0x40021800
 8003f68:	40021400 	.word	0x40021400
 8003f6c:	20000400 	.word	0x20000400
 8003f70:	2000006e 	.word	0x2000006e
                break;
 8003f74:	bf00      	nop
        }
        if (++col >= w) {
 8003f76:	8bfb      	ldrh	r3, [r7, #30]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	83fb      	strh	r3, [r7, #30]
 8003f7e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	db0d      	blt.n	8003fa6 <readGRAM+0xb56>
            col = 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 8003f8e:	8c3b      	ldrh	r3, [r7, #32]
 8003f90:	3301      	adds	r3, #1
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	843b      	strh	r3, [r7, #32]
 8003f96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003f9a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	db01      	blt.n	8003fa6 <readGRAM+0xb56>
                row = 0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 8003fa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003faa:	4815      	ldr	r0, [pc, #84]	; (8004000 <readGRAM+0xbb0>)
 8003fac:	f7fd fd60 	bl	8001a70 <PIN_HIGH>
        CS_IDLE;
 8003fb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fb4:	4813      	ldr	r0, [pc, #76]	; (8004004 <readGRAM+0xbb4>)
 8003fb6:	f7fd fd5b 	bl	8001a70 <PIN_HIGH>
        setWriteDir();
 8003fba:	f7fd feb1 	bl	8001d20 <setWriteDir>
    while (n > 0) {
 8003fbe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f73f aa90 	bgt.w	80034e8 <readGRAM+0x98>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 8003fc8:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <readGRAM+0xbb8>)
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d110      	bne.n	8003ff6 <readGRAM+0xba6>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8003fd4:	f7fd fd8a 	bl	8001aec <width>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	b21c      	sxth	r4, r3
 8003fe0:	f7fd fd90 	bl	8001b04 <height>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	b21b      	sxth	r3, r3
 8003fec:	4622      	mov	r2, r4
 8003fee:	2100      	movs	r1, #0
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	f000 fb8f 	bl	8004714 <setAddrWindow>
    return 0;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	372c      	adds	r7, #44	; 0x2c
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd90      	pop	{r4, r7, pc}
 8004000:	40021000 	.word	0x40021000
 8004004:	40020400 	.word	0x40020400
 8004008:	20000400 	.word	0x20000400

0800400c <setRotation>:

void setRotation(uint8_t r)
{
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 8004016:	4bab      	ldr	r3, [pc, #684]	; (80042c4 <setRotation+0x2b8>)
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	b2da      	uxtb	r2, r3
 8004024:	4ba8      	ldr	r3, [pc, #672]	; (80042c8 <setRotation+0x2bc>)
 8004026:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 8004028:	4ba7      	ldr	r3, [pc, #668]	; (80042c8 <setRotation+0x2bc>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <setRotation+0x2e>
 8004034:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004038:	e000      	b.n	800403c <setRotation+0x30>
 800403a:	22f0      	movs	r2, #240	; 0xf0
 800403c:	4ba3      	ldr	r3, [pc, #652]	; (80042cc <setRotation+0x2c0>)
 800403e:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8004040:	4ba1      	ldr	r3, [pc, #644]	; (80042c8 <setRotation+0x2bc>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <setRotation+0x44>
 800404c:	22f0      	movs	r2, #240	; 0xf0
 800404e:	e001      	b.n	8004054 <setRotation+0x48>
 8004050:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004054:	4b9e      	ldr	r3, [pc, #632]	; (80042d0 <setRotation+0x2c4>)
 8004056:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 8004058:	4b9b      	ldr	r3, [pc, #620]	; (80042c8 <setRotation+0x2bc>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b03      	cmp	r3, #3
 800405e:	d817      	bhi.n	8004090 <setRotation+0x84>
 8004060:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <setRotation+0x5c>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	08004079 	.word	0x08004079
 800406c:	0800407f 	.word	0x0800407f
 8004070:	08004085 	.word	0x08004085
 8004074:	0800408b 	.word	0x0800408b
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8004078:	2348      	movs	r3, #72	; 0x48
 800407a:	72fb      	strb	r3, [r7, #11]
       break;
 800407c:	e008      	b.n	8004090 <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 800407e:	2328      	movs	r3, #40	; 0x28
 8004080:	72fb      	strb	r3, [r7, #11]
       break;
 8004082:	e005      	b.n	8004090 <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8004084:	2398      	movs	r3, #152	; 0x98
 8004086:	72fb      	strb	r3, [r7, #11]
       break;
 8004088:	e002      	b.n	8004090 <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 800408a:	23f8      	movs	r3, #248	; 0xf8
 800408c:	72fb      	strb	r3, [r7, #11]
       break;
 800408e:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8004090:	4b90      	ldr	r3, [pc, #576]	; (80042d4 <setRotation+0x2c8>)
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <setRotation+0x9c>
       val ^= 0x80;
 800409c:	7afa      	ldrb	r2, [r7, #11]
 800409e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80040a2:	4053      	eors	r3, r2
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 80040a8:	4b8a      	ldr	r3, [pc, #552]	; (80042d4 <setRotation+0x2c8>)
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d004      	beq.n	80040be <setRotation+0xb2>
       val ^= 0x40;
 80040b4:	7afb      	ldrb	r3, [r7, #11]
 80040b6:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 80040be:	4b85      	ldr	r3, [pc, #532]	; (80042d4 <setRotation+0x2c8>)
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d004      	beq.n	80040d4 <setRotation+0xc8>
       val ^= 0x08;
 80040ca:	7afb      	ldrb	r3, [r7, #11]
 80040cc:	f083 0308 	eor.w	r3, r3, #8
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 80040d4:	4b7f      	ldr	r3, [pc, #508]	; (80042d4 <setRotation+0x2c8>)
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 8119 	beq.w	8004314 <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 80040e2:	4b7d      	ldr	r3, [pc, #500]	; (80042d8 <setRotation+0x2cc>)
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	f646 0214 	movw	r2, #26644	; 0x6814
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d128      	bne.n	8004140 <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 80040ee:	7afb      	ldrb	r3, [r7, #11]
 80040f0:	b25b      	sxtb	r3, r3
 80040f2:	105b      	asrs	r3, r3, #1
 80040f4:	b25b      	sxtb	r3, r3
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fc:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 80040fe:	7afb      	ldrb	r3, [r7, #11]
 8004100:	105b      	asrs	r3, r3, #1
 8004102:	b29b      	uxth	r3, r3
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 800410a:	7afb      	ldrb	r3, [r7, #11]
 800410c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004110:	b2db      	uxtb	r3, r3
 8004112:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 8004118:	8a3b      	ldrh	r3, [r7, #16]
 800411a:	b2da      	uxtb	r2, r3
 800411c:	89fb      	ldrh	r3, [r7, #14]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	4313      	orrs	r3, r2
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f043 0302 	orr.w	r3, r3, #2
 8004128:	b2db      	uxtb	r3, r3
 800412a:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 800412c:	233b      	movs	r3, #59	; 0x3b
 800412e:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 8004130:	f107 0308 	add.w	r3, r7, #8
 8004134:	461a      	mov	r2, r3
 8004136:	2103      	movs	r1, #3
 8004138:	20b6      	movs	r0, #182	; 0xb6
 800413a:	f7fe f85d 	bl	80021f8 <WriteCmdParamN>
           goto common_MC;
 800413e:	e0a4      	b.n	800428a <setRotation+0x27e>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8004140:	4b65      	ldr	r3, [pc, #404]	; (80042d8 <setRotation+0x2cc>)
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	f641 1263 	movw	r2, #6499	; 0x1963
 8004148:	4293      	cmp	r3, r2
 800414a:	d00b      	beq.n	8004164 <setRotation+0x158>
 800414c:	4b62      	ldr	r3, [pc, #392]	; (80042d8 <setRotation+0x2cc>)
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	f249 4281 	movw	r2, #38017	; 0x9481
 8004154:	4293      	cmp	r3, r2
 8004156:	d005      	beq.n	8004164 <setRotation+0x158>
 8004158:	4b5f      	ldr	r3, [pc, #380]	; (80042d8 <setRotation+0x2cc>)
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	f241 5211 	movw	r2, #5393	; 0x1511
 8004160:	4293      	cmp	r3, r2
 8004162:	d139      	bne.n	80041d8 <setRotation+0x1cc>
           if (val & 0x80)
 8004164:	7afb      	ldrb	r3, [r7, #11]
 8004166:	b25b      	sxtb	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	da04      	bge.n	8004176 <setRotation+0x16a>
               val |= 0x01;    //GS
 800416c:	7afb      	ldrb	r3, [r7, #11]
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	b2db      	uxtb	r3, r3
 8004174:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 8004176:	7afb      	ldrb	r3, [r7, #11]
 8004178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417c:	2b00      	cmp	r3, #0
 800417e:	d004      	beq.n	800418a <setRotation+0x17e>
               val |= 0x02;    //SS
 8004180:	7afb      	ldrb	r3, [r7, #11]
 8004182:	f043 0302 	orr.w	r3, r3, #2
 8004186:	b2db      	uxtb	r3, r3
 8004188:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 800418a:	4b53      	ldr	r3, [pc, #332]	; (80042d8 <setRotation+0x2cc>)
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	f641 1263 	movw	r2, #6499	; 0x1963
 8004192:	4293      	cmp	r3, r2
 8004194:	d104      	bne.n	80041a0 <setRotation+0x194>
 8004196:	7afb      	ldrb	r3, [r7, #11]
 8004198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800419c:	b2db      	uxtb	r3, r3
 800419e:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 80041a0:	4b4d      	ldr	r3, [pc, #308]	; (80042d8 <setRotation+0x2cc>)
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	f249 4281 	movw	r2, #38017	; 0x9481
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d104      	bne.n	80041b6 <setRotation+0x1aa>
 80041ac:	7afb      	ldrb	r3, [r7, #11]
 80041ae:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 80041b6:	4b48      	ldr	r3, [pc, #288]	; (80042d8 <setRotation+0x2cc>)
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	f241 5211 	movw	r2, #5393	; 0x1511
 80041be:	4293      	cmp	r3, r2
 80041c0:	d160      	bne.n	8004284 <setRotation+0x278>
               val &= ~0x10;   //remove ML
 80041c2:	7afb      	ldrb	r3, [r7, #11]
 80041c4:	f023 0310 	bic.w	r3, r3, #16
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 80041cc:	7afb      	ldrb	r3, [r7, #11]
 80041ce:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 80041d6:	e055      	b.n	8004284 <setRotation+0x278>
      }
       else if (is8347) {
 80041d8:	4b40      	ldr	r3, [pc, #256]	; (80042dc <setRotation+0x2d0>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d053      	beq.n	8004288 <setRotation+0x27c>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 80041e0:	4b3f      	ldr	r3, [pc, #252]	; (80042e0 <setRotation+0x2d4>)
 80041e2:	2202      	movs	r2, #2
 80041e4:	801a      	strh	r2, [r3, #0]
 80041e6:	4b3f      	ldr	r3, [pc, #252]	; (80042e4 <setRotation+0x2d8>)
 80041e8:	2206      	movs	r2, #6
 80041ea:	801a      	strh	r2, [r3, #0]
 80041ec:	4b3e      	ldr	r3, [pc, #248]	; (80042e8 <setRotation+0x2dc>)
 80041ee:	2222      	movs	r2, #34	; 0x22
 80041f0:	801a      	strh	r2, [r3, #0]
 80041f2:	4b3e      	ldr	r3, [pc, #248]	; (80042ec <setRotation+0x2e0>)
 80041f4:	2202      	movs	r2, #2
 80041f6:	801a      	strh	r2, [r3, #0]
 80041f8:	4b3d      	ldr	r3, [pc, #244]	; (80042f0 <setRotation+0x2e4>)
 80041fa:	2204      	movs	r2, #4
 80041fc:	801a      	strh	r2, [r3, #0]
 80041fe:	4b3d      	ldr	r3, [pc, #244]	; (80042f4 <setRotation+0x2e8>)
 8004200:	2206      	movs	r2, #6
 8004202:	801a      	strh	r2, [r3, #0]
 8004204:	4b3c      	ldr	r3, [pc, #240]	; (80042f8 <setRotation+0x2ec>)
 8004206:	2208      	movs	r2, #8
 8004208:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 800420a:	4b33      	ldr	r3, [pc, #204]	; (80042d8 <setRotation+0x2cc>)
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	2b65      	cmp	r3, #101	; 0x65
 8004210:	d121      	bne.n	8004256 <setRotation+0x24a>
               val |= 0x01;    //GS=1
 8004212:	7afb      	ldrb	r3, [r7, #11]
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	b2db      	uxtb	r3, r3
 800421a:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 800421c:	7afb      	ldrb	r3, [r7, #11]
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2b00      	cmp	r3, #0
 8004224:	d005      	beq.n	8004232 <setRotation+0x226>
 8004226:	7afa      	ldrb	r2, [r7, #11]
 8004228:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 800422c:	4053      	eors	r3, r2
 800422e:	b2db      	uxtb	r3, r3
 8004230:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d006      	beq.n	800424a <setRotation+0x23e>
 800423c:	4b28      	ldr	r3, [pc, #160]	; (80042e0 <setRotation+0x2d4>)
 800423e:	2282      	movs	r2, #130	; 0x82
 8004240:	801a      	strh	r2, [r3, #0]
 8004242:	4b28      	ldr	r3, [pc, #160]	; (80042e4 <setRotation+0x2d8>)
 8004244:	2280      	movs	r2, #128	; 0x80
 8004246:	801a      	strh	r2, [r3, #0]
 8004248:	e005      	b.n	8004256 <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 800424a:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <setRotation+0x2d4>)
 800424c:	2280      	movs	r2, #128	; 0x80
 800424e:	801a      	strh	r2, [r3, #0]
 8004250:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <setRotation+0x2d8>)
 8004252:	2282      	movs	r2, #130	; 0x82
 8004254:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 8004256:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <setRotation+0x2cc>)
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	f245 2252 	movw	r2, #21074	; 0x5252
 800425e:	4293      	cmp	r3, r2
 8004260:	d129      	bne.n	80042b6 <setRotation+0x2aa>
               val |= 0x02;   //VERT_SCROLLON
 8004262:	7afb      	ldrb	r3, [r7, #11]
 8004264:	f043 0302 	orr.w	r3, r3, #2
 8004268:	b2db      	uxtb	r3, r3
 800426a:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 800426c:	7afb      	ldrb	r3, [r7, #11]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01f      	beq.n	80042b6 <setRotation+0x2aa>
 8004276:	7afa      	ldrb	r2, [r7, #11]
 8004278:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 800427c:	4053      	eors	r3, r2
 800427e:	b2db      	uxtb	r3, r3
 8004280:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 8004282:	e018      	b.n	80042b6 <setRotation+0x2aa>
           goto common_MC;
 8004284:	bf00      	nop
 8004286:	e000      	b.n	800428a <setRotation+0x27e>
       }
     common_MC:
 8004288:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 800428a:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <setRotation+0x2d4>)
 800428c:	222a      	movs	r2, #42	; 0x2a
 800428e:	801a      	strh	r2, [r3, #0]
 8004290:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <setRotation+0x2d8>)
 8004292:	222b      	movs	r2, #43	; 0x2b
 8004294:	801a      	strh	r2, [r3, #0]
 8004296:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <setRotation+0x2dc>)
 8004298:	222c      	movs	r2, #44	; 0x2c
 800429a:	801a      	strh	r2, [r3, #0]
 800429c:	4b13      	ldr	r3, [pc, #76]	; (80042ec <setRotation+0x2e0>)
 800429e:	222a      	movs	r2, #42	; 0x2a
 80042a0:	801a      	strh	r2, [r3, #0]
 80042a2:	4b13      	ldr	r3, [pc, #76]	; (80042f0 <setRotation+0x2e4>)
 80042a4:	222a      	movs	r2, #42	; 0x2a
 80042a6:	801a      	strh	r2, [r3, #0]
 80042a8:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <setRotation+0x2e8>)
 80042aa:	222b      	movs	r2, #43	; 0x2b
 80042ac:	801a      	strh	r2, [r3, #0]
 80042ae:	4b12      	ldr	r3, [pc, #72]	; (80042f8 <setRotation+0x2ec>)
 80042b0:	222b      	movs	r2, #43	; 0x2b
 80042b2:	801a      	strh	r2, [r3, #0]
 80042b4:	e000      	b.n	80042b8 <setRotation+0x2ac>
			goto common_BGR;
 80042b6:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 80042b8:	4b08      	ldr	r3, [pc, #32]	; (80042dc <setRotation+0x2d0>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01d      	beq.n	80042fc <setRotation+0x2f0>
 80042c0:	2316      	movs	r3, #22
 80042c2:	e01c      	b.n	80042fe <setRotation+0x2f2>
 80042c4:	20000404 	.word	0x20000404
 80042c8:	20000070 	.word	0x20000070
 80042cc:	2000002c 	.word	0x2000002c
 80042d0:	2000002e 	.word	0x2000002e
 80042d4:	20000400 	.word	0x20000400
 80042d8:	2000040e 	.word	0x2000040e
 80042dc:	2000006d 	.word	0x2000006d
 80042e0:	20000408 	.word	0x20000408
 80042e4:	20000406 	.word	0x20000406
 80042e8:	200003fe 	.word	0x200003fe
 80042ec:	2000040a 	.word	0x2000040a
 80042f0:	20000412 	.word	0x20000412
 80042f4:	20000402 	.word	0x20000402
 80042f8:	2000040c 	.word	0x2000040c
 80042fc:	2336      	movs	r3, #54	; 0x36
 80042fe:	f107 020b 	add.w	r2, r7, #11
 8004302:	2101      	movs	r1, #1
 8004304:	4618      	mov	r0, r3
 8004306:	f7fd ff77 	bl	80021f8 <WriteCmdParamN>
       _lcd_madctl = val;
 800430a:	7afb      	ldrb	r3, [r7, #11]
 800430c:	b29a      	uxth	r2, r3
 800430e:	4b73      	ldr	r3, [pc, #460]	; (80044dc <setRotation+0x4d0>)
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	e09e      	b.n	8004452 <setRotation+0x446>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8004314:	4b72      	ldr	r3, [pc, #456]	; (80044e0 <setRotation+0x4d4>)
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	f247 7293 	movw	r2, #30611	; 0x7793
 800431c:	4293      	cmp	r3, r2
 800431e:	d010      	beq.n	8004342 <setRotation+0x336>
 8004320:	f247 7293 	movw	r2, #30611	; 0x7793
 8004324:	4293      	cmp	r3, r2
 8004326:	dc04      	bgt.n	8004332 <setRotation+0x326>
 8004328:	f245 4220 	movw	r2, #21536	; 0x5420
 800432c:	4293      	cmp	r3, r2
 800432e:	d008      	beq.n	8004342 <setRotation+0x336>
 8004330:	e045      	b.n	80043be <setRotation+0x3b2>
 8004332:	f249 3226 	movw	r2, #37670	; 0x9326
 8004336:	4293      	cmp	r3, r2
 8004338:	d003      	beq.n	8004342 <setRotation+0x336>
 800433a:	f24b 5209 	movw	r2, #46345	; 0xb509
 800433e:	4293      	cmp	r3, r2
 8004340:	d13d      	bne.n	80043be <setRotation+0x3b2>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8004342:	4b68      	ldr	r3, [pc, #416]	; (80044e4 <setRotation+0x4d8>)
 8004344:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004348:	801a      	strh	r2, [r3, #0]
 800434a:	4b67      	ldr	r3, [pc, #412]	; (80044e8 <setRotation+0x4dc>)
 800434c:	f240 2201 	movw	r2, #513	; 0x201
 8004350:	801a      	strh	r2, [r3, #0]
 8004352:	4b66      	ldr	r3, [pc, #408]	; (80044ec <setRotation+0x4e0>)
 8004354:	f240 2202 	movw	r2, #514	; 0x202
 8004358:	801a      	strh	r2, [r3, #0]
 800435a:	4b65      	ldr	r3, [pc, #404]	; (80044f0 <setRotation+0x4e4>)
 800435c:	f44f 7204 	mov.w	r2, #528	; 0x210
 8004360:	801a      	strh	r2, [r3, #0]
 8004362:	4b64      	ldr	r3, [pc, #400]	; (80044f4 <setRotation+0x4e8>)
 8004364:	f240 2211 	movw	r2, #529	; 0x211
 8004368:	801a      	strh	r2, [r3, #0]
 800436a:	4b63      	ldr	r3, [pc, #396]	; (80044f8 <setRotation+0x4ec>)
 800436c:	f240 2212 	movw	r2, #530	; 0x212
 8004370:	801a      	strh	r2, [r3, #0]
 8004372:	4b62      	ldr	r3, [pc, #392]	; (80044fc <setRotation+0x4f0>)
 8004374:	f240 2213 	movw	r2, #531	; 0x213
 8004378:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 800437a:	7afb      	ldrb	r3, [r7, #11]
 800437c:	b25b      	sxtb	r3, r3
 800437e:	b29a      	uxth	r2, r3
 8004380:	4b5f      	ldr	r3, [pc, #380]	; (8004500 <setRotation+0x4f4>)
 8004382:	4013      	ands	r3, r2
 8004384:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8004386:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800438a:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 800438c:	4b54      	ldr	r3, [pc, #336]	; (80044e0 <setRotation+0x4d4>)
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	f249 3226 	movw	r2, #37670	; 0x9326
 8004394:	4293      	cmp	r3, r2
 8004396:	d005      	beq.n	80043a4 <setRotation+0x398>
 8004398:	4b51      	ldr	r3, [pc, #324]	; (80044e0 <setRotation+0x4d4>)
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	f245 4220 	movw	r2, #21536	; 0x5420
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d102      	bne.n	80043aa <setRotation+0x39e>
 80043a4:	8abb      	ldrh	r3, [r7, #20]
 80043a6:	085b      	lsrs	r3, r3, #1
 80043a8:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 80043aa:	8a3a      	ldrh	r2, [r7, #16]
 80043ac:	8abb      	ldrh	r3, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	4619      	mov	r1, r3
 80043b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80043b8:	f7fd fc60 	bl	8001c7c <WriteCmdData>
           goto common_SS;
 80043bc:	e022      	b.n	8004404 <setRotation+0x3f8>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 80043be:	4b49      	ldr	r3, [pc, #292]	; (80044e4 <setRotation+0x4d8>)
 80043c0:	2220      	movs	r2, #32
 80043c2:	801a      	strh	r2, [r3, #0]
 80043c4:	4b48      	ldr	r3, [pc, #288]	; (80044e8 <setRotation+0x4dc>)
 80043c6:	2221      	movs	r2, #33	; 0x21
 80043c8:	801a      	strh	r2, [r3, #0]
 80043ca:	4b48      	ldr	r3, [pc, #288]	; (80044ec <setRotation+0x4e0>)
 80043cc:	2222      	movs	r2, #34	; 0x22
 80043ce:	801a      	strh	r2, [r3, #0]
 80043d0:	4b47      	ldr	r3, [pc, #284]	; (80044f0 <setRotation+0x4e4>)
 80043d2:	2250      	movs	r2, #80	; 0x50
 80043d4:	801a      	strh	r2, [r3, #0]
 80043d6:	4b47      	ldr	r3, [pc, #284]	; (80044f4 <setRotation+0x4e8>)
 80043d8:	2251      	movs	r2, #81	; 0x51
 80043da:	801a      	strh	r2, [r3, #0]
 80043dc:	4b46      	ldr	r3, [pc, #280]	; (80044f8 <setRotation+0x4ec>)
 80043de:	2252      	movs	r2, #82	; 0x52
 80043e0:	801a      	strh	r2, [r3, #0]
 80043e2:	4b46      	ldr	r3, [pc, #280]	; (80044fc <setRotation+0x4f0>)
 80043e4:	2253      	movs	r2, #83	; 0x53
 80043e6:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 80043e8:	7afb      	ldrb	r3, [r7, #11]
 80043ea:	b25b      	sxtb	r3, r3
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	4b44      	ldr	r3, [pc, #272]	; (8004500 <setRotation+0x4f4>)
 80043f0:	4013      	ands	r3, r2
 80043f2:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 80043f4:	8a3b      	ldrh	r3, [r7, #16]
 80043f6:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	4619      	mov	r1, r3
 80043fe:	2060      	movs	r0, #96	; 0x60
 8004400:	f7fd fc3c 	bl	8001c7c <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 8004404:	7afb      	ldrb	r3, [r7, #11]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	b29b      	uxth	r3, r3
 800440a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440e:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8004410:	89fb      	ldrh	r3, [r7, #14]
 8004412:	4619      	mov	r1, r3
 8004414:	2001      	movs	r0, #1
 8004416:	f7fd fc31 	bl	8001c7c <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 800441a:	7afb      	ldrb	r3, [r7, #11]
 800441c:	109b      	asrs	r3, r3, #2
 800441e:	b29b      	uxth	r3, r3
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 8004426:	7afb      	ldrb	r3, [r7, #11]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <setRotation+0x42c>
               ORG |= 0x1000;  //BGR
 8004430:	8afb      	ldrh	r3, [r7, #22]
 8004432:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004436:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 8004438:	8afb      	ldrh	r3, [r7, #22]
 800443a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800443e:	b29a      	uxth	r2, r3
 8004440:	4b26      	ldr	r3, [pc, #152]	; (80044dc <setRotation+0x4d0>)
 8004442:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8004444:	4b25      	ldr	r3, [pc, #148]	; (80044dc <setRotation+0x4d0>)
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	4619      	mov	r1, r3
 800444a:	2003      	movs	r0, #3
 800444c:	f7fd fc16 	bl	8001c7c <WriteCmdData>
           break;
 8004450:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8004452:	4b2c      	ldr	r3, [pc, #176]	; (8004504 <setRotation+0x4f8>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d023      	beq.n	80044a6 <setRotation+0x49a>
 800445e:	4b2a      	ldr	r3, [pc, #168]	; (8004508 <setRotation+0x4fc>)
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004466:	2b00      	cmp	r3, #0
 8004468:	d11d      	bne.n	80044a6 <setRotation+0x49a>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 800446a:	4b1e      	ldr	r3, [pc, #120]	; (80044e4 <setRotation+0x4d8>)
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	81bb      	strh	r3, [r7, #12]
 8004470:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <setRotation+0x4dc>)
 8004472:	881a      	ldrh	r2, [r3, #0]
 8004474:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <setRotation+0x4d8>)
 8004476:	801a      	strh	r2, [r3, #0]
 8004478:	4a1b      	ldr	r2, [pc, #108]	; (80044e8 <setRotation+0x4dc>)
 800447a:	89bb      	ldrh	r3, [r7, #12]
 800447c:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 800447e:	4b1c      	ldr	r3, [pc, #112]	; (80044f0 <setRotation+0x4e4>)
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	81bb      	strh	r3, [r7, #12]
 8004484:	4b1c      	ldr	r3, [pc, #112]	; (80044f8 <setRotation+0x4ec>)
 8004486:	881a      	ldrh	r2, [r3, #0]
 8004488:	4b19      	ldr	r3, [pc, #100]	; (80044f0 <setRotation+0x4e4>)
 800448a:	801a      	strh	r2, [r3, #0]
 800448c:	4a1a      	ldr	r2, [pc, #104]	; (80044f8 <setRotation+0x4ec>)
 800448e:	89bb      	ldrh	r3, [r7, #12]
 8004490:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8004492:	4b18      	ldr	r3, [pc, #96]	; (80044f4 <setRotation+0x4e8>)
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	81bb      	strh	r3, [r7, #12]
 8004498:	4b18      	ldr	r3, [pc, #96]	; (80044fc <setRotation+0x4f0>)
 800449a:	881a      	ldrh	r2, [r3, #0]
 800449c:	4b15      	ldr	r3, [pc, #84]	; (80044f4 <setRotation+0x4e8>)
 800449e:	801a      	strh	r2, [r3, #0]
 80044a0:	4a16      	ldr	r2, [pc, #88]	; (80044fc <setRotation+0x4f0>)
 80044a2:	89bb      	ldrh	r3, [r7, #12]
 80044a4:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 80044a6:	f7fd fb21 	bl	8001aec <width>
 80044aa:	4603      	mov	r3, r0
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	b21c      	sxth	r4, r3
 80044b2:	f7fd fb27 	bl	8001b04 <height>
 80044b6:	4603      	mov	r3, r0
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	b21b      	sxth	r3, r3
 80044be:	4622      	mov	r2, r4
 80044c0:	2100      	movs	r1, #0
 80044c2:	2000      	movs	r0, #0
 80044c4:	f000 f926 	bl	8004714 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 80044c8:	2200      	movs	r2, #0
 80044ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80044ce:	2000      	movs	r0, #0
 80044d0:	f000 fa44 	bl	800495c <vertScroll>
}
 80044d4:	bf00      	nop
 80044d6:	371c      	adds	r7, #28
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd90      	pop	{r4, r7, pc}
 80044dc:	20000414 	.word	0x20000414
 80044e0:	2000040e 	.word	0x2000040e
 80044e4:	20000408 	.word	0x20000408
 80044e8:	20000406 	.word	0x20000406
 80044ec:	200003fe 	.word	0x200003fe
 80044f0:	2000040a 	.word	0x2000040a
 80044f4:	20000412 	.word	0x20000412
 80044f8:	20000402 	.word	0x20000402
 80044fc:	2000040c 	.word	0x2000040c
 8004500:	ffff8000 	.word	0xffff8000
 8004504:	20000070 	.word	0x20000070
 8004508:	20000400 	.word	0x20000400

0800450c <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	80fb      	strh	r3, [r7, #6]
 8004516:	460b      	mov	r3, r1
 8004518:	80bb      	strh	r3, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 800451e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004522:	2b00      	cmp	r3, #0
 8004524:	f2c0 80e3 	blt.w	80046ee <drawPixel+0x1e2>
 8004528:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f2c0 80de 	blt.w	80046ee <drawPixel+0x1e2>
 8004532:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8004536:	f7fd fad9 	bl	8001aec <width>
 800453a:	4603      	mov	r3, r0
 800453c:	429c      	cmp	r4, r3
 800453e:	f280 80d6 	bge.w	80046ee <drawPixel+0x1e2>
 8004542:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8004546:	f7fd fadd 	bl	8001b04 <height>
 800454a:	4603      	mov	r3, r0
 800454c:	429c      	cmp	r4, r3
 800454e:	f280 80ce 	bge.w	80046ee <drawPixel+0x1e2>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 8004552:	4b69      	ldr	r3, [pc, #420]	; (80046f8 <drawPixel+0x1ec>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <drawPixel+0x5a>
 800455a:	887b      	ldrh	r3, [r7, #2]
 800455c:	4618      	mov	r0, r3
 800455e:	f7fd fadd 	bl	8001b1c <color565_to_555>
 8004562:	4603      	mov	r3, r0
 8004564:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 8004566:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800456a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800456e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004572:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004576:	f000 f8cd 	bl	8004714 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 800457a:	4b60      	ldr	r3, [pc, #384]	; (80046fc <drawPixel+0x1f0>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 80ad 	beq.w	80046de <drawPixel+0x1d2>
 8004584:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004588:	485d      	ldr	r0, [pc, #372]	; (8004700 <drawPixel+0x1f4>)
 800458a:	f7fd fa61 	bl	8001a50 <PIN_LOW>
 800458e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004592:	485c      	ldr	r0, [pc, #368]	; (8004704 <drawPixel+0x1f8>)
 8004594:	f7fd fa5c 	bl	8001a50 <PIN_LOW>
 8004598:	4b5b      	ldr	r3, [pc, #364]	; (8004708 <drawPixel+0x1fc>)
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	0a1b      	lsrs	r3, r3, #8
 800459e:	b29b      	uxth	r3, r3
 80045a0:	73fb      	strb	r3, [r7, #15]
 80045a2:	4b59      	ldr	r3, [pc, #356]	; (8004708 <drawPixel+0x1fc>)
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	73bb      	strb	r3, [r7, #14]
 80045a8:	4b56      	ldr	r3, [pc, #344]	; (8004704 <drawPixel+0x1f8>)
 80045aa:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80045ae:	619a      	str	r2, [r3, #24]
 80045b0:	4b56      	ldr	r3, [pc, #344]	; (800470c <drawPixel+0x200>)
 80045b2:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80045b6:	619a      	str	r2, [r3, #24]
 80045b8:	4b55      	ldr	r3, [pc, #340]	; (8004710 <drawPixel+0x204>)
 80045ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045be:	619a      	str	r2, [r3, #24]
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	4a52      	ldr	r2, [pc, #328]	; (8004710 <drawPixel+0x204>)
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	6193      	str	r3, [r2, #24]
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	015b      	lsls	r3, r3, #5
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	431a      	orrs	r2, r3
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	015b      	lsls	r3, r3, #5
 80045e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e6:	431a      	orrs	r2, r3
 80045e8:	4b48      	ldr	r3, [pc, #288]	; (800470c <drawPixel+0x200>)
 80045ea:	619a      	str	r2, [r3, #24]
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	105b      	asrs	r3, r3, #1
 80045f0:	f003 0208 	and.w	r2, r3, #8
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fc:	431a      	orrs	r2, r3
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	105b      	asrs	r3, r3, #1
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	431a      	orrs	r2, r3
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	10db      	asrs	r3, r3, #3
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	431a      	orrs	r2, r3
 8004612:	4b3c      	ldr	r3, [pc, #240]	; (8004704 <drawPixel+0x1f8>)
 8004614:	619a      	str	r2, [r3, #24]
 8004616:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800461a:	483a      	ldr	r0, [pc, #232]	; (8004704 <drawPixel+0x1f8>)
 800461c:	f7fd fa18 	bl	8001a50 <PIN_LOW>
 8004620:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004624:	4837      	ldr	r0, [pc, #220]	; (8004704 <drawPixel+0x1f8>)
 8004626:	f7fd fa23 	bl	8001a70 <PIN_HIGH>
 800462a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800462e:	4835      	ldr	r0, [pc, #212]	; (8004704 <drawPixel+0x1f8>)
 8004630:	f7fd fa1e 	bl	8001a70 <PIN_HIGH>
 8004634:	4b33      	ldr	r3, [pc, #204]	; (8004704 <drawPixel+0x1f8>)
 8004636:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800463a:	619a      	str	r2, [r3, #24]
 800463c:	4b33      	ldr	r3, [pc, #204]	; (800470c <drawPixel+0x200>)
 800463e:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8004642:	619a      	str	r2, [r3, #24]
 8004644:	4b32      	ldr	r3, [pc, #200]	; (8004710 <drawPixel+0x204>)
 8004646:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800464a:	619a      	str	r2, [r3, #24]
 800464c:	7bbb      	ldrb	r3, [r7, #14]
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4a2f      	ldr	r2, [pc, #188]	; (8004710 <drawPixel+0x204>)
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	6193      	str	r3, [r2, #24]
 8004658:	7bbb      	ldrb	r3, [r7, #14]
 800465a:	021b      	lsls	r3, r3, #8
 800465c:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8004660:	7bbb      	ldrb	r3, [r7, #14]
 8004662:	015b      	lsls	r3, r3, #5
 8004664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004668:	431a      	orrs	r2, r3
 800466a:	7bbb      	ldrb	r3, [r7, #14]
 800466c:	015b      	lsls	r3, r3, #5
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	431a      	orrs	r2, r3
 8004674:	4b25      	ldr	r3, [pc, #148]	; (800470c <drawPixel+0x200>)
 8004676:	619a      	str	r2, [r3, #24]
 8004678:	7bbb      	ldrb	r3, [r7, #14]
 800467a:	105b      	asrs	r3, r3, #1
 800467c:	f003 0208 	and.w	r2, r3, #8
 8004680:	7bbb      	ldrb	r3, [r7, #14]
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	431a      	orrs	r2, r3
 800468a:	7bbb      	ldrb	r3, [r7, #14]
 800468c:	105b      	asrs	r3, r3, #1
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	431a      	orrs	r2, r3
 8004694:	7bbb      	ldrb	r3, [r7, #14]
 8004696:	10db      	asrs	r3, r3, #3
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	431a      	orrs	r2, r3
 800469e:	4b19      	ldr	r3, [pc, #100]	; (8004704 <drawPixel+0x1f8>)
 80046a0:	619a      	str	r2, [r3, #24]
 80046a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046a6:	4817      	ldr	r0, [pc, #92]	; (8004704 <drawPixel+0x1f8>)
 80046a8:	f7fd f9d2 	bl	8001a50 <PIN_LOW>
 80046ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046b0:	4814      	ldr	r0, [pc, #80]	; (8004704 <drawPixel+0x1f8>)
 80046b2:	f7fd f9dd 	bl	8001a70 <PIN_HIGH>
 80046b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046ba:	4812      	ldr	r0, [pc, #72]	; (8004704 <drawPixel+0x1f8>)
 80046bc:	f7fd f9d8 	bl	8001a70 <PIN_HIGH>
 80046c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046c4:	480f      	ldr	r0, [pc, #60]	; (8004704 <drawPixel+0x1f8>)
 80046c6:	f7fd f9d3 	bl	8001a70 <PIN_HIGH>
 80046ca:	887b      	ldrh	r3, [r7, #2]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fd fb53 	bl	8001d78 <write24>
 80046d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046d6:	480a      	ldr	r0, [pc, #40]	; (8004700 <drawPixel+0x1f4>)
 80046d8:	f7fd f9ca 	bl	8001a70 <PIN_HIGH>
 80046dc:	e008      	b.n	80046f0 <drawPixel+0x1e4>
   WriteCmdData(_MW, color);
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <drawPixel+0x1fc>)
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	887a      	ldrh	r2, [r7, #2]
 80046e4:	4611      	mov	r1, r2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fd fac8 	bl	8001c7c <WriteCmdData>
 80046ec:	e000      	b.n	80046f0 <drawPixel+0x1e4>
       return;
 80046ee:	bf00      	nop
}
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd90      	pop	{r4, r7, pc}
 80046f6:	bf00      	nop
 80046f8:	2000006e 	.word	0x2000006e
 80046fc:	2000006f 	.word	0x2000006f
 8004700:	40020400 	.word	0x40020400
 8004704:	40021000 	.word	0x40021000
 8004708:	200003fe 	.word	0x200003fe
 800470c:	40021400 	.word	0x40021400
 8004710:	40021800 	.word	0x40021800

08004714 <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8004714:	b590      	push	{r4, r7, lr}
 8004716:	b087      	sub	sp, #28
 8004718:	af02      	add	r7, sp, #8
 800471a:	4604      	mov	r4, r0
 800471c:	4608      	mov	r0, r1
 800471e:	4611      	mov	r1, r2
 8004720:	461a      	mov	r2, r3
 8004722:	4623      	mov	r3, r4
 8004724:	80fb      	strh	r3, [r7, #6]
 8004726:	4603      	mov	r3, r0
 8004728:	80bb      	strh	r3, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	807b      	strh	r3, [r7, #2]
 800472e:	4613      	mov	r3, r2
 8004730:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8004732:	4b80      	ldr	r3, [pc, #512]	; (8004934 <setAddrWindow+0x220>)
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	f249 3227 	movw	r2, #37671	; 0x9327
 800473a:	4293      	cmp	r3, r2
 800473c:	d117      	bne.n	800476e <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 800473e:	4b7e      	ldr	r3, [pc, #504]	; (8004938 <setAddrWindow+0x224>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d107      	bne.n	8004756 <setAddrWindow+0x42>
 8004746:	88bb      	ldrh	r3, [r7, #4]
 8004748:	3320      	adds	r3, #32
 800474a:	b29b      	uxth	r3, r3
 800474c:	80bb      	strh	r3, [r7, #4]
 800474e:	883b      	ldrh	r3, [r7, #0]
 8004750:	3320      	adds	r3, #32
 8004752:	b29b      	uxth	r3, r3
 8004754:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8004756:	4b78      	ldr	r3, [pc, #480]	; (8004938 <setAddrWindow+0x224>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b03      	cmp	r3, #3
 800475c:	d107      	bne.n	800476e <setAddrWindow+0x5a>
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	3320      	adds	r3, #32
 8004762:	b29b      	uxth	r3, r3
 8004764:	80fb      	strh	r3, [r7, #6]
 8004766:	887b      	ldrh	r3, [r7, #2]
 8004768:	3320      	adds	r3, #32
 800476a:	b29b      	uxth	r3, r3
 800476c:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 800476e:	4b71      	ldr	r3, [pc, #452]	; (8004934 <setAddrWindow+0x220>)
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	f241 5226 	movw	r2, #5414	; 0x1526
 8004776:	4293      	cmp	r3, r2
 8004778:	d128      	bne.n	80047cc <setAddrWindow+0xb8>
 800477a:	4b6f      	ldr	r3, [pc, #444]	; (8004938 <setAddrWindow+0x224>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d022      	beq.n	80047cc <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8004786:	887a      	ldrh	r2, [r7, #2]
 8004788:	88fb      	ldrh	r3, [r7, #6]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	b29b      	uxth	r3, r3
 800478e:	81fb      	strh	r3, [r7, #14]
 8004790:	883a      	ldrh	r2, [r7, #0]
 8004792:	88bb      	ldrh	r3, [r7, #4]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	b29b      	uxth	r3, r3
 8004798:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 800479a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <setAddrWindow+0x9c>
 80047a2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3301      	adds	r3, #1
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	803b      	strh	r3, [r7, #0]
 80047ae:	e00d      	b.n	80047cc <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 80047b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d109      	bne.n	80047cc <setAddrWindow+0xb8>
 80047b8:	887a      	ldrh	r2, [r7, #2]
 80047ba:	89bb      	ldrh	r3, [r7, #12]
 80047bc:	4413      	add	r3, r2
 80047be:	b29b      	uxth	r3, r3
 80047c0:	807b      	strh	r3, [r7, #2]
 80047c2:	883a      	ldrh	r2, [r7, #0]
 80047c4:	89bb      	ldrh	r3, [r7, #12]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 80047cc:	4b5b      	ldr	r3, [pc, #364]	; (800493c <setAddrWindow+0x228>)
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d054      	beq.n	8004882 <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 80047d8:	4b59      	ldr	r3, [pc, #356]	; (8004940 <setAddrWindow+0x22c>)
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	b2d8      	uxtb	r0, r3
 80047de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047e2:	121b      	asrs	r3, r3, #8
 80047e4:	b21b      	sxth	r3, r3
 80047e6:	b2d9      	uxtb	r1, r3
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047f0:	121b      	asrs	r3, r3, #8
 80047f2:	b21b      	sxth	r3, r3
 80047f4:	b2dc      	uxtb	r4, r3
 80047f6:	887b      	ldrh	r3, [r7, #2]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	4623      	mov	r3, r4
 80047fe:	f7fd febd 	bl	800257c <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8004802:	4b50      	ldr	r3, [pc, #320]	; (8004944 <setAddrWindow+0x230>)
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b2d8      	uxtb	r0, r3
 8004808:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800480c:	121b      	asrs	r3, r3, #8
 800480e:	b21b      	sxth	r3, r3
 8004810:	b2d9      	uxtb	r1, r3
 8004812:	88bb      	ldrh	r3, [r7, #4]
 8004814:	b2da      	uxtb	r2, r3
 8004816:	f9b7 3000 	ldrsh.w	r3, [r7]
 800481a:	121b      	asrs	r3, r3, #8
 800481c:	b21b      	sxth	r3, r3
 800481e:	b2dc      	uxtb	r4, r3
 8004820:	883b      	ldrh	r3, [r7, #0]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	4623      	mov	r3, r4
 8004828:	f7fd fea8 	bl	800257c <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 800482c:	4b46      	ldr	r3, [pc, #280]	; (8004948 <setAddrWindow+0x234>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d07b      	beq.n	800492c <setAddrWindow+0x218>
 8004834:	4b3f      	ldr	r3, [pc, #252]	; (8004934 <setAddrWindow+0x220>)
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	2b65      	cmp	r3, #101	; 0x65
 800483a:	d177      	bne.n	800492c <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 800483c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004840:	121b      	asrs	r3, r3, #8
 8004842:	b21b      	sxth	r3, r3
 8004844:	b2db      	uxtb	r3, r3
 8004846:	723b      	strb	r3, [r7, #8]
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 800484e:	4b3f      	ldr	r3, [pc, #252]	; (800494c <setAddrWindow+0x238>)
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	f107 0208 	add.w	r2, r7, #8
 8004856:	2102      	movs	r1, #2
 8004858:	4618      	mov	r0, r3
 800485a:	f7fd fccd 	bl	80021f8 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 800485e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004862:	121b      	asrs	r3, r3, #8
 8004864:	b21b      	sxth	r3, r3
 8004866:	b2db      	uxtb	r3, r3
 8004868:	723b      	strb	r3, [r7, #8]
 800486a:	88bb      	ldrh	r3, [r7, #4]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8004870:	4b37      	ldr	r3, [pc, #220]	; (8004950 <setAddrWindow+0x23c>)
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	f107 0208 	add.w	r2, r7, #8
 8004878:	2102      	movs	r1, #2
 800487a:	4618      	mov	r0, r3
 800487c:	f7fd fcbc 	bl	80021f8 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8004880:	e054      	b.n	800492c <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 8004882:	4b32      	ldr	r3, [pc, #200]	; (800494c <setAddrWindow+0x238>)
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	88fa      	ldrh	r2, [r7, #6]
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f7fd f9f6 	bl	8001c7c <WriteCmdData>
       WriteCmdData(_MP, y);
 8004890:	4b2f      	ldr	r3, [pc, #188]	; (8004950 <setAddrWindow+0x23c>)
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	88ba      	ldrh	r2, [r7, #4]
 8004896:	4611      	mov	r1, r2
 8004898:	4618      	mov	r0, r3
 800489a:	f7fd f9ef 	bl	8001c7c <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 800489e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80048a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d105      	bne.n	80048b6 <setAddrWindow+0x1a2>
 80048aa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80048ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d03a      	beq.n	800492c <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 80048b6:	4b21      	ldr	r3, [pc, #132]	; (800493c <setAddrWindow+0x228>)
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d018      	beq.n	80048f4 <setAddrWindow+0x1e0>
               if (rotation & 1)
 80048c2:	4b1d      	ldr	r3, [pc, #116]	; (8004938 <setAddrWindow+0x224>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d009      	beq.n	80048e2 <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 80048ce:	f9b7 3000 	ldrsh.w	r3, [r7]
 80048d2:	021b      	lsls	r3, r3, #8
 80048d4:	b21a      	sxth	r2, r3
 80048d6:	88bb      	ldrh	r3, [r7, #4]
 80048d8:	4313      	orrs	r3, r2
 80048da:	80bb      	strh	r3, [r7, #4]
 80048dc:	88bb      	ldrh	r3, [r7, #4]
 80048de:	803b      	strh	r3, [r7, #0]
 80048e0:	e008      	b.n	80048f4 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 80048e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048e6:	021b      	lsls	r3, r3, #8
 80048e8:	b21a      	sxth	r2, r3
 80048ea:	88fb      	ldrh	r3, [r7, #6]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	80fb      	strh	r3, [r7, #6]
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 80048f4:	4b12      	ldr	r3, [pc, #72]	; (8004940 <setAddrWindow+0x22c>)
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	88fa      	ldrh	r2, [r7, #6]
 80048fa:	4611      	mov	r1, r2
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fd f9bd 	bl	8001c7c <WriteCmdData>
           WriteCmdData(_SP, y);
 8004902:	4b10      	ldr	r3, [pc, #64]	; (8004944 <setAddrWindow+0x230>)
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	88ba      	ldrh	r2, [r7, #4]
 8004908:	4611      	mov	r1, r2
 800490a:	4618      	mov	r0, r3
 800490c:	f7fd f9b6 	bl	8001c7c <WriteCmdData>
           WriteCmdData(_EC, x1);
 8004910:	4b10      	ldr	r3, [pc, #64]	; (8004954 <setAddrWindow+0x240>)
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	887a      	ldrh	r2, [r7, #2]
 8004916:	4611      	mov	r1, r2
 8004918:	4618      	mov	r0, r3
 800491a:	f7fd f9af 	bl	8001c7c <WriteCmdData>
           WriteCmdData(_EP, y1);
 800491e:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <setAddrWindow+0x244>)
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	883a      	ldrh	r2, [r7, #0]
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f7fd f9a8 	bl	8001c7c <WriteCmdData>
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	bd90      	pop	{r4, r7, pc}
 8004934:	2000040e 	.word	0x2000040e
 8004938:	20000070 	.word	0x20000070
 800493c:	20000400 	.word	0x20000400
 8004940:	2000040a 	.word	0x2000040a
 8004944:	20000402 	.word	0x20000402
 8004948:	2000006d 	.word	0x2000006d
 800494c:	20000408 	.word	0x20000408
 8004950:	20000406 	.word	0x20000406
 8004954:	20000412 	.word	0x20000412
 8004958:	2000040c 	.word	0x2000040c

0800495c <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	80fb      	strh	r3, [r7, #6]
 8004966:	460b      	mov	r3, r1
 8004968:	80bb      	strh	r3, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 800496e:	4b89      	ldr	r3, [pc, #548]	; (8004b94 <vertScroll+0x238>)
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	f249 3227 	movw	r2, #37671	; 0x9327
 8004976:	4293      	cmp	r3, r2
 8004978:	d10b      	bne.n	8004992 <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 800497a:	4b87      	ldr	r3, [pc, #540]	; (8004b98 <vertScroll+0x23c>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d003      	beq.n	800498a <vertScroll+0x2e>
 8004982:	4b85      	ldr	r3, [pc, #532]	; (8004b98 <vertScroll+0x23c>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b03      	cmp	r3, #3
 8004988:	d103      	bne.n	8004992 <vertScroll+0x36>
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	3320      	adds	r3, #32
 800498e:	b29b      	uxth	r3, r3
 8004990:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8004992:	88fb      	ldrh	r3, [r7, #6]
 8004994:	425b      	negs	r3, r3
 8004996:	b29a      	uxth	r2, r3
 8004998:	88bb      	ldrh	r3, [r7, #4]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	b29b      	uxth	r3, r3
 800499e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 80049aa:	4b7a      	ldr	r3, [pc, #488]	; (8004b94 <vertScroll+0x238>)
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	f249 3227 	movw	r2, #37671	; 0x9327
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d103      	bne.n	80049be <vertScroll+0x62>
 80049b6:	8afb      	ldrh	r3, [r7, #22]
 80049b8:	3320      	adds	r3, #32
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 80049be:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80049c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80049c6:	425b      	negs	r3, r3
 80049c8:	429a      	cmp	r2, r3
 80049ca:	dd05      	ble.n	80049d8 <vertScroll+0x7c>
 80049cc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80049d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	db01      	blt.n	80049dc <vertScroll+0x80>
 80049d8:	2300      	movs	r3, #0
 80049da:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 80049dc:	88fa      	ldrh	r2, [r7, #6]
 80049de:	887b      	ldrh	r3, [r7, #2]
 80049e0:	4413      	add	r3, r2
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 80049e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	da04      	bge.n	80049f8 <vertScroll+0x9c>
        vsp += scrollines;          //keep in unsigned range
 80049ee:	8aba      	ldrh	r2, [r7, #20]
 80049f0:	88bb      	ldrh	r3, [r7, #4]
 80049f2:	4413      	add	r3, r2
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 80049f8:	88fa      	ldrh	r2, [r7, #6]
 80049fa:	88bb      	ldrh	r3, [r7, #4]
 80049fc:	4413      	add	r3, r2
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8004a06:	4b65      	ldr	r3, [pc, #404]	; (8004b9c <vertScroll+0x240>)
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d072      	beq.n	8004af8 <vertScroll+0x19c>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8004a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a16:	121b      	asrs	r3, r3, #8
 8004a18:	b21b      	sxth	r3, r3
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 8004a24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004a28:	121b      	asrs	r3, r3, #8
 8004a2a:	b21b      	sxth	r3, r3
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 8004a30:	88bb      	ldrh	r3, [r7, #4]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 8004a36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004a3a:	121b      	asrs	r3, r3, #8
 8004a3c:	b21b      	sxth	r3, r3
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 8004a42:	8afb      	ldrh	r3, [r7, #22]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8004a48:	4b55      	ldr	r3, [pc, #340]	; (8004ba0 <vertScroll+0x244>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <vertScroll+0xf8>
 8004a50:	230e      	movs	r3, #14
 8004a52:	e000      	b.n	8004a56 <vertScroll+0xfa>
 8004a54:	2333      	movs	r3, #51	; 0x33
 8004a56:	f107 020c 	add.w	r2, r7, #12
 8004a5a:	2106      	movs	r1, #6
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fd fbcb 	bl	80021f8 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 8004a62:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a66:	121b      	asrs	r3, r3, #8
 8004a68:	b21b      	sxth	r3, r3
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 8004a6e:	8abb      	ldrh	r3, [r7, #20]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8004a74:	4b4a      	ldr	r3, [pc, #296]	; (8004ba0 <vertScroll+0x244>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <vertScroll+0x124>
 8004a7c:	2314      	movs	r3, #20
 8004a7e:	e000      	b.n	8004a82 <vertScroll+0x126>
 8004a80:	2337      	movs	r3, #55	; 0x37
 8004a82:	f107 020c 	add.w	r2, r7, #12
 8004a86:	2102      	movs	r1, #2
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fd fbb5 	bl	80021f8 <WriteCmdParamN>
		if (is8347) {
 8004a8e:	4b44      	ldr	r3, [pc, #272]	; (8004ba0 <vertScroll+0x244>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01f      	beq.n	8004ad6 <vertScroll+0x17a>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8004a96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <vertScroll+0x156>
 8004a9e:	4b3d      	ldr	r3, [pc, #244]	; (8004b94 <vertScroll+0x238>)
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	f248 3247 	movw	r2, #33607	; 0x8347
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d101      	bne.n	8004aae <vertScroll+0x152>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e002      	b.n	8004ab4 <vertScroll+0x158>
 8004aae:	2308      	movs	r3, #8
 8004ab0:	e000      	b.n	8004ab4 <vertScroll+0x158>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8004ab6:	4b37      	ldr	r3, [pc, #220]	; (8004b94 <vertScroll+0x238>)
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	f248 3247 	movw	r2, #33607	; 0x8347
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d101      	bne.n	8004ac6 <vertScroll+0x16a>
 8004ac2:	2318      	movs	r3, #24
 8004ac4:	e000      	b.n	8004ac8 <vertScroll+0x16c>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f107 020c 	add.w	r2, r7, #12
 8004acc:	2101      	movs	r1, #1
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fd fb92 	bl	80021f8 <WriteCmdParamN>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
		}
		return;
 8004ad4:	e059      	b.n	8004b8a <vertScroll+0x22e>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8004ad6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d155      	bne.n	8004b8a <vertScroll+0x22e>
 8004ade:	4b2f      	ldr	r3, [pc, #188]	; (8004b9c <vertScroll+0x240>)
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d04f      	beq.n	8004b8a <vertScroll+0x22e>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8004aea:	2200      	movs	r2, #0
 8004aec:	2100      	movs	r1, #0
 8004aee:	2013      	movs	r0, #19
 8004af0:	f7fd fb82 	bl	80021f8 <WriteCmdParamN>
		return;
 8004af4:	bf00      	nop
 8004af6:	e048      	b.n	8004b8a <vertScroll+0x22e>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8004af8:	4b26      	ldr	r3, [pc, #152]	; (8004b94 <vertScroll+0x238>)
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	f247 7293 	movw	r2, #30611	; 0x7793
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d021      	beq.n	8004b48 <vertScroll+0x1ec>
 8004b04:	f247 7293 	movw	r2, #30611	; 0x7793
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	dc08      	bgt.n	8004b1e <vertScroll+0x1c2>
 8004b0c:	f245 4220 	movw	r2, #21536	; 0x5420
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d019      	beq.n	8004b48 <vertScroll+0x1ec>
 8004b14:	f247 7283 	movw	r2, #30595	; 0x7783
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d009      	beq.n	8004b30 <vertScroll+0x1d4>
 8004b1c:	e025      	b.n	8004b6a <vertScroll+0x20e>
 8004b1e:	f249 3226 	movw	r2, #37670	; 0x9326
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d010      	beq.n	8004b48 <vertScroll+0x1ec>
 8004b26:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00c      	beq.n	8004b48 <vertScroll+0x1ec>
 8004b2e:	e01c      	b.n	8004b6a <vertScroll+0x20e>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 8004b30:	4b1c      	ldr	r3, [pc, #112]	; (8004ba4 <vertScroll+0x248>)
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	4619      	mov	r1, r3
 8004b36:	2061      	movs	r0, #97	; 0x61
 8004b38:	f7fd f8a0 	bl	8001c7c <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8004b3c:	8abb      	ldrh	r3, [r7, #20]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	206a      	movs	r0, #106	; 0x6a
 8004b42:	f7fd f89b 	bl	8001c7c <WriteCmdData>
        break;
 8004b46:	e021      	b.n	8004b8c <vertScroll+0x230>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8004b48:	4b16      	ldr	r3, [pc, #88]	; (8004ba4 <vertScroll+0x248>)
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	f043 0302 	orr.w	r3, r3, #2
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	4619      	mov	r1, r3
 8004b54:	f240 4001 	movw	r0, #1025	; 0x401
 8004b58:	f7fd f890 	bl	8001c7c <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 8004b5c:	8abb      	ldrh	r3, [r7, #20]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	f240 4004 	movw	r0, #1028	; 0x404
 8004b64:	f7fd f88a 	bl	8001c7c <WriteCmdData>
        break;
 8004b68:	e010      	b.n	8004b8c <vertScroll+0x230>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8004b6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ba4 <vertScroll+0x248>)
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	f043 0302 	orr.w	r3, r3, #2
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	4619      	mov	r1, r3
 8004b76:	2061      	movs	r0, #97	; 0x61
 8004b78:	f7fd f880 	bl	8001c7c <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8004b7c:	8abb      	ldrh	r3, [r7, #20]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	206a      	movs	r0, #106	; 0x6a
 8004b82:	f7fd f87b 	bl	8001c7c <WriteCmdData>
        break;
 8004b86:	bf00      	nop
 8004b88:	e000      	b.n	8004b8c <vertScroll+0x230>
		return;
 8004b8a:	bf00      	nop
    }
}
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	2000040e 	.word	0x2000040e
 8004b98:	20000070 	.word	0x20000070
 8004b9c:	20000400 	.word	0x20000400
 8004ba0:	2000006d 	.word	0x2000006d
 8004ba4:	20000404 	.word	0x20000404

08004ba8 <invertDisplay>:
{
    fillRect(0, 0, _width, _height, color);
}

void invertDisplay(uint8_t i)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8004bb2:	4b46      	ldr	r3, [pc, #280]	; (8004ccc <invertDisplay+0x124>)
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	bf14      	ite	ne
 8004bbe:	2301      	movne	r3, #1
 8004bc0:	2300      	moveq	r3, #0
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	b21a      	sxth	r2, r3
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	b21b      	sxth	r3, r3
 8004bca:	4053      	eors	r3, r2
 8004bcc:	b21b      	sxth	r3, r3
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	4b3f      	ldr	r3, [pc, #252]	; (8004cd0 <invertDisplay+0x128>)
 8004bd2:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8004bd4:	4b3d      	ldr	r3, [pc, #244]	; (8004ccc <invertDisplay+0x124>)
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d035      	beq.n	8004c4c <invertDisplay+0xa4>
        if (is8347) {
 8004be0:	4b3c      	ldr	r3, [pc, #240]	; (8004cd4 <invertDisplay+0x12c>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d024      	beq.n	8004c32 <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8004be8:	4b3b      	ldr	r3, [pc, #236]	; (8004cd8 <invertDisplay+0x130>)
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	f248 3247 	movw	r2, #33607	; 0x8347
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d005      	beq.n	8004c00 <invertDisplay+0x58>
 8004bf4:	4b38      	ldr	r3, [pc, #224]	; (8004cd8 <invertDisplay+0x130>)
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	f245 2252 	movw	r2, #21074	; 0x5252
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d108      	bne.n	8004c12 <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 8004c00:	4b33      	ldr	r3, [pc, #204]	; (8004cd0 <invertDisplay+0x128>)
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <invertDisplay+0x64>
 8004c08:	2306      	movs	r3, #6
 8004c0a:	e000      	b.n	8004c0e <invertDisplay+0x66>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	73fb      	strb	r3, [r7, #15]
 8004c10:	e007      	b.n	8004c22 <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 8004c12:	4b2f      	ldr	r3, [pc, #188]	; (8004cd0 <invertDisplay+0x128>)
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <invertDisplay+0x76>
 8004c1a:	2308      	movs	r3, #8
 8004c1c:	e000      	b.n	8004c20 <invertDisplay+0x78>
 8004c1e:	230a      	movs	r3, #10
 8004c20:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 8004c22:	f107 030f 	add.w	r3, r7, #15
 8004c26:	461a      	mov	r2, r3
 8004c28:	2101      	movs	r1, #1
 8004c2a:	2001      	movs	r0, #1
 8004c2c:	f7fd fae4 	bl	80021f8 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 8004c30:	e049      	b.n	8004cc6 <invertDisplay+0x11e>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8004c32:	4b27      	ldr	r3, [pc, #156]	; (8004cd0 <invertDisplay+0x128>)
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <invertDisplay+0x96>
 8004c3a:	2321      	movs	r3, #33	; 0x21
 8004c3c:	e000      	b.n	8004c40 <invertDisplay+0x98>
 8004c3e:	2320      	movs	r3, #32
 8004c40:	2200      	movs	r2, #0
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fd fad7 	bl	80021f8 <WriteCmdParamN>
 8004c4a:	e03c      	b.n	8004cc6 <invertDisplay+0x11e>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8004c4c:	4b22      	ldr	r3, [pc, #136]	; (8004cd8 <invertDisplay+0x130>)
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	f247 7293 	movw	r2, #30611	; 0x7793
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d024      	beq.n	8004ca2 <invertDisplay+0xfa>
 8004c58:	f247 7293 	movw	r2, #30611	; 0x7793
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	dc07      	bgt.n	8004c70 <invertDisplay+0xc8>
 8004c60:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004c64:	d010      	beq.n	8004c88 <invertDisplay+0xe0>
 8004c66:	f245 4220 	movw	r2, #21536	; 0x5420
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d019      	beq.n	8004ca2 <invertDisplay+0xfa>
 8004c6e:	e023      	b.n	8004cb8 <invertDisplay+0x110>
 8004c70:	f249 3226 	movw	r2, #37670	; 0x9326
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d014      	beq.n	8004ca2 <invertDisplay+0xfa>
 8004c78:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d010      	beq.n	8004ca2 <invertDisplay+0xfa>
 8004c80:	f249 2225 	movw	r2, #37413	; 0x9225
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d117      	bne.n	8004cb8 <invertDisplay+0x110>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8004c88:	4b11      	ldr	r3, [pc, #68]	; (8004cd0 <invertDisplay+0x128>)
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	b21b      	sxth	r3, r3
 8004c90:	f043 0313 	orr.w	r3, r3, #19
 8004c94:	b21b      	sxth	r3, r3
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	4619      	mov	r1, r3
 8004c9a:	2007      	movs	r0, #7
 8004c9c:	f7fc ffee 	bl	8001c7c <WriteCmdData>
        break;
 8004ca0:	e011      	b.n	8004cc6 <invertDisplay+0x11e>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <invertDisplay+0x128>)
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	f043 0302 	orr.w	r3, r3, #2
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	4619      	mov	r1, r3
 8004cae:	f240 4001 	movw	r0, #1025	; 0x401
 8004cb2:	f7fc ffe3 	bl	8001c7c <WriteCmdData>
        break;
 8004cb6:	e006      	b.n	8004cc6 <invertDisplay+0x11e>
    default:
        WriteCmdData(0x61, _lcd_rev);
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <invertDisplay+0x128>)
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	2061      	movs	r0, #97	; 0x61
 8004cc0:	f7fc ffdc 	bl	8001c7c <WriteCmdData>
        break;
 8004cc4:	bf00      	nop
    }
}
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20000400 	.word	0x20000400
 8004cd0:	20000404 	.word	0x20000404
 8004cd4:	2000006d 	.word	0x2000006d
 8004cd8:	2000040e 	.word	0x2000040e

08004cdc <drawFastHLine>:
void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
	fillRect(x, y, 1, h, color);
}
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8004cdc:	b590      	push	{r4, r7, lr}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4623      	mov	r3, r4
 8004cec:	80fb      	strh	r3, [r7, #6]
 8004cee:	4603      	mov	r3, r0
 8004cf0:	80bb      	strh	r3, [r7, #4]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	807b      	strh	r3, [r7, #2]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, w, 1, color);
 8004cfa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004cfe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004d02:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004d06:	883b      	ldrh	r3, [r7, #0]
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f000 f804 	bl	8004d18 <fillRect>
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd90      	pop	{r4, r7, pc}

08004d18 <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8004d18:	b590      	push	{r4, r7, lr}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4604      	mov	r4, r0
 8004d20:	4608      	mov	r0, r1
 8004d22:	4611      	mov	r1, r2
 8004d24:	461a      	mov	r2, r3
 8004d26:	4623      	mov	r3, r4
 8004d28:	80fb      	strh	r3, [r7, #6]
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	80bb      	strh	r3, [r7, #4]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	807b      	strh	r3, [r7, #2]
 8004d32:	4613      	mov	r3, r2
 8004d34:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 8004d36:	4b92      	ldr	r3, [pc, #584]	; (8004f80 <fillRect+0x268>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <fillRect+0x32>
 8004d3e:	8c3b      	ldrh	r3, [r7, #32]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fc feeb 	bl	8001b1c <color565_to_555>
 8004d46:	4603      	mov	r3, r0
 8004d48:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 8004d4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	da08      	bge.n	8004d64 <fillRect+0x4c>
        w = -w;
 8004d52:	887b      	ldrh	r3, [r7, #2]
 8004d54:	425b      	negs	r3, r3
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	807b      	strh	r3, [r7, #2]
        x -= w;
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	887b      	ldrh	r3, [r7, #2]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8004d64:	88fa      	ldrh	r2, [r7, #6]
 8004d66:	887b      	ldrh	r3, [r7, #2]
 8004d68:	4413      	add	r3, r2
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8004d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	da01      	bge.n	8004d7a <fillRect+0x62>
        x = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 8004d7a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8004d7e:	f7fc feb5 	bl	8001aec <width>
 8004d82:	4603      	mov	r3, r0
 8004d84:	429c      	cmp	r4, r3
 8004d86:	dd03      	ble.n	8004d90 <fillRect+0x78>
        end = width();
 8004d88:	f7fc feb0 	bl	8001aec <width>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 8004d90:	89fa      	ldrh	r2, [r7, #14]
 8004d92:	88fb      	ldrh	r3, [r7, #6]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 8004d9a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	da08      	bge.n	8004db4 <fillRect+0x9c>
        h = -h;
 8004da2:	883b      	ldrh	r3, [r7, #0]
 8004da4:	425b      	negs	r3, r3
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	803b      	strh	r3, [r7, #0]
        y -= h;
 8004daa:	88ba      	ldrh	r2, [r7, #4]
 8004dac:	883b      	ldrh	r3, [r7, #0]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8004db4:	88ba      	ldrh	r2, [r7, #4]
 8004db6:	883b      	ldrh	r3, [r7, #0]
 8004db8:	4413      	add	r3, r2
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8004dbe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	da01      	bge.n	8004dca <fillRect+0xb2>
        y = 0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 8004dca:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8004dce:	f7fc fe99 	bl	8001b04 <height>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	429c      	cmp	r4, r3
 8004dd6:	dd03      	ble.n	8004de0 <fillRect+0xc8>
        end = height();
 8004dd8:	f7fc fe94 	bl	8001b04 <height>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 8004de0:	89fa      	ldrh	r2, [r7, #14]
 8004de2:	88bb      	ldrh	r3, [r7, #4]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8004dea:	88fa      	ldrh	r2, [r7, #6]
 8004dec:	887b      	ldrh	r3, [r7, #2]
 8004dee:	4413      	add	r3, r2
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	b21c      	sxth	r4, r3
 8004df8:	88ba      	ldrh	r2, [r7, #4]
 8004dfa:	883b      	ldrh	r3, [r7, #0]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	b21b      	sxth	r3, r3
 8004e06:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004e0a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004e0e:	4622      	mov	r2, r4
 8004e10:	f7ff fc80 	bl	8004714 <setAddrWindow>
    CS_ACTIVE;
 8004e14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e18:	485a      	ldr	r0, [pc, #360]	; (8004f84 <fillRect+0x26c>)
 8004e1a:	f7fc fe19 	bl	8001a50 <PIN_LOW>
    WriteCmd(_MW);
 8004e1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e22:	4859      	ldr	r0, [pc, #356]	; (8004f88 <fillRect+0x270>)
 8004e24:	f7fc fe14 	bl	8001a50 <PIN_LOW>
 8004e28:	4b58      	ldr	r3, [pc, #352]	; (8004f8c <fillRect+0x274>)
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	0a1b      	lsrs	r3, r3, #8
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	737b      	strb	r3, [r7, #13]
 8004e32:	4b56      	ldr	r3, [pc, #344]	; (8004f8c <fillRect+0x274>)
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	733b      	strb	r3, [r7, #12]
 8004e38:	4b53      	ldr	r3, [pc, #332]	; (8004f88 <fillRect+0x270>)
 8004e3a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8004e3e:	619a      	str	r2, [r3, #24]
 8004e40:	4b53      	ldr	r3, [pc, #332]	; (8004f90 <fillRect+0x278>)
 8004e42:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8004e46:	619a      	str	r2, [r3, #24]
 8004e48:	4b52      	ldr	r3, [pc, #328]	; (8004f94 <fillRect+0x27c>)
 8004e4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e4e:	619a      	str	r2, [r3, #24]
 8004e50:	7b7b      	ldrb	r3, [r7, #13]
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4a4f      	ldr	r2, [pc, #316]	; (8004f94 <fillRect+0x27c>)
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	6193      	str	r3, [r2, #24]
 8004e5c:	7b7b      	ldrb	r3, [r7, #13]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8004e64:	7b7b      	ldrb	r3, [r7, #13]
 8004e66:	015b      	lsls	r3, r3, #5
 8004e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	7b7b      	ldrb	r3, [r7, #13]
 8004e70:	015b      	lsls	r3, r3, #5
 8004e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e76:	431a      	orrs	r2, r3
 8004e78:	4b45      	ldr	r3, [pc, #276]	; (8004f90 <fillRect+0x278>)
 8004e7a:	619a      	str	r2, [r3, #24]
 8004e7c:	7b7b      	ldrb	r3, [r7, #13]
 8004e7e:	105b      	asrs	r3, r3, #1
 8004e80:	f003 0208 	and.w	r2, r3, #8
 8004e84:	7b7b      	ldrb	r3, [r7, #13]
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	7b7b      	ldrb	r3, [r7, #13]
 8004e90:	105b      	asrs	r3, r3, #1
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	431a      	orrs	r2, r3
 8004e98:	7b7b      	ldrb	r3, [r7, #13]
 8004e9a:	10db      	asrs	r3, r3, #3
 8004e9c:	f003 0310 	and.w	r3, r3, #16
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	4b39      	ldr	r3, [pc, #228]	; (8004f88 <fillRect+0x270>)
 8004ea4:	619a      	str	r2, [r3, #24]
 8004ea6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004eaa:	4837      	ldr	r0, [pc, #220]	; (8004f88 <fillRect+0x270>)
 8004eac:	f7fc fdd0 	bl	8001a50 <PIN_LOW>
 8004eb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004eb4:	4834      	ldr	r0, [pc, #208]	; (8004f88 <fillRect+0x270>)
 8004eb6:	f7fc fddb 	bl	8001a70 <PIN_HIGH>
 8004eba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ebe:	4832      	ldr	r0, [pc, #200]	; (8004f88 <fillRect+0x270>)
 8004ec0:	f7fc fdd6 	bl	8001a70 <PIN_HIGH>
 8004ec4:	4b30      	ldr	r3, [pc, #192]	; (8004f88 <fillRect+0x270>)
 8004ec6:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8004eca:	619a      	str	r2, [r3, #24]
 8004ecc:	4b30      	ldr	r3, [pc, #192]	; (8004f90 <fillRect+0x278>)
 8004ece:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8004ed2:	619a      	str	r2, [r3, #24]
 8004ed4:	4b2f      	ldr	r3, [pc, #188]	; (8004f94 <fillRect+0x27c>)
 8004ed6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004eda:	619a      	str	r2, [r3, #24]
 8004edc:	7b3b      	ldrb	r3, [r7, #12]
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	4a2c      	ldr	r2, [pc, #176]	; (8004f94 <fillRect+0x27c>)
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	6193      	str	r3, [r2, #24]
 8004ee8:	7b3b      	ldrb	r3, [r7, #12]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8004ef0:	7b3b      	ldrb	r3, [r7, #12]
 8004ef2:	015b      	lsls	r3, r3, #5
 8004ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	7b3b      	ldrb	r3, [r7, #12]
 8004efc:	015b      	lsls	r3, r3, #5
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	431a      	orrs	r2, r3
 8004f04:	4b22      	ldr	r3, [pc, #136]	; (8004f90 <fillRect+0x278>)
 8004f06:	619a      	str	r2, [r3, #24]
 8004f08:	7b3b      	ldrb	r3, [r7, #12]
 8004f0a:	105b      	asrs	r3, r3, #1
 8004f0c:	f003 0208 	and.w	r2, r3, #8
 8004f10:	7b3b      	ldrb	r3, [r7, #12]
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	7b3b      	ldrb	r3, [r7, #12]
 8004f1c:	105b      	asrs	r3, r3, #1
 8004f1e:	f003 0320 	and.w	r3, r3, #32
 8004f22:	431a      	orrs	r2, r3
 8004f24:	7b3b      	ldrb	r3, [r7, #12]
 8004f26:	10db      	asrs	r3, r3, #3
 8004f28:	f003 0310 	and.w	r3, r3, #16
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <fillRect+0x270>)
 8004f30:	619a      	str	r2, [r3, #24]
 8004f32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f36:	4814      	ldr	r0, [pc, #80]	; (8004f88 <fillRect+0x270>)
 8004f38:	f7fc fd8a 	bl	8001a50 <PIN_LOW>
 8004f3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f40:	4811      	ldr	r0, [pc, #68]	; (8004f88 <fillRect+0x270>)
 8004f42:	f7fc fd95 	bl	8001a70 <PIN_HIGH>
 8004f46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f4a:	480f      	ldr	r0, [pc, #60]	; (8004f88 <fillRect+0x270>)
 8004f4c:	f7fc fd90 	bl	8001a70 <PIN_HIGH>
 8004f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f54:	480c      	ldr	r0, [pc, #48]	; (8004f88 <fillRect+0x270>)
 8004f56:	f7fc fd8b 	bl	8001a70 <PIN_HIGH>
    if (h > w) {
 8004f5a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004f5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	dd05      	ble.n	8004f72 <fillRect+0x25a>
        end = h;
 8004f66:	883b      	ldrh	r3, [r7, #0]
 8004f68:	81fb      	strh	r3, [r7, #14]
        h = w;
 8004f6a:	887b      	ldrh	r3, [r7, #2]
 8004f6c:	803b      	strh	r3, [r7, #0]
        w = end;
 8004f6e:	89fb      	ldrh	r3, [r7, #14]
 8004f70:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8004f72:	8c3b      	ldrh	r3, [r7, #32]
 8004f74:	0a1b      	lsrs	r3, r3, #8
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	72fb      	strb	r3, [r7, #11]
 8004f7a:	8c3b      	ldrh	r3, [r7, #32]
 8004f7c:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 8004f7e:	e0a2      	b.n	80050c6 <fillRect+0x3ae>
 8004f80:	2000006e 	.word	0x2000006e
 8004f84:	40020400 	.word	0x40020400
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	200003fe 	.word	0x200003fe
 8004f90:	40021400 	.word	0x40021400
 8004f94:	40021800 	.word	0x40021800
        end = w;
 8004f98:	887b      	ldrh	r3, [r7, #2]
 8004f9a:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 8004f9c:	4b64      	ldr	r3, [pc, #400]	; (8005130 <fillRect+0x418>)
 8004f9e:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8004fa2:	619a      	str	r2, [r3, #24]
 8004fa4:	4b63      	ldr	r3, [pc, #396]	; (8005134 <fillRect+0x41c>)
 8004fa6:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8004faa:	619a      	str	r2, [r3, #24]
 8004fac:	4b62      	ldr	r3, [pc, #392]	; (8005138 <fillRect+0x420>)
 8004fae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fb2:	619a      	str	r2, [r3, #24]
 8004fb4:	7afb      	ldrb	r3, [r7, #11]
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	4a5f      	ldr	r2, [pc, #380]	; (8005138 <fillRect+0x420>)
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	6193      	str	r3, [r2, #24]
 8004fc0:	7afb      	ldrb	r3, [r7, #11]
 8004fc2:	021b      	lsls	r3, r3, #8
 8004fc4:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8004fc8:	7afb      	ldrb	r3, [r7, #11]
 8004fca:	015b      	lsls	r3, r3, #5
 8004fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	7afb      	ldrb	r3, [r7, #11]
 8004fd4:	015b      	lsls	r3, r3, #5
 8004fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	4b55      	ldr	r3, [pc, #340]	; (8005134 <fillRect+0x41c>)
 8004fde:	619a      	str	r2, [r3, #24]
 8004fe0:	7afb      	ldrb	r3, [r7, #11]
 8004fe2:	105b      	asrs	r3, r3, #1
 8004fe4:	f003 0208 	and.w	r2, r3, #8
 8004fe8:	7afb      	ldrb	r3, [r7, #11]
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	7afb      	ldrb	r3, [r7, #11]
 8004ff4:	105b      	asrs	r3, r3, #1
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	7afb      	ldrb	r3, [r7, #11]
 8004ffe:	10db      	asrs	r3, r3, #3
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	431a      	orrs	r2, r3
 8005006:	4b4a      	ldr	r3, [pc, #296]	; (8005130 <fillRect+0x418>)
 8005008:	619a      	str	r2, [r3, #24]
 800500a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800500e:	4848      	ldr	r0, [pc, #288]	; (8005130 <fillRect+0x418>)
 8005010:	f7fc fd1e 	bl	8001a50 <PIN_LOW>
 8005014:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005018:	4845      	ldr	r0, [pc, #276]	; (8005130 <fillRect+0x418>)
 800501a:	f7fc fd29 	bl	8001a70 <PIN_HIGH>
 800501e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005022:	4843      	ldr	r0, [pc, #268]	; (8005130 <fillRect+0x418>)
 8005024:	f7fc fd24 	bl	8001a70 <PIN_HIGH>
            write8(lo);
 8005028:	4b41      	ldr	r3, [pc, #260]	; (8005130 <fillRect+0x418>)
 800502a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800502e:	619a      	str	r2, [r3, #24]
 8005030:	4b40      	ldr	r3, [pc, #256]	; (8005134 <fillRect+0x41c>)
 8005032:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8005036:	619a      	str	r2, [r3, #24]
 8005038:	4b3f      	ldr	r3, [pc, #252]	; (8005138 <fillRect+0x420>)
 800503a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800503e:	619a      	str	r2, [r3, #24]
 8005040:	7abb      	ldrb	r3, [r7, #10]
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	4a3c      	ldr	r2, [pc, #240]	; (8005138 <fillRect+0x420>)
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	6193      	str	r3, [r2, #24]
 800504c:	7abb      	ldrb	r3, [r7, #10]
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8005054:	7abb      	ldrb	r3, [r7, #10]
 8005056:	015b      	lsls	r3, r3, #5
 8005058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505c:	431a      	orrs	r2, r3
 800505e:	7abb      	ldrb	r3, [r7, #10]
 8005060:	015b      	lsls	r3, r3, #5
 8005062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005066:	431a      	orrs	r2, r3
 8005068:	4b32      	ldr	r3, [pc, #200]	; (8005134 <fillRect+0x41c>)
 800506a:	619a      	str	r2, [r3, #24]
 800506c:	7abb      	ldrb	r3, [r7, #10]
 800506e:	105b      	asrs	r3, r3, #1
 8005070:	f003 0208 	and.w	r2, r3, #8
 8005074:	7abb      	ldrb	r3, [r7, #10]
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	431a      	orrs	r2, r3
 800507e:	7abb      	ldrb	r3, [r7, #10]
 8005080:	105b      	asrs	r3, r3, #1
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	431a      	orrs	r2, r3
 8005088:	7abb      	ldrb	r3, [r7, #10]
 800508a:	10db      	asrs	r3, r3, #3
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	431a      	orrs	r2, r3
 8005092:	4b27      	ldr	r3, [pc, #156]	; (8005130 <fillRect+0x418>)
 8005094:	619a      	str	r2, [r3, #24]
 8005096:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800509a:	4825      	ldr	r0, [pc, #148]	; (8005130 <fillRect+0x418>)
 800509c:	f7fc fcd8 	bl	8001a50 <PIN_LOW>
 80050a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050a4:	4822      	ldr	r0, [pc, #136]	; (8005130 <fillRect+0x418>)
 80050a6:	f7fc fce3 	bl	8001a70 <PIN_HIGH>
 80050aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050ae:	4820      	ldr	r0, [pc, #128]	; (8005130 <fillRect+0x418>)
 80050b0:	f7fc fcde 	bl	8001a70 <PIN_HIGH>
        } while (--end != 0);
 80050b4:	89fb      	ldrh	r3, [r7, #14]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	81fb      	strh	r3, [r7, #14]
 80050bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f47f af6b 	bne.w	8004f9c <fillRect+0x284>
    while (h-- > 0) {
 80050c6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	3a01      	subs	r2, #1
 80050ce:	b292      	uxth	r2, r2
 80050d0:	803a      	strh	r2, [r7, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f73f af60 	bgt.w	8004f98 <fillRect+0x280>
#endif
    }
    CS_IDLE;
 80050d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050dc:	4817      	ldr	r0, [pc, #92]	; (800513c <fillRect+0x424>)
 80050de:	f7fc fcc7 	bl	8001a70 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 80050e2:	4b17      	ldr	r3, [pc, #92]	; (8005140 <fillRect+0x428>)
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00b      	beq.n	8005106 <fillRect+0x3ee>
 80050ee:	4b15      	ldr	r3, [pc, #84]	; (8005144 <fillRect+0x42c>)
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	f241 5226 	movw	r2, #5414	; 0x1526
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d116      	bne.n	8005128 <fillRect+0x410>
 80050fa:	4b13      	ldr	r3, [pc, #76]	; (8005148 <fillRect+0x430>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d010      	beq.n	8005128 <fillRect+0x410>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8005106:	f7fc fcf1 	bl	8001aec <width>
 800510a:	4603      	mov	r3, r0
 800510c:	3b01      	subs	r3, #1
 800510e:	b29b      	uxth	r3, r3
 8005110:	b21c      	sxth	r4, r3
 8005112:	f7fc fcf7 	bl	8001b04 <height>
 8005116:	4603      	mov	r3, r0
 8005118:	3b01      	subs	r3, #1
 800511a:	b29b      	uxth	r3, r3
 800511c:	b21b      	sxth	r3, r3
 800511e:	4622      	mov	r2, r4
 8005120:	2100      	movs	r1, #0
 8005122:	2000      	movs	r0, #0
 8005124:	f7ff faf6 	bl	8004714 <setAddrWindow>
}
 8005128:	bf00      	nop
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	bd90      	pop	{r4, r7, pc}
 8005130:	40021000 	.word	0x40021000
 8005134:	40021400 	.word	0x40021400
 8005138:	40021800 	.word	0x40021800
 800513c:	40020400 	.word	0x40020400
 8005140:	20000400 	.word	0x20000400
 8005144:	2000040e 	.word	0x2000040e
 8005148:	20000070 	.word	0x20000070

0800514c <fillTriangle>:
    drawLine(x2, y2, x0, y0, color);
}


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800514c:	b590      	push	{r4, r7, lr}
 800514e:	b08f      	sub	sp, #60	; 0x3c
 8005150:	af00      	add	r7, sp, #0
 8005152:	4604      	mov	r4, r0
 8005154:	4608      	mov	r0, r1
 8005156:	4611      	mov	r1, r2
 8005158:	461a      	mov	r2, r3
 800515a:	4623      	mov	r3, r4
 800515c:	80fb      	strh	r3, [r7, #6]
 800515e:	4603      	mov	r3, r0
 8005160:	80bb      	strh	r3, [r7, #4]
 8005162:	460b      	mov	r3, r1
 8005164:	807b      	strh	r3, [r7, #2]
 8005166:	4613      	mov	r3, r2
 8005168:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 800516a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800516e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005172:	429a      	cmp	r2, r3
 8005174:	dd0b      	ble.n	800518e <fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005176:	88bb      	ldrh	r3, [r7, #4]
 8005178:	84fb      	strh	r3, [r7, #38]	; 0x26
 800517a:	883b      	ldrh	r3, [r7, #0]
 800517c:	80bb      	strh	r3, [r7, #4]
 800517e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005180:	803b      	strh	r3, [r7, #0]
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005186:	887b      	ldrh	r3, [r7, #2]
 8005188:	80fb      	strh	r3, [r7, #6]
 800518a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800518c:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 800518e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005192:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005196:	429a      	cmp	r2, r3
 8005198:	dd0f      	ble.n	80051ba <fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 800519a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800519e:	847b      	strh	r3, [r7, #34]	; 0x22
 80051a0:	883b      	ldrh	r3, [r7, #0]
 80051a2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80051a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051a8:	803b      	strh	r3, [r7, #0]
 80051aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80051ae:	843b      	strh	r3, [r7, #32]
 80051b0:	887b      	ldrh	r3, [r7, #2]
 80051b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80051b6:	8c3b      	ldrh	r3, [r7, #32]
 80051b8:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 80051ba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80051be:	f9b7 3000 	ldrsh.w	r3, [r7]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	dd0b      	ble.n	80051de <fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80051c6:	88bb      	ldrh	r3, [r7, #4]
 80051c8:	83fb      	strh	r3, [r7, #30]
 80051ca:	883b      	ldrh	r3, [r7, #0]
 80051cc:	80bb      	strh	r3, [r7, #4]
 80051ce:	8bfb      	ldrh	r3, [r7, #30]
 80051d0:	803b      	strh	r3, [r7, #0]
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	83bb      	strh	r3, [r7, #28]
 80051d6:	887b      	ldrh	r3, [r7, #2]
 80051d8:	80fb      	strh	r3, [r7, #6]
 80051da:	8bbb      	ldrh	r3, [r7, #28]
 80051dc:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80051de:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80051e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d137      	bne.n	800525a <fillTriangle+0x10e>
        a = b = x0;
 80051ea:	88fb      	ldrh	r3, [r7, #6]
 80051ec:	86bb      	strh	r3, [r7, #52]	; 0x34
 80051ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80051f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 80051f2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80051f6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80051fa:	429a      	cmp	r2, r3
 80051fc:	da02      	bge.n	8005204 <fillTriangle+0xb8>
 80051fe:	887b      	ldrh	r3, [r7, #2]
 8005200:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005202:	e007      	b.n	8005214 <fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8005204:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005208:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800520c:	429a      	cmp	r2, r3
 800520e:	dd01      	ble.n	8005214 <fillTriangle+0xc8>
 8005210:	887b      	ldrh	r3, [r7, #2]
 8005212:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8005214:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005218:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800521c:	429a      	cmp	r2, r3
 800521e:	da03      	bge.n	8005228 <fillTriangle+0xdc>
 8005220:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005224:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005226:	e008      	b.n	800523a <fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8005228:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800522c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005230:	429a      	cmp	r2, r3
 8005232:	dd02      	ble.n	800523a <fillTriangle+0xee>
 8005234:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005238:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y0, b-a+1, color);
 800523a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800523c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	b29b      	uxth	r3, r3
 8005242:	3301      	adds	r3, #1
 8005244:	b29b      	uxth	r3, r3
 8005246:	b21a      	sxth	r2, r3
 8005248:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800524c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005250:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005254:	f7ff fd42 	bl	8004cdc <drawFastHLine>
        return;
 8005258:	e0d4      	b.n	8005404 <fillTriangle+0x2b8>
    }

    int16_t
    dx01 = x1 - x0,
 800525a:	887a      	ldrh	r2, [r7, #2]
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	b29b      	uxth	r3, r3
 8005262:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8005264:	883a      	ldrh	r2, [r7, #0]
 8005266:	88bb      	ldrh	r3, [r7, #4]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	b29b      	uxth	r3, r3
 800526c:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 800526e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005272:	88fb      	ldrh	r3, [r7, #6]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	b29b      	uxth	r3, r3
 8005278:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 800527a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800527e:	88bb      	ldrh	r3, [r7, #4]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	b29b      	uxth	r3, r3
 8005284:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8005286:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800528a:	887b      	ldrh	r3, [r7, #2]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	b29b      	uxth	r3, r3
 8005290:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8005292:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005296:	883b      	ldrh	r3, [r7, #0]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	b29b      	uxth	r3, r3
 800529c:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 800529e:	2300      	movs	r3, #0
 80052a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80052a6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80052aa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d102      	bne.n	80052b8 <fillTriangle+0x16c>
 80052b2:	883b      	ldrh	r3, [r7, #0]
 80052b4:	863b      	strh	r3, [r7, #48]	; 0x30
 80052b6:	e003      	b.n	80052c0 <fillTriangle+0x174>
    else         last = y1-1; // Skip it
 80052b8:	883b      	ldrh	r3, [r7, #0]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29b      	uxth	r3, r3
 80052be:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 80052c0:	88bb      	ldrh	r3, [r7, #4]
 80052c2:	867b      	strh	r3, [r7, #50]	; 0x32
 80052c4:	e03e      	b.n	8005344 <fillTriangle+0x1f8>
        a   = x0 + sa / dy01;
 80052c6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80052ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	4413      	add	r3, r2
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 80052da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80052de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	4413      	add	r3, r2
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 80052ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80052f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f4:	4413      	add	r3, r2
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80052f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80052fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052fe:	4413      	add	r3, r2
 8005300:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005302:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005306:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800530a:	429a      	cmp	r2, r3
 800530c:	dd05      	ble.n	800531a <fillTriangle+0x1ce>
 800530e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005310:	81bb      	strh	r3, [r7, #12]
 8005312:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005314:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005316:	89bb      	ldrh	r3, [r7, #12]
 8005318:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 800531a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800531c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	b29b      	uxth	r3, r3
 8005322:	3301      	adds	r3, #1
 8005324:	b29b      	uxth	r3, r3
 8005326:	b21a      	sxth	r2, r3
 8005328:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800532c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005330:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005334:	f7ff fcd2 	bl	8004cdc <drawFastHLine>
    for(y=y0; y<=last; y++) {
 8005338:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800533c:	b29b      	uxth	r3, r3
 800533e:	3301      	adds	r3, #1
 8005340:	b29b      	uxth	r3, r3
 8005342:	867b      	strh	r3, [r7, #50]	; 0x32
 8005344:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005348:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800534c:	429a      	cmp	r2, r3
 800534e:	ddba      	ble.n	80052c6 <fillTriangle+0x17a>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8005350:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005354:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005358:	f9b7 2000 	ldrsh.w	r2, [r7]
 800535c:	1a8a      	subs	r2, r1, r2
 800535e:	fb02 f303 	mul.w	r3, r2, r3
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8005364:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005368:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800536c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005370:	1a8a      	subs	r2, r1, r2
 8005372:	fb02 f303 	mul.w	r3, r2, r3
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8005378:	e03e      	b.n	80053f8 <fillTriangle+0x2ac>
        a   = x1 + sa / dy12;
 800537a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800537e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005380:	fb92 f3f3 	sdiv	r3, r2, r3
 8005384:	b29a      	uxth	r2, r3
 8005386:	887b      	ldrh	r3, [r7, #2]
 8005388:	4413      	add	r3, r2
 800538a:	b29b      	uxth	r3, r3
 800538c:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 800538e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005394:	fb92 f3f3 	sdiv	r3, r2, r3
 8005398:	b29a      	uxth	r2, r3
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	4413      	add	r3, r2
 800539e:	b29b      	uxth	r3, r3
 80053a0:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 80053a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80053a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053a8:	4413      	add	r3, r2
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80053ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80053b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b2:	4413      	add	r3, r2
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80053b6:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80053ba:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80053be:	429a      	cmp	r2, r3
 80053c0:	dd05      	ble.n	80053ce <fillTriangle+0x282>
 80053c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053c4:	81fb      	strh	r3, [r7, #14]
 80053c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80053c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80053ca:	89fb      	ldrh	r3, [r7, #14]
 80053cc:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 80053ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80053d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3301      	adds	r3, #1
 80053d8:	b29b      	uxth	r3, r3
 80053da:	b21a      	sxth	r2, r3
 80053dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80053e0:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80053e4:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80053e8:	f7ff fc78 	bl	8004cdc <drawFastHLine>
    for(; y<=y2; y++) {
 80053ec:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	3301      	adds	r3, #1
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	867b      	strh	r3, [r7, #50]	; 0x32
 80053f8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80053fc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005400:	429a      	cmp	r2, r3
 8005402:	ddba      	ble.n	800537a <fillTriangle+0x22e>
    }
}
 8005404:	373c      	adds	r7, #60	; 0x3c
 8005406:	46bd      	mov	sp, r7
 8005408:	bd90      	pop	{r4, r7, pc}
	...

0800540c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800540c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005444 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005410:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005412:	e003      	b.n	800541c <LoopCopyDataInit>

08005414 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005414:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005416:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005418:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800541a:	3104      	adds	r1, #4

0800541c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800541c:	480b      	ldr	r0, [pc, #44]	; (800544c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800541e:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005420:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005422:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005424:	d3f6      	bcc.n	8005414 <CopyDataInit>
  ldr  r2, =_sbss
 8005426:	4a0b      	ldr	r2, [pc, #44]	; (8005454 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005428:	e002      	b.n	8005430 <LoopFillZerobss>

0800542a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800542a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800542c:	f842 3b04 	str.w	r3, [r2], #4

08005430 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005430:	4b09      	ldr	r3, [pc, #36]	; (8005458 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005432:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005434:	d3f9      	bcc.n	800542a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005436:	f7fc fadd 	bl	80019f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800543a:	f003 fd41 	bl	8008ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800543e:	f7fb f87b 	bl	8000538 <main>
  bx  lr    
 8005442:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005444:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8005448:	0800a288 	.word	0x0800a288
  ldr  r0, =_sdata
 800544c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005450:	20000038 	.word	0x20000038
  ldr  r2, =_sbss
 8005454:	20000038 	.word	0x20000038
  ldr  r3, = _ebss
 8005458:	2000041c 	.word	0x2000041c

0800545c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800545c:	e7fe      	b.n	800545c <ADC_IRQHandler>

0800545e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005462:	2003      	movs	r0, #3
 8005464:	f000 f94a 	bl	80056fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005468:	2000      	movs	r0, #0
 800546a:	f000 f805 	bl	8005478 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800546e:	f7fc f859 	bl	8001524 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005480:	4b12      	ldr	r3, [pc, #72]	; (80054cc <HAL_InitTick+0x54>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	4b12      	ldr	r3, [pc, #72]	; (80054d0 <HAL_InitTick+0x58>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	4619      	mov	r1, r3
 800548a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800548e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005492:	fbb2 f3f3 	udiv	r3, r2, r3
 8005496:	4618      	mov	r0, r3
 8005498:	f000 f965 	bl	8005766 <HAL_SYSTICK_Config>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e00e      	b.n	80054c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b0f      	cmp	r3, #15
 80054aa:	d80a      	bhi.n	80054c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054ac:	2200      	movs	r2, #0
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295
 80054b4:	f000 f92d 	bl	8005712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054b8:	4a06      	ldr	r2, [pc, #24]	; (80054d4 <HAL_InitTick+0x5c>)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	e000      	b.n	80054c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20000028 	.word	0x20000028
 80054d0:	20000034 	.word	0x20000034
 80054d4:	20000030 	.word	0x20000030

080054d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054dc:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <HAL_IncTick+0x20>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	461a      	mov	r2, r3
 80054e2:	4b06      	ldr	r3, [pc, #24]	; (80054fc <HAL_IncTick+0x24>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4413      	add	r3, r2
 80054e8:	4a04      	ldr	r2, [pc, #16]	; (80054fc <HAL_IncTick+0x24>)
 80054ea:	6013      	str	r3, [r2, #0]
}
 80054ec:	bf00      	nop
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	20000034 	.word	0x20000034
 80054fc:	20000418 	.word	0x20000418

08005500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  return uwTick;
 8005504:	4b03      	ldr	r3, [pc, #12]	; (8005514 <HAL_GetTick+0x14>)
 8005506:	681b      	ldr	r3, [r3, #0]
}
 8005508:	4618      	mov	r0, r3
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	20000418 	.word	0x20000418

08005518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005520:	f7ff ffee 	bl	8005500 <HAL_GetTick>
 8005524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d005      	beq.n	800553e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005532:	4b09      	ldr	r3, [pc, #36]	; (8005558 <HAL_Delay+0x40>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800553e:	bf00      	nop
 8005540:	f7ff ffde 	bl	8005500 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	429a      	cmp	r2, r3
 800554e:	d8f7      	bhi.n	8005540 <HAL_Delay+0x28>
  {
  }
}
 8005550:	bf00      	nop
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	20000034 	.word	0x20000034

0800555c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800556c:	4b0b      	ldr	r3, [pc, #44]	; (800559c <__NVIC_SetPriorityGrouping+0x40>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005578:	4013      	ands	r3, r2
 800557a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005584:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005586:	4313      	orrs	r3, r2
 8005588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800558a:	4a04      	ldr	r2, [pc, #16]	; (800559c <__NVIC_SetPriorityGrouping+0x40>)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	60d3      	str	r3, [r2, #12]
}
 8005590:	bf00      	nop
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	e000ed00 	.word	0xe000ed00
 80055a0:	05fa0000 	.word	0x05fa0000

080055a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055a8:	4b04      	ldr	r3, [pc, #16]	; (80055bc <__NVIC_GetPriorityGrouping+0x18>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	0a1b      	lsrs	r3, r3, #8
 80055ae:	f003 0307 	and.w	r3, r3, #7
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	e000ed00 	.word	0xe000ed00

080055c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	db0b      	blt.n	80055ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	f003 021f 	and.w	r2, r3, #31
 80055d8:	4907      	ldr	r1, [pc, #28]	; (80055f8 <__NVIC_EnableIRQ+0x38>)
 80055da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	2001      	movs	r0, #1
 80055e2:	fa00 f202 	lsl.w	r2, r0, r2
 80055e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	e000e100 	.word	0xe000e100

080055fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	6039      	str	r1, [r7, #0]
 8005606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560c:	2b00      	cmp	r3, #0
 800560e:	db0a      	blt.n	8005626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	b2da      	uxtb	r2, r3
 8005614:	490c      	ldr	r1, [pc, #48]	; (8005648 <__NVIC_SetPriority+0x4c>)
 8005616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561a:	0112      	lsls	r2, r2, #4
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	440b      	add	r3, r1
 8005620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005624:	e00a      	b.n	800563c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	4908      	ldr	r1, [pc, #32]	; (800564c <__NVIC_SetPriority+0x50>)
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	3b04      	subs	r3, #4
 8005634:	0112      	lsls	r2, r2, #4
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	440b      	add	r3, r1
 800563a:	761a      	strb	r2, [r3, #24]
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	e000e100 	.word	0xe000e100
 800564c:	e000ed00 	.word	0xe000ed00

08005650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005650:	b480      	push	{r7}
 8005652:	b089      	sub	sp, #36	; 0x24
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f1c3 0307 	rsb	r3, r3, #7
 800566a:	2b04      	cmp	r3, #4
 800566c:	bf28      	it	cs
 800566e:	2304      	movcs	r3, #4
 8005670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	3304      	adds	r3, #4
 8005676:	2b06      	cmp	r3, #6
 8005678:	d902      	bls.n	8005680 <NVIC_EncodePriority+0x30>
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	3b03      	subs	r3, #3
 800567e:	e000      	b.n	8005682 <NVIC_EncodePriority+0x32>
 8005680:	2300      	movs	r3, #0
 8005682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005684:	f04f 32ff 	mov.w	r2, #4294967295
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	43da      	mvns	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	401a      	ands	r2, r3
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005698:	f04f 31ff 	mov.w	r1, #4294967295
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	fa01 f303 	lsl.w	r3, r1, r3
 80056a2:	43d9      	mvns	r1, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056a8:	4313      	orrs	r3, r2
         );
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3724      	adds	r7, #36	; 0x24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
	...

080056b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056c8:	d301      	bcc.n	80056ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056ca:	2301      	movs	r3, #1
 80056cc:	e00f      	b.n	80056ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056ce:	4a0a      	ldr	r2, [pc, #40]	; (80056f8 <SysTick_Config+0x40>)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056d6:	210f      	movs	r1, #15
 80056d8:	f04f 30ff 	mov.w	r0, #4294967295
 80056dc:	f7ff ff8e 	bl	80055fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056e0:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <SysTick_Config+0x40>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056e6:	4b04      	ldr	r3, [pc, #16]	; (80056f8 <SysTick_Config+0x40>)
 80056e8:	2207      	movs	r2, #7
 80056ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	e000e010 	.word	0xe000e010

080056fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff ff29 	bl	800555c <__NVIC_SetPriorityGrouping>
}
 800570a:	bf00      	nop
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005712:	b580      	push	{r7, lr}
 8005714:	b086      	sub	sp, #24
 8005716:	af00      	add	r7, sp, #0
 8005718:	4603      	mov	r3, r0
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	607a      	str	r2, [r7, #4]
 800571e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005724:	f7ff ff3e 	bl	80055a4 <__NVIC_GetPriorityGrouping>
 8005728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	6978      	ldr	r0, [r7, #20]
 8005730:	f7ff ff8e 	bl	8005650 <NVIC_EncodePriority>
 8005734:	4602      	mov	r2, r0
 8005736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800573a:	4611      	mov	r1, r2
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff ff5d 	bl	80055fc <__NVIC_SetPriority>
}
 8005742:	bf00      	nop
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	4603      	mov	r3, r0
 8005752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff ff31 	bl	80055c0 <__NVIC_EnableIRQ>
}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff ffa2 	bl	80056b8 <SysTick_Config>
 8005774:	4603      	mov	r3, r0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800577e:	b580      	push	{r7, lr}
 8005780:	b082      	sub	sp, #8
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e014      	b.n	80057ba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	791b      	ldrb	r3, [r3, #4]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d105      	bne.n	80057a6 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7fb fee3 	bl	800156c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2202      	movs	r2, #2
 80057aa:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	795b      	ldrb	r3, [r3, #5]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_DAC_Start_DMA+0x1e>
 80057de:	2302      	movs	r3, #2
 80057e0:	e08e      	b.n	8005900 <HAL_DAC_Start_DMA+0x13c>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2202      	movs	r2, #2
 80057ec:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d12a      	bne.n	800584a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	4a43      	ldr	r2, [pc, #268]	; (8005908 <HAL_DAC_Start_DMA+0x144>)
 80057fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	4a42      	ldr	r2, [pc, #264]	; (800590c <HAL_DAC_Start_DMA+0x148>)
 8005802:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	4a41      	ldr	r2, [pc, #260]	; (8005910 <HAL_DAC_Start_DMA+0x14c>)
 800580a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800581a:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	2b04      	cmp	r3, #4
 8005820:	d009      	beq.n	8005836 <HAL_DAC_Start_DMA+0x72>
 8005822:	2b08      	cmp	r3, #8
 8005824:	d00c      	beq.n	8005840 <HAL_DAC_Start_DMA+0x7c>
 8005826:	2b00      	cmp	r3, #0
 8005828:	d000      	beq.n	800582c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800582a:	e039      	b.n	80058a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3308      	adds	r3, #8
 8005832:	617b      	str	r3, [r7, #20]
        break;
 8005834:	e034      	b.n	80058a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	330c      	adds	r3, #12
 800583c:	617b      	str	r3, [r7, #20]
        break;
 800583e:	e02f      	b.n	80058a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3310      	adds	r3, #16
 8005846:	617b      	str	r3, [r7, #20]
        break;
 8005848:	e02a      	b.n	80058a0 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	4a31      	ldr	r2, [pc, #196]	; (8005914 <HAL_DAC_Start_DMA+0x150>)
 8005850:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	4a30      	ldr	r2, [pc, #192]	; (8005918 <HAL_DAC_Start_DMA+0x154>)
 8005858:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	4a2f      	ldr	r2, [pc, #188]	; (800591c <HAL_DAC_Start_DMA+0x158>)
 8005860:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005870:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	2b04      	cmp	r3, #4
 8005876:	d009      	beq.n	800588c <HAL_DAC_Start_DMA+0xc8>
 8005878:	2b08      	cmp	r3, #8
 800587a:	d00c      	beq.n	8005896 <HAL_DAC_Start_DMA+0xd2>
 800587c:	2b00      	cmp	r3, #0
 800587e:	d000      	beq.n	8005882 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8005880:	e00e      	b.n	80058a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3314      	adds	r3, #20
 8005888:	617b      	str	r3, [r7, #20]
        break;
 800588a:	e009      	b.n	80058a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3318      	adds	r3, #24
 8005892:	617b      	str	r3, [r7, #20]
        break;
 8005894:	e004      	b.n	80058a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	331c      	adds	r3, #28
 800589c:	617b      	str	r3, [r7, #20]
        break;
 800589e:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10f      	bne.n	80058c6 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058b4:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6898      	ldr	r0, [r3, #8]
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	f000 fa12 	bl	8005ce8 <HAL_DMA_Start_IT>
 80058c4:	e00e      	b.n	80058e4 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80058d4:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	68d8      	ldr	r0, [r3, #12]
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	f000 fa02 	bl	8005ce8 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6819      	ldr	r1, [r3, #0]
 80058ea:	2201      	movs	r2, #1
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	409a      	lsls	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	08005a79 	.word	0x08005a79
 800590c:	08005a9b 	.word	0x08005a9b
 8005910:	08005ab7 	.word	0x08005ab7
 8005914:	08005b21 	.word	0x08005b21
 8005918:	08005b43 	.word	0x08005b43
 800591c:	08005b5f 	.word	0x08005b5f

08005920 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6819      	ldr	r1, [r3, #0]
 8005934:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	fa02 f303 	lsl.w	r3, r2, r3
 800593e:	43da      	mvns	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	400a      	ands	r2, r1
 8005946:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6819      	ldr	r1, [r3, #0]
 800594e:	2201      	movs	r2, #1
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	43da      	mvns	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	400a      	ands	r2, r1
 800595e:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d107      	bne.n	8005976 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fa1c 	bl	8005da8 <HAL_DMA_Abort>
 8005970:	4603      	mov	r3, r0
 8005972:	73fb      	strb	r3, [r7, #15]
 8005974:	e006      	b.n	8005984 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fa14 	bl	8005da8 <HAL_DMA_Abort>
 8005980:	4603      	mov	r3, r0
 8005982:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2204      	movs	r2, #4
 800598e:	711a      	strb	r2, [r3, #4]
 8005990:	e002      	b.n	8005998 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8005998:	7bfb      	ldrb	r3, [r7, #15]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
   
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80059de:	b480      	push	{r7}
 80059e0:	b087      	sub	sp, #28
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80059ea:	2300      	movs	r3, #0
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	2300      	movs	r3, #0
 80059f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	795b      	ldrb	r3, [r3, #5]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_DAC_ConfigChannel+0x20>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e036      	b.n	8005a6c <HAL_DAC_ConfigChannel+0x8e>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2202      	movs	r2, #2
 8005a08:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005a12:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4013      	ands	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	fa02 f303 	lsl.w	r3, r2, r3
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6819      	ldr	r1, [r3, #0]
 8005a4c:	22c0      	movs	r2, #192	; 0xc0
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	fa02 f303 	lsl.w	r3, r2, r3
 8005a54:	43da      	mvns	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	400a      	ands	r2, r1
 8005a5c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <DAC_DMAConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f7ff ff8b 	bl	80059a2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	711a      	strb	r2, [r3, #4]
}
 8005a92:	bf00      	nop
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f7ff ff84 	bl	80059b6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005aae:	bf00      	nop
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <DAC_DMAErrorCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f043 0204 	orr.w	r2, r3, #4
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f7ff ff7a 	bl	80059ca <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	711a      	strb	r2, [r3, #4]
}
 8005adc:	bf00      	nop
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <DAC_DMAConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f7ff ffd8 	bl	8005ae4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	711a      	strb	r2, [r3, #4]
}
 8005b3a:	bf00      	nop
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b084      	sub	sp, #16
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7ff ffd1 	bl	8005af8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005b56:	bf00      	nop
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <DAC_DMAErrorCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b084      	sub	sp, #16
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	f043 0204 	orr.w	r2, r3, #4
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f7ff ffc7 	bl	8005b0c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	711a      	strb	r2, [r3, #4]
}
 8005b84:	bf00      	nop
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b98:	f7ff fcb2 	bl	8005500 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e099      	b.n	8005cdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0201 	bic.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bc8:	e00f      	b.n	8005bea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bca:	f7ff fc99 	bl	8005500 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b05      	cmp	r3, #5
 8005bd6:	d908      	bls.n	8005bea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2203      	movs	r2, #3
 8005be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e078      	b.n	8005cdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e8      	bne.n	8005bca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4b38      	ldr	r3, [pc, #224]	; (8005ce4 <HAL_DMA_Init+0x158>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d107      	bne.n	8005c54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f023 0307 	bic.w	r3, r3, #7
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d117      	bne.n	8005cae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00e      	beq.n	8005cae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fae7 	bl	8006264 <DMA_CheckFifoParam>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2240      	movs	r2, #64	; 0x40
 8005ca0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005caa:	2301      	movs	r3, #1
 8005cac:	e016      	b.n	8005cdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fa9e 	bl	80061f8 <DMA_CalcBaseAndBitshift>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc4:	223f      	movs	r2, #63	; 0x3f
 8005cc6:	409a      	lsls	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	e010803f 	.word	0xe010803f

08005ce8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
 8005cf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_DMA_Start_IT+0x26>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e048      	b.n	8005da0 <HAL_DMA_Start_IT+0xb8>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d137      	bne.n	8005d92 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2202      	movs	r2, #2
 8005d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 fa30 	bl	800619c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d40:	223f      	movs	r2, #63	; 0x3f
 8005d42:	409a      	lsls	r2, r3
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0216 	orr.w	r2, r2, #22
 8005d56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695a      	ldr	r2, [r3, #20]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d66:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d007      	beq.n	8005d80 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0208 	orr.w	r2, r2, #8
 8005d7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	e005      	b.n	8005d9e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005db6:	f7ff fba3 	bl	8005500 <HAL_GetTick>
 8005dba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d008      	beq.n	8005dda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2280      	movs	r2, #128	; 0x80
 8005dcc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e052      	b.n	8005e80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0216 	bic.w	r2, r2, #22
 8005de8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695a      	ldr	r2, [r3, #20]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005df8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <HAL_DMA_Abort+0x62>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0208 	bic.w	r2, r2, #8
 8005e18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0201 	bic.w	r2, r2, #1
 8005e28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e2a:	e013      	b.n	8005e54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e2c:	f7ff fb68 	bl	8005500 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b05      	cmp	r3, #5
 8005e38:	d90c      	bls.n	8005e54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2203      	movs	r2, #3
 8005e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e015      	b.n	8005e80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e4      	bne.n	8005e2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e66:	223f      	movs	r2, #63	; 0x3f
 8005e68:	409a      	lsls	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005e94:	4b92      	ldr	r3, [pc, #584]	; (80060e0 <HAL_DMA_IRQHandler+0x258>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a92      	ldr	r2, [pc, #584]	; (80060e4 <HAL_DMA_IRQHandler+0x25c>)
 8005e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9e:	0a9b      	lsrs	r3, r3, #10
 8005ea0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb2:	2208      	movs	r2, #8
 8005eb4:	409a      	lsls	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d01a      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d013      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0204 	bic.w	r2, r2, #4
 8005eda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee0:	2208      	movs	r2, #8
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eec:	f043 0201 	orr.w	r2, r3, #1
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef8:	2201      	movs	r2, #1
 8005efa:	409a      	lsls	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4013      	ands	r3, r2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d012      	beq.n	8005f2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00b      	beq.n	8005f2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f16:	2201      	movs	r2, #1
 8005f18:	409a      	lsls	r2, r3
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f22:	f043 0202 	orr.w	r2, r3, #2
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f2e:	2204      	movs	r2, #4
 8005f30:	409a      	lsls	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4013      	ands	r3, r2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d012      	beq.n	8005f60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00b      	beq.n	8005f60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f4c:	2204      	movs	r2, #4
 8005f4e:	409a      	lsls	r2, r3
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f58:	f043 0204 	orr.w	r2, r3, #4
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f64:	2210      	movs	r2, #16
 8005f66:	409a      	lsls	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d043      	beq.n	8005ff8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d03c      	beq.n	8005ff8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f82:	2210      	movs	r2, #16
 8005f84:	409a      	lsls	r2, r3
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d018      	beq.n	8005fca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d108      	bne.n	8005fb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d024      	beq.n	8005ff8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
 8005fb6:	e01f      	b.n	8005ff8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01b      	beq.n	8005ff8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	4798      	blx	r3
 8005fc8:	e016      	b.n	8005ff8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d107      	bne.n	8005fe8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0208 	bic.w	r2, r2, #8
 8005fe6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	409a      	lsls	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4013      	ands	r3, r2
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 808e 	beq.w	8006126 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 8086 	beq.w	8006126 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601e:	2220      	movs	r2, #32
 8006020:	409a      	lsls	r2, r3
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b05      	cmp	r3, #5
 8006030:	d136      	bne.n	80060a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0216 	bic.w	r2, r2, #22
 8006040:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	695a      	ldr	r2, [r3, #20]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006050:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	d103      	bne.n	8006062 <HAL_DMA_IRQHandler+0x1da>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800605e:	2b00      	cmp	r3, #0
 8006060:	d007      	beq.n	8006072 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0208 	bic.w	r2, r2, #8
 8006070:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006076:	223f      	movs	r2, #63	; 0x3f
 8006078:	409a      	lsls	r2, r3
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006092:	2b00      	cmp	r3, #0
 8006094:	d07d      	beq.n	8006192 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
        }
        return;
 800609e:	e078      	b.n	8006192 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d01c      	beq.n	80060e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d108      	bne.n	80060ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d030      	beq.n	8006126 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	4798      	blx	r3
 80060cc:	e02b      	b.n	8006126 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d027      	beq.n	8006126 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	4798      	blx	r3
 80060de:	e022      	b.n	8006126 <HAL_DMA_IRQHandler+0x29e>
 80060e0:	20000028 	.word	0x20000028
 80060e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10f      	bne.n	8006116 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0210 	bic.w	r2, r2, #16
 8006104:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612a:	2b00      	cmp	r3, #0
 800612c:	d032      	beq.n	8006194 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d022      	beq.n	8006180 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2205      	movs	r2, #5
 800613e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0201 	bic.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	3301      	adds	r3, #1
 8006156:	60bb      	str	r3, [r7, #8]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	429a      	cmp	r2, r3
 800615c:	d307      	bcc.n	800616e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1f2      	bne.n	8006152 <HAL_DMA_IRQHandler+0x2ca>
 800616c:	e000      	b.n	8006170 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800616e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	4798      	blx	r3
 8006190:	e000      	b.n	8006194 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006192:	bf00      	nop
    }
  }
}
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop

0800619c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	2b40      	cmp	r3, #64	; 0x40
 80061c8:	d108      	bne.n	80061dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80061da:	e007      	b.n	80061ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	60da      	str	r2, [r3, #12]
}
 80061ec:	bf00      	nop
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	3b10      	subs	r3, #16
 8006208:	4a13      	ldr	r2, [pc, #76]	; (8006258 <DMA_CalcBaseAndBitshift+0x60>)
 800620a:	fba2 2303 	umull	r2, r3, r2, r3
 800620e:	091b      	lsrs	r3, r3, #4
 8006210:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006212:	4a12      	ldr	r2, [pc, #72]	; (800625c <DMA_CalcBaseAndBitshift+0x64>)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b03      	cmp	r3, #3
 8006224:	d908      	bls.n	8006238 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <DMA_CalcBaseAndBitshift+0x68>)
 800622e:	4013      	ands	r3, r2
 8006230:	1d1a      	adds	r2, r3, #4
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	659a      	str	r2, [r3, #88]	; 0x58
 8006236:	e006      	b.n	8006246 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	461a      	mov	r2, r3
 800623e:	4b08      	ldr	r3, [pc, #32]	; (8006260 <DMA_CalcBaseAndBitshift+0x68>)
 8006240:	4013      	ands	r3, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	aaaaaaab 	.word	0xaaaaaaab
 800625c:	0800a098 	.word	0x0800a098
 8006260:	fffffc00 	.word	0xfffffc00

08006264 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006274:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d11f      	bne.n	80062be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2b03      	cmp	r3, #3
 8006282:	d855      	bhi.n	8006330 <DMA_CheckFifoParam+0xcc>
 8006284:	a201      	add	r2, pc, #4	; (adr r2, 800628c <DMA_CheckFifoParam+0x28>)
 8006286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628a:	bf00      	nop
 800628c:	0800629d 	.word	0x0800629d
 8006290:	080062af 	.word	0x080062af
 8006294:	0800629d 	.word	0x0800629d
 8006298:	08006331 	.word	0x08006331
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d045      	beq.n	8006334 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062ac:	e042      	b.n	8006334 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062b6:	d13f      	bne.n	8006338 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062bc:	e03c      	b.n	8006338 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c6:	d121      	bne.n	800630c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d836      	bhi.n	800633c <DMA_CheckFifoParam+0xd8>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <DMA_CheckFifoParam+0x70>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	080062e5 	.word	0x080062e5
 80062d8:	080062eb 	.word	0x080062eb
 80062dc:	080062e5 	.word	0x080062e5
 80062e0:	080062fd 	.word	0x080062fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	73fb      	strb	r3, [r7, #15]
      break;
 80062e8:	e02f      	b.n	800634a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d024      	beq.n	8006340 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062fa:	e021      	b.n	8006340 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006304:	d11e      	bne.n	8006344 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800630a:	e01b      	b.n	8006344 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d902      	bls.n	8006318 <DMA_CheckFifoParam+0xb4>
 8006312:	2b03      	cmp	r3, #3
 8006314:	d003      	beq.n	800631e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006316:	e018      	b.n	800634a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	73fb      	strb	r3, [r7, #15]
      break;
 800631c:	e015      	b.n	800634a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00e      	beq.n	8006348 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	73fb      	strb	r3, [r7, #15]
      break;
 800632e:	e00b      	b.n	8006348 <DMA_CheckFifoParam+0xe4>
      break;
 8006330:	bf00      	nop
 8006332:	e00a      	b.n	800634a <DMA_CheckFifoParam+0xe6>
      break;
 8006334:	bf00      	nop
 8006336:	e008      	b.n	800634a <DMA_CheckFifoParam+0xe6>
      break;
 8006338:	bf00      	nop
 800633a:	e006      	b.n	800634a <DMA_CheckFifoParam+0xe6>
      break;
 800633c:	bf00      	nop
 800633e:	e004      	b.n	800634a <DMA_CheckFifoParam+0xe6>
      break;
 8006340:	bf00      	nop
 8006342:	e002      	b.n	800634a <DMA_CheckFifoParam+0xe6>
      break;   
 8006344:	bf00      	nop
 8006346:	e000      	b.n	800634a <DMA_CheckFifoParam+0xe6>
      break;
 8006348:	bf00      	nop
    }
  } 
  
  return status; 
 800634a:	7bfb      	ldrb	r3, [r7, #15]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006358:	b480      	push	{r7}
 800635a:	b089      	sub	sp, #36	; 0x24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006362:	2300      	movs	r3, #0
 8006364:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006366:	2300      	movs	r3, #0
 8006368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800636a:	2300      	movs	r3, #0
 800636c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800636e:	2300      	movs	r3, #0
 8006370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006372:	2300      	movs	r3, #0
 8006374:	61fb      	str	r3, [r7, #28]
 8006376:	e175      	b.n	8006664 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006378:	2201      	movs	r2, #1
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	fa02 f303 	lsl.w	r3, r2, r3
 8006380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	4013      	ands	r3, r2
 800638a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	429a      	cmp	r2, r3
 8006392:	f040 8164 	bne.w	800665e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d00b      	beq.n	80063b6 <HAL_GPIO_Init+0x5e>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d007      	beq.n	80063b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80063aa:	2b11      	cmp	r3, #17
 80063ac:	d003      	beq.n	80063b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b12      	cmp	r3, #18
 80063b4:	d130      	bne.n	8006418 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	2203      	movs	r2, #3
 80063c2:	fa02 f303 	lsl.w	r3, r2, r3
 80063c6:	43db      	mvns	r3, r3
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	4013      	ands	r3, r2
 80063cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	4313      	orrs	r3, r2
 80063de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063ec:	2201      	movs	r2, #1
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	fa02 f303 	lsl.w	r3, r2, r3
 80063f4:	43db      	mvns	r3, r3
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	4013      	ands	r3, r2
 80063fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	091b      	lsrs	r3, r3, #4
 8006402:	f003 0201 	and.w	r2, r3, #1
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	fa02 f303 	lsl.w	r3, r2, r3
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	4313      	orrs	r3, r2
 8006410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	2203      	movs	r2, #3
 8006424:	fa02 f303 	lsl.w	r3, r2, r3
 8006428:	43db      	mvns	r3, r3
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	4013      	ands	r3, r2
 800642e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	4313      	orrs	r3, r2
 8006440:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	2b02      	cmp	r3, #2
 800644e:	d003      	beq.n	8006458 <HAL_GPIO_Init+0x100>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b12      	cmp	r3, #18
 8006456:	d123      	bne.n	80064a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	08da      	lsrs	r2, r3, #3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3208      	adds	r2, #8
 8006460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	220f      	movs	r2, #15
 8006470:	fa02 f303 	lsl.w	r3, r2, r3
 8006474:	43db      	mvns	r3, r3
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	4013      	ands	r3, r2
 800647a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	fa02 f303 	lsl.w	r3, r2, r3
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	4313      	orrs	r3, r2
 8006490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	08da      	lsrs	r2, r3, #3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3208      	adds	r2, #8
 800649a:	69b9      	ldr	r1, [r7, #24]
 800649c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	2203      	movs	r2, #3
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	43db      	mvns	r3, r3
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	4013      	ands	r3, r2
 80064b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f003 0203 	and.w	r2, r3, #3
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	fa02 f303 	lsl.w	r3, r2, r3
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 80be 	beq.w	800665e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064e2:	4b65      	ldr	r3, [pc, #404]	; (8006678 <HAL_GPIO_Init+0x320>)
 80064e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e6:	4a64      	ldr	r2, [pc, #400]	; (8006678 <HAL_GPIO_Init+0x320>)
 80064e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064ec:	6453      	str	r3, [r2, #68]	; 0x44
 80064ee:	4b62      	ldr	r3, [pc, #392]	; (8006678 <HAL_GPIO_Init+0x320>)
 80064f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80064fa:	4a60      	ldr	r2, [pc, #384]	; (800667c <HAL_GPIO_Init+0x324>)
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	089b      	lsrs	r3, r3, #2
 8006500:	3302      	adds	r3, #2
 8006502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006506:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	220f      	movs	r2, #15
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	43db      	mvns	r3, r3
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	4013      	ands	r3, r2
 800651c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a57      	ldr	r2, [pc, #348]	; (8006680 <HAL_GPIO_Init+0x328>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d037      	beq.n	8006596 <HAL_GPIO_Init+0x23e>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a56      	ldr	r2, [pc, #344]	; (8006684 <HAL_GPIO_Init+0x32c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d031      	beq.n	8006592 <HAL_GPIO_Init+0x23a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a55      	ldr	r2, [pc, #340]	; (8006688 <HAL_GPIO_Init+0x330>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d02b      	beq.n	800658e <HAL_GPIO_Init+0x236>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a54      	ldr	r2, [pc, #336]	; (800668c <HAL_GPIO_Init+0x334>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d025      	beq.n	800658a <HAL_GPIO_Init+0x232>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a53      	ldr	r2, [pc, #332]	; (8006690 <HAL_GPIO_Init+0x338>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d01f      	beq.n	8006586 <HAL_GPIO_Init+0x22e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a52      	ldr	r2, [pc, #328]	; (8006694 <HAL_GPIO_Init+0x33c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d019      	beq.n	8006582 <HAL_GPIO_Init+0x22a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a51      	ldr	r2, [pc, #324]	; (8006698 <HAL_GPIO_Init+0x340>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d013      	beq.n	800657e <HAL_GPIO_Init+0x226>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a50      	ldr	r2, [pc, #320]	; (800669c <HAL_GPIO_Init+0x344>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00d      	beq.n	800657a <HAL_GPIO_Init+0x222>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a4f      	ldr	r2, [pc, #316]	; (80066a0 <HAL_GPIO_Init+0x348>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d007      	beq.n	8006576 <HAL_GPIO_Init+0x21e>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a4e      	ldr	r2, [pc, #312]	; (80066a4 <HAL_GPIO_Init+0x34c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d101      	bne.n	8006572 <HAL_GPIO_Init+0x21a>
 800656e:	2309      	movs	r3, #9
 8006570:	e012      	b.n	8006598 <HAL_GPIO_Init+0x240>
 8006572:	230a      	movs	r3, #10
 8006574:	e010      	b.n	8006598 <HAL_GPIO_Init+0x240>
 8006576:	2308      	movs	r3, #8
 8006578:	e00e      	b.n	8006598 <HAL_GPIO_Init+0x240>
 800657a:	2307      	movs	r3, #7
 800657c:	e00c      	b.n	8006598 <HAL_GPIO_Init+0x240>
 800657e:	2306      	movs	r3, #6
 8006580:	e00a      	b.n	8006598 <HAL_GPIO_Init+0x240>
 8006582:	2305      	movs	r3, #5
 8006584:	e008      	b.n	8006598 <HAL_GPIO_Init+0x240>
 8006586:	2304      	movs	r3, #4
 8006588:	e006      	b.n	8006598 <HAL_GPIO_Init+0x240>
 800658a:	2303      	movs	r3, #3
 800658c:	e004      	b.n	8006598 <HAL_GPIO_Init+0x240>
 800658e:	2302      	movs	r3, #2
 8006590:	e002      	b.n	8006598 <HAL_GPIO_Init+0x240>
 8006592:	2301      	movs	r3, #1
 8006594:	e000      	b.n	8006598 <HAL_GPIO_Init+0x240>
 8006596:	2300      	movs	r3, #0
 8006598:	69fa      	ldr	r2, [r7, #28]
 800659a:	f002 0203 	and.w	r2, r2, #3
 800659e:	0092      	lsls	r2, r2, #2
 80065a0:	4093      	lsls	r3, r2
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80065a8:	4934      	ldr	r1, [pc, #208]	; (800667c <HAL_GPIO_Init+0x324>)
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	089b      	lsrs	r3, r3, #2
 80065ae:	3302      	adds	r3, #2
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065b6:	4b3c      	ldr	r3, [pc, #240]	; (80066a8 <HAL_GPIO_Init+0x350>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	43db      	mvns	r3, r3
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	4013      	ands	r3, r2
 80065c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80065da:	4a33      	ldr	r2, [pc, #204]	; (80066a8 <HAL_GPIO_Init+0x350>)
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80065e0:	4b31      	ldr	r3, [pc, #196]	; (80066a8 <HAL_GPIO_Init+0x350>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	43db      	mvns	r3, r3
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	4013      	ands	r3, r2
 80065ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006604:	4a28      	ldr	r2, [pc, #160]	; (80066a8 <HAL_GPIO_Init+0x350>)
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800660a:	4b27      	ldr	r3, [pc, #156]	; (80066a8 <HAL_GPIO_Init+0x350>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	43db      	mvns	r3, r3
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	4013      	ands	r3, r2
 8006618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800662e:	4a1e      	ldr	r2, [pc, #120]	; (80066a8 <HAL_GPIO_Init+0x350>)
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006634:	4b1c      	ldr	r3, [pc, #112]	; (80066a8 <HAL_GPIO_Init+0x350>)
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	43db      	mvns	r3, r3
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	4013      	ands	r3, r2
 8006642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d003      	beq.n	8006658 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006658:	4a13      	ldr	r2, [pc, #76]	; (80066a8 <HAL_GPIO_Init+0x350>)
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	3301      	adds	r3, #1
 8006662:	61fb      	str	r3, [r7, #28]
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	2b0f      	cmp	r3, #15
 8006668:	f67f ae86 	bls.w	8006378 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800666c:	bf00      	nop
 800666e:	3724      	adds	r7, #36	; 0x24
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	40023800 	.word	0x40023800
 800667c:	40013800 	.word	0x40013800
 8006680:	40020000 	.word	0x40020000
 8006684:	40020400 	.word	0x40020400
 8006688:	40020800 	.word	0x40020800
 800668c:	40020c00 	.word	0x40020c00
 8006690:	40021000 	.word	0x40021000
 8006694:	40021400 	.word	0x40021400
 8006698:	40021800 	.word	0x40021800
 800669c:	40021c00 	.word	0x40021c00
 80066a0:	40022000 	.word	0x40022000
 80066a4:	40022400 	.word	0x40022400
 80066a8:	40013c00 	.word	0x40013c00

080066ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	691a      	ldr	r2, [r3, #16]
 80066bc:	887b      	ldrh	r3, [r7, #2]
 80066be:	4013      	ands	r3, r2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80066c4:	2301      	movs	r3, #1
 80066c6:	73fb      	strb	r3, [r7, #15]
 80066c8:	e001      	b.n	80066ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80066ca:	2300      	movs	r3, #0
 80066cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	807b      	strh	r3, [r7, #2]
 80066e8:	4613      	mov	r3, r2
 80066ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066ec:	787b      	ldrb	r3, [r7, #1]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066f2:	887a      	ldrh	r2, [r7, #2]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80066f8:	e003      	b.n	8006702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80066fa:	887b      	ldrh	r3, [r7, #2]
 80066fc:	041a      	lsls	r2, r3, #16
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	619a      	str	r2, [r3, #24]
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	460b      	mov	r3, r1
 8006718:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	695a      	ldr	r2, [r3, #20]
 800671e:	887b      	ldrh	r3, [r7, #2]
 8006720:	4013      	ands	r3, r2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d004      	beq.n	8006730 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006726:	887b      	ldrh	r3, [r7, #2]
 8006728:	041a      	lsls	r2, r3, #16
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800672e:	e002      	b.n	8006736 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006730:	887a      	ldrh	r2, [r7, #2]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	619a      	str	r2, [r3, #24]
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
	...

08006744 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	4603      	mov	r3, r0
 800674c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800674e:	4b08      	ldr	r3, [pc, #32]	; (8006770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006750:	695a      	ldr	r2, [r3, #20]
 8006752:	88fb      	ldrh	r3, [r7, #6]
 8006754:	4013      	ands	r3, r2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d006      	beq.n	8006768 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800675a:	4a05      	ldr	r2, [pc, #20]	; (8006770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800675c:	88fb      	ldrh	r3, [r7, #6]
 800675e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006760:	88fb      	ldrh	r3, [r7, #6]
 8006762:	4618      	mov	r0, r3
 8006764:	f7fa fdd8 	bl	8001318 <HAL_GPIO_EXTI_Callback>
  }
}
 8006768:	bf00      	nop
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	40013c00 	.word	0x40013c00

08006774 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006778:	4b05      	ldr	r3, [pc, #20]	; (8006790 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a04      	ldr	r2, [pc, #16]	; (8006790 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800677e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006782:	6013      	str	r3, [r2, #0]
}
 8006784:	bf00      	nop
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40007000 	.word	0x40007000

08006794 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800679c:	2300      	movs	r3, #0
 800679e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e29b      	b.n	8006ce2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 8087 	beq.w	80068c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80067b8:	4b96      	ldr	r3, [pc, #600]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f003 030c 	and.w	r3, r3, #12
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d00c      	beq.n	80067de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067c4:	4b93      	ldr	r3, [pc, #588]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f003 030c 	and.w	r3, r3, #12
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d112      	bne.n	80067f6 <HAL_RCC_OscConfig+0x62>
 80067d0:	4b90      	ldr	r3, [pc, #576]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067dc:	d10b      	bne.n	80067f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067de:	4b8d      	ldr	r3, [pc, #564]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d06c      	beq.n	80068c4 <HAL_RCC_OscConfig+0x130>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d168      	bne.n	80068c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e275      	b.n	8006ce2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067fe:	d106      	bne.n	800680e <HAL_RCC_OscConfig+0x7a>
 8006800:	4b84      	ldr	r3, [pc, #528]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a83      	ldr	r2, [pc, #524]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 8006806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800680a:	6013      	str	r3, [r2, #0]
 800680c:	e02e      	b.n	800686c <HAL_RCC_OscConfig+0xd8>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10c      	bne.n	8006830 <HAL_RCC_OscConfig+0x9c>
 8006816:	4b7f      	ldr	r3, [pc, #508]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a7e      	ldr	r2, [pc, #504]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 800681c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	4b7c      	ldr	r3, [pc, #496]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a7b      	ldr	r2, [pc, #492]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 8006828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	e01d      	b.n	800686c <HAL_RCC_OscConfig+0xd8>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006838:	d10c      	bne.n	8006854 <HAL_RCC_OscConfig+0xc0>
 800683a:	4b76      	ldr	r3, [pc, #472]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a75      	ldr	r2, [pc, #468]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 8006840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	4b73      	ldr	r3, [pc, #460]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a72      	ldr	r2, [pc, #456]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 800684c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	e00b      	b.n	800686c <HAL_RCC_OscConfig+0xd8>
 8006854:	4b6f      	ldr	r3, [pc, #444]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a6e      	ldr	r2, [pc, #440]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 800685a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	4b6c      	ldr	r3, [pc, #432]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a6b      	ldr	r2, [pc, #428]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 8006866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800686a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d013      	beq.n	800689c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006874:	f7fe fe44 	bl	8005500 <HAL_GetTick>
 8006878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800687a:	e008      	b.n	800688e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800687c:	f7fe fe40 	bl	8005500 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b64      	cmp	r3, #100	; 0x64
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e229      	b.n	8006ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800688e:	4b61      	ldr	r3, [pc, #388]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d0f0      	beq.n	800687c <HAL_RCC_OscConfig+0xe8>
 800689a:	e014      	b.n	80068c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800689c:	f7fe fe30 	bl	8005500 <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068a4:	f7fe fe2c 	bl	8005500 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b64      	cmp	r3, #100	; 0x64
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e215      	b.n	8006ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068b6:	4b57      	ldr	r3, [pc, #348]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1f0      	bne.n	80068a4 <HAL_RCC_OscConfig+0x110>
 80068c2:	e000      	b.n	80068c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d069      	beq.n	80069a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068d2:	4b50      	ldr	r3, [pc, #320]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 030c 	and.w	r3, r3, #12
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00b      	beq.n	80068f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068de:	4b4d      	ldr	r3, [pc, #308]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f003 030c 	and.w	r3, r3, #12
 80068e6:	2b08      	cmp	r3, #8
 80068e8:	d11c      	bne.n	8006924 <HAL_RCC_OscConfig+0x190>
 80068ea:	4b4a      	ldr	r3, [pc, #296]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d116      	bne.n	8006924 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068f6:	4b47      	ldr	r3, [pc, #284]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <HAL_RCC_OscConfig+0x17a>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d001      	beq.n	800690e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e1e9      	b.n	8006ce2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800690e:	4b41      	ldr	r3, [pc, #260]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	493d      	ldr	r1, [pc, #244]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 800691e:	4313      	orrs	r3, r2
 8006920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006922:	e040      	b.n	80069a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d023      	beq.n	8006974 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800692c:	4b39      	ldr	r3, [pc, #228]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a38      	ldr	r2, [pc, #224]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 8006932:	f043 0301 	orr.w	r3, r3, #1
 8006936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006938:	f7fe fde2 	bl	8005500 <HAL_GetTick>
 800693c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006940:	f7fe fdde 	bl	8005500 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e1c7      	b.n	8006ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006952:	4b30      	ldr	r3, [pc, #192]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0f0      	beq.n	8006940 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800695e:	4b2d      	ldr	r3, [pc, #180]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	4929      	ldr	r1, [pc, #164]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 800696e:	4313      	orrs	r3, r2
 8006970:	600b      	str	r3, [r1, #0]
 8006972:	e018      	b.n	80069a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006974:	4b27      	ldr	r3, [pc, #156]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a26      	ldr	r2, [pc, #152]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 800697a:	f023 0301 	bic.w	r3, r3, #1
 800697e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006980:	f7fe fdbe 	bl	8005500 <HAL_GetTick>
 8006984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006986:	e008      	b.n	800699a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006988:	f7fe fdba 	bl	8005500 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e1a3      	b.n	8006ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800699a:	4b1e      	ldr	r3, [pc, #120]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1f0      	bne.n	8006988 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0308 	and.w	r3, r3, #8
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d038      	beq.n	8006a24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d019      	beq.n	80069ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069ba:	4b16      	ldr	r3, [pc, #88]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 80069bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069be:	4a15      	ldr	r2, [pc, #84]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 80069c0:	f043 0301 	orr.w	r3, r3, #1
 80069c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c6:	f7fe fd9b 	bl	8005500 <HAL_GetTick>
 80069ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069cc:	e008      	b.n	80069e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069ce:	f7fe fd97 	bl	8005500 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e180      	b.n	8006ce2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069e0:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 80069e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d0f0      	beq.n	80069ce <HAL_RCC_OscConfig+0x23a>
 80069ec:	e01a      	b.n	8006a24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069ee:	4b09      	ldr	r3, [pc, #36]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 80069f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f2:	4a08      	ldr	r2, [pc, #32]	; (8006a14 <HAL_RCC_OscConfig+0x280>)
 80069f4:	f023 0301 	bic.w	r3, r3, #1
 80069f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069fa:	f7fe fd81 	bl	8005500 <HAL_GetTick>
 80069fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a00:	e00a      	b.n	8006a18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a02:	f7fe fd7d 	bl	8005500 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d903      	bls.n	8006a18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e166      	b.n	8006ce2 <HAL_RCC_OscConfig+0x54e>
 8006a14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a18:	4b92      	ldr	r3, [pc, #584]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1ee      	bne.n	8006a02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80a4 	beq.w	8006b7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a32:	4b8c      	ldr	r3, [pc, #560]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10d      	bne.n	8006a5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a3e:	4b89      	ldr	r3, [pc, #548]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	4a88      	ldr	r2, [pc, #544]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a48:	6413      	str	r3, [r2, #64]	; 0x40
 8006a4a:	4b86      	ldr	r3, [pc, #536]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a52:	60bb      	str	r3, [r7, #8]
 8006a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a56:	2301      	movs	r3, #1
 8006a58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a5a:	4b83      	ldr	r3, [pc, #524]	; (8006c68 <HAL_RCC_OscConfig+0x4d4>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d118      	bne.n	8006a98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006a66:	4b80      	ldr	r3, [pc, #512]	; (8006c68 <HAL_RCC_OscConfig+0x4d4>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a7f      	ldr	r2, [pc, #508]	; (8006c68 <HAL_RCC_OscConfig+0x4d4>)
 8006a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a72:	f7fe fd45 	bl	8005500 <HAL_GetTick>
 8006a76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a78:	e008      	b.n	8006a8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a7a:	f7fe fd41 	bl	8005500 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b64      	cmp	r3, #100	; 0x64
 8006a86:	d901      	bls.n	8006a8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e12a      	b.n	8006ce2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a8c:	4b76      	ldr	r3, [pc, #472]	; (8006c68 <HAL_RCC_OscConfig+0x4d4>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d0f0      	beq.n	8006a7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d106      	bne.n	8006aae <HAL_RCC_OscConfig+0x31a>
 8006aa0:	4b70      	ldr	r3, [pc, #448]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa4:	4a6f      	ldr	r2, [pc, #444]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006aa6:	f043 0301 	orr.w	r3, r3, #1
 8006aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8006aac:	e02d      	b.n	8006b0a <HAL_RCC_OscConfig+0x376>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10c      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x33c>
 8006ab6:	4b6b      	ldr	r3, [pc, #428]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aba:	4a6a      	ldr	r2, [pc, #424]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006abc:	f023 0301 	bic.w	r3, r3, #1
 8006ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ac2:	4b68      	ldr	r3, [pc, #416]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac6:	4a67      	ldr	r2, [pc, #412]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006ac8:	f023 0304 	bic.w	r3, r3, #4
 8006acc:	6713      	str	r3, [r2, #112]	; 0x70
 8006ace:	e01c      	b.n	8006b0a <HAL_RCC_OscConfig+0x376>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	2b05      	cmp	r3, #5
 8006ad6:	d10c      	bne.n	8006af2 <HAL_RCC_OscConfig+0x35e>
 8006ad8:	4b62      	ldr	r3, [pc, #392]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006adc:	4a61      	ldr	r2, [pc, #388]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006ade:	f043 0304 	orr.w	r3, r3, #4
 8006ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ae4:	4b5f      	ldr	r3, [pc, #380]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae8:	4a5e      	ldr	r2, [pc, #376]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006aea:	f043 0301 	orr.w	r3, r3, #1
 8006aee:	6713      	str	r3, [r2, #112]	; 0x70
 8006af0:	e00b      	b.n	8006b0a <HAL_RCC_OscConfig+0x376>
 8006af2:	4b5c      	ldr	r3, [pc, #368]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af6:	4a5b      	ldr	r2, [pc, #364]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006af8:	f023 0301 	bic.w	r3, r3, #1
 8006afc:	6713      	str	r3, [r2, #112]	; 0x70
 8006afe:	4b59      	ldr	r3, [pc, #356]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	4a58      	ldr	r2, [pc, #352]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006b04:	f023 0304 	bic.w	r3, r3, #4
 8006b08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d015      	beq.n	8006b3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b12:	f7fe fcf5 	bl	8005500 <HAL_GetTick>
 8006b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b18:	e00a      	b.n	8006b30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b1a:	f7fe fcf1 	bl	8005500 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d901      	bls.n	8006b30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e0d8      	b.n	8006ce2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b30:	4b4c      	ldr	r3, [pc, #304]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d0ee      	beq.n	8006b1a <HAL_RCC_OscConfig+0x386>
 8006b3c:	e014      	b.n	8006b68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3e:	f7fe fcdf 	bl	8005500 <HAL_GetTick>
 8006b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b44:	e00a      	b.n	8006b5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b46:	f7fe fcdb 	bl	8005500 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d901      	bls.n	8006b5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e0c2      	b.n	8006ce2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b5c:	4b41      	ldr	r3, [pc, #260]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1ee      	bne.n	8006b46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d105      	bne.n	8006b7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b6e:	4b3d      	ldr	r3, [pc, #244]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	4a3c      	ldr	r2, [pc, #240]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 80ae 	beq.w	8006ce0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b84:	4b37      	ldr	r3, [pc, #220]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f003 030c 	and.w	r3, r3, #12
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d06d      	beq.n	8006c6c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d14b      	bne.n	8006c30 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b98:	4b32      	ldr	r3, [pc, #200]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a31      	ldr	r2, [pc, #196]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba4:	f7fe fcac 	bl	8005500 <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bac:	f7fe fca8 	bl	8005500 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e091      	b.n	8006ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bbe:	4b29      	ldr	r3, [pc, #164]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1f0      	bne.n	8006bac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	69da      	ldr	r2, [r3, #28]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	019b      	lsls	r3, r3, #6
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	3b01      	subs	r3, #1
 8006be4:	041b      	lsls	r3, r3, #16
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	061b      	lsls	r3, r3, #24
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf4:	071b      	lsls	r3, r3, #28
 8006bf6:	491b      	ldr	r1, [pc, #108]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bfc:	4b19      	ldr	r3, [pc, #100]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a18      	ldr	r2, [pc, #96]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c08:	f7fe fc7a 	bl	8005500 <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c10:	f7fe fc76 	bl	8005500 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e05f      	b.n	8006ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c22:	4b10      	ldr	r3, [pc, #64]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0f0      	beq.n	8006c10 <HAL_RCC_OscConfig+0x47c>
 8006c2e:	e057      	b.n	8006ce0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c30:	4b0c      	ldr	r3, [pc, #48]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a0b      	ldr	r2, [pc, #44]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3c:	f7fe fc60 	bl	8005500 <HAL_GetTick>
 8006c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c44:	f7fe fc5c 	bl	8005500 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e045      	b.n	8006ce2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c56:	4b03      	ldr	r3, [pc, #12]	; (8006c64 <HAL_RCC_OscConfig+0x4d0>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1f0      	bne.n	8006c44 <HAL_RCC_OscConfig+0x4b0>
 8006c62:	e03d      	b.n	8006ce0 <HAL_RCC_OscConfig+0x54c>
 8006c64:	40023800 	.word	0x40023800
 8006c68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006c6c:	4b1f      	ldr	r3, [pc, #124]	; (8006cec <HAL_RCC_OscConfig+0x558>)
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d030      	beq.n	8006cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d129      	bne.n	8006cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d122      	bne.n	8006cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ca2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d119      	bne.n	8006cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb2:	085b      	lsrs	r3, r3, #1
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d10f      	bne.n	8006cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d107      	bne.n	8006cdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d001      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e000      	b.n	8006ce2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	40023800 	.word	0x40023800

08006cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e0d0      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d08:	4b6a      	ldr	r3, [pc, #424]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 030f 	and.w	r3, r3, #15
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d910      	bls.n	8006d38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d16:	4b67      	ldr	r3, [pc, #412]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f023 020f 	bic.w	r2, r3, #15
 8006d1e:	4965      	ldr	r1, [pc, #404]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d26:	4b63      	ldr	r3, [pc, #396]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d001      	beq.n	8006d38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e0b8      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d020      	beq.n	8006d86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d005      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d50:	4b59      	ldr	r3, [pc, #356]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	4a58      	ldr	r2, [pc, #352]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006d56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0308 	and.w	r3, r3, #8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d005      	beq.n	8006d74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d68:	4b53      	ldr	r3, [pc, #332]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	4a52      	ldr	r2, [pc, #328]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006d6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d74:	4b50      	ldr	r3, [pc, #320]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	494d      	ldr	r1, [pc, #308]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d040      	beq.n	8006e14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d107      	bne.n	8006daa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9a:	4b47      	ldr	r3, [pc, #284]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d115      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e07f      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d107      	bne.n	8006dc2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006db2:	4b41      	ldr	r3, [pc, #260]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e073      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dc2:	4b3d      	ldr	r3, [pc, #244]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e06b      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dd2:	4b39      	ldr	r3, [pc, #228]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f023 0203 	bic.w	r2, r3, #3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	4936      	ldr	r1, [pc, #216]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006de4:	f7fe fb8c 	bl	8005500 <HAL_GetTick>
 8006de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dea:	e00a      	b.n	8006e02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dec:	f7fe fb88 	bl	8005500 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e053      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e02:	4b2d      	ldr	r3, [pc, #180]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 020c 	and.w	r2, r3, #12
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d1eb      	bne.n	8006dec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e14:	4b27      	ldr	r3, [pc, #156]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 030f 	and.w	r3, r3, #15
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d210      	bcs.n	8006e44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e22:	4b24      	ldr	r3, [pc, #144]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f023 020f 	bic.w	r2, r3, #15
 8006e2a:	4922      	ldr	r1, [pc, #136]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e32:	4b20      	ldr	r3, [pc, #128]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 030f 	and.w	r3, r3, #15
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d001      	beq.n	8006e44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e032      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0304 	and.w	r3, r3, #4
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d008      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e50:	4b19      	ldr	r3, [pc, #100]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	4916      	ldr	r1, [pc, #88]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0308 	and.w	r3, r3, #8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d009      	beq.n	8006e82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e6e:	4b12      	ldr	r3, [pc, #72]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	490e      	ldr	r1, [pc, #56]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e82:	f000 f821 	bl	8006ec8 <HAL_RCC_GetSysClockFreq>
 8006e86:	4601      	mov	r1, r0
 8006e88:	4b0b      	ldr	r3, [pc, #44]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	091b      	lsrs	r3, r3, #4
 8006e8e:	f003 030f 	and.w	r3, r3, #15
 8006e92:	4a0a      	ldr	r2, [pc, #40]	; (8006ebc <HAL_RCC_ClockConfig+0x1cc>)
 8006e94:	5cd3      	ldrb	r3, [r2, r3]
 8006e96:	fa21 f303 	lsr.w	r3, r1, r3
 8006e9a:	4a09      	ldr	r2, [pc, #36]	; (8006ec0 <HAL_RCC_ClockConfig+0x1d0>)
 8006e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e9e:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <HAL_RCC_ClockConfig+0x1d4>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fe fae8 	bl	8005478 <HAL_InitTick>

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	40023c00 	.word	0x40023c00
 8006eb8:	40023800 	.word	0x40023800
 8006ebc:	08009b0c 	.word	0x08009b0c
 8006ec0:	20000028 	.word	0x20000028
 8006ec4:	20000030 	.word	0x20000030

08006ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	607b      	str	r3, [r7, #4]
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60fb      	str	r3, [r7, #12]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ede:	4b63      	ldr	r3, [pc, #396]	; (800706c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 030c 	and.w	r3, r3, #12
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d007      	beq.n	8006efa <HAL_RCC_GetSysClockFreq+0x32>
 8006eea:	2b08      	cmp	r3, #8
 8006eec:	d008      	beq.n	8006f00 <HAL_RCC_GetSysClockFreq+0x38>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f040 80b4 	bne.w	800705c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ef4:	4b5e      	ldr	r3, [pc, #376]	; (8007070 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006ef6:	60bb      	str	r3, [r7, #8]
      break;
 8006ef8:	e0b3      	b.n	8007062 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006efa:	4b5e      	ldr	r3, [pc, #376]	; (8007074 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006efc:	60bb      	str	r3, [r7, #8]
      break;
 8006efe:	e0b0      	b.n	8007062 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f00:	4b5a      	ldr	r3, [pc, #360]	; (800706c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f08:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006f0a:	4b58      	ldr	r3, [pc, #352]	; (800706c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d04a      	beq.n	8006fac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f16:	4b55      	ldr	r3, [pc, #340]	; (800706c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	099b      	lsrs	r3, r3, #6
 8006f1c:	f04f 0400 	mov.w	r4, #0
 8006f20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f24:	f04f 0200 	mov.w	r2, #0
 8006f28:	ea03 0501 	and.w	r5, r3, r1
 8006f2c:	ea04 0602 	and.w	r6, r4, r2
 8006f30:	4629      	mov	r1, r5
 8006f32:	4632      	mov	r2, r6
 8006f34:	f04f 0300 	mov.w	r3, #0
 8006f38:	f04f 0400 	mov.w	r4, #0
 8006f3c:	0154      	lsls	r4, r2, #5
 8006f3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006f42:	014b      	lsls	r3, r1, #5
 8006f44:	4619      	mov	r1, r3
 8006f46:	4622      	mov	r2, r4
 8006f48:	1b49      	subs	r1, r1, r5
 8006f4a:	eb62 0206 	sbc.w	r2, r2, r6
 8006f4e:	f04f 0300 	mov.w	r3, #0
 8006f52:	f04f 0400 	mov.w	r4, #0
 8006f56:	0194      	lsls	r4, r2, #6
 8006f58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006f5c:	018b      	lsls	r3, r1, #6
 8006f5e:	1a5b      	subs	r3, r3, r1
 8006f60:	eb64 0402 	sbc.w	r4, r4, r2
 8006f64:	f04f 0100 	mov.w	r1, #0
 8006f68:	f04f 0200 	mov.w	r2, #0
 8006f6c:	00e2      	lsls	r2, r4, #3
 8006f6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006f72:	00d9      	lsls	r1, r3, #3
 8006f74:	460b      	mov	r3, r1
 8006f76:	4614      	mov	r4, r2
 8006f78:	195b      	adds	r3, r3, r5
 8006f7a:	eb44 0406 	adc.w	r4, r4, r6
 8006f7e:	f04f 0100 	mov.w	r1, #0
 8006f82:	f04f 0200 	mov.w	r2, #0
 8006f86:	0262      	lsls	r2, r4, #9
 8006f88:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006f8c:	0259      	lsls	r1, r3, #9
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4614      	mov	r4, r2
 8006f92:	4618      	mov	r0, r3
 8006f94:	4621      	mov	r1, r4
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f04f 0400 	mov.w	r4, #0
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4623      	mov	r3, r4
 8006fa0:	f7f9 f94a 	bl	8000238 <__aeabi_uldivmod>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	e049      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fac:	4b2f      	ldr	r3, [pc, #188]	; (800706c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	099b      	lsrs	r3, r3, #6
 8006fb2:	f04f 0400 	mov.w	r4, #0
 8006fb6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006fba:	f04f 0200 	mov.w	r2, #0
 8006fbe:	ea03 0501 	and.w	r5, r3, r1
 8006fc2:	ea04 0602 	and.w	r6, r4, r2
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	4632      	mov	r2, r6
 8006fca:	f04f 0300 	mov.w	r3, #0
 8006fce:	f04f 0400 	mov.w	r4, #0
 8006fd2:	0154      	lsls	r4, r2, #5
 8006fd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006fd8:	014b      	lsls	r3, r1, #5
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4622      	mov	r2, r4
 8006fde:	1b49      	subs	r1, r1, r5
 8006fe0:	eb62 0206 	sbc.w	r2, r2, r6
 8006fe4:	f04f 0300 	mov.w	r3, #0
 8006fe8:	f04f 0400 	mov.w	r4, #0
 8006fec:	0194      	lsls	r4, r2, #6
 8006fee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006ff2:	018b      	lsls	r3, r1, #6
 8006ff4:	1a5b      	subs	r3, r3, r1
 8006ff6:	eb64 0402 	sbc.w	r4, r4, r2
 8006ffa:	f04f 0100 	mov.w	r1, #0
 8006ffe:	f04f 0200 	mov.w	r2, #0
 8007002:	00e2      	lsls	r2, r4, #3
 8007004:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007008:	00d9      	lsls	r1, r3, #3
 800700a:	460b      	mov	r3, r1
 800700c:	4614      	mov	r4, r2
 800700e:	195b      	adds	r3, r3, r5
 8007010:	eb44 0406 	adc.w	r4, r4, r6
 8007014:	f04f 0100 	mov.w	r1, #0
 8007018:	f04f 0200 	mov.w	r2, #0
 800701c:	02a2      	lsls	r2, r4, #10
 800701e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007022:	0299      	lsls	r1, r3, #10
 8007024:	460b      	mov	r3, r1
 8007026:	4614      	mov	r4, r2
 8007028:	4618      	mov	r0, r3
 800702a:	4621      	mov	r1, r4
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f04f 0400 	mov.w	r4, #0
 8007032:	461a      	mov	r2, r3
 8007034:	4623      	mov	r3, r4
 8007036:	f7f9 f8ff 	bl	8000238 <__aeabi_uldivmod>
 800703a:	4603      	mov	r3, r0
 800703c:	460c      	mov	r4, r1
 800703e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007040:	4b0a      	ldr	r3, [pc, #40]	; (800706c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	0c1b      	lsrs	r3, r3, #16
 8007046:	f003 0303 	and.w	r3, r3, #3
 800704a:	3301      	adds	r3, #1
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	fbb2 f3f3 	udiv	r3, r2, r3
 8007058:	60bb      	str	r3, [r7, #8]
      break;
 800705a:	e002      	b.n	8007062 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800705c:	4b04      	ldr	r3, [pc, #16]	; (8007070 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800705e:	60bb      	str	r3, [r7, #8]
      break;
 8007060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007062:	68bb      	ldr	r3, [r7, #8]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800706c:	40023800 	.word	0x40023800
 8007070:	00f42400 	.word	0x00f42400
 8007074:	007a1200 	.word	0x007a1200

08007078 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800707c:	4b03      	ldr	r3, [pc, #12]	; (800708c <HAL_RCC_GetHCLKFreq+0x14>)
 800707e:	681b      	ldr	r3, [r3, #0]
}
 8007080:	4618      	mov	r0, r3
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	20000028 	.word	0x20000028

08007090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007094:	f7ff fff0 	bl	8007078 <HAL_RCC_GetHCLKFreq>
 8007098:	4601      	mov	r1, r0
 800709a:	4b05      	ldr	r3, [pc, #20]	; (80070b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	0a9b      	lsrs	r3, r3, #10
 80070a0:	f003 0307 	and.w	r3, r3, #7
 80070a4:	4a03      	ldr	r2, [pc, #12]	; (80070b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070a6:	5cd3      	ldrb	r3, [r2, r3]
 80070a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	40023800 	.word	0x40023800
 80070b4:	08009b1c 	.word	0x08009b1c

080070b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070bc:	f7ff ffdc 	bl	8007078 <HAL_RCC_GetHCLKFreq>
 80070c0:	4601      	mov	r1, r0
 80070c2:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	0b5b      	lsrs	r3, r3, #13
 80070c8:	f003 0307 	and.w	r3, r3, #7
 80070cc:	4a03      	ldr	r2, [pc, #12]	; (80070dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80070ce:	5cd3      	ldrb	r3, [r2, r3]
 80070d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	40023800 	.word	0x40023800
 80070dc:	08009b1c 	.word	0x08009b1c

080070e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80070f4:	2300      	movs	r3, #0
 80070f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	d012      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007108:	4b69      	ldr	r3, [pc, #420]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	4a68      	ldr	r2, [pc, #416]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800710e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007112:	6093      	str	r3, [r2, #8]
 8007114:	4b66      	ldr	r3, [pc, #408]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711c:	4964      	ldr	r1, [pc, #400]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800711e:	4313      	orrs	r3, r2
 8007120:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800712a:	2301      	movs	r3, #1
 800712c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d017      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800713a:	4b5d      	ldr	r3, [pc, #372]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800713c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007140:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007148:	4959      	ldr	r1, [pc, #356]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800714a:	4313      	orrs	r3, r2
 800714c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007158:	d101      	bne.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800715a:	2301      	movs	r3, #1
 800715c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007166:	2301      	movs	r3, #1
 8007168:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d017      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007176:	4b4e      	ldr	r3, [pc, #312]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800717c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007184:	494a      	ldr	r1, [pc, #296]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007186:	4313      	orrs	r3, r2
 8007188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007194:	d101      	bne.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007196:	2301      	movs	r3, #1
 8007198:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80071a2:	2301      	movs	r3, #1
 80071a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80071b2:	2301      	movs	r3, #1
 80071b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 808b 	beq.w	80072da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071c4:	4b3a      	ldr	r3, [pc, #232]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c8:	4a39      	ldr	r2, [pc, #228]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ce:	6413      	str	r3, [r2, #64]	; 0x40
 80071d0:	4b37      	ldr	r3, [pc, #220]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071d8:	60bb      	str	r3, [r7, #8]
 80071da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80071dc:	4b35      	ldr	r3, [pc, #212]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a34      	ldr	r2, [pc, #208]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071e8:	f7fe f98a 	bl	8005500 <HAL_GetTick>
 80071ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80071ee:	e008      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071f0:	f7fe f986 	bl	8005500 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b64      	cmp	r3, #100	; 0x64
 80071fc:	d901      	bls.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e38d      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007202:	4b2c      	ldr	r3, [pc, #176]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720a:	2b00      	cmp	r3, #0
 800720c:	d0f0      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800720e:	4b28      	ldr	r3, [pc, #160]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007216:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d035      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	429a      	cmp	r2, r3
 800722a:	d02e      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800722c:	4b20      	ldr	r3, [pc, #128]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800722e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007234:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007236:	4b1e      	ldr	r3, [pc, #120]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723a:	4a1d      	ldr	r2, [pc, #116]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800723c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007240:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007242:	4b1b      	ldr	r3, [pc, #108]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007246:	4a1a      	ldr	r2, [pc, #104]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800724c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800724e:	4a18      	ldr	r2, [pc, #96]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007254:	4b16      	ldr	r3, [pc, #88]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	2b01      	cmp	r3, #1
 800725e:	d114      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007260:	f7fe f94e 	bl	8005500 <HAL_GetTick>
 8007264:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007266:	e00a      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007268:	f7fe f94a 	bl	8005500 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	f241 3288 	movw	r2, #5000	; 0x1388
 8007276:	4293      	cmp	r3, r2
 8007278:	d901      	bls.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e34f      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800727e:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0ee      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007296:	d111      	bne.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007298:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80072a4:	4b04      	ldr	r3, [pc, #16]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80072a6:	400b      	ands	r3, r1
 80072a8:	4901      	ldr	r1, [pc, #4]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	608b      	str	r3, [r1, #8]
 80072ae:	e00b      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80072b0:	40023800 	.word	0x40023800
 80072b4:	40007000 	.word	0x40007000
 80072b8:	0ffffcff 	.word	0x0ffffcff
 80072bc:	4bb3      	ldr	r3, [pc, #716]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	4ab2      	ldr	r2, [pc, #712]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80072c6:	6093      	str	r3, [r2, #8]
 80072c8:	4bb0      	ldr	r3, [pc, #704]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072d4:	49ad      	ldr	r1, [pc, #692]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0310 	and.w	r3, r3, #16
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d010      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072e6:	4ba9      	ldr	r3, [pc, #676]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072ec:	4aa7      	ldr	r2, [pc, #668]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80072f6:	4ba5      	ldr	r3, [pc, #660]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	49a2      	ldr	r1, [pc, #648]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007302:	4313      	orrs	r3, r2
 8007304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00a      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007314:	4b9d      	ldr	r3, [pc, #628]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800731a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007322:	499a      	ldr	r1, [pc, #616]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007324:	4313      	orrs	r3, r2
 8007326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00a      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007336:	4b95      	ldr	r3, [pc, #596]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800733c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007344:	4991      	ldr	r1, [pc, #580]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007346:	4313      	orrs	r3, r2
 8007348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00a      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007358:	4b8c      	ldr	r3, [pc, #560]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800735a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007366:	4989      	ldr	r1, [pc, #548]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007368:	4313      	orrs	r3, r2
 800736a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800737a:	4b84      	ldr	r3, [pc, #528]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800737c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007380:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007388:	4980      	ldr	r1, [pc, #512]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800738a:	4313      	orrs	r3, r2
 800738c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00a      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800739c:	4b7b      	ldr	r3, [pc, #492]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800739e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a2:	f023 0203 	bic.w	r2, r3, #3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073aa:	4978      	ldr	r1, [pc, #480]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073be:	4b73      	ldr	r3, [pc, #460]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c4:	f023 020c 	bic.w	r2, r3, #12
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073cc:	496f      	ldr	r1, [pc, #444]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00a      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073e0:	4b6a      	ldr	r3, [pc, #424]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ee:	4967      	ldr	r1, [pc, #412]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00a      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007402:	4b62      	ldr	r3, [pc, #392]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007408:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007410:	495e      	ldr	r1, [pc, #376]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007412:	4313      	orrs	r3, r2
 8007414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00a      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007424:	4b59      	ldr	r3, [pc, #356]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007432:	4956      	ldr	r1, [pc, #344]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007434:	4313      	orrs	r3, r2
 8007436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007446:	4b51      	ldr	r3, [pc, #324]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007454:	494d      	ldr	r1, [pc, #308]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007456:	4313      	orrs	r3, r2
 8007458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00a      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007468:	4b48      	ldr	r3, [pc, #288]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800746a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800746e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007476:	4945      	ldr	r1, [pc, #276]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007478:	4313      	orrs	r3, r2
 800747a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800748a:	4b40      	ldr	r3, [pc, #256]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800748c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007490:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007498:	493c      	ldr	r1, [pc, #240]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800749a:	4313      	orrs	r3, r2
 800749c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074ac:	4b37      	ldr	r3, [pc, #220]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074ba:	4934      	ldr	r1, [pc, #208]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d011      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80074ce:	4b2f      	ldr	r3, [pc, #188]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074dc:	492b      	ldr	r1, [pc, #172]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074ec:	d101      	bne.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80074ee:	2301      	movs	r3, #1
 80074f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80074fe:	2301      	movs	r3, #1
 8007500:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800750e:	4b1f      	ldr	r3, [pc, #124]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007514:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800751c:	491b      	ldr	r1, [pc, #108]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00b      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007530:	4b16      	ldr	r3, [pc, #88]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007536:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007540:	4912      	ldr	r1, [pc, #72]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007542:	4313      	orrs	r3, r2
 8007544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00b      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007554:	4b0d      	ldr	r3, [pc, #52]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800755a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007564:	4909      	ldr	r1, [pc, #36]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007566:	4313      	orrs	r3, r2
 8007568:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00f      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007578:	4b04      	ldr	r3, [pc, #16]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800757a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800757e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007588:	e002      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800758a:	bf00      	nop
 800758c:	40023800 	.word	0x40023800
 8007590:	4985      	ldr	r1, [pc, #532]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007592:	4313      	orrs	r3, r2
 8007594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80075a4:	4b80      	ldr	r3, [pc, #512]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80075a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075b4:	497c      	ldr	r1, [pc, #496]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d005      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075ca:	f040 80d6 	bne.w	800777a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80075ce:	4b76      	ldr	r3, [pc, #472]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a75      	ldr	r2, [pc, #468]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80075d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075da:	f7fd ff91 	bl	8005500 <HAL_GetTick>
 80075de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075e0:	e008      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075e2:	f7fd ff8d 	bl	8005500 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b64      	cmp	r3, #100	; 0x64
 80075ee:	d901      	bls.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e194      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075f4:	4b6c      	ldr	r3, [pc, #432]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1f0      	bne.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d021      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007610:	2b00      	cmp	r3, #0
 8007612:	d11d      	bne.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007614:	4b64      	ldr	r3, [pc, #400]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800761a:	0c1b      	lsrs	r3, r3, #16
 800761c:	f003 0303 	and.w	r3, r3, #3
 8007620:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007622:	4b61      	ldr	r3, [pc, #388]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007628:	0e1b      	lsrs	r3, r3, #24
 800762a:	f003 030f 	and.w	r3, r3, #15
 800762e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	019a      	lsls	r2, r3, #6
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	041b      	lsls	r3, r3, #16
 800763a:	431a      	orrs	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	061b      	lsls	r3, r3, #24
 8007640:	431a      	orrs	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	071b      	lsls	r3, r3, #28
 8007648:	4957      	ldr	r1, [pc, #348]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800764a:	4313      	orrs	r3, r2
 800764c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d004      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007664:	d00a      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800766e:	2b00      	cmp	r3, #0
 8007670:	d02e      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800767a:	d129      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800767c:	4b4a      	ldr	r3, [pc, #296]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800767e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007682:	0c1b      	lsrs	r3, r3, #16
 8007684:	f003 0303 	and.w	r3, r3, #3
 8007688:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800768a:	4b47      	ldr	r3, [pc, #284]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800768c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007690:	0f1b      	lsrs	r3, r3, #28
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	019a      	lsls	r2, r3, #6
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	041b      	lsls	r3, r3, #16
 80076a2:	431a      	orrs	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	061b      	lsls	r3, r3, #24
 80076aa:	431a      	orrs	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	071b      	lsls	r3, r3, #28
 80076b0:	493d      	ldr	r1, [pc, #244]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80076b8:	4b3b      	ldr	r3, [pc, #236]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80076ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076be:	f023 021f 	bic.w	r2, r3, #31
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	3b01      	subs	r3, #1
 80076c8:	4937      	ldr	r1, [pc, #220]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d01d      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076dc:	4b32      	ldr	r3, [pc, #200]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80076de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076e2:	0e1b      	lsrs	r3, r3, #24
 80076e4:	f003 030f 	and.w	r3, r3, #15
 80076e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076ea:	4b2f      	ldr	r3, [pc, #188]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80076ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076f0:	0f1b      	lsrs	r3, r3, #28
 80076f2:	f003 0307 	and.w	r3, r3, #7
 80076f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	019a      	lsls	r2, r3, #6
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	041b      	lsls	r3, r3, #16
 8007704:	431a      	orrs	r2, r3
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	061b      	lsls	r3, r3, #24
 800770a:	431a      	orrs	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	071b      	lsls	r3, r3, #28
 8007710:	4925      	ldr	r1, [pc, #148]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007712:	4313      	orrs	r3, r2
 8007714:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d011      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	019a      	lsls	r2, r3, #6
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	041b      	lsls	r3, r3, #16
 8007730:	431a      	orrs	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	061b      	lsls	r3, r3, #24
 8007738:	431a      	orrs	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	071b      	lsls	r3, r3, #28
 8007740:	4919      	ldr	r1, [pc, #100]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007742:	4313      	orrs	r3, r2
 8007744:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007748:	4b17      	ldr	r3, [pc, #92]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a16      	ldr	r2, [pc, #88]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800774e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007754:	f7fd fed4 	bl	8005500 <HAL_GetTick>
 8007758:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800775a:	e008      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800775c:	f7fd fed0 	bl	8005500 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	2b64      	cmp	r3, #100	; 0x64
 8007768:	d901      	bls.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e0d7      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800776e:	4b0e      	ldr	r3, [pc, #56]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d0f0      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2b01      	cmp	r3, #1
 800777e:	f040 80cd 	bne.w	800791c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007782:	4b09      	ldr	r3, [pc, #36]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a08      	ldr	r2, [pc, #32]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800778c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800778e:	f7fd feb7 	bl	8005500 <HAL_GetTick>
 8007792:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007794:	e00a      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007796:	f7fd feb3 	bl	8005500 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	2b64      	cmp	r3, #100	; 0x64
 80077a2:	d903      	bls.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e0ba      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80077a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077ac:	4b5e      	ldr	r3, [pc, #376]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077b8:	d0ed      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d009      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d02e      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d12a      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80077e2:	4b51      	ldr	r3, [pc, #324]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80077e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e8:	0c1b      	lsrs	r3, r3, #16
 80077ea:	f003 0303 	and.w	r3, r3, #3
 80077ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80077f0:	4b4d      	ldr	r3, [pc, #308]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80077f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f6:	0f1b      	lsrs	r3, r3, #28
 80077f8:	f003 0307 	and.w	r3, r3, #7
 80077fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	019a      	lsls	r2, r3, #6
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	041b      	lsls	r3, r3, #16
 8007808:	431a      	orrs	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	061b      	lsls	r3, r3, #24
 8007810:	431a      	orrs	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	071b      	lsls	r3, r3, #28
 8007816:	4944      	ldr	r1, [pc, #272]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007818:	4313      	orrs	r3, r2
 800781a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800781e:	4b42      	ldr	r3, [pc, #264]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007824:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	3b01      	subs	r3, #1
 800782e:	021b      	lsls	r3, r3, #8
 8007830:	493d      	ldr	r1, [pc, #244]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007832:	4313      	orrs	r3, r2
 8007834:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d022      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007848:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800784c:	d11d      	bne.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800784e:	4b36      	ldr	r3, [pc, #216]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007854:	0e1b      	lsrs	r3, r3, #24
 8007856:	f003 030f 	and.w	r3, r3, #15
 800785a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800785c:	4b32      	ldr	r3, [pc, #200]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800785e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007862:	0f1b      	lsrs	r3, r3, #28
 8007864:	f003 0307 	and.w	r3, r3, #7
 8007868:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	019a      	lsls	r2, r3, #6
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	041b      	lsls	r3, r3, #16
 8007876:	431a      	orrs	r2, r3
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	061b      	lsls	r3, r3, #24
 800787c:	431a      	orrs	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	071b      	lsls	r3, r3, #28
 8007882:	4929      	ldr	r1, [pc, #164]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007884:	4313      	orrs	r3, r2
 8007886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0308 	and.w	r3, r3, #8
 8007892:	2b00      	cmp	r3, #0
 8007894:	d028      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007896:	4b24      	ldr	r3, [pc, #144]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800789c:	0e1b      	lsrs	r3, r3, #24
 800789e:	f003 030f 	and.w	r3, r3, #15
 80078a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80078a4:	4b20      	ldr	r3, [pc, #128]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80078a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078aa:	0c1b      	lsrs	r3, r3, #16
 80078ac:	f003 0303 	and.w	r3, r3, #3
 80078b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	019a      	lsls	r2, r3, #6
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	041b      	lsls	r3, r3, #16
 80078bc:	431a      	orrs	r2, r3
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	061b      	lsls	r3, r3, #24
 80078c2:	431a      	orrs	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	071b      	lsls	r3, r3, #28
 80078ca:	4917      	ldr	r1, [pc, #92]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80078d2:	4b15      	ldr	r3, [pc, #84]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80078d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e0:	4911      	ldr	r1, [pc, #68]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80078e8:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a0e      	ldr	r2, [pc, #56]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80078ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078f4:	f7fd fe04 	bl	8005500 <HAL_GetTick>
 80078f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80078fa:	e008      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80078fc:	f7fd fe00 	bl	8005500 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b64      	cmp	r3, #100	; 0x64
 8007908:	d901      	bls.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e007      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800790e:	4b06      	ldr	r3, [pc, #24]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800791a:	d1ef      	bne.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3720      	adds	r7, #32
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	40023800 	.word	0x40023800

0800792c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e01d      	b.n	800797a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d106      	bne.n	8007958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7f9 feb6 	bl	80016c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3304      	adds	r3, #4
 8007968:	4619      	mov	r1, r3
 800796a:	4610      	mov	r0, r2
 800796c:	f000 fa8c 	bl	8007e88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
	...

08007984 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	4b0e      	ldr	r3, [pc, #56]	; (80079d4 <HAL_TIM_Base_Start+0x50>)
 800799c:	4013      	ands	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b06      	cmp	r3, #6
 80079a4:	d00b      	beq.n	80079be <HAL_TIM_Base_Start+0x3a>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ac:	d007      	beq.n	80079be <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f042 0201 	orr.w	r2, r2, #1
 80079bc:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	00010007 	.word	0x00010007

080079d8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6a1a      	ldr	r2, [r3, #32]
 80079ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80079f2:	4013      	ands	r3, r2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10f      	bne.n	8007a18 <HAL_TIM_Base_Stop+0x40>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6a1a      	ldr	r2, [r3, #32]
 80079fe:	f240 4344 	movw	r3, #1092	; 0x444
 8007a02:	4013      	ands	r3, r2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d107      	bne.n	8007a18 <HAL_TIM_Base_Stop+0x40>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0201 	bic.w	r2, r2, #1
 8007a16:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
	...

08007a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68da      	ldr	r2, [r3, #12]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 0201 	orr.w	r2, r2, #1
 8007a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	689a      	ldr	r2, [r3, #8]
 8007a4e:	4b0c      	ldr	r3, [pc, #48]	; (8007a80 <HAL_TIM_Base_Start_IT+0x50>)
 8007a50:	4013      	ands	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2b06      	cmp	r3, #6
 8007a58:	d00b      	beq.n	8007a72 <HAL_TIM_Base_Start_IT+0x42>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a60:	d007      	beq.n	8007a72 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f042 0201 	orr.w	r2, r2, #1
 8007a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	00010007 	.word	0x00010007

08007a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d122      	bne.n	8007ae0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d11b      	bne.n	8007ae0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f06f 0202 	mvn.w	r2, #2
 8007ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	f003 0303 	and.w	r3, r3, #3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f9c0 	bl	8007e4c <HAL_TIM_IC_CaptureCallback>
 8007acc:	e005      	b.n	8007ada <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f9b2 	bl	8007e38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f9c3 	bl	8007e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	f003 0304 	and.w	r3, r3, #4
 8007aea:	2b04      	cmp	r3, #4
 8007aec:	d122      	bne.n	8007b34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f003 0304 	and.w	r3, r3, #4
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	d11b      	bne.n	8007b34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f06f 0204 	mvn.w	r2, #4
 8007b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2202      	movs	r2, #2
 8007b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f996 	bl	8007e4c <HAL_TIM_IC_CaptureCallback>
 8007b20:	e005      	b.n	8007b2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f988 	bl	8007e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f999 	bl	8007e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	f003 0308 	and.w	r3, r3, #8
 8007b3e:	2b08      	cmp	r3, #8
 8007b40:	d122      	bne.n	8007b88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f003 0308 	and.w	r3, r3, #8
 8007b4c:	2b08      	cmp	r3, #8
 8007b4e:	d11b      	bne.n	8007b88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f06f 0208 	mvn.w	r2, #8
 8007b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2204      	movs	r2, #4
 8007b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	f003 0303 	and.w	r3, r3, #3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f96c 	bl	8007e4c <HAL_TIM_IC_CaptureCallback>
 8007b74:	e005      	b.n	8007b82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f95e 	bl	8007e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f96f 	bl	8007e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	f003 0310 	and.w	r3, r3, #16
 8007b92:	2b10      	cmp	r3, #16
 8007b94:	d122      	bne.n	8007bdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	f003 0310 	and.w	r3, r3, #16
 8007ba0:	2b10      	cmp	r3, #16
 8007ba2:	d11b      	bne.n	8007bdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f06f 0210 	mvn.w	r2, #16
 8007bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2208      	movs	r2, #8
 8007bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f942 	bl	8007e4c <HAL_TIM_IC_CaptureCallback>
 8007bc8:	e005      	b.n	8007bd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f934 	bl	8007e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f945 	bl	8007e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d10e      	bne.n	8007c08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d107      	bne.n	8007c08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f06f 0201 	mvn.w	r2, #1
 8007c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7f9 fbb0 	bl	8001368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c12:	2b80      	cmp	r3, #128	; 0x80
 8007c14:	d10e      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c20:	2b80      	cmp	r3, #128	; 0x80
 8007c22:	d107      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fafc 	bl	800822c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c42:	d10e      	bne.n	8007c62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c4e:	2b80      	cmp	r3, #128	; 0x80
 8007c50:	d107      	bne.n	8007c62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 faef 	bl	8008240 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6c:	2b40      	cmp	r3, #64	; 0x40
 8007c6e:	d10e      	bne.n	8007c8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7a:	2b40      	cmp	r3, #64	; 0x40
 8007c7c:	d107      	bne.n	8007c8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f8f3 	bl	8007e74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	d10e      	bne.n	8007cba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f003 0320 	and.w	r3, r3, #32
 8007ca6:	2b20      	cmp	r3, #32
 8007ca8:	d107      	bne.n	8007cba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f06f 0220 	mvn.w	r2, #32
 8007cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 faaf 	bl	8008218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d101      	bne.n	8007cdc <HAL_TIM_ConfigClockSource+0x18>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e0a6      	b.n	8007e2a <HAL_TIM_ConfigClockSource+0x166>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	4b4f      	ldr	r3, [pc, #316]	; (8007e34 <HAL_TIM_ConfigClockSource+0x170>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b40      	cmp	r3, #64	; 0x40
 8007d12:	d067      	beq.n	8007de4 <HAL_TIM_ConfigClockSource+0x120>
 8007d14:	2b40      	cmp	r3, #64	; 0x40
 8007d16:	d80b      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x6c>
 8007d18:	2b10      	cmp	r3, #16
 8007d1a:	d073      	beq.n	8007e04 <HAL_TIM_ConfigClockSource+0x140>
 8007d1c:	2b10      	cmp	r3, #16
 8007d1e:	d802      	bhi.n	8007d26 <HAL_TIM_ConfigClockSource+0x62>
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d06f      	beq.n	8007e04 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007d24:	e078      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d26:	2b20      	cmp	r3, #32
 8007d28:	d06c      	beq.n	8007e04 <HAL_TIM_ConfigClockSource+0x140>
 8007d2a:	2b30      	cmp	r3, #48	; 0x30
 8007d2c:	d06a      	beq.n	8007e04 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007d2e:	e073      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d30:	2b70      	cmp	r3, #112	; 0x70
 8007d32:	d00d      	beq.n	8007d50 <HAL_TIM_ConfigClockSource+0x8c>
 8007d34:	2b70      	cmp	r3, #112	; 0x70
 8007d36:	d804      	bhi.n	8007d42 <HAL_TIM_ConfigClockSource+0x7e>
 8007d38:	2b50      	cmp	r3, #80	; 0x50
 8007d3a:	d033      	beq.n	8007da4 <HAL_TIM_ConfigClockSource+0xe0>
 8007d3c:	2b60      	cmp	r3, #96	; 0x60
 8007d3e:	d041      	beq.n	8007dc4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007d40:	e06a      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d46:	d066      	beq.n	8007e16 <HAL_TIM_ConfigClockSource+0x152>
 8007d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d4c:	d017      	beq.n	8007d7e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007d4e:	e063      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6818      	ldr	r0, [r3, #0]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	6899      	ldr	r1, [r3, #8]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f000 f9ac 	bl	80080bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d72:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	609a      	str	r2, [r3, #8]
      break;
 8007d7c:	e04c      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6818      	ldr	r0, [r3, #0]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	6899      	ldr	r1, [r3, #8]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	f000 f995 	bl	80080bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	689a      	ldr	r2, [r3, #8]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007da0:	609a      	str	r2, [r3, #8]
      break;
 8007da2:	e039      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6818      	ldr	r0, [r3, #0]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	6859      	ldr	r1, [r3, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	461a      	mov	r2, r3
 8007db2:	f000 f909 	bl	8007fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2150      	movs	r1, #80	; 0x50
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 f962 	bl	8008086 <TIM_ITRx_SetConfig>
      break;
 8007dc2:	e029      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6818      	ldr	r0, [r3, #0]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	6859      	ldr	r1, [r3, #4]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	f000 f928 	bl	8008026 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2160      	movs	r1, #96	; 0x60
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 f952 	bl	8008086 <TIM_ITRx_SetConfig>
      break;
 8007de2:	e019      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6818      	ldr	r0, [r3, #0]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	6859      	ldr	r1, [r3, #4]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	461a      	mov	r2, r3
 8007df2:	f000 f8e9 	bl	8007fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2140      	movs	r1, #64	; 0x40
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 f942 	bl	8008086 <TIM_ITRx_SetConfig>
      break;
 8007e02:	e009      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	f000 f939 	bl	8008086 <TIM_ITRx_SetConfig>
      break;
 8007e14:	e000      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007e16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	fffeff88 	.word	0xfffeff88

08007e38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a40      	ldr	r2, [pc, #256]	; (8007f9c <TIM_Base_SetConfig+0x114>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d013      	beq.n	8007ec8 <TIM_Base_SetConfig+0x40>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea6:	d00f      	beq.n	8007ec8 <TIM_Base_SetConfig+0x40>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a3d      	ldr	r2, [pc, #244]	; (8007fa0 <TIM_Base_SetConfig+0x118>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d00b      	beq.n	8007ec8 <TIM_Base_SetConfig+0x40>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a3c      	ldr	r2, [pc, #240]	; (8007fa4 <TIM_Base_SetConfig+0x11c>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d007      	beq.n	8007ec8 <TIM_Base_SetConfig+0x40>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a3b      	ldr	r2, [pc, #236]	; (8007fa8 <TIM_Base_SetConfig+0x120>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d003      	beq.n	8007ec8 <TIM_Base_SetConfig+0x40>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a3a      	ldr	r2, [pc, #232]	; (8007fac <TIM_Base_SetConfig+0x124>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d108      	bne.n	8007eda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a2f      	ldr	r2, [pc, #188]	; (8007f9c <TIM_Base_SetConfig+0x114>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d02b      	beq.n	8007f3a <TIM_Base_SetConfig+0xb2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee8:	d027      	beq.n	8007f3a <TIM_Base_SetConfig+0xb2>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a2c      	ldr	r2, [pc, #176]	; (8007fa0 <TIM_Base_SetConfig+0x118>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d023      	beq.n	8007f3a <TIM_Base_SetConfig+0xb2>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a2b      	ldr	r2, [pc, #172]	; (8007fa4 <TIM_Base_SetConfig+0x11c>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d01f      	beq.n	8007f3a <TIM_Base_SetConfig+0xb2>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a2a      	ldr	r2, [pc, #168]	; (8007fa8 <TIM_Base_SetConfig+0x120>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d01b      	beq.n	8007f3a <TIM_Base_SetConfig+0xb2>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a29      	ldr	r2, [pc, #164]	; (8007fac <TIM_Base_SetConfig+0x124>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d017      	beq.n	8007f3a <TIM_Base_SetConfig+0xb2>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a28      	ldr	r2, [pc, #160]	; (8007fb0 <TIM_Base_SetConfig+0x128>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d013      	beq.n	8007f3a <TIM_Base_SetConfig+0xb2>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a27      	ldr	r2, [pc, #156]	; (8007fb4 <TIM_Base_SetConfig+0x12c>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d00f      	beq.n	8007f3a <TIM_Base_SetConfig+0xb2>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a26      	ldr	r2, [pc, #152]	; (8007fb8 <TIM_Base_SetConfig+0x130>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d00b      	beq.n	8007f3a <TIM_Base_SetConfig+0xb2>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a25      	ldr	r2, [pc, #148]	; (8007fbc <TIM_Base_SetConfig+0x134>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d007      	beq.n	8007f3a <TIM_Base_SetConfig+0xb2>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a24      	ldr	r2, [pc, #144]	; (8007fc0 <TIM_Base_SetConfig+0x138>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d003      	beq.n	8007f3a <TIM_Base_SetConfig+0xb2>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a23      	ldr	r2, [pc, #140]	; (8007fc4 <TIM_Base_SetConfig+0x13c>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d108      	bne.n	8007f4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a0a      	ldr	r2, [pc, #40]	; (8007f9c <TIM_Base_SetConfig+0x114>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d003      	beq.n	8007f80 <TIM_Base_SetConfig+0xf8>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a0c      	ldr	r2, [pc, #48]	; (8007fac <TIM_Base_SetConfig+0x124>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d103      	bne.n	8007f88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	691a      	ldr	r2, [r3, #16]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	615a      	str	r2, [r3, #20]
}
 8007f8e:	bf00      	nop
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	40010000 	.word	0x40010000
 8007fa0:	40000400 	.word	0x40000400
 8007fa4:	40000800 	.word	0x40000800
 8007fa8:	40000c00 	.word	0x40000c00
 8007fac:	40010400 	.word	0x40010400
 8007fb0:	40014000 	.word	0x40014000
 8007fb4:	40014400 	.word	0x40014400
 8007fb8:	40014800 	.word	0x40014800
 8007fbc:	40001800 	.word	0x40001800
 8007fc0:	40001c00 	.word	0x40001c00
 8007fc4:	40002000 	.word	0x40002000

08007fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	f023 0201 	bic.w	r2, r3, #1
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	011b      	lsls	r3, r3, #4
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f023 030a 	bic.w	r3, r3, #10
 8008004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	4313      	orrs	r3, r2
 800800c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	621a      	str	r2, [r3, #32]
}
 800801a:	bf00      	nop
 800801c:	371c      	adds	r7, #28
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008026:	b480      	push	{r7}
 8008028:	b087      	sub	sp, #28
 800802a:	af00      	add	r7, sp, #0
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	60b9      	str	r1, [r7, #8]
 8008030:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	f023 0210 	bic.w	r2, r3, #16
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	031b      	lsls	r3, r3, #12
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	4313      	orrs	r3, r2
 800805a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008062:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	011b      	lsls	r3, r3, #4
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	4313      	orrs	r3, r2
 800806c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	621a      	str	r2, [r3, #32]
}
 800807a:	bf00      	nop
 800807c:	371c      	adds	r7, #28
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008086:	b480      	push	{r7}
 8008088:	b085      	sub	sp, #20
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800809c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	f043 0307 	orr.w	r3, r3, #7
 80080a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	609a      	str	r2, [r3, #8]
}
 80080b0:	bf00      	nop
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080bc:	b480      	push	{r7}
 80080be:	b087      	sub	sp, #28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	021a      	lsls	r2, r3, #8
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	431a      	orrs	r2, r3
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	609a      	str	r2, [r3, #8]
}
 80080f0:	bf00      	nop
 80080f2:	371c      	adds	r7, #28
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800810c:	2b01      	cmp	r3, #1
 800810e:	d101      	bne.n	8008114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008110:	2302      	movs	r3, #2
 8008112:	e06d      	b.n	80081f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2202      	movs	r2, #2
 8008120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a30      	ldr	r2, [pc, #192]	; (80081fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d004      	beq.n	8008148 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a2f      	ldr	r2, [pc, #188]	; (8008200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d108      	bne.n	800815a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800814e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	4313      	orrs	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008160:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	4313      	orrs	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a20      	ldr	r2, [pc, #128]	; (80081fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d022      	beq.n	80081c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008186:	d01d      	beq.n	80081c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a1d      	ldr	r2, [pc, #116]	; (8008204 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d018      	beq.n	80081c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a1c      	ldr	r2, [pc, #112]	; (8008208 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d013      	beq.n	80081c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a1a      	ldr	r2, [pc, #104]	; (800820c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d00e      	beq.n	80081c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a15      	ldr	r2, [pc, #84]	; (8008200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d009      	beq.n	80081c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a16      	ldr	r2, [pc, #88]	; (8008210 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d004      	beq.n	80081c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a15      	ldr	r2, [pc, #84]	; (8008214 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d10c      	bne.n	80081de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	40010000 	.word	0x40010000
 8008200:	40010400 	.word	0x40010400
 8008204:	40000400 	.word	0x40000400
 8008208:	40000800 	.word	0x40000800
 800820c:	40000c00 	.word	0x40000c00
 8008210:	40014000 	.word	0x40014000
 8008214:	40001800 	.word	0x40001800

08008218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008248:	bf00      	nop
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e040      	b.n	80082e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800826a:	2b00      	cmp	r3, #0
 800826c:	d106      	bne.n	800827c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7f9 fa84 	bl	8001784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2224      	movs	r2, #36	; 0x24
 8008280:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f022 0201 	bic.w	r2, r2, #1
 8008290:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f956 	bl	8008544 <UART_SetConfig>
 8008298:	4603      	mov	r3, r0
 800829a:	2b01      	cmp	r3, #1
 800829c:	d101      	bne.n	80082a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e022      	b.n	80082e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d002      	beq.n	80082b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fbf4 	bl	8008a98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	685a      	ldr	r2, [r3, #4]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689a      	ldr	r2, [r3, #8]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f042 0201 	orr.w	r2, r2, #1
 80082de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fc7b 	bl	8008bdc <UART_CheckIdleState>
 80082e6:	4603      	mov	r3, r0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08a      	sub	sp, #40	; 0x28
 80082f4:	af02      	add	r7, sp, #8
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	603b      	str	r3, [r7, #0]
 80082fc:	4613      	mov	r3, r2
 80082fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008304:	2b20      	cmp	r3, #32
 8008306:	d17f      	bne.n	8008408 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <HAL_UART_Transmit+0x24>
 800830e:	88fb      	ldrh	r3, [r7, #6]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d101      	bne.n	8008318 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e078      	b.n	800840a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800831e:	2b01      	cmp	r3, #1
 8008320:	d101      	bne.n	8008326 <HAL_UART_Transmit+0x36>
 8008322:	2302      	movs	r3, #2
 8008324:	e071      	b.n	800840a <HAL_UART_Transmit+0x11a>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2221      	movs	r2, #33	; 0x21
 8008338:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800833a:	f7fd f8e1 	bl	8005500 <HAL_GetTick>
 800833e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	88fa      	ldrh	r2, [r7, #6]
 8008344:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	88fa      	ldrh	r2, [r7, #6]
 800834c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008358:	d108      	bne.n	800836c <HAL_UART_Transmit+0x7c>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d104      	bne.n	800836c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8008362:	2300      	movs	r3, #0
 8008364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	61bb      	str	r3, [r7, #24]
 800836a:	e003      	b.n	8008374 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008370:	2300      	movs	r3, #0
 8008372:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800837c:	e02c      	b.n	80083d8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2200      	movs	r2, #0
 8008386:	2180      	movs	r1, #128	; 0x80
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 fc6c 	bl	8008c66 <UART_WaitOnFlagUntilTimeout>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e038      	b.n	800840a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10b      	bne.n	80083b6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	461a      	mov	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	3302      	adds	r3, #2
 80083b2:	61bb      	str	r3, [r7, #24]
 80083b4:	e007      	b.n	80083c6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	781a      	ldrb	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	3301      	adds	r3, #1
 80083c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	3b01      	subs	r3, #1
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083de:	b29b      	uxth	r3, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1cc      	bne.n	800837e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	2200      	movs	r2, #0
 80083ec:	2140      	movs	r1, #64	; 0x40
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 fc39 	bl	8008c66 <UART_WaitOnFlagUntilTimeout>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e005      	b.n	800840a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2220      	movs	r2, #32
 8008402:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	e000      	b.n	800840a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008408:	2302      	movs	r3, #2
  }
}
 800840a:	4618      	mov	r0, r3
 800840c:	3720      	adds	r7, #32
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	4613      	mov	r3, r2
 8008420:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008426:	2b20      	cmp	r3, #32
 8008428:	d16c      	bne.n	8008504 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d002      	beq.n	8008436 <HAL_UART_Receive_DMA+0x22>
 8008430:	88fb      	ldrh	r3, [r7, #6]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e065      	b.n	8008506 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008440:	2b01      	cmp	r3, #1
 8008442:	d101      	bne.n	8008448 <HAL_UART_Receive_DMA+0x34>
 8008444:	2302      	movs	r3, #2
 8008446:	e05e      	b.n	8008506 <HAL_UART_Receive_DMA+0xf2>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	88fa      	ldrh	r2, [r7, #6]
 800845a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2222      	movs	r2, #34	; 0x22
 8008468:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800846e:	2b00      	cmp	r3, #0
 8008470:	d02a      	beq.n	80084c8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008476:	4a26      	ldr	r2, [pc, #152]	; (8008510 <HAL_UART_Receive_DMA+0xfc>)
 8008478:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800847e:	4a25      	ldr	r2, [pc, #148]	; (8008514 <HAL_UART_Receive_DMA+0x100>)
 8008480:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008486:	4a24      	ldr	r2, [pc, #144]	; (8008518 <HAL_UART_Receive_DMA+0x104>)
 8008488:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800848e:	2200      	movs	r2, #0
 8008490:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3324      	adds	r3, #36	; 0x24
 800849c:	4619      	mov	r1, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a2:	461a      	mov	r2, r3
 80084a4:	88fb      	ldrh	r3, [r7, #6]
 80084a6:	f7fd fc1f 	bl	8005ce8 <HAL_DMA_Start_IT>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00b      	beq.n	80084c8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2210      	movs	r2, #16
 80084b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2220      	movs	r2, #32
 80084c2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e01e      	b.n	8008506 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084de:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689a      	ldr	r2, [r3, #8]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f042 0201 	orr.w	r2, r2, #1
 80084ee:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689a      	ldr	r2, [r3, #8]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084fe:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	e000      	b.n	8008506 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8008504:	2302      	movs	r3, #2
  }
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	08008dc7 	.word	0x08008dc7
 8008514:	08008e2b 	.word	0x08008e2b
 8008518:	08008e47 	.word	0x08008e47

0800851c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b088      	sub	sp, #32
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800854c:	2300      	movs	r3, #0
 800854e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	431a      	orrs	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	4313      	orrs	r3, r2
 800856a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	4bb1      	ldr	r3, [pc, #708]	; (8008838 <UART_SetConfig+0x2f4>)
 8008574:	4013      	ands	r3, r2
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6812      	ldr	r2, [r2, #0]
 800857a:	6939      	ldr	r1, [r7, #16]
 800857c:	430b      	orrs	r3, r1
 800857e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	430a      	orrs	r2, r1
 8008594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	430a      	orrs	r2, r1
 80085b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a9f      	ldr	r2, [pc, #636]	; (800883c <UART_SetConfig+0x2f8>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d121      	bne.n	8008608 <UART_SetConfig+0xc4>
 80085c4:	4b9e      	ldr	r3, [pc, #632]	; (8008840 <UART_SetConfig+0x2fc>)
 80085c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ca:	f003 0303 	and.w	r3, r3, #3
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d816      	bhi.n	8008600 <UART_SetConfig+0xbc>
 80085d2:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <UART_SetConfig+0x94>)
 80085d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d8:	080085e9 	.word	0x080085e9
 80085dc:	080085f5 	.word	0x080085f5
 80085e0:	080085ef 	.word	0x080085ef
 80085e4:	080085fb 	.word	0x080085fb
 80085e8:	2301      	movs	r3, #1
 80085ea:	77fb      	strb	r3, [r7, #31]
 80085ec:	e151      	b.n	8008892 <UART_SetConfig+0x34e>
 80085ee:	2302      	movs	r3, #2
 80085f0:	77fb      	strb	r3, [r7, #31]
 80085f2:	e14e      	b.n	8008892 <UART_SetConfig+0x34e>
 80085f4:	2304      	movs	r3, #4
 80085f6:	77fb      	strb	r3, [r7, #31]
 80085f8:	e14b      	b.n	8008892 <UART_SetConfig+0x34e>
 80085fa:	2308      	movs	r3, #8
 80085fc:	77fb      	strb	r3, [r7, #31]
 80085fe:	e148      	b.n	8008892 <UART_SetConfig+0x34e>
 8008600:	2310      	movs	r3, #16
 8008602:	77fb      	strb	r3, [r7, #31]
 8008604:	bf00      	nop
 8008606:	e144      	b.n	8008892 <UART_SetConfig+0x34e>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a8d      	ldr	r2, [pc, #564]	; (8008844 <UART_SetConfig+0x300>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d134      	bne.n	800867c <UART_SetConfig+0x138>
 8008612:	4b8b      	ldr	r3, [pc, #556]	; (8008840 <UART_SetConfig+0x2fc>)
 8008614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008618:	f003 030c 	and.w	r3, r3, #12
 800861c:	2b0c      	cmp	r3, #12
 800861e:	d829      	bhi.n	8008674 <UART_SetConfig+0x130>
 8008620:	a201      	add	r2, pc, #4	; (adr r2, 8008628 <UART_SetConfig+0xe4>)
 8008622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008626:	bf00      	nop
 8008628:	0800865d 	.word	0x0800865d
 800862c:	08008675 	.word	0x08008675
 8008630:	08008675 	.word	0x08008675
 8008634:	08008675 	.word	0x08008675
 8008638:	08008669 	.word	0x08008669
 800863c:	08008675 	.word	0x08008675
 8008640:	08008675 	.word	0x08008675
 8008644:	08008675 	.word	0x08008675
 8008648:	08008663 	.word	0x08008663
 800864c:	08008675 	.word	0x08008675
 8008650:	08008675 	.word	0x08008675
 8008654:	08008675 	.word	0x08008675
 8008658:	0800866f 	.word	0x0800866f
 800865c:	2300      	movs	r3, #0
 800865e:	77fb      	strb	r3, [r7, #31]
 8008660:	e117      	b.n	8008892 <UART_SetConfig+0x34e>
 8008662:	2302      	movs	r3, #2
 8008664:	77fb      	strb	r3, [r7, #31]
 8008666:	e114      	b.n	8008892 <UART_SetConfig+0x34e>
 8008668:	2304      	movs	r3, #4
 800866a:	77fb      	strb	r3, [r7, #31]
 800866c:	e111      	b.n	8008892 <UART_SetConfig+0x34e>
 800866e:	2308      	movs	r3, #8
 8008670:	77fb      	strb	r3, [r7, #31]
 8008672:	e10e      	b.n	8008892 <UART_SetConfig+0x34e>
 8008674:	2310      	movs	r3, #16
 8008676:	77fb      	strb	r3, [r7, #31]
 8008678:	bf00      	nop
 800867a:	e10a      	b.n	8008892 <UART_SetConfig+0x34e>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a71      	ldr	r2, [pc, #452]	; (8008848 <UART_SetConfig+0x304>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d120      	bne.n	80086c8 <UART_SetConfig+0x184>
 8008686:	4b6e      	ldr	r3, [pc, #440]	; (8008840 <UART_SetConfig+0x2fc>)
 8008688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800868c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008690:	2b10      	cmp	r3, #16
 8008692:	d00f      	beq.n	80086b4 <UART_SetConfig+0x170>
 8008694:	2b10      	cmp	r3, #16
 8008696:	d802      	bhi.n	800869e <UART_SetConfig+0x15a>
 8008698:	2b00      	cmp	r3, #0
 800869a:	d005      	beq.n	80086a8 <UART_SetConfig+0x164>
 800869c:	e010      	b.n	80086c0 <UART_SetConfig+0x17c>
 800869e:	2b20      	cmp	r3, #32
 80086a0:	d005      	beq.n	80086ae <UART_SetConfig+0x16a>
 80086a2:	2b30      	cmp	r3, #48	; 0x30
 80086a4:	d009      	beq.n	80086ba <UART_SetConfig+0x176>
 80086a6:	e00b      	b.n	80086c0 <UART_SetConfig+0x17c>
 80086a8:	2300      	movs	r3, #0
 80086aa:	77fb      	strb	r3, [r7, #31]
 80086ac:	e0f1      	b.n	8008892 <UART_SetConfig+0x34e>
 80086ae:	2302      	movs	r3, #2
 80086b0:	77fb      	strb	r3, [r7, #31]
 80086b2:	e0ee      	b.n	8008892 <UART_SetConfig+0x34e>
 80086b4:	2304      	movs	r3, #4
 80086b6:	77fb      	strb	r3, [r7, #31]
 80086b8:	e0eb      	b.n	8008892 <UART_SetConfig+0x34e>
 80086ba:	2308      	movs	r3, #8
 80086bc:	77fb      	strb	r3, [r7, #31]
 80086be:	e0e8      	b.n	8008892 <UART_SetConfig+0x34e>
 80086c0:	2310      	movs	r3, #16
 80086c2:	77fb      	strb	r3, [r7, #31]
 80086c4:	bf00      	nop
 80086c6:	e0e4      	b.n	8008892 <UART_SetConfig+0x34e>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a5f      	ldr	r2, [pc, #380]	; (800884c <UART_SetConfig+0x308>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d120      	bne.n	8008714 <UART_SetConfig+0x1d0>
 80086d2:	4b5b      	ldr	r3, [pc, #364]	; (8008840 <UART_SetConfig+0x2fc>)
 80086d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80086dc:	2b40      	cmp	r3, #64	; 0x40
 80086de:	d00f      	beq.n	8008700 <UART_SetConfig+0x1bc>
 80086e0:	2b40      	cmp	r3, #64	; 0x40
 80086e2:	d802      	bhi.n	80086ea <UART_SetConfig+0x1a6>
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d005      	beq.n	80086f4 <UART_SetConfig+0x1b0>
 80086e8:	e010      	b.n	800870c <UART_SetConfig+0x1c8>
 80086ea:	2b80      	cmp	r3, #128	; 0x80
 80086ec:	d005      	beq.n	80086fa <UART_SetConfig+0x1b6>
 80086ee:	2bc0      	cmp	r3, #192	; 0xc0
 80086f0:	d009      	beq.n	8008706 <UART_SetConfig+0x1c2>
 80086f2:	e00b      	b.n	800870c <UART_SetConfig+0x1c8>
 80086f4:	2300      	movs	r3, #0
 80086f6:	77fb      	strb	r3, [r7, #31]
 80086f8:	e0cb      	b.n	8008892 <UART_SetConfig+0x34e>
 80086fa:	2302      	movs	r3, #2
 80086fc:	77fb      	strb	r3, [r7, #31]
 80086fe:	e0c8      	b.n	8008892 <UART_SetConfig+0x34e>
 8008700:	2304      	movs	r3, #4
 8008702:	77fb      	strb	r3, [r7, #31]
 8008704:	e0c5      	b.n	8008892 <UART_SetConfig+0x34e>
 8008706:	2308      	movs	r3, #8
 8008708:	77fb      	strb	r3, [r7, #31]
 800870a:	e0c2      	b.n	8008892 <UART_SetConfig+0x34e>
 800870c:	2310      	movs	r3, #16
 800870e:	77fb      	strb	r3, [r7, #31]
 8008710:	bf00      	nop
 8008712:	e0be      	b.n	8008892 <UART_SetConfig+0x34e>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a4d      	ldr	r2, [pc, #308]	; (8008850 <UART_SetConfig+0x30c>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d124      	bne.n	8008768 <UART_SetConfig+0x224>
 800871e:	4b48      	ldr	r3, [pc, #288]	; (8008840 <UART_SetConfig+0x2fc>)
 8008720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800872c:	d012      	beq.n	8008754 <UART_SetConfig+0x210>
 800872e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008732:	d802      	bhi.n	800873a <UART_SetConfig+0x1f6>
 8008734:	2b00      	cmp	r3, #0
 8008736:	d007      	beq.n	8008748 <UART_SetConfig+0x204>
 8008738:	e012      	b.n	8008760 <UART_SetConfig+0x21c>
 800873a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800873e:	d006      	beq.n	800874e <UART_SetConfig+0x20a>
 8008740:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008744:	d009      	beq.n	800875a <UART_SetConfig+0x216>
 8008746:	e00b      	b.n	8008760 <UART_SetConfig+0x21c>
 8008748:	2300      	movs	r3, #0
 800874a:	77fb      	strb	r3, [r7, #31]
 800874c:	e0a1      	b.n	8008892 <UART_SetConfig+0x34e>
 800874e:	2302      	movs	r3, #2
 8008750:	77fb      	strb	r3, [r7, #31]
 8008752:	e09e      	b.n	8008892 <UART_SetConfig+0x34e>
 8008754:	2304      	movs	r3, #4
 8008756:	77fb      	strb	r3, [r7, #31]
 8008758:	e09b      	b.n	8008892 <UART_SetConfig+0x34e>
 800875a:	2308      	movs	r3, #8
 800875c:	77fb      	strb	r3, [r7, #31]
 800875e:	e098      	b.n	8008892 <UART_SetConfig+0x34e>
 8008760:	2310      	movs	r3, #16
 8008762:	77fb      	strb	r3, [r7, #31]
 8008764:	bf00      	nop
 8008766:	e094      	b.n	8008892 <UART_SetConfig+0x34e>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a39      	ldr	r2, [pc, #228]	; (8008854 <UART_SetConfig+0x310>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d124      	bne.n	80087bc <UART_SetConfig+0x278>
 8008772:	4b33      	ldr	r3, [pc, #204]	; (8008840 <UART_SetConfig+0x2fc>)
 8008774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008778:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800877c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008780:	d012      	beq.n	80087a8 <UART_SetConfig+0x264>
 8008782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008786:	d802      	bhi.n	800878e <UART_SetConfig+0x24a>
 8008788:	2b00      	cmp	r3, #0
 800878a:	d007      	beq.n	800879c <UART_SetConfig+0x258>
 800878c:	e012      	b.n	80087b4 <UART_SetConfig+0x270>
 800878e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008792:	d006      	beq.n	80087a2 <UART_SetConfig+0x25e>
 8008794:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008798:	d009      	beq.n	80087ae <UART_SetConfig+0x26a>
 800879a:	e00b      	b.n	80087b4 <UART_SetConfig+0x270>
 800879c:	2301      	movs	r3, #1
 800879e:	77fb      	strb	r3, [r7, #31]
 80087a0:	e077      	b.n	8008892 <UART_SetConfig+0x34e>
 80087a2:	2302      	movs	r3, #2
 80087a4:	77fb      	strb	r3, [r7, #31]
 80087a6:	e074      	b.n	8008892 <UART_SetConfig+0x34e>
 80087a8:	2304      	movs	r3, #4
 80087aa:	77fb      	strb	r3, [r7, #31]
 80087ac:	e071      	b.n	8008892 <UART_SetConfig+0x34e>
 80087ae:	2308      	movs	r3, #8
 80087b0:	77fb      	strb	r3, [r7, #31]
 80087b2:	e06e      	b.n	8008892 <UART_SetConfig+0x34e>
 80087b4:	2310      	movs	r3, #16
 80087b6:	77fb      	strb	r3, [r7, #31]
 80087b8:	bf00      	nop
 80087ba:	e06a      	b.n	8008892 <UART_SetConfig+0x34e>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a25      	ldr	r2, [pc, #148]	; (8008858 <UART_SetConfig+0x314>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d124      	bne.n	8008810 <UART_SetConfig+0x2cc>
 80087c6:	4b1e      	ldr	r3, [pc, #120]	; (8008840 <UART_SetConfig+0x2fc>)
 80087c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80087d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087d4:	d012      	beq.n	80087fc <UART_SetConfig+0x2b8>
 80087d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087da:	d802      	bhi.n	80087e2 <UART_SetConfig+0x29e>
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d007      	beq.n	80087f0 <UART_SetConfig+0x2ac>
 80087e0:	e012      	b.n	8008808 <UART_SetConfig+0x2c4>
 80087e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087e6:	d006      	beq.n	80087f6 <UART_SetConfig+0x2b2>
 80087e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087ec:	d009      	beq.n	8008802 <UART_SetConfig+0x2be>
 80087ee:	e00b      	b.n	8008808 <UART_SetConfig+0x2c4>
 80087f0:	2300      	movs	r3, #0
 80087f2:	77fb      	strb	r3, [r7, #31]
 80087f4:	e04d      	b.n	8008892 <UART_SetConfig+0x34e>
 80087f6:	2302      	movs	r3, #2
 80087f8:	77fb      	strb	r3, [r7, #31]
 80087fa:	e04a      	b.n	8008892 <UART_SetConfig+0x34e>
 80087fc:	2304      	movs	r3, #4
 80087fe:	77fb      	strb	r3, [r7, #31]
 8008800:	e047      	b.n	8008892 <UART_SetConfig+0x34e>
 8008802:	2308      	movs	r3, #8
 8008804:	77fb      	strb	r3, [r7, #31]
 8008806:	e044      	b.n	8008892 <UART_SetConfig+0x34e>
 8008808:	2310      	movs	r3, #16
 800880a:	77fb      	strb	r3, [r7, #31]
 800880c:	bf00      	nop
 800880e:	e040      	b.n	8008892 <UART_SetConfig+0x34e>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a11      	ldr	r2, [pc, #68]	; (800885c <UART_SetConfig+0x318>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d139      	bne.n	800888e <UART_SetConfig+0x34a>
 800881a:	4b09      	ldr	r3, [pc, #36]	; (8008840 <UART_SetConfig+0x2fc>)
 800881c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008820:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008828:	d027      	beq.n	800887a <UART_SetConfig+0x336>
 800882a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800882e:	d817      	bhi.n	8008860 <UART_SetConfig+0x31c>
 8008830:	2b00      	cmp	r3, #0
 8008832:	d01c      	beq.n	800886e <UART_SetConfig+0x32a>
 8008834:	e027      	b.n	8008886 <UART_SetConfig+0x342>
 8008836:	bf00      	nop
 8008838:	efff69f3 	.word	0xefff69f3
 800883c:	40011000 	.word	0x40011000
 8008840:	40023800 	.word	0x40023800
 8008844:	40004400 	.word	0x40004400
 8008848:	40004800 	.word	0x40004800
 800884c:	40004c00 	.word	0x40004c00
 8008850:	40005000 	.word	0x40005000
 8008854:	40011400 	.word	0x40011400
 8008858:	40007800 	.word	0x40007800
 800885c:	40007c00 	.word	0x40007c00
 8008860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008864:	d006      	beq.n	8008874 <UART_SetConfig+0x330>
 8008866:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800886a:	d009      	beq.n	8008880 <UART_SetConfig+0x33c>
 800886c:	e00b      	b.n	8008886 <UART_SetConfig+0x342>
 800886e:	2300      	movs	r3, #0
 8008870:	77fb      	strb	r3, [r7, #31]
 8008872:	e00e      	b.n	8008892 <UART_SetConfig+0x34e>
 8008874:	2302      	movs	r3, #2
 8008876:	77fb      	strb	r3, [r7, #31]
 8008878:	e00b      	b.n	8008892 <UART_SetConfig+0x34e>
 800887a:	2304      	movs	r3, #4
 800887c:	77fb      	strb	r3, [r7, #31]
 800887e:	e008      	b.n	8008892 <UART_SetConfig+0x34e>
 8008880:	2308      	movs	r3, #8
 8008882:	77fb      	strb	r3, [r7, #31]
 8008884:	e005      	b.n	8008892 <UART_SetConfig+0x34e>
 8008886:	2310      	movs	r3, #16
 8008888:	77fb      	strb	r3, [r7, #31]
 800888a:	bf00      	nop
 800888c:	e001      	b.n	8008892 <UART_SetConfig+0x34e>
 800888e:	2310      	movs	r3, #16
 8008890:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800889a:	d17f      	bne.n	800899c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800889c:	7ffb      	ldrb	r3, [r7, #31]
 800889e:	2b08      	cmp	r3, #8
 80088a0:	d85c      	bhi.n	800895c <UART_SetConfig+0x418>
 80088a2:	a201      	add	r2, pc, #4	; (adr r2, 80088a8 <UART_SetConfig+0x364>)
 80088a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a8:	080088cd 	.word	0x080088cd
 80088ac:	080088ed 	.word	0x080088ed
 80088b0:	0800890d 	.word	0x0800890d
 80088b4:	0800895d 	.word	0x0800895d
 80088b8:	08008925 	.word	0x08008925
 80088bc:	0800895d 	.word	0x0800895d
 80088c0:	0800895d 	.word	0x0800895d
 80088c4:	0800895d 	.word	0x0800895d
 80088c8:	08008945 	.word	0x08008945
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088cc:	f7fe fbe0 	bl	8007090 <HAL_RCC_GetPCLK1Freq>
 80088d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	005a      	lsls	r2, r3, #1
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	085b      	lsrs	r3, r3, #1
 80088dc:	441a      	add	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	61bb      	str	r3, [r7, #24]
        break;
 80088ea:	e03a      	b.n	8008962 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088ec:	f7fe fbe4 	bl	80070b8 <HAL_RCC_GetPCLK2Freq>
 80088f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	005a      	lsls	r2, r3, #1
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	085b      	lsrs	r3, r3, #1
 80088fc:	441a      	add	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	fbb2 f3f3 	udiv	r3, r2, r3
 8008906:	b29b      	uxth	r3, r3
 8008908:	61bb      	str	r3, [r7, #24]
        break;
 800890a:	e02a      	b.n	8008962 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	085a      	lsrs	r2, r3, #1
 8008912:	4b5f      	ldr	r3, [pc, #380]	; (8008a90 <UART_SetConfig+0x54c>)
 8008914:	4413      	add	r3, r2
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	6852      	ldr	r2, [r2, #4]
 800891a:	fbb3 f3f2 	udiv	r3, r3, r2
 800891e:	b29b      	uxth	r3, r3
 8008920:	61bb      	str	r3, [r7, #24]
        break;
 8008922:	e01e      	b.n	8008962 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008924:	f7fe fad0 	bl	8006ec8 <HAL_RCC_GetSysClockFreq>
 8008928:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	005a      	lsls	r2, r3, #1
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	085b      	lsrs	r3, r3, #1
 8008934:	441a      	add	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	fbb2 f3f3 	udiv	r3, r2, r3
 800893e:	b29b      	uxth	r3, r3
 8008940:	61bb      	str	r3, [r7, #24]
        break;
 8008942:	e00e      	b.n	8008962 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	085b      	lsrs	r3, r3, #1
 800894a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	fbb2 f3f3 	udiv	r3, r2, r3
 8008956:	b29b      	uxth	r3, r3
 8008958:	61bb      	str	r3, [r7, #24]
        break;
 800895a:	e002      	b.n	8008962 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	75fb      	strb	r3, [r7, #23]
        break;
 8008960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	2b0f      	cmp	r3, #15
 8008966:	d916      	bls.n	8008996 <UART_SetConfig+0x452>
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800896e:	d212      	bcs.n	8008996 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	b29b      	uxth	r3, r3
 8008974:	f023 030f 	bic.w	r3, r3, #15
 8008978:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	085b      	lsrs	r3, r3, #1
 800897e:	b29b      	uxth	r3, r3
 8008980:	f003 0307 	and.w	r3, r3, #7
 8008984:	b29a      	uxth	r2, r3
 8008986:	897b      	ldrh	r3, [r7, #10]
 8008988:	4313      	orrs	r3, r2
 800898a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	897a      	ldrh	r2, [r7, #10]
 8008992:	60da      	str	r2, [r3, #12]
 8008994:	e070      	b.n	8008a78 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	75fb      	strb	r3, [r7, #23]
 800899a:	e06d      	b.n	8008a78 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800899c:	7ffb      	ldrb	r3, [r7, #31]
 800899e:	2b08      	cmp	r3, #8
 80089a0:	d859      	bhi.n	8008a56 <UART_SetConfig+0x512>
 80089a2:	a201      	add	r2, pc, #4	; (adr r2, 80089a8 <UART_SetConfig+0x464>)
 80089a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a8:	080089cd 	.word	0x080089cd
 80089ac:	080089eb 	.word	0x080089eb
 80089b0:	08008a09 	.word	0x08008a09
 80089b4:	08008a57 	.word	0x08008a57
 80089b8:	08008a21 	.word	0x08008a21
 80089bc:	08008a57 	.word	0x08008a57
 80089c0:	08008a57 	.word	0x08008a57
 80089c4:	08008a57 	.word	0x08008a57
 80089c8:	08008a3f 	.word	0x08008a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089cc:	f7fe fb60 	bl	8007090 <HAL_RCC_GetPCLK1Freq>
 80089d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	085a      	lsrs	r2, r3, #1
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	441a      	add	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	61bb      	str	r3, [r7, #24]
        break;
 80089e8:	e038      	b.n	8008a5c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089ea:	f7fe fb65 	bl	80070b8 <HAL_RCC_GetPCLK2Freq>
 80089ee:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	085a      	lsrs	r2, r3, #1
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	441a      	add	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	61bb      	str	r3, [r7, #24]
        break;
 8008a06:	e029      	b.n	8008a5c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	085a      	lsrs	r2, r3, #1
 8008a0e:	4b21      	ldr	r3, [pc, #132]	; (8008a94 <UART_SetConfig+0x550>)
 8008a10:	4413      	add	r3, r2
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	6852      	ldr	r2, [r2, #4]
 8008a16:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	61bb      	str	r3, [r7, #24]
        break;
 8008a1e:	e01d      	b.n	8008a5c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a20:	f7fe fa52 	bl	8006ec8 <HAL_RCC_GetSysClockFreq>
 8008a24:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	085a      	lsrs	r2, r3, #1
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	441a      	add	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	61bb      	str	r3, [r7, #24]
        break;
 8008a3c:	e00e      	b.n	8008a5c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	085b      	lsrs	r3, r3, #1
 8008a44:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	61bb      	str	r3, [r7, #24]
        break;
 8008a54:	e002      	b.n	8008a5c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	75fb      	strb	r3, [r7, #23]
        break;
 8008a5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	2b0f      	cmp	r3, #15
 8008a60:	d908      	bls.n	8008a74 <UART_SetConfig+0x530>
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a68:	d204      	bcs.n	8008a74 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	60da      	str	r2, [r3, #12]
 8008a72:	e001      	b.n	8008a78 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3720      	adds	r7, #32
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	01e84800 	.word	0x01e84800
 8008a94:	00f42400 	.word	0x00f42400

08008a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00a      	beq.n	8008ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00a      	beq.n	8008ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00a      	beq.n	8008b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	430a      	orrs	r2, r1
 8008b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0a:	f003 0308 	and.w	r3, r3, #8
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00a      	beq.n	8008b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	430a      	orrs	r2, r1
 8008b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	f003 0310 	and.w	r3, r3, #16
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00a      	beq.n	8008b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	f003 0320 	and.w	r3, r3, #32
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00a      	beq.n	8008b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	430a      	orrs	r2, r1
 8008b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d01a      	beq.n	8008bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b96:	d10a      	bne.n	8008bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	430a      	orrs	r2, r1
 8008bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	430a      	orrs	r2, r1
 8008bce:	605a      	str	r2, [r3, #4]
  }
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af02      	add	r7, sp, #8
 8008be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008bea:	f7fc fc89 	bl	8005500 <HAL_GetTick>
 8008bee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0308 	and.w	r3, r3, #8
 8008bfa:	2b08      	cmp	r3, #8
 8008bfc:	d10e      	bne.n	8008c1c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f82a 	bl	8008c66 <UART_WaitOnFlagUntilTimeout>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	e020      	b.n	8008c5e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0304 	and.w	r3, r3, #4
 8008c26:	2b04      	cmp	r3, #4
 8008c28:	d10e      	bne.n	8008c48 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f814 	bl	8008c66 <UART_WaitOnFlagUntilTimeout>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e00a      	b.n	8008c5e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2220      	movs	r2, #32
 8008c52:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	60f8      	str	r0, [r7, #12]
 8008c6e:	60b9      	str	r1, [r7, #8]
 8008c70:	603b      	str	r3, [r7, #0]
 8008c72:	4613      	mov	r3, r2
 8008c74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c76:	e05d      	b.n	8008d34 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7e:	d059      	beq.n	8008d34 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c80:	f7fc fc3e 	bl	8005500 <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d302      	bcc.n	8008c96 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d11b      	bne.n	8008cce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ca4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f022 0201 	bic.w	r2, r2, #1
 8008cb4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e042      	b.n	8008d54 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0304 	and.w	r3, r3, #4
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d02b      	beq.n	8008d34 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cea:	d123      	bne.n	8008d34 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cf4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d04:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	689a      	ldr	r2, [r3, #8]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f022 0201 	bic.w	r2, r2, #1
 8008d14:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2220      	movs	r2, #32
 8008d26:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e00f      	b.n	8008d54 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	69da      	ldr	r2, [r3, #28]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	bf0c      	ite	eq
 8008d44:	2301      	moveq	r3, #1
 8008d46:	2300      	movne	r3, #0
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	79fb      	ldrb	r3, [r7, #7]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d092      	beq.n	8008c78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008d72:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2220      	movs	r2, #32
 8008d78:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008d7a:	bf00      	nop
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d86:	b480      	push	{r7}
 8008d88:	b083      	sub	sp, #12
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008d9c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	689a      	ldr	r2, [r3, #8]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f022 0201 	bic.w	r2, r2, #1
 8008dac:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2220      	movs	r2, #32
 8008db2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008dba:	bf00      	nop
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	69db      	ldr	r3, [r3, #28]
 8008dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ddc:	d01e      	beq.n	8008e1c <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008df4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	689a      	ldr	r2, [r3, #8]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f022 0201 	bic.w	r2, r2, #1
 8008e04:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	689a      	ldr	r2, [r3, #8]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e14:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f7f8 faf5 	bl	800140c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e22:	bf00      	nop
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b084      	sub	sp, #16
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e36:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f7ff fb6f 	bl	800851c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e3e:	bf00      	nop
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b086      	sub	sp, #24
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e52:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e58:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e6a:	2b80      	cmp	r3, #128	; 0x80
 8008e6c:	d109      	bne.n	8008e82 <UART_DMAError+0x3c>
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	2b21      	cmp	r3, #33	; 0x21
 8008e72:	d106      	bne.n	8008e82 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008e7c:	6978      	ldr	r0, [r7, #20]
 8008e7e:	f7ff ff6d 	bl	8008d5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8c:	2b40      	cmp	r3, #64	; 0x40
 8008e8e:	d109      	bne.n	8008ea4 <UART_DMAError+0x5e>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2b22      	cmp	r3, #34	; 0x22
 8008e94:	d106      	bne.n	8008ea4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008e9e:	6978      	ldr	r0, [r7, #20]
 8008ea0:	f7ff ff71 	bl	8008d86 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ea8:	f043 0210 	orr.w	r2, r3, #16
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008eb0:	6978      	ldr	r0, [r7, #20]
 8008eb2:	f7ff fb3d 	bl	8008530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eb6:	bf00      	nop
 8008eb8:	3718      	adds	r7, #24
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
	...

08008ec0 <__libc_init_array>:
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	4e0d      	ldr	r6, [pc, #52]	; (8008ef8 <__libc_init_array+0x38>)
 8008ec4:	4c0d      	ldr	r4, [pc, #52]	; (8008efc <__libc_init_array+0x3c>)
 8008ec6:	1ba4      	subs	r4, r4, r6
 8008ec8:	10a4      	asrs	r4, r4, #2
 8008eca:	2500      	movs	r5, #0
 8008ecc:	42a5      	cmp	r5, r4
 8008ece:	d109      	bne.n	8008ee4 <__libc_init_array+0x24>
 8008ed0:	4e0b      	ldr	r6, [pc, #44]	; (8008f00 <__libc_init_array+0x40>)
 8008ed2:	4c0c      	ldr	r4, [pc, #48]	; (8008f04 <__libc_init_array+0x44>)
 8008ed4:	f000 fe0a 	bl	8009aec <_init>
 8008ed8:	1ba4      	subs	r4, r4, r6
 8008eda:	10a4      	asrs	r4, r4, #2
 8008edc:	2500      	movs	r5, #0
 8008ede:	42a5      	cmp	r5, r4
 8008ee0:	d105      	bne.n	8008eee <__libc_init_array+0x2e>
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}
 8008ee4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ee8:	4798      	blx	r3
 8008eea:	3501      	adds	r5, #1
 8008eec:	e7ee      	b.n	8008ecc <__libc_init_array+0xc>
 8008eee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ef2:	4798      	blx	r3
 8008ef4:	3501      	adds	r5, #1
 8008ef6:	e7f2      	b.n	8008ede <__libc_init_array+0x1e>
 8008ef8:	0800a280 	.word	0x0800a280
 8008efc:	0800a280 	.word	0x0800a280
 8008f00:	0800a280 	.word	0x0800a280
 8008f04:	0800a284 	.word	0x0800a284

08008f08 <memset>:
 8008f08:	4402      	add	r2, r0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d100      	bne.n	8008f12 <memset+0xa>
 8008f10:	4770      	bx	lr
 8008f12:	f803 1b01 	strb.w	r1, [r3], #1
 8008f16:	e7f9      	b.n	8008f0c <memset+0x4>

08008f18 <sin>:
 8008f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f1a:	eeb0 7b40 	vmov.f64	d7, d0
 8008f1e:	ee17 3a90 	vmov	r3, s15
 8008f22:	4a19      	ldr	r2, [pc, #100]	; (8008f88 <sin+0x70>)
 8008f24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	dc05      	bgt.n	8008f38 <sin+0x20>
 8008f2c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8008f80 <sin+0x68>
 8008f30:	2000      	movs	r0, #0
 8008f32:	f000 fc71 	bl	8009818 <__kernel_sin>
 8008f36:	e004      	b.n	8008f42 <sin+0x2a>
 8008f38:	4a14      	ldr	r2, [pc, #80]	; (8008f8c <sin+0x74>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	dd04      	ble.n	8008f48 <sin+0x30>
 8008f3e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8008f42:	b005      	add	sp, #20
 8008f44:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f48:	4668      	mov	r0, sp
 8008f4a:	f000 f821 	bl	8008f90 <__ieee754_rem_pio2>
 8008f4e:	f000 0003 	and.w	r0, r0, #3
 8008f52:	2801      	cmp	r0, #1
 8008f54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008f58:	ed9d 0b00 	vldr	d0, [sp]
 8008f5c:	d004      	beq.n	8008f68 <sin+0x50>
 8008f5e:	2802      	cmp	r0, #2
 8008f60:	d005      	beq.n	8008f6e <sin+0x56>
 8008f62:	b950      	cbnz	r0, 8008f7a <sin+0x62>
 8008f64:	2001      	movs	r0, #1
 8008f66:	e7e4      	b.n	8008f32 <sin+0x1a>
 8008f68:	f000 f94e 	bl	8009208 <__kernel_cos>
 8008f6c:	e7e9      	b.n	8008f42 <sin+0x2a>
 8008f6e:	2001      	movs	r0, #1
 8008f70:	f000 fc52 	bl	8009818 <__kernel_sin>
 8008f74:	eeb1 0b40 	vneg.f64	d0, d0
 8008f78:	e7e3      	b.n	8008f42 <sin+0x2a>
 8008f7a:	f000 f945 	bl	8009208 <__kernel_cos>
 8008f7e:	e7f9      	b.n	8008f74 <sin+0x5c>
	...
 8008f88:	3fe921fb 	.word	0x3fe921fb
 8008f8c:	7fefffff 	.word	0x7fefffff

08008f90 <__ieee754_rem_pio2>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	eeb0 7b40 	vmov.f64	d7, d0
 8008f96:	ee17 5a90 	vmov	r5, s15
 8008f9a:	4b95      	ldr	r3, [pc, #596]	; (80091f0 <__ieee754_rem_pio2+0x260>)
 8008f9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008fa0:	429e      	cmp	r6, r3
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	dc07      	bgt.n	8008fb8 <__ieee754_rem_pio2+0x28>
 8008fa8:	2200      	movs	r2, #0
 8008faa:	2300      	movs	r3, #0
 8008fac:	ed84 0b00 	vstr	d0, [r4]
 8008fb0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	e01b      	b.n	8008ff0 <__ieee754_rem_pio2+0x60>
 8008fb8:	4b8e      	ldr	r3, [pc, #568]	; (80091f4 <__ieee754_rem_pio2+0x264>)
 8008fba:	429e      	cmp	r6, r3
 8008fbc:	dc3b      	bgt.n	8009036 <__ieee754_rem_pio2+0xa6>
 8008fbe:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8008fc2:	2d00      	cmp	r5, #0
 8008fc4:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80091b0 <__ieee754_rem_pio2+0x220>
 8008fc8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8008fcc:	dd19      	ble.n	8009002 <__ieee754_rem_pio2+0x72>
 8008fce:	ee30 7b46 	vsub.f64	d7, d0, d6
 8008fd2:	429e      	cmp	r6, r3
 8008fd4:	d00e      	beq.n	8008ff4 <__ieee754_rem_pio2+0x64>
 8008fd6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80091b8 <__ieee754_rem_pio2+0x228>
 8008fda:	ee37 5b46 	vsub.f64	d5, d7, d6
 8008fde:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008fe2:	ed84 5b00 	vstr	d5, [r4]
 8008fe6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008fea:	ed84 7b02 	vstr	d7, [r4, #8]
 8008fee:	2001      	movs	r0, #1
 8008ff0:	b008      	add	sp, #32
 8008ff2:	bd70      	pop	{r4, r5, r6, pc}
 8008ff4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80091c0 <__ieee754_rem_pio2+0x230>
 8008ff8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008ffc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80091c8 <__ieee754_rem_pio2+0x238>
 8009000:	e7eb      	b.n	8008fda <__ieee754_rem_pio2+0x4a>
 8009002:	429e      	cmp	r6, r3
 8009004:	ee30 7b06 	vadd.f64	d7, d0, d6
 8009008:	d00e      	beq.n	8009028 <__ieee754_rem_pio2+0x98>
 800900a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 80091b8 <__ieee754_rem_pio2+0x228>
 800900e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8009012:	ee37 7b45 	vsub.f64	d7, d7, d5
 8009016:	ed84 5b00 	vstr	d5, [r4]
 800901a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800901e:	f04f 30ff 	mov.w	r0, #4294967295
 8009022:	ed84 7b02 	vstr	d7, [r4, #8]
 8009026:	e7e3      	b.n	8008ff0 <__ieee754_rem_pio2+0x60>
 8009028:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80091c0 <__ieee754_rem_pio2+0x230>
 800902c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009030:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80091c8 <__ieee754_rem_pio2+0x238>
 8009034:	e7eb      	b.n	800900e <__ieee754_rem_pio2+0x7e>
 8009036:	4b70      	ldr	r3, [pc, #448]	; (80091f8 <__ieee754_rem_pio2+0x268>)
 8009038:	429e      	cmp	r6, r3
 800903a:	dc6c      	bgt.n	8009116 <__ieee754_rem_pio2+0x186>
 800903c:	f000 fc44 	bl	80098c8 <fabs>
 8009040:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8009044:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80091d0 <__ieee754_rem_pio2+0x240>
 8009048:	eea0 7b06 	vfma.f64	d7, d0, d6
 800904c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8009050:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009054:	ee17 0a90 	vmov	r0, s15
 8009058:	eeb1 5b44 	vneg.f64	d5, d4
 800905c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 80091b0 <__ieee754_rem_pio2+0x220>
 8009060:	eea5 0b07 	vfma.f64	d0, d5, d7
 8009064:	ed9f 7b54 	vldr	d7, [pc, #336]	; 80091b8 <__ieee754_rem_pio2+0x228>
 8009068:	281f      	cmp	r0, #31
 800906a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800906e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8009072:	dc08      	bgt.n	8009086 <__ieee754_rem_pio2+0xf6>
 8009074:	1e42      	subs	r2, r0, #1
 8009076:	4b61      	ldr	r3, [pc, #388]	; (80091fc <__ieee754_rem_pio2+0x26c>)
 8009078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800907c:	42b3      	cmp	r3, r6
 800907e:	d002      	beq.n	8009086 <__ieee754_rem_pio2+0xf6>
 8009080:	ed84 6b00 	vstr	d6, [r4]
 8009084:	e022      	b.n	80090cc <__ieee754_rem_pio2+0x13c>
 8009086:	ee16 3a90 	vmov	r3, s13
 800908a:	1536      	asrs	r6, r6, #20
 800908c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8009090:	1af3      	subs	r3, r6, r3
 8009092:	2b10      	cmp	r3, #16
 8009094:	ddf4      	ble.n	8009080 <__ieee754_rem_pio2+0xf0>
 8009096:	eeb0 6b40 	vmov.f64	d6, d0
 800909a:	ed9f 3b49 	vldr	d3, [pc, #292]	; 80091c0 <__ieee754_rem_pio2+0x230>
 800909e:	eea5 6b03 	vfma.f64	d6, d5, d3
 80090a2:	ee30 7b46 	vsub.f64	d7, d0, d6
 80090a6:	eea5 7b03 	vfma.f64	d7, d5, d3
 80090aa:	ed9f 3b47 	vldr	d3, [pc, #284]	; 80091c8 <__ieee754_rem_pio2+0x238>
 80090ae:	ee94 7b03 	vfnms.f64	d7, d4, d3
 80090b2:	ee36 3b47 	vsub.f64	d3, d6, d7
 80090b6:	ee13 3a90 	vmov	r3, s7
 80090ba:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80090be:	1af6      	subs	r6, r6, r3
 80090c0:	2e31      	cmp	r6, #49	; 0x31
 80090c2:	dc17      	bgt.n	80090f4 <__ieee754_rem_pio2+0x164>
 80090c4:	eeb0 0b46 	vmov.f64	d0, d6
 80090c8:	ed84 3b00 	vstr	d3, [r4]
 80090cc:	ed94 6b00 	vldr	d6, [r4]
 80090d0:	2d00      	cmp	r5, #0
 80090d2:	ee30 0b46 	vsub.f64	d0, d0, d6
 80090d6:	ee30 7b47 	vsub.f64	d7, d0, d7
 80090da:	ed84 7b02 	vstr	d7, [r4, #8]
 80090de:	da87      	bge.n	8008ff0 <__ieee754_rem_pio2+0x60>
 80090e0:	eeb1 6b46 	vneg.f64	d6, d6
 80090e4:	ed84 6b00 	vstr	d6, [r4]
 80090e8:	eeb1 7b47 	vneg.f64	d7, d7
 80090ec:	4240      	negs	r0, r0
 80090ee:	ed84 7b02 	vstr	d7, [r4, #8]
 80090f2:	e77d      	b.n	8008ff0 <__ieee754_rem_pio2+0x60>
 80090f4:	ed9f 3b38 	vldr	d3, [pc, #224]	; 80091d8 <__ieee754_rem_pio2+0x248>
 80090f8:	eeb0 0b46 	vmov.f64	d0, d6
 80090fc:	eea5 0b03 	vfma.f64	d0, d5, d3
 8009100:	ee36 7b40 	vsub.f64	d7, d6, d0
 8009104:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80091e0 <__ieee754_rem_pio2+0x250>
 8009108:	eea5 7b03 	vfma.f64	d7, d5, d3
 800910c:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8009110:	ee30 6b47 	vsub.f64	d6, d0, d7
 8009114:	e7b4      	b.n	8009080 <__ieee754_rem_pio2+0xf0>
 8009116:	4b3a      	ldr	r3, [pc, #232]	; (8009200 <__ieee754_rem_pio2+0x270>)
 8009118:	429e      	cmp	r6, r3
 800911a:	dd06      	ble.n	800912a <__ieee754_rem_pio2+0x19a>
 800911c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8009120:	ed80 7b02 	vstr	d7, [r0, #8]
 8009124:	ed80 7b00 	vstr	d7, [r0]
 8009128:	e744      	b.n	8008fb4 <__ieee754_rem_pio2+0x24>
 800912a:	1532      	asrs	r2, r6, #20
 800912c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8009130:	ee10 0a10 	vmov	r0, s0
 8009134:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8009138:	ec41 0b17 	vmov	d7, r0, r1
 800913c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8009140:	ed9f 5b29 	vldr	d5, [pc, #164]	; 80091e8 <__ieee754_rem_pio2+0x258>
 8009144:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8009148:	ee37 7b46 	vsub.f64	d7, d7, d6
 800914c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009150:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009154:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8009158:	a908      	add	r1, sp, #32
 800915a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800915e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009162:	ed8d 6b04 	vstr	d6, [sp, #16]
 8009166:	ee27 7b05 	vmul.f64	d7, d7, d5
 800916a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800916e:	2303      	movs	r3, #3
 8009170:	ed31 7b02 	vldmdb	r1!, {d7}
 8009174:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800917c:	f103 30ff 	add.w	r0, r3, #4294967295
 8009180:	d013      	beq.n	80091aa <__ieee754_rem_pio2+0x21a>
 8009182:	4920      	ldr	r1, [pc, #128]	; (8009204 <__ieee754_rem_pio2+0x274>)
 8009184:	9101      	str	r1, [sp, #4]
 8009186:	2102      	movs	r1, #2
 8009188:	9100      	str	r1, [sp, #0]
 800918a:	a802      	add	r0, sp, #8
 800918c:	4621      	mov	r1, r4
 800918e:	f000 f8a7 	bl	80092e0 <__kernel_rem_pio2>
 8009192:	2d00      	cmp	r5, #0
 8009194:	f6bf af2c 	bge.w	8008ff0 <__ieee754_rem_pio2+0x60>
 8009198:	ed94 7b00 	vldr	d7, [r4]
 800919c:	eeb1 7b47 	vneg.f64	d7, d7
 80091a0:	ed84 7b00 	vstr	d7, [r4]
 80091a4:	ed94 7b02 	vldr	d7, [r4, #8]
 80091a8:	e79e      	b.n	80090e8 <__ieee754_rem_pio2+0x158>
 80091aa:	4603      	mov	r3, r0
 80091ac:	e7e0      	b.n	8009170 <__ieee754_rem_pio2+0x1e0>
 80091ae:	bf00      	nop
 80091b0:	54400000 	.word	0x54400000
 80091b4:	3ff921fb 	.word	0x3ff921fb
 80091b8:	1a626331 	.word	0x1a626331
 80091bc:	3dd0b461 	.word	0x3dd0b461
 80091c0:	1a600000 	.word	0x1a600000
 80091c4:	3dd0b461 	.word	0x3dd0b461
 80091c8:	2e037073 	.word	0x2e037073
 80091cc:	3ba3198a 	.word	0x3ba3198a
 80091d0:	6dc9c883 	.word	0x6dc9c883
 80091d4:	3fe45f30 	.word	0x3fe45f30
 80091d8:	2e000000 	.word	0x2e000000
 80091dc:	3ba3198a 	.word	0x3ba3198a
 80091e0:	252049c1 	.word	0x252049c1
 80091e4:	397b839a 	.word	0x397b839a
 80091e8:	00000000 	.word	0x00000000
 80091ec:	41700000 	.word	0x41700000
 80091f0:	3fe921fb 	.word	0x3fe921fb
 80091f4:	4002d97b 	.word	0x4002d97b
 80091f8:	413921fb 	.word	0x413921fb
 80091fc:	0800a0a0 	.word	0x0800a0a0
 8009200:	7fefffff 	.word	0x7fefffff
 8009204:	0800a120 	.word	0x0800a120

08009208 <__kernel_cos>:
 8009208:	ee10 1a90 	vmov	r1, s1
 800920c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009210:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009214:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8009218:	da05      	bge.n	8009226 <__kernel_cos+0x1e>
 800921a:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800921e:	ee16 3a90 	vmov	r3, s13
 8009222:	2b00      	cmp	r3, #0
 8009224:	d03d      	beq.n	80092a2 <__kernel_cos+0x9a>
 8009226:	ee20 4b00 	vmul.f64	d4, d0, d0
 800922a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800922e:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 80092a8 <__kernel_cos+0xa0>
 8009232:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8009236:	ee24 6b06 	vmul.f64	d6, d4, d6
 800923a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80092b0 <__kernel_cos+0xa8>
 800923e:	eea4 5b03 	vfma.f64	d5, d4, d3
 8009242:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 80092b8 <__kernel_cos+0xb0>
 8009246:	eea5 3b04 	vfma.f64	d3, d5, d4
 800924a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80092c0 <__kernel_cos+0xb8>
 800924e:	eea3 5b04 	vfma.f64	d5, d3, d4
 8009252:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 80092c8 <__kernel_cos+0xc0>
 8009256:	4b20      	ldr	r3, [pc, #128]	; (80092d8 <__kernel_cos+0xd0>)
 8009258:	eea5 3b04 	vfma.f64	d3, d5, d4
 800925c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 80092d0 <__kernel_cos+0xc8>
 8009260:	4299      	cmp	r1, r3
 8009262:	eea3 5b04 	vfma.f64	d5, d3, d4
 8009266:	ee25 5b04 	vmul.f64	d5, d5, d4
 800926a:	eea4 1b05 	vfma.f64	d1, d4, d5
 800926e:	dc04      	bgt.n	800927a <__kernel_cos+0x72>
 8009270:	ee36 6b41 	vsub.f64	d6, d6, d1
 8009274:	ee37 0b46 	vsub.f64	d0, d7, d6
 8009278:	4770      	bx	lr
 800927a:	4b18      	ldr	r3, [pc, #96]	; (80092dc <__kernel_cos+0xd4>)
 800927c:	4299      	cmp	r1, r3
 800927e:	dc0d      	bgt.n	800929c <__kernel_cos+0x94>
 8009280:	2200      	movs	r2, #0
 8009282:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8009286:	ec43 2b15 	vmov	d5, r2, r3
 800928a:	ee37 0b45 	vsub.f64	d0, d7, d5
 800928e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009292:	ee36 6b41 	vsub.f64	d6, d6, d1
 8009296:	ee30 0b46 	vsub.f64	d0, d0, d6
 800929a:	4770      	bx	lr
 800929c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80092a0:	e7f3      	b.n	800928a <__kernel_cos+0x82>
 80092a2:	eeb0 0b47 	vmov.f64	d0, d7
 80092a6:	4770      	bx	lr
 80092a8:	be8838d4 	.word	0xbe8838d4
 80092ac:	bda8fae9 	.word	0xbda8fae9
 80092b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80092b4:	3e21ee9e 	.word	0x3e21ee9e
 80092b8:	809c52ad 	.word	0x809c52ad
 80092bc:	be927e4f 	.word	0xbe927e4f
 80092c0:	19cb1590 	.word	0x19cb1590
 80092c4:	3efa01a0 	.word	0x3efa01a0
 80092c8:	16c15177 	.word	0x16c15177
 80092cc:	bf56c16c 	.word	0xbf56c16c
 80092d0:	5555554c 	.word	0x5555554c
 80092d4:	3fa55555 	.word	0x3fa55555
 80092d8:	3fd33332 	.word	0x3fd33332
 80092dc:	3fe90000 	.word	0x3fe90000

080092e0 <__kernel_rem_pio2>:
 80092e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e4:	ed2d 8b06 	vpush	{d8-d10}
 80092e8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80092ec:	469b      	mov	fp, r3
 80092ee:	460e      	mov	r6, r1
 80092f0:	4bc7      	ldr	r3, [pc, #796]	; (8009610 <__kernel_rem_pio2+0x330>)
 80092f2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80092f4:	9002      	str	r0, [sp, #8]
 80092f6:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80092fa:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 80092fc:	1ed1      	subs	r1, r2, #3
 80092fe:	2318      	movs	r3, #24
 8009300:	f06f 0417 	mvn.w	r4, #23
 8009304:	fb91 f1f3 	sdiv	r1, r1, r3
 8009308:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800930c:	f10b 3aff 	add.w	sl, fp, #4294967295
 8009310:	fb01 4404 	mla	r4, r1, r4, r4
 8009314:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 80095f8 <__kernel_rem_pio2+0x318>
 8009318:	4414      	add	r4, r2
 800931a:	eba1 050a 	sub.w	r5, r1, sl
 800931e:	aa1a      	add	r2, sp, #104	; 0x68
 8009320:	eb09 070a 	add.w	r7, r9, sl
 8009324:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8009328:	4696      	mov	lr, r2
 800932a:	2300      	movs	r3, #0
 800932c:	42bb      	cmp	r3, r7
 800932e:	dd0f      	ble.n	8009350 <__kernel_rem_pio2+0x70>
 8009330:	af6a      	add	r7, sp, #424	; 0x1a8
 8009332:	2200      	movs	r2, #0
 8009334:	454a      	cmp	r2, r9
 8009336:	dc28      	bgt.n	800938a <__kernel_rem_pio2+0xaa>
 8009338:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800933c:	eb0b 0302 	add.w	r3, fp, r2
 8009340:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 8009344:	9d02      	ldr	r5, [sp, #8]
 8009346:	ed9f 7bac 	vldr	d7, [pc, #688]	; 80095f8 <__kernel_rem_pio2+0x318>
 800934a:	f04f 0c00 	mov.w	ip, #0
 800934e:	e016      	b.n	800937e <__kernel_rem_pio2+0x9e>
 8009350:	42dd      	cmn	r5, r3
 8009352:	d409      	bmi.n	8009368 <__kernel_rem_pio2+0x88>
 8009354:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8009358:	ee07 2a90 	vmov	s15, r2
 800935c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009360:	ecae 7b02 	vstmia	lr!, {d7}
 8009364:	3301      	adds	r3, #1
 8009366:	e7e1      	b.n	800932c <__kernel_rem_pio2+0x4c>
 8009368:	eeb0 7b46 	vmov.f64	d7, d6
 800936c:	e7f8      	b.n	8009360 <__kernel_rem_pio2+0x80>
 800936e:	ecb5 5b02 	vldmia	r5!, {d5}
 8009372:	ed33 6b02 	vldmdb	r3!, {d6}
 8009376:	f10c 0c01 	add.w	ip, ip, #1
 800937a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800937e:	45d4      	cmp	ip, sl
 8009380:	ddf5      	ble.n	800936e <__kernel_rem_pio2+0x8e>
 8009382:	eca7 7b02 	vstmia	r7!, {d7}
 8009386:	3201      	adds	r2, #1
 8009388:	e7d4      	b.n	8009334 <__kernel_rem_pio2+0x54>
 800938a:	ab06      	add	r3, sp, #24
 800938c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8009390:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 8009600 <__kernel_rem_pio2+0x320>
 8009394:	ed9f ab9c 	vldr	d10, [pc, #624]	; 8009608 <__kernel_rem_pio2+0x328>
 8009398:	9304      	str	r3, [sp, #16]
 800939a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800939e:	9303      	str	r3, [sp, #12]
 80093a0:	464d      	mov	r5, r9
 80093a2:	ab92      	add	r3, sp, #584	; 0x248
 80093a4:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 80093a8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80093ac:	3f01      	subs	r7, #1
 80093ae:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80093b2:	00ff      	lsls	r7, r7, #3
 80093b4:	ab92      	add	r3, sp, #584	; 0x248
 80093b6:	19da      	adds	r2, r3, r7
 80093b8:	3a98      	subs	r2, #152	; 0x98
 80093ba:	2300      	movs	r3, #0
 80093bc:	1ae9      	subs	r1, r5, r3
 80093be:	2900      	cmp	r1, #0
 80093c0:	dc4e      	bgt.n	8009460 <__kernel_rem_pio2+0x180>
 80093c2:	4620      	mov	r0, r4
 80093c4:	f000 fb04 	bl	80099d0 <scalbn>
 80093c8:	eeb0 8b40 	vmov.f64	d8, d0
 80093cc:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80093d0:	ee28 0b00 	vmul.f64	d0, d8, d0
 80093d4:	f000 fa84 	bl	80098e0 <floor>
 80093d8:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80093dc:	eea0 8b47 	vfms.f64	d8, d0, d7
 80093e0:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80093e4:	2c00      	cmp	r4, #0
 80093e6:	edcd 7a01 	vstr	s15, [sp, #4]
 80093ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80093ee:	ee38 8b47 	vsub.f64	d8, d8, d7
 80093f2:	dd4a      	ble.n	800948a <__kernel_rem_pio2+0x1aa>
 80093f4:	1e69      	subs	r1, r5, #1
 80093f6:	ab06      	add	r3, sp, #24
 80093f8:	f1c4 0018 	rsb	r0, r4, #24
 80093fc:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8009400:	9a01      	ldr	r2, [sp, #4]
 8009402:	fa4c f300 	asr.w	r3, ip, r0
 8009406:	441a      	add	r2, r3
 8009408:	4083      	lsls	r3, r0
 800940a:	9201      	str	r2, [sp, #4]
 800940c:	ebac 0203 	sub.w	r2, ip, r3
 8009410:	ab06      	add	r3, sp, #24
 8009412:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8009416:	f1c4 0317 	rsb	r3, r4, #23
 800941a:	fa42 f803 	asr.w	r8, r2, r3
 800941e:	f1b8 0f00 	cmp.w	r8, #0
 8009422:	dd43      	ble.n	80094ac <__kernel_rem_pio2+0x1cc>
 8009424:	9b01      	ldr	r3, [sp, #4]
 8009426:	2000      	movs	r0, #0
 8009428:	3301      	adds	r3, #1
 800942a:	9301      	str	r3, [sp, #4]
 800942c:	4601      	mov	r1, r0
 800942e:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 8009432:	4285      	cmp	r5, r0
 8009434:	dc6e      	bgt.n	8009514 <__kernel_rem_pio2+0x234>
 8009436:	2c00      	cmp	r4, #0
 8009438:	dd04      	ble.n	8009444 <__kernel_rem_pio2+0x164>
 800943a:	2c01      	cmp	r4, #1
 800943c:	d07f      	beq.n	800953e <__kernel_rem_pio2+0x25e>
 800943e:	2c02      	cmp	r4, #2
 8009440:	f000 8087 	beq.w	8009552 <__kernel_rem_pio2+0x272>
 8009444:	f1b8 0f02 	cmp.w	r8, #2
 8009448:	d130      	bne.n	80094ac <__kernel_rem_pio2+0x1cc>
 800944a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800944e:	ee30 8b48 	vsub.f64	d8, d0, d8
 8009452:	b359      	cbz	r1, 80094ac <__kernel_rem_pio2+0x1cc>
 8009454:	4620      	mov	r0, r4
 8009456:	f000 fabb 	bl	80099d0 <scalbn>
 800945a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800945e:	e025      	b.n	80094ac <__kernel_rem_pio2+0x1cc>
 8009460:	ee20 7b09 	vmul.f64	d7, d0, d9
 8009464:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8009468:	a806      	add	r0, sp, #24
 800946a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800946e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8009472:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009476:	ee10 1a10 	vmov	r1, s0
 800947a:	ed32 0b02 	vldmdb	r2!, {d0}
 800947e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8009482:	ee37 0b00 	vadd.f64	d0, d7, d0
 8009486:	3301      	adds	r3, #1
 8009488:	e798      	b.n	80093bc <__kernel_rem_pio2+0xdc>
 800948a:	d106      	bne.n	800949a <__kernel_rem_pio2+0x1ba>
 800948c:	1e6b      	subs	r3, r5, #1
 800948e:	aa06      	add	r2, sp, #24
 8009490:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009494:	ea4f 58e2 	mov.w	r8, r2, asr #23
 8009498:	e7c1      	b.n	800941e <__kernel_rem_pio2+0x13e>
 800949a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800949e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80094a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a6:	da32      	bge.n	800950e <__kernel_rem_pio2+0x22e>
 80094a8:	f04f 0800 	mov.w	r8, #0
 80094ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80094b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094b4:	f040 80b0 	bne.w	8009618 <__kernel_rem_pio2+0x338>
 80094b8:	1e6b      	subs	r3, r5, #1
 80094ba:	4618      	mov	r0, r3
 80094bc:	2200      	movs	r2, #0
 80094be:	4548      	cmp	r0, r9
 80094c0:	da4e      	bge.n	8009560 <__kernel_rem_pio2+0x280>
 80094c2:	2a00      	cmp	r2, #0
 80094c4:	f000 8088 	beq.w	80095d8 <__kernel_rem_pio2+0x2f8>
 80094c8:	aa06      	add	r2, sp, #24
 80094ca:	3c18      	subs	r4, #24
 80094cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80094d0:	2900      	cmp	r1, #0
 80094d2:	f000 808e 	beq.w	80095f2 <__kernel_rem_pio2+0x312>
 80094d6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80094da:	4620      	mov	r0, r4
 80094dc:	9302      	str	r3, [sp, #8]
 80094de:	f000 fa77 	bl	80099d0 <scalbn>
 80094e2:	9b02      	ldr	r3, [sp, #8]
 80094e4:	aa6a      	add	r2, sp, #424	; 0x1a8
 80094e6:	00d9      	lsls	r1, r3, #3
 80094e8:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8009600 <__kernel_rem_pio2+0x320>
 80094ec:	1850      	adds	r0, r2, r1
 80094ee:	f100 0508 	add.w	r5, r0, #8
 80094f2:	461c      	mov	r4, r3
 80094f4:	2c00      	cmp	r4, #0
 80094f6:	f280 80bd 	bge.w	8009674 <__kernel_rem_pio2+0x394>
 80094fa:	2500      	movs	r5, #0
 80094fc:	1b5c      	subs	r4, r3, r5
 80094fe:	2c00      	cmp	r4, #0
 8009500:	f2c0 80dd 	blt.w	80096be <__kernel_rem_pio2+0x3de>
 8009504:	4f43      	ldr	r7, [pc, #268]	; (8009614 <__kernel_rem_pio2+0x334>)
 8009506:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 80095f8 <__kernel_rem_pio2+0x318>
 800950a:	2400      	movs	r4, #0
 800950c:	e0cb      	b.n	80096a6 <__kernel_rem_pio2+0x3c6>
 800950e:	f04f 0802 	mov.w	r8, #2
 8009512:	e787      	b.n	8009424 <__kernel_rem_pio2+0x144>
 8009514:	ab06      	add	r3, sp, #24
 8009516:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800951a:	b949      	cbnz	r1, 8009530 <__kernel_rem_pio2+0x250>
 800951c:	b12b      	cbz	r3, 800952a <__kernel_rem_pio2+0x24a>
 800951e:	aa06      	add	r2, sp, #24
 8009520:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009524:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8009528:	2301      	movs	r3, #1
 800952a:	3001      	adds	r0, #1
 800952c:	4619      	mov	r1, r3
 800952e:	e780      	b.n	8009432 <__kernel_rem_pio2+0x152>
 8009530:	aa06      	add	r2, sp, #24
 8009532:	ebac 0303 	sub.w	r3, ip, r3
 8009536:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800953a:	460b      	mov	r3, r1
 800953c:	e7f5      	b.n	800952a <__kernel_rem_pio2+0x24a>
 800953e:	1e68      	subs	r0, r5, #1
 8009540:	ab06      	add	r3, sp, #24
 8009542:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009546:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800954a:	aa06      	add	r2, sp, #24
 800954c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8009550:	e778      	b.n	8009444 <__kernel_rem_pio2+0x164>
 8009552:	1e68      	subs	r0, r5, #1
 8009554:	ab06      	add	r3, sp, #24
 8009556:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800955a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800955e:	e7f4      	b.n	800954a <__kernel_rem_pio2+0x26a>
 8009560:	a906      	add	r1, sp, #24
 8009562:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009566:	3801      	subs	r0, #1
 8009568:	430a      	orrs	r2, r1
 800956a:	e7a8      	b.n	80094be <__kernel_rem_pio2+0x1de>
 800956c:	f10c 0c01 	add.w	ip, ip, #1
 8009570:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009574:	2a00      	cmp	r2, #0
 8009576:	d0f9      	beq.n	800956c <__kernel_rem_pio2+0x28c>
 8009578:	eb0b 0305 	add.w	r3, fp, r5
 800957c:	aa1a      	add	r2, sp, #104	; 0x68
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	1898      	adds	r0, r3, r2
 8009582:	3008      	adds	r0, #8
 8009584:	1c69      	adds	r1, r5, #1
 8009586:	3708      	adds	r7, #8
 8009588:	2200      	movs	r2, #0
 800958a:	4465      	add	r5, ip
 800958c:	9005      	str	r0, [sp, #20]
 800958e:	428d      	cmp	r5, r1
 8009590:	f6ff af07 	blt.w	80093a2 <__kernel_rem_pio2+0xc2>
 8009594:	a81a      	add	r0, sp, #104	; 0x68
 8009596:	eb02 0c03 	add.w	ip, r2, r3
 800959a:	4484      	add	ip, r0
 800959c:	9803      	ldr	r0, [sp, #12]
 800959e:	f8dd e008 	ldr.w	lr, [sp, #8]
 80095a2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80095a6:	9001      	str	r0, [sp, #4]
 80095a8:	ee07 0a90 	vmov	s15, r0
 80095ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80095b0:	9805      	ldr	r0, [sp, #20]
 80095b2:	ed8c 7b00 	vstr	d7, [ip]
 80095b6:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80095f8 <__kernel_rem_pio2+0x318>
 80095ba:	eb00 0802 	add.w	r8, r0, r2
 80095be:	f04f 0c00 	mov.w	ip, #0
 80095c2:	45d4      	cmp	ip, sl
 80095c4:	dd0c      	ble.n	80095e0 <__kernel_rem_pio2+0x300>
 80095c6:	eb02 0c07 	add.w	ip, r2, r7
 80095ca:	a86a      	add	r0, sp, #424	; 0x1a8
 80095cc:	4484      	add	ip, r0
 80095ce:	ed8c 7b02 	vstr	d7, [ip, #8]
 80095d2:	3101      	adds	r1, #1
 80095d4:	3208      	adds	r2, #8
 80095d6:	e7da      	b.n	800958e <__kernel_rem_pio2+0x2ae>
 80095d8:	9b04      	ldr	r3, [sp, #16]
 80095da:	f04f 0c01 	mov.w	ip, #1
 80095de:	e7c7      	b.n	8009570 <__kernel_rem_pio2+0x290>
 80095e0:	ecbe 5b02 	vldmia	lr!, {d5}
 80095e4:	ed38 6b02 	vldmdb	r8!, {d6}
 80095e8:	f10c 0c01 	add.w	ip, ip, #1
 80095ec:	eea5 7b06 	vfma.f64	d7, d5, d6
 80095f0:	e7e7      	b.n	80095c2 <__kernel_rem_pio2+0x2e2>
 80095f2:	3b01      	subs	r3, #1
 80095f4:	e768      	b.n	80094c8 <__kernel_rem_pio2+0x1e8>
 80095f6:	bf00      	nop
	...
 8009604:	3e700000 	.word	0x3e700000
 8009608:	00000000 	.word	0x00000000
 800960c:	41700000 	.word	0x41700000
 8009610:	0800a268 	.word	0x0800a268
 8009614:	0800a228 	.word	0x0800a228
 8009618:	4260      	negs	r0, r4
 800961a:	eeb0 0b48 	vmov.f64	d0, d8
 800961e:	f000 f9d7 	bl	80099d0 <scalbn>
 8009622:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8009800 <__kernel_rem_pio2+0x520>
 8009626:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800962a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800962e:	db18      	blt.n	8009662 <__kernel_rem_pio2+0x382>
 8009630:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8009808 <__kernel_rem_pio2+0x528>
 8009634:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009638:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800963c:	aa06      	add	r2, sp, #24
 800963e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8009642:	eea5 0b46 	vfms.f64	d0, d5, d6
 8009646:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800964a:	a906      	add	r1, sp, #24
 800964c:	ee10 3a10 	vmov	r3, s0
 8009650:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009654:	1c6b      	adds	r3, r5, #1
 8009656:	ee17 2a10 	vmov	r2, s14
 800965a:	3418      	adds	r4, #24
 800965c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009660:	e739      	b.n	80094d6 <__kernel_rem_pio2+0x1f6>
 8009662:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009666:	aa06      	add	r2, sp, #24
 8009668:	ee10 3a10 	vmov	r3, s0
 800966c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009670:	462b      	mov	r3, r5
 8009672:	e730      	b.n	80094d6 <__kernel_rem_pio2+0x1f6>
 8009674:	aa06      	add	r2, sp, #24
 8009676:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800967a:	9202      	str	r2, [sp, #8]
 800967c:	ee07 2a90 	vmov	s15, r2
 8009680:	3c01      	subs	r4, #1
 8009682:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009686:	ee27 7b00 	vmul.f64	d7, d7, d0
 800968a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800968e:	ed25 7b02 	vstmdb	r5!, {d7}
 8009692:	e72f      	b.n	80094f4 <__kernel_rem_pio2+0x214>
 8009694:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8009698:	ecb7 5b02 	vldmia	r7!, {d5}
 800969c:	ed9c 6b00 	vldr	d6, [ip]
 80096a0:	3401      	adds	r4, #1
 80096a2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80096a6:	454c      	cmp	r4, r9
 80096a8:	dc01      	bgt.n	80096ae <__kernel_rem_pio2+0x3ce>
 80096aa:	42a5      	cmp	r5, r4
 80096ac:	daf2      	bge.n	8009694 <__kernel_rem_pio2+0x3b4>
 80096ae:	aa42      	add	r2, sp, #264	; 0x108
 80096b0:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 80096b4:	ed84 7b00 	vstr	d7, [r4]
 80096b8:	3501      	adds	r5, #1
 80096ba:	3808      	subs	r0, #8
 80096bc:	e71e      	b.n	80094fc <__kernel_rem_pio2+0x21c>
 80096be:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80096c0:	2a03      	cmp	r2, #3
 80096c2:	d84e      	bhi.n	8009762 <__kernel_rem_pio2+0x482>
 80096c4:	e8df f002 	tbb	[pc, r2]
 80096c8:	021f1f3e 	.word	0x021f1f3e
 80096cc:	3108      	adds	r1, #8
 80096ce:	aa42      	add	r2, sp, #264	; 0x108
 80096d0:	4411      	add	r1, r2
 80096d2:	4608      	mov	r0, r1
 80096d4:	461c      	mov	r4, r3
 80096d6:	2c00      	cmp	r4, #0
 80096d8:	dc61      	bgt.n	800979e <__kernel_rem_pio2+0x4be>
 80096da:	4608      	mov	r0, r1
 80096dc:	461c      	mov	r4, r3
 80096de:	2c01      	cmp	r4, #1
 80096e0:	dc6d      	bgt.n	80097be <__kernel_rem_pio2+0x4de>
 80096e2:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009810 <__kernel_rem_pio2+0x530>
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	dc79      	bgt.n	80097de <__kernel_rem_pio2+0x4fe>
 80096ea:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80096ee:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80096f2:	f1b8 0f00 	cmp.w	r8, #0
 80096f6:	d178      	bne.n	80097ea <__kernel_rem_pio2+0x50a>
 80096f8:	ed86 5b00 	vstr	d5, [r6]
 80096fc:	ed86 6b02 	vstr	d6, [r6, #8]
 8009700:	ed86 7b04 	vstr	d7, [r6, #16]
 8009704:	e02d      	b.n	8009762 <__kernel_rem_pio2+0x482>
 8009706:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8009810 <__kernel_rem_pio2+0x530>
 800970a:	3108      	adds	r1, #8
 800970c:	aa42      	add	r2, sp, #264	; 0x108
 800970e:	4411      	add	r1, r2
 8009710:	4618      	mov	r0, r3
 8009712:	2800      	cmp	r0, #0
 8009714:	da34      	bge.n	8009780 <__kernel_rem_pio2+0x4a0>
 8009716:	f1b8 0f00 	cmp.w	r8, #0
 800971a:	d037      	beq.n	800978c <__kernel_rem_pio2+0x4ac>
 800971c:	eeb1 7b46 	vneg.f64	d7, d6
 8009720:	ed86 7b00 	vstr	d7, [r6]
 8009724:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8009728:	a844      	add	r0, sp, #272	; 0x110
 800972a:	2101      	movs	r1, #1
 800972c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009730:	428b      	cmp	r3, r1
 8009732:	da2e      	bge.n	8009792 <__kernel_rem_pio2+0x4b2>
 8009734:	f1b8 0f00 	cmp.w	r8, #0
 8009738:	d001      	beq.n	800973e <__kernel_rem_pio2+0x45e>
 800973a:	eeb1 7b47 	vneg.f64	d7, d7
 800973e:	ed86 7b02 	vstr	d7, [r6, #8]
 8009742:	e00e      	b.n	8009762 <__kernel_rem_pio2+0x482>
 8009744:	aa92      	add	r2, sp, #584	; 0x248
 8009746:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8009810 <__kernel_rem_pio2+0x530>
 800974a:	4411      	add	r1, r2
 800974c:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8009750:	2b00      	cmp	r3, #0
 8009752:	da0f      	bge.n	8009774 <__kernel_rem_pio2+0x494>
 8009754:	f1b8 0f00 	cmp.w	r8, #0
 8009758:	d001      	beq.n	800975e <__kernel_rem_pio2+0x47e>
 800975a:	eeb1 7b47 	vneg.f64	d7, d7
 800975e:	ed86 7b00 	vstr	d7, [r6]
 8009762:	9b01      	ldr	r3, [sp, #4]
 8009764:	f003 0007 	and.w	r0, r3, #7
 8009768:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800976c:	ecbd 8b06 	vpop	{d8-d10}
 8009770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009774:	ed31 6b02 	vldmdb	r1!, {d6}
 8009778:	3b01      	subs	r3, #1
 800977a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800977e:	e7e7      	b.n	8009750 <__kernel_rem_pio2+0x470>
 8009780:	ed31 7b02 	vldmdb	r1!, {d7}
 8009784:	3801      	subs	r0, #1
 8009786:	ee36 6b07 	vadd.f64	d6, d6, d7
 800978a:	e7c2      	b.n	8009712 <__kernel_rem_pio2+0x432>
 800978c:	eeb0 7b46 	vmov.f64	d7, d6
 8009790:	e7c6      	b.n	8009720 <__kernel_rem_pio2+0x440>
 8009792:	ecb0 6b02 	vldmia	r0!, {d6}
 8009796:	3101      	adds	r1, #1
 8009798:	ee37 7b06 	vadd.f64	d7, d7, d6
 800979c:	e7c8      	b.n	8009730 <__kernel_rem_pio2+0x450>
 800979e:	ed10 7b04 	vldr	d7, [r0, #-16]
 80097a2:	ed30 5b02 	vldmdb	r0!, {d5}
 80097a6:	3c01      	subs	r4, #1
 80097a8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80097ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80097b0:	ed00 6b02 	vstr	d6, [r0, #-8]
 80097b4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80097b8:	ed80 7b00 	vstr	d7, [r0]
 80097bc:	e78b      	b.n	80096d6 <__kernel_rem_pio2+0x3f6>
 80097be:	ed10 7b04 	vldr	d7, [r0, #-16]
 80097c2:	ed30 5b02 	vldmdb	r0!, {d5}
 80097c6:	3c01      	subs	r4, #1
 80097c8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80097cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80097d0:	ed00 6b02 	vstr	d6, [r0, #-8]
 80097d4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80097d8:	ed80 7b00 	vstr	d7, [r0]
 80097dc:	e77f      	b.n	80096de <__kernel_rem_pio2+0x3fe>
 80097de:	ed31 6b02 	vldmdb	r1!, {d6}
 80097e2:	3b01      	subs	r3, #1
 80097e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80097e8:	e77d      	b.n	80096e6 <__kernel_rem_pio2+0x406>
 80097ea:	eeb1 5b45 	vneg.f64	d5, d5
 80097ee:	eeb1 6b46 	vneg.f64	d6, d6
 80097f2:	ed86 5b00 	vstr	d5, [r6]
 80097f6:	eeb1 7b47 	vneg.f64	d7, d7
 80097fa:	ed86 6b02 	vstr	d6, [r6, #8]
 80097fe:	e77f      	b.n	8009700 <__kernel_rem_pio2+0x420>
 8009800:	00000000 	.word	0x00000000
 8009804:	41700000 	.word	0x41700000
 8009808:	00000000 	.word	0x00000000
 800980c:	3e700000 	.word	0x3e700000
	...

08009818 <__kernel_sin>:
 8009818:	ee10 3a90 	vmov	r3, s1
 800981c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009820:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009824:	da04      	bge.n	8009830 <__kernel_sin+0x18>
 8009826:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800982a:	ee17 3a90 	vmov	r3, s15
 800982e:	b35b      	cbz	r3, 8009888 <__kernel_sin+0x70>
 8009830:	ee20 6b00 	vmul.f64	d6, d0, d0
 8009834:	ee20 5b06 	vmul.f64	d5, d0, d6
 8009838:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8009890 <__kernel_sin+0x78>
 800983c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009898 <__kernel_sin+0x80>
 8009840:	eea6 4b07 	vfma.f64	d4, d6, d7
 8009844:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80098a0 <__kernel_sin+0x88>
 8009848:	eea4 7b06 	vfma.f64	d7, d4, d6
 800984c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80098a8 <__kernel_sin+0x90>
 8009850:	eea7 4b06 	vfma.f64	d4, d7, d6
 8009854:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80098b0 <__kernel_sin+0x98>
 8009858:	eea4 7b06 	vfma.f64	d7, d4, d6
 800985c:	b930      	cbnz	r0, 800986c <__kernel_sin+0x54>
 800985e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80098b8 <__kernel_sin+0xa0>
 8009862:	eea6 4b07 	vfma.f64	d4, d6, d7
 8009866:	eea4 0b05 	vfma.f64	d0, d4, d5
 800986a:	4770      	bx	lr
 800986c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8009870:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8009874:	eea1 7b04 	vfma.f64	d7, d1, d4
 8009878:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800987c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80098c0 <__kernel_sin+0xa8>
 8009880:	eea5 1b07 	vfma.f64	d1, d5, d7
 8009884:	ee30 0b41 	vsub.f64	d0, d0, d1
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	f3af 8000 	nop.w
 8009890:	5acfd57c 	.word	0x5acfd57c
 8009894:	3de5d93a 	.word	0x3de5d93a
 8009898:	8a2b9ceb 	.word	0x8a2b9ceb
 800989c:	be5ae5e6 	.word	0xbe5ae5e6
 80098a0:	57b1fe7d 	.word	0x57b1fe7d
 80098a4:	3ec71de3 	.word	0x3ec71de3
 80098a8:	19c161d5 	.word	0x19c161d5
 80098ac:	bf2a01a0 	.word	0xbf2a01a0
 80098b0:	1110f8a6 	.word	0x1110f8a6
 80098b4:	3f811111 	.word	0x3f811111
 80098b8:	55555549 	.word	0x55555549
 80098bc:	bfc55555 	.word	0xbfc55555
 80098c0:	55555549 	.word	0x55555549
 80098c4:	3fc55555 	.word	0x3fc55555

080098c8 <fabs>:
 80098c8:	ec51 0b10 	vmov	r0, r1, d0
 80098cc:	ee10 2a10 	vmov	r2, s0
 80098d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80098d4:	ec43 2b10 	vmov	d0, r2, r3
 80098d8:	4770      	bx	lr
 80098da:	0000      	movs	r0, r0
 80098dc:	0000      	movs	r0, r0
	...

080098e0 <floor>:
 80098e0:	ee10 1a90 	vmov	r1, s1
 80098e4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80098e8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80098ec:	2b13      	cmp	r3, #19
 80098ee:	b530      	push	{r4, r5, lr}
 80098f0:	ee10 0a10 	vmov	r0, s0
 80098f4:	ee10 5a10 	vmov	r5, s0
 80098f8:	dc33      	bgt.n	8009962 <floor+0x82>
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	da17      	bge.n	800992e <floor+0x4e>
 80098fe:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80099c0 <floor+0xe0>
 8009902:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009906:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800990a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800990e:	dd09      	ble.n	8009924 <floor+0x44>
 8009910:	2900      	cmp	r1, #0
 8009912:	da50      	bge.n	80099b6 <floor+0xd6>
 8009914:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009918:	4a2b      	ldr	r2, [pc, #172]	; (80099c8 <floor+0xe8>)
 800991a:	4303      	orrs	r3, r0
 800991c:	2000      	movs	r0, #0
 800991e:	4283      	cmp	r3, r0
 8009920:	bf18      	it	ne
 8009922:	4611      	movne	r1, r2
 8009924:	460b      	mov	r3, r1
 8009926:	4602      	mov	r2, r0
 8009928:	ec43 2b10 	vmov	d0, r2, r3
 800992c:	e020      	b.n	8009970 <floor+0x90>
 800992e:	4a27      	ldr	r2, [pc, #156]	; (80099cc <floor+0xec>)
 8009930:	411a      	asrs	r2, r3
 8009932:	ea01 0402 	and.w	r4, r1, r2
 8009936:	4304      	orrs	r4, r0
 8009938:	d01a      	beq.n	8009970 <floor+0x90>
 800993a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80099c0 <floor+0xe0>
 800993e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009942:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994a:	ddeb      	ble.n	8009924 <floor+0x44>
 800994c:	2900      	cmp	r1, #0
 800994e:	bfbe      	ittt	lt
 8009950:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8009954:	fa40 f303 	asrlt.w	r3, r0, r3
 8009958:	18c9      	addlt	r1, r1, r3
 800995a:	ea21 0102 	bic.w	r1, r1, r2
 800995e:	2000      	movs	r0, #0
 8009960:	e7e0      	b.n	8009924 <floor+0x44>
 8009962:	2b33      	cmp	r3, #51	; 0x33
 8009964:	dd05      	ble.n	8009972 <floor+0x92>
 8009966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800996a:	d101      	bne.n	8009970 <floor+0x90>
 800996c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009970:	bd30      	pop	{r4, r5, pc}
 8009972:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8009976:	f04f 32ff 	mov.w	r2, #4294967295
 800997a:	40e2      	lsrs	r2, r4
 800997c:	4202      	tst	r2, r0
 800997e:	d0f7      	beq.n	8009970 <floor+0x90>
 8009980:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80099c0 <floor+0xe0>
 8009984:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009988:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800998c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009990:	ddc8      	ble.n	8009924 <floor+0x44>
 8009992:	2900      	cmp	r1, #0
 8009994:	da02      	bge.n	800999c <floor+0xbc>
 8009996:	2b14      	cmp	r3, #20
 8009998:	d103      	bne.n	80099a2 <floor+0xc2>
 800999a:	3101      	adds	r1, #1
 800999c:	ea20 0002 	bic.w	r0, r0, r2
 80099a0:	e7c0      	b.n	8009924 <floor+0x44>
 80099a2:	2401      	movs	r4, #1
 80099a4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80099a8:	fa04 f303 	lsl.w	r3, r4, r3
 80099ac:	4418      	add	r0, r3
 80099ae:	42a8      	cmp	r0, r5
 80099b0:	bf38      	it	cc
 80099b2:	1909      	addcc	r1, r1, r4
 80099b4:	e7f2      	b.n	800999c <floor+0xbc>
 80099b6:	2000      	movs	r0, #0
 80099b8:	4601      	mov	r1, r0
 80099ba:	e7b3      	b.n	8009924 <floor+0x44>
 80099bc:	f3af 8000 	nop.w
 80099c0:	8800759c 	.word	0x8800759c
 80099c4:	7e37e43c 	.word	0x7e37e43c
 80099c8:	bff00000 	.word	0xbff00000
 80099cc:	000fffff 	.word	0x000fffff

080099d0 <scalbn>:
 80099d0:	b500      	push	{lr}
 80099d2:	ed2d 8b02 	vpush	{d8}
 80099d6:	b083      	sub	sp, #12
 80099d8:	ed8d 0b00 	vstr	d0, [sp]
 80099dc:	9b01      	ldr	r3, [sp, #4]
 80099de:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80099e2:	b9a2      	cbnz	r2, 8009a0e <scalbn+0x3e>
 80099e4:	9a00      	ldr	r2, [sp, #0]
 80099e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099ea:	4313      	orrs	r3, r2
 80099ec:	d03a      	beq.n	8009a64 <scalbn+0x94>
 80099ee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009aa8 <scalbn+0xd8>
 80099f2:	4b35      	ldr	r3, [pc, #212]	; (8009ac8 <scalbn+0xf8>)
 80099f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80099f8:	4298      	cmp	r0, r3
 80099fa:	ed8d 7b00 	vstr	d7, [sp]
 80099fe:	da11      	bge.n	8009a24 <scalbn+0x54>
 8009a00:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8009ab0 <scalbn+0xe0>
 8009a04:	ed9d 6b00 	vldr	d6, [sp]
 8009a08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a0c:	e007      	b.n	8009a1e <scalbn+0x4e>
 8009a0e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009a12:	428a      	cmp	r2, r1
 8009a14:	d10a      	bne.n	8009a2c <scalbn+0x5c>
 8009a16:	ed9d 7b00 	vldr	d7, [sp]
 8009a1a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009a1e:	ed8d 7b00 	vstr	d7, [sp]
 8009a22:	e01f      	b.n	8009a64 <scalbn+0x94>
 8009a24:	9b01      	ldr	r3, [sp, #4]
 8009a26:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009a2a:	3a36      	subs	r2, #54	; 0x36
 8009a2c:	4402      	add	r2, r0
 8009a2e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009a32:	428a      	cmp	r2, r1
 8009a34:	dd0a      	ble.n	8009a4c <scalbn+0x7c>
 8009a36:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8009ab8 <scalbn+0xe8>
 8009a3a:	eeb0 0b48 	vmov.f64	d0, d8
 8009a3e:	ed9d 1b00 	vldr	d1, [sp]
 8009a42:	f000 f843 	bl	8009acc <copysign>
 8009a46:	ee20 7b08 	vmul.f64	d7, d0, d8
 8009a4a:	e7e8      	b.n	8009a1e <scalbn+0x4e>
 8009a4c:	2a00      	cmp	r2, #0
 8009a4e:	dd10      	ble.n	8009a72 <scalbn+0xa2>
 8009a50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009a58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009a5c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009a60:	e9cd 0100 	strd	r0, r1, [sp]
 8009a64:	ed9d 0b00 	vldr	d0, [sp]
 8009a68:	b003      	add	sp, #12
 8009a6a:	ecbd 8b02 	vpop	{d8}
 8009a6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a72:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009a76:	da06      	bge.n	8009a86 <scalbn+0xb6>
 8009a78:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009a7c:	4298      	cmp	r0, r3
 8009a7e:	dcda      	bgt.n	8009a36 <scalbn+0x66>
 8009a80:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8009ab0 <scalbn+0xe0>
 8009a84:	e7d9      	b.n	8009a3a <scalbn+0x6a>
 8009a86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009a8e:	3236      	adds	r2, #54	; 0x36
 8009a90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009a94:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009a98:	ec41 0b17 	vmov	d7, r0, r1
 8009a9c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8009ac0 <scalbn+0xf0>
 8009aa0:	e7b2      	b.n	8009a08 <scalbn+0x38>
 8009aa2:	bf00      	nop
 8009aa4:	f3af 8000 	nop.w
 8009aa8:	00000000 	.word	0x00000000
 8009aac:	43500000 	.word	0x43500000
 8009ab0:	c2f8f359 	.word	0xc2f8f359
 8009ab4:	01a56e1f 	.word	0x01a56e1f
 8009ab8:	8800759c 	.word	0x8800759c
 8009abc:	7e37e43c 	.word	0x7e37e43c
 8009ac0:	00000000 	.word	0x00000000
 8009ac4:	3c900000 	.word	0x3c900000
 8009ac8:	ffff3cb0 	.word	0xffff3cb0

08009acc <copysign>:
 8009acc:	ec51 0b10 	vmov	r0, r1, d0
 8009ad0:	ee11 0a90 	vmov	r0, s3
 8009ad4:	ee10 2a10 	vmov	r2, s0
 8009ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009adc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009ae0:	ea41 0300 	orr.w	r3, r1, r0
 8009ae4:	ec43 2b10 	vmov	d0, r2, r3
 8009ae8:	4770      	bx	lr
	...

08009aec <_init>:
 8009aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aee:	bf00      	nop
 8009af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009af2:	bc08      	pop	{r3}
 8009af4:	469e      	mov	lr, r3
 8009af6:	4770      	bx	lr

08009af8 <_fini>:
 8009af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afa:	bf00      	nop
 8009afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009afe:	bc08      	pop	{r3}
 8009b00:	469e      	mov	lr, r3
 8009b02:	4770      	bx	lr
