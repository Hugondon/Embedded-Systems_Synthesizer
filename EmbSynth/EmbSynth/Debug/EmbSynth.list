
EmbSynth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a18  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08008c10  08008c10  00018c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091a8  080091a8  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  080091a8  080091a8  000191a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091b0  080091b0  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091b0  080091b0  000191b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091b4  080091b4  000191b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  080091b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000038  080091f0  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  080091f0  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108a6  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fd2  00000000  00000000  0003090c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff8  00000000  00000000  000328e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f18  00000000  00000000  000338d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026a2b  00000000  00000000  000347f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b51b  00000000  00000000  0005b21b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fa936  00000000  00000000  00066736  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016106c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004408  00000000  00000000  001610e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000038 	.word	0x20000038
 8000214:	00000000 	.word	0x00000000
 8000218:	08008bf8 	.word	0x08008bf8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000003c 	.word	0x2000003c
 8000234:	08008bf8 	.word	0x08008bf8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f005 f875 	bl	800562a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f8d2 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 faa4 	bl	8000a90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000548:	f000 fa84 	bl	8000a54 <MX_DMA_Init>
  MX_UART4_Init();
 800054c:	f000 fa22 	bl	8000994 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000550:	f000 fa50 	bl	80009f4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000554:	f000 f9ac 	bl	80008b0 <MX_TIM2_Init>
  MX_TIM14_Init();
 8000558:	f000 f9f8 	bl	800094c <MX_TIM14_Init>
  MX_TIM1_Init();
 800055c:	f000 f954 	bl	8000808 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000560:	4855      	ldr	r0, [pc, #340]	; (80006b8 <main+0x180>)
 8000562:	f007 f87f 	bl	8007664 <HAL_TIM_Base_Start>
  HAL_UART_Receive_DMA(&huart4, rx_buffer, sizeof(rx_buffer)/sizeof(char));
 8000566:	2204      	movs	r2, #4
 8000568:	4954      	ldr	r1, [pc, #336]	; (80006bc <main+0x184>)
 800056a:	4855      	ldr	r0, [pc, #340]	; (80006c0 <main+0x188>)
 800056c:	f007 fdc2 	bl	80080f4 <HAL_UART_Receive_DMA>

  ID = readID();
 8000570:	f002 fa50 	bl	8002a14 <readID>
 8000574:	4603      	mov	r3, r0
 8000576:	461a      	mov	r2, r3
 8000578:	4b52      	ldr	r3, [pc, #328]	; (80006c4 <main+0x18c>)
 800057a:	801a      	strh	r2, [r3, #0]
  HAL_Delay(100);
 800057c:	2064      	movs	r0, #100	; 0x64
 800057e:	f005 f8b1 	bl	80056e4 <HAL_Delay>
  tft_init(ID);
 8000582:	4b50      	ldr	r3, [pc, #320]	; (80006c4 <main+0x18c>)
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	f001 ff26 	bl	80023d8 <tft_init>
  fillScreen(BLACK);
 800058c:	2000      	movs	r0, #0
 800058e:	f003 ff2d 	bl	80043ec <fillScreen>
  setRotation(3);
 8000592:	2003      	movs	r0, #3
 8000594:	f003 f95c 	bl	8003850 <setRotation>
  drawCircle(160, 100, 40, WHITE);
 8000598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800059c:	2228      	movs	r2, #40	; 0x28
 800059e:	2164      	movs	r1, #100	; 0x64
 80005a0:	20a0      	movs	r0, #160	; 0xa0
 80005a2:	f004 f92d 	bl	8004800 <drawCircle>
  drawCircle(160, 140, 40, WHITE);
 80005a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005aa:	2228      	movs	r2, #40	; 0x28
 80005ac:	218c      	movs	r1, #140	; 0x8c
 80005ae:	20a0      	movs	r0, #160	; 0xa0
 80005b0:	f004 f926 	bl	8004800 <drawCircle>
  drawCircle(120, 120, 40, WHITE);
 80005b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b8:	2228      	movs	r2, #40	; 0x28
 80005ba:	2178      	movs	r1, #120	; 0x78
 80005bc:	2078      	movs	r0, #120	; 0x78
 80005be:	f004 f91f 	bl	8004800 <drawCircle>
  drawCircle(200, 120, 40, WHITE);
 80005c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c6:	2228      	movs	r2, #40	; 0x28
 80005c8:	2178      	movs	r1, #120	; 0x78
 80005ca:	20c8      	movs	r0, #200	; 0xc8
 80005cc:	f004 f918 	bl	8004800 <drawCircle>

  HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(message)/sizeof(char) - 1, 1000);
 80005d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d4:	221b      	movs	r2, #27
 80005d6:	493c      	ldr	r1, [pc, #240]	; (80006c8 <main+0x190>)
 80005d8:	483c      	ldr	r0, [pc, #240]	; (80006cc <main+0x194>)
 80005da:	f007 fcf9 	bl	8007fd0 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)okay_message, sizeof(okay_message)/sizeof(char) - 1, 1000);
 80005de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e2:	2204      	movs	r2, #4
 80005e4:	493a      	ldr	r1, [pc, #232]	; (80006d0 <main+0x198>)
 80005e6:	4839      	ldr	r0, [pc, #228]	; (80006cc <main+0x194>)
 80005e8:	f007 fcf2 	bl	8007fd0 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		  if(!EXT_BTN_1_state){
 80005ec:	4b39      	ldr	r3, [pc, #228]	; (80006d4 <main+0x19c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	f083 0301 	eor.w	r3, r3, #1
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d012      	beq.n	8000622 <main+0xea>
			  HAL_UART_Transmit(&huart3, (uint8_t *)okay_message, sizeof(okay_message)/sizeof(char) - 1, 1000);
 80005fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000600:	2204      	movs	r2, #4
 8000602:	4933      	ldr	r1, [pc, #204]	; (80006d0 <main+0x198>)
 8000604:	4831      	ldr	r0, [pc, #196]	; (80006cc <main+0x194>)
 8000606:	f007 fce3 	bl	8007fd0 <HAL_UART_Transmit>
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800060a:	2101      	movs	r1, #1
 800060c:	4832      	ldr	r0, [pc, #200]	; (80006d8 <main+0x1a0>)
 800060e:	f005 feee 	bl	80063ee <HAL_GPIO_TogglePin>
			  testFilledCircles(10, WHITE);
 8000612:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000616:	200a      	movs	r0, #10
 8000618:	f004 fed0 	bl	80053bc <testFilledCircles>
			  EXT_BTN_1_state = true;
 800061c:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <main+0x19c>)
 800061e:	2201      	movs	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_2_state){
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <main+0x1a4>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	b2db      	uxtb	r3, r3
 8000628:	f083 0301 	eor.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d00f      	beq.n	8000652 <main+0x11a>
			  HAL_UART_Transmit(&huart3, (uint8_t *)okay_message, sizeof(okay_message)/sizeof(char) - 1, 1000);
 8000632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000636:	2204      	movs	r2, #4
 8000638:	4925      	ldr	r1, [pc, #148]	; (80006d0 <main+0x198>)
 800063a:	4824      	ldr	r0, [pc, #144]	; (80006cc <main+0x194>)
 800063c:	f007 fcc8 	bl	8007fd0 <HAL_UART_Transmit>
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000640:	2101      	movs	r1, #1
 8000642:	4825      	ldr	r0, [pc, #148]	; (80006d8 <main+0x1a0>)
 8000644:	f005 fed3 	bl	80063ee <HAL_GPIO_TogglePin>
			  testTriangles();
 8000648:	f004 fef1 	bl	800542e <testTriangles>
			  EXT_BTN_2_state = true;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <main+0x1a4>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_3_state){
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <main+0x1a8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	f083 0301 	eor.w	r3, r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b00      	cmp	r3, #0
 8000660:	d00f      	beq.n	8000682 <main+0x14a>
			  HAL_UART_Transmit(&huart3, (uint8_t *)okay_message, sizeof(okay_message)/sizeof(char) - 1, 1000);
 8000662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000666:	2204      	movs	r2, #4
 8000668:	4919      	ldr	r1, [pc, #100]	; (80006d0 <main+0x198>)
 800066a:	4818      	ldr	r0, [pc, #96]	; (80006cc <main+0x194>)
 800066c:	f007 fcb0 	bl	8007fd0 <HAL_UART_Transmit>
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000670:	2101      	movs	r1, #1
 8000672:	4819      	ldr	r0, [pc, #100]	; (80006d8 <main+0x1a0>)
 8000674:	f005 febb 	bl	80063ee <HAL_GPIO_TogglePin>
			  testRoundRects();
 8000678:	f004 ff3c 	bl	80054f4 <testRoundRects>
			  EXT_BTN_3_state = true;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <main+0x1a8>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_4_state){
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <main+0x1ac>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	b2db      	uxtb	r3, r3
 8000688:	f083 0301 	eor.w	r3, r3, #1
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	d0ac      	beq.n	80005ec <main+0xb4>
			  HAL_UART_Transmit(&huart3, (uint8_t *)okay_message, sizeof(okay_message)/sizeof(char) - 1, 1000);
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	2204      	movs	r2, #4
 8000698:	490d      	ldr	r1, [pc, #52]	; (80006d0 <main+0x198>)
 800069a:	480c      	ldr	r0, [pc, #48]	; (80006cc <main+0x194>)
 800069c:	f007 fc98 	bl	8007fd0 <HAL_UART_Transmit>
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80006a0:	2101      	movs	r1, #1
 80006a2:	480d      	ldr	r0, [pc, #52]	; (80006d8 <main+0x1a0>)
 80006a4:	f005 fea3 	bl	80063ee <HAL_GPIO_TogglePin>
			  fillScreen(BLACK);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f003 fe9f 	bl	80043ec <fillScreen>
			  EXT_BTN_4_state = true;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <main+0x1ac>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
		  if(!EXT_BTN_1_state){
 80006b4:	e79a      	b.n	80005ec <main+0xb4>
 80006b6:	bf00      	nop
 80006b8:	20000148 	.word	0x20000148
 80006bc:	20000058 	.word	0x20000058
 80006c0:	20000188 	.word	0x20000188
 80006c4:	20000054 	.word	0x20000054
 80006c8:	20000000 	.word	0x20000000
 80006cc:	200000c8 	.word	0x200000c8
 80006d0:	2000001c 	.word	0x2000001c
 80006d4:	20000021 	.word	0x20000021
 80006d8:	40020400 	.word	0x40020400
 80006dc:	20000022 	.word	0x20000022
 80006e0:	20000023 	.word	0x20000023
 80006e4:	20000024 	.word	0x20000024

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b0b8      	sub	sp, #224	; 0xe0
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006f2:	2234      	movs	r2, #52	; 0x34
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f008 fa76 	bl	8008be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2290      	movs	r2, #144	; 0x90
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f008 fa67 	bl	8008be8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800071a:	f005 fe9b 	bl	8006454 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b38      	ldr	r3, [pc, #224]	; (8000800 <SystemClock_Config+0x118>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	4a37      	ldr	r2, [pc, #220]	; (8000800 <SystemClock_Config+0x118>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	6413      	str	r3, [r2, #64]	; 0x40
 800072a:	4b35      	ldr	r3, [pc, #212]	; (8000800 <SystemClock_Config+0x118>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <SystemClock_Config+0x11c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800073e:	4a31      	ldr	r2, [pc, #196]	; (8000804 <SystemClock_Config+0x11c>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000744:	6013      	str	r3, [r2, #0]
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <SystemClock_Config+0x11c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000752:	2302      	movs	r3, #2
 8000754:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075e:	2310      	movs	r3, #16
 8000760:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076a:	2300      	movs	r3, #0
 800076c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000770:	2308      	movs	r3, #8
 8000772:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000776:	2390      	movs	r3, #144	; 0x90
 8000778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000782:	2304      	movs	r3, #4
 8000784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800078c:	4618      	mov	r0, r3
 800078e:	f005 fe71 	bl	8006474 <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000798:	f000 fbb2 	bl	8000f00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80007ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80007b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007c2:	2104      	movs	r1, #4
 80007c4:	4618      	mov	r0, r3
 80007c6:	f006 f903 	bl	80069d0 <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80007d0:	f000 fb96 	bl	8000f00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4;
 80007d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007da:	2300      	movs	r3, #0
 80007dc:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80007de:	2300      	movs	r3, #0
 80007e0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	4618      	mov	r0, r3
 80007e8:	f006 faea 	bl	8006dc0 <HAL_RCCEx_PeriphCLKConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80007f2:	f000 fb85 	bl	8000f00 <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	37e0      	adds	r7, #224	; 0xe0
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000828:	4a20      	ldr	r2, [pc, #128]	; (80008ac <MX_TIM1_Init+0xa4>)
 800082a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_TIM1_Init+0xa0>)
 800082e:	2247      	movs	r2, #71	; 0x47
 8000830:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_TIM1_Init+0xa0>)
 800083a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800083e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_TIM1_Init+0xa0>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000852:	4815      	ldr	r0, [pc, #84]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000854:	f006 feda 	bl	800760c <HAL_TIM_Base_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800085e:	f000 fb4f 	bl	8000f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000866:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4619      	mov	r1, r3
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000870:	f007 f898 	bl	80079a4 <HAL_TIM_ConfigClockSource>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800087a:	f000 fb41 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000890:	f007 faa4 	bl	8007ddc <HAL_TIMEx_MasterConfigSynchronization>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800089a:	f000 fb31 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000148 	.word	0x20000148
 80008ac:	40010000 	.word	0x40010000

080008b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ce:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <MX_TIM2_Init+0x98>)
 80008d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000-1;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_TIM2_Init+0x98>)
 80008d8:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80008dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_TIM2_Init+0x98>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20-1;
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_TIM2_Init+0x98>)
 80008e6:	2213      	movs	r2, #19
 80008e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_TIM2_Init+0x98>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_TIM2_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008f6:	4814      	ldr	r0, [pc, #80]	; (8000948 <MX_TIM2_Init+0x98>)
 80008f8:	f006 fe88 	bl	800760c <HAL_TIM_Base_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000902:	f000 fafd 	bl	8000f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_TIM2_Init+0x98>)
 8000914:	f007 f846 	bl	80079a4 <HAL_TIM_ConfigClockSource>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800091e:	f000 faef 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <MX_TIM2_Init+0x98>)
 8000930:	f007 fa54 	bl	8007ddc <HAL_TIMEx_MasterConfigSynchronization>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800093a:	f000 fae1 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	3720      	adds	r7, #32
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000208 	.word	0x20000208

0800094c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_TIM14_Init+0x40>)
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <MX_TIM14_Init+0x44>)
 8000954:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <MX_TIM14_Init+0x40>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_TIM14_Init+0x40>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <MX_TIM14_Init+0x40>)
 8000964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000968:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_TIM14_Init+0x40>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_TIM14_Init+0x40>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_TIM14_Init+0x40>)
 8000978:	f006 fe48 	bl	800760c <HAL_TIM_Base_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000982:	f000 fabd 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000248 	.word	0x20000248
 8000990:	40002000 	.word	0x40002000

08000994 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_UART4_Init+0x58>)
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <MX_UART4_Init+0x5c>)
 800099c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_UART4_Init+0x58>)
 80009a0:	f647 2212 	movw	r2, #31250	; 0x7a12
 80009a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_UART4_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_UART4_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_UART4_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_UART4_Init+0x58>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_UART4_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_UART4_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_UART4_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_UART4_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_UART4_Init+0x58>)
 80009d8:	f007 faac 	bl	8007f34 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80009e2:	f000 fa8d 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000188 	.word	0x20000188
 80009f0:	40004c00 	.word	0x40004c00

080009f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_USART3_UART_Init+0x58>)
 80009fa:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <MX_USART3_UART_Init+0x5c>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_USART3_UART_Init+0x58>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_USART3_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_USART3_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_USART3_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_USART3_UART_Init+0x58>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_USART3_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_USART3_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_USART3_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_USART3_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_USART3_UART_Init+0x58>)
 8000a38:	f007 fa7c 	bl	8007f34 <HAL_UART_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a42:	f000 fa5d 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000c8 	.word	0x200000c8
 8000a50:	40004800 	.word	0x40004800

08000a54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_DMA_Init+0x38>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <MX_DMA_Init+0x38>)
 8000a60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_DMA_Init+0x38>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	200d      	movs	r0, #13
 8000a78:	f004 ff31 	bl	80058de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a7c:	200d      	movs	r0, #13
 8000a7e:	f004 ff4a 	bl	8005916 <HAL_NVIC_EnableIRQ>

}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	; 0x38
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa6:	4bb3      	ldr	r3, [pc, #716]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4ab2      	ldr	r2, [pc, #712]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000aac:	f043 0310 	orr.w	r3, r3, #16
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4bb0      	ldr	r3, [pc, #704]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0310 	and.w	r3, r3, #16
 8000aba:	623b      	str	r3, [r7, #32]
 8000abc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	4bad      	ldr	r3, [pc, #692]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4aac      	ldr	r2, [pc, #688]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4baa      	ldr	r3, [pc, #680]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	61fb      	str	r3, [r7, #28]
 8000ad4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad6:	4ba7      	ldr	r3, [pc, #668]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4aa6      	ldr	r2, [pc, #664]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000adc:	f043 0320 	orr.w	r3, r3, #32
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4ba4      	ldr	r3, [pc, #656]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	4ba1      	ldr	r3, [pc, #644]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4aa0      	ldr	r2, [pc, #640]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b9e      	ldr	r3, [pc, #632]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b9b      	ldr	r3, [pc, #620]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a9a      	ldr	r2, [pc, #616]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b98      	ldr	r3, [pc, #608]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	4b95      	ldr	r3, [pc, #596]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a94      	ldr	r2, [pc, #592]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b92      	ldr	r3, [pc, #584]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b36:	4b8f      	ldr	r3, [pc, #572]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a8e      	ldr	r2, [pc, #568]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b8c      	ldr	r3, [pc, #560]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	4b89      	ldr	r3, [pc, #548]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a88      	ldr	r2, [pc, #544]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b86      	ldr	r3, [pc, #536]	; (8000d74 <MX_GPIO_Init+0x2e4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0308 	and.w	r3, r3, #8
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000b66:	2200      	movs	r2, #0
 8000b68:	f24c 0178 	movw	r1, #49272	; 0xc078
 8000b6c:	4882      	ldr	r0, [pc, #520]	; (8000d78 <MX_GPIO_Init+0x2e8>)
 8000b6e:	f005 fc25 	bl	80063bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000b78:	4880      	ldr	r0, [pc, #512]	; (8000d7c <MX_GPIO_Init+0x2ec>)
 8000b7a:	f005 fc1f 	bl	80063bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f644 0181 	movw	r1, #18561	; 0x4881
 8000b84:	487e      	ldr	r0, [pc, #504]	; (8000d80 <MX_GPIO_Init+0x2f0>)
 8000b86:	f005 fc19 	bl	80063bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2142      	movs	r1, #66	; 0x42
 8000b8e:	487d      	ldr	r0, [pc, #500]	; (8000d84 <MX_GPIO_Init+0x2f4>)
 8000b90:	f005 fc14 	bl	80063bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000b94:	f24c 0378 	movw	r3, #49272	; 0xc078
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	4872      	ldr	r0, [pc, #456]	; (8000d78 <MX_GPIO_Init+0x2e8>)
 8000bae:	f005 fa43 	bl	8006038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000bb2:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	486c      	ldr	r0, [pc, #432]	; (8000d7c <MX_GPIO_Init+0x2ec>)
 8000bcc:	f005 fa34 	bl	8006038 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bd0:	2332      	movs	r3, #50	; 0x32
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be0:	230b      	movs	r3, #11
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4867      	ldr	r0, [pc, #412]	; (8000d88 <MX_GPIO_Init+0x2f8>)
 8000bec:	f005 fa24 	bl	8006038 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bf0:	2386      	movs	r3, #134	; 0x86
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c00:	230b      	movs	r3, #11
 8000c02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4860      	ldr	r0, [pc, #384]	; (8000d8c <MX_GPIO_Init+0x2fc>)
 8000c0c:	f005 fa14 	bl	8006038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB11 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin;
 8000c10:	f644 0381 	movw	r3, #18561	; 0x4881
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4855      	ldr	r0, [pc, #340]	; (8000d80 <MX_GPIO_Init+0x2f0>)
 8000c2a:	f005 fa05 	bl	8006038 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_BTN_1_Pin EXT_BTN_4_Pin */
  GPIO_InitStruct.Pin = EXT_BTN_1_Pin|EXT_BTN_4_Pin;
 8000c2e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c34:	4b56      	ldr	r3, [pc, #344]	; (8000d90 <MX_GPIO_Init+0x300>)
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	484e      	ldr	r0, [pc, #312]	; (8000d7c <MX_GPIO_Init+0x2ec>)
 8000c44:	f005 f9f8 	bl	8006038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|USB_PowerSwitchOn_Pin;
 8000c48:	2342      	movs	r3, #66	; 0x42
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4849      	ldr	r0, [pc, #292]	; (8000d84 <MX_GPIO_Init+0x2f4>)
 8000c60:	f005 f9ea 	bl	8006038 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_BTN_2_Pin EXT_BTN_3_Pin */
  GPIO_InitStruct.Pin = EXT_BTN_2_Pin|EXT_BTN_3_Pin;
 8000c64:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c6a:	4b49      	ldr	r3, [pc, #292]	; (8000d90 <MX_GPIO_Init+0x300>)
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	483f      	ldr	r0, [pc, #252]	; (8000d78 <MX_GPIO_Init+0x2e8>)
 8000c7a:	f005 f9dd 	bl	8006038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	4839      	ldr	r0, [pc, #228]	; (8000d78 <MX_GPIO_Init+0x2e8>)
 8000c94:	f005 f9d0 	bl	8006038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000caa:	4619      	mov	r1, r3
 8000cac:	4834      	ldr	r0, [pc, #208]	; (8000d80 <MX_GPIO_Init+0x2f0>)
 8000cae:	f005 f9c3 	bl	8006038 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc4:	230b      	movs	r3, #11
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	482c      	ldr	r0, [pc, #176]	; (8000d80 <MX_GPIO_Init+0x2f0>)
 8000cd0:	f005 f9b2 	bl	8006038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4827      	ldr	r0, [pc, #156]	; (8000d84 <MX_GPIO_Init+0x2f4>)
 8000ce8:	f005 f9a6 	bl	8006038 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cec:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cfe:	230a      	movs	r3, #10
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d06:	4619      	mov	r1, r3
 8000d08:	4820      	ldr	r0, [pc, #128]	; (8000d8c <MX_GPIO_Init+0x2fc>)
 8000d0a:	f005 f995 	bl	8006038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	481a      	ldr	r0, [pc, #104]	; (8000d8c <MX_GPIO_Init+0x2fc>)
 8000d24:	f005 f988 	bl	8006038 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3a:	230b      	movs	r3, #11
 8000d3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d42:	4619      	mov	r1, r3
 8000d44:	480f      	ldr	r0, [pc, #60]	; (8000d84 <MX_GPIO_Init+0x2f4>)
 8000d46:	f005 f977 	bl	8006038 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2017      	movs	r0, #23
 8000d50:	f004 fdc5 	bl	80058de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d54:	2017      	movs	r0, #23
 8000d56:	f004 fdde 	bl	8005916 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2028      	movs	r0, #40	; 0x28
 8000d60:	f004 fdbd 	bl	80058de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d64:	2028      	movs	r0, #40	; 0x28
 8000d66:	f004 fdd6 	bl	8005916 <HAL_NVIC_EnableIRQ>

}
 8000d6a:	bf00      	nop
 8000d6c:	3738      	adds	r7, #56	; 0x38
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40021400 	.word	0x40021400
 8000d80:	40020400 	.word	0x40020400
 8000d84:	40021800 	.word	0x40021800
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	10210000 	.word	0x10210000

08000d94 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// Callback para GPIOs
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXT_BTN_1_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000da4:	d102      	bne.n	8000dac <HAL_GPIO_EXTI_Callback+0x18>
 8000da6:	480e      	ldr	r0, [pc, #56]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000da8:	f006 fcb2 	bl	8007710 <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_2_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000db2:	d102      	bne.n	8000dba <HAL_GPIO_EXTI_Callback+0x26>
 8000db4:	480a      	ldr	r0, [pc, #40]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000db6:	f006 fcab 	bl	8007710 <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_3_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000dc0:	d102      	bne.n	8000dc8 <HAL_GPIO_EXTI_Callback+0x34>
 8000dc2:	4807      	ldr	r0, [pc, #28]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000dc4:	f006 fca4 	bl	8007710 <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_4_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dce:	d102      	bne.n	8000dd6 <HAL_GPIO_EXTI_Callback+0x42>
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000dd2:	f006 fc9d 	bl	8007710 <HAL_TIM_Base_Start_IT>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000208 	.word	0x20000208

08000de4 <HAL_TIM_PeriodElapsedCallback>:
// Callback para Timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  if(htim == &htim2){
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a1f      	ldr	r2, [pc, #124]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d137      	bne.n	8000e64 <HAL_TIM_PeriodElapsedCallback+0x80>
	  // Ya pasaron 20ms y sigue en 0, es real esto.
	  if(!HAL_GPIO_ReadPin(EXT_BTN_1_GPIO_Port, EXT_BTN_1_Pin)){
 8000df4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df8:	481d      	ldr	r0, [pc, #116]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000dfa:	f005 fac7 	bl	800638c <HAL_GPIO_ReadPin>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d105      	bne.n	8000e10 <HAL_TIM_PeriodElapsedCallback+0x2c>
		  EXT_BTN_1_state = false;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 8000e0a:	4818      	ldr	r0, [pc, #96]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e0c:	f006 fc54 	bl	80076b8 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_2_GPIO_Port, EXT_BTN_2_Pin)){
 8000e10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e14:	4818      	ldr	r0, [pc, #96]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e16:	f005 fab9 	bl	800638c <HAL_GPIO_ReadPin>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d105      	bne.n	8000e2c <HAL_TIM_PeriodElapsedCallback+0x48>
		  EXT_BTN_2_state = false;
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 8000e26:	4811      	ldr	r0, [pc, #68]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e28:	f006 fc46 	bl	80076b8 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_3_GPIO_Port, EXT_BTN_3_Pin)){
 8000e2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e30:	4811      	ldr	r0, [pc, #68]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e32:	f005 faab 	bl	800638c <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d105      	bne.n	8000e48 <HAL_TIM_PeriodElapsedCallback+0x64>
		  EXT_BTN_3_state = false;
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 8000e42:	480a      	ldr	r0, [pc, #40]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e44:	f006 fc38 	bl	80076b8 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_4_GPIO_Port, EXT_BTN_4_Pin)){
 8000e48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e4c:	4808      	ldr	r0, [pc, #32]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e4e:	f005 fa9d 	bl	800638c <HAL_GPIO_ReadPin>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d105      	bne.n	8000e64 <HAL_TIM_PeriodElapsedCallback+0x80>
		  EXT_BTN_4_state = false;
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 8000e5e:	4803      	ldr	r0, [pc, #12]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e60:	f006 fc2a 	bl	80076b8 <HAL_TIM_Base_Stop>
	  }
  }
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000208 	.word	0x20000208
 8000e70:	40021400 	.word	0x40021400
 8000e74:	20000021 	.word	0x20000021
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	20000022 	.word	0x20000022
 8000e80:	20000023 	.word	0x20000023
 8000e84:	20000024 	.word	0x20000024

08000e88 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < RX_BUFFER_SIZE; i++){
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	e024      	b.n	8000ee0 <HAL_UART_RxCpltCallback+0x58>
		if(rx_buffer[i] >= C2 && rx_buffer[i] <= E5){
 8000e96:	4a17      	ldr	r2, [pc, #92]	; (8000ef4 <HAL_UART_RxCpltCallback+0x6c>)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b23      	cmp	r3, #35	; 0x23
 8000ea0:	d91b      	bls.n	8000eda <HAL_UART_RxCpltCallback+0x52>
 8000ea2:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <HAL_UART_RxCpltCallback+0x6c>)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b53      	cmp	r3, #83	; 0x53
 8000eac:	d815      	bhi.n	8000eda <HAL_UART_RxCpltCallback+0x52>
			note_buffer[current_note_in_buffer] = rx_buffer[i];
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_UART_RxCpltCallback+0x70>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <HAL_UART_RxCpltCallback+0x6c>)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4413      	add	r3, r2
 8000eba:	781a      	ldrb	r2, [r3, #0]
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <HAL_UART_RxCpltCallback+0x74>)
 8000ebe:	545a      	strb	r2, [r3, r1]
			current_note_in_buffer++;
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <HAL_UART_RxCpltCallback+0x70>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_UART_RxCpltCallback+0x70>)
 8000eca:	701a      	strb	r2, [r3, #0]
			if(current_note_in_buffer >= NOTE_BUFFER_SIZE){
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_UART_RxCpltCallback+0x70>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b05      	cmp	r3, #5
 8000ed2:	d902      	bls.n	8000eda <HAL_UART_RxCpltCallback+0x52>
				current_note_in_buffer = 0;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_UART_RxCpltCallback+0x70>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < RX_BUFFER_SIZE; i++){
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	3301      	adds	r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	ddd7      	ble.n	8000e96 <HAL_UART_RxCpltCallback+0xe>
			}
		}
	}
}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000058 	.word	0x20000058
 8000ef8:	20000062 	.word	0x20000062
 8000efc:	2000005c 	.word	0x2000005c

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_MspInit+0x44>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_MspInit+0x44>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_MspInit+0x44>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_MspInit+0x44>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_MspInit+0x44>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_MspInit+0x44>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a1f      	ldr	r2, [pc, #124]	; (8000fe4 <HAL_TIM_Base_MspInit+0x8c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d10c      	bne.n	8000f84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a1e      	ldr	r2, [pc, #120]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000f82:	e02a      	b.n	8000fda <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f8c:	d114      	bne.n	8000fb8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	201c      	movs	r0, #28
 8000fac:	f004 fc97 	bl	80058de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fb0:	201c      	movs	r0, #28
 8000fb2:	f004 fcb0 	bl	8005916 <HAL_NVIC_EnableIRQ>
}
 8000fb6:	e010      	b.n	8000fda <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM14)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <HAL_TIM_Base_MspInit+0x94>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d10b      	bne.n	8000fda <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40010000 	.word	0x40010000
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40002000 	.word	0x40002000

08000ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a55      	ldr	r2, [pc, #340]	; (8001164 <HAL_UART_MspInit+0x174>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d175      	bne.n	80010fe <HAL_UART_MspInit+0x10e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001012:	4b55      	ldr	r3, [pc, #340]	; (8001168 <HAL_UART_MspInit+0x178>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	4a54      	ldr	r2, [pc, #336]	; (8001168 <HAL_UART_MspInit+0x178>)
 8001018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800101c:	6413      	str	r3, [r2, #64]	; 0x40
 800101e:	4b52      	ldr	r3, [pc, #328]	; (8001168 <HAL_UART_MspInit+0x178>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001026:	61bb      	str	r3, [r7, #24]
 8001028:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	4b4f      	ldr	r3, [pc, #316]	; (8001168 <HAL_UART_MspInit+0x178>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a4e      	ldr	r2, [pc, #312]	; (8001168 <HAL_UART_MspInit+0x178>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b4c      	ldr	r3, [pc, #304]	; (8001168 <HAL_UART_MspInit+0x178>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4b49      	ldr	r3, [pc, #292]	; (8001168 <HAL_UART_MspInit+0x178>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a48      	ldr	r2, [pc, #288]	; (8001168 <HAL_UART_MspInit+0x178>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b46      	ldr	r3, [pc, #280]	; (8001168 <HAL_UART_MspInit+0x178>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800105a:	2301      	movs	r3, #1
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800106a:	2308      	movs	r3, #8
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	483d      	ldr	r0, [pc, #244]	; (800116c <HAL_UART_MspInit+0x17c>)
 8001076:	f004 ffdf 	bl	8006038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800107a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800107e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800108c:	2308      	movs	r3, #8
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	4836      	ldr	r0, [pc, #216]	; (8001170 <HAL_UART_MspInit+0x180>)
 8001098:	f004 ffce 	bl	8006038 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800109c:	4b35      	ldr	r3, [pc, #212]	; (8001174 <HAL_UART_MspInit+0x184>)
 800109e:	4a36      	ldr	r2, [pc, #216]	; (8001178 <HAL_UART_MspInit+0x188>)
 80010a0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80010a2:	4b34      	ldr	r3, [pc, #208]	; (8001174 <HAL_UART_MspInit+0x184>)
 80010a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010a8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010aa:	4b32      	ldr	r3, [pc, #200]	; (8001174 <HAL_UART_MspInit+0x184>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b0:	4b30      	ldr	r3, [pc, #192]	; (8001174 <HAL_UART_MspInit+0x184>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010b6:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <HAL_UART_MspInit+0x184>)
 80010b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010bc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_UART_MspInit+0x184>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <HAL_UART_MspInit+0x184>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <HAL_UART_MspInit+0x184>)
 80010cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80010d2:	4b28      	ldr	r3, [pc, #160]	; (8001174 <HAL_UART_MspInit+0x184>)
 80010d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010d8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <HAL_UART_MspInit+0x184>)
 80010dc:	2200      	movs	r2, #0
 80010de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80010e0:	4824      	ldr	r0, [pc, #144]	; (8001174 <HAL_UART_MspInit+0x184>)
 80010e2:	f004 fc33 	bl	800594c <HAL_DMA_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 80010ec:	f7ff ff08 	bl	8000f00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a20      	ldr	r2, [pc, #128]	; (8001174 <HAL_UART_MspInit+0x184>)
 80010f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80010f6:	4a1f      	ldr	r2, [pc, #124]	; (8001174 <HAL_UART_MspInit+0x184>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010fc:	e02d      	b.n	800115a <HAL_UART_MspInit+0x16a>
  else if(huart->Instance==USART3)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a1e      	ldr	r2, [pc, #120]	; (800117c <HAL_UART_MspInit+0x18c>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d128      	bne.n	800115a <HAL_UART_MspInit+0x16a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_UART_MspInit+0x178>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	4a16      	ldr	r2, [pc, #88]	; (8001168 <HAL_UART_MspInit+0x178>)
 800110e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001112:	6413      	str	r3, [r2, #64]	; 0x40
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_UART_MspInit+0x178>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_UART_MspInit+0x178>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	4a10      	ldr	r2, [pc, #64]	; (8001168 <HAL_UART_MspInit+0x178>)
 8001126:	f043 0308 	orr.w	r3, r3, #8
 800112a:	6313      	str	r3, [r2, #48]	; 0x30
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_UART_MspInit+0x178>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001138:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800114a:	2307      	movs	r3, #7
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	480a      	ldr	r0, [pc, #40]	; (8001180 <HAL_UART_MspInit+0x190>)
 8001156:	f004 ff6f 	bl	8006038 <HAL_GPIO_Init>
}
 800115a:	bf00      	nop
 800115c:	3730      	adds	r7, #48	; 0x30
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40004c00 	.word	0x40004c00
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000
 8001170:	40020800 	.word	0x40020800
 8001174:	20000068 	.word	0x20000068
 8001178:	40026040 	.word	0x40026040
 800117c:	40004800 	.word	0x40004800
 8001180:	40020c00 	.word	0x40020c00

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <MemManage_Handler+0x4>

0800119e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <UsageFault_Handler+0x4>

080011aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d8:	f004 fa64 	bl	80056a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <DMA1_Stream2_IRQHandler+0x10>)
 80011e6:	f004 fcbf 	bl	8005b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000068 	.word	0x20000068

080011f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80011f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011fc:	f005 f912 	bl	8006424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <TIM2_IRQHandler+0x10>)
 800120a:	f006 faab 	bl	8007764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000208 	.word	0x20000208

08001218 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800121c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001220:	f005 f900 	bl	8006424 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001224:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001228:	f005 f8fc 	bl	8006424 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800122c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001230:	f005 f8f8 	bl	8006424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <SystemInit+0x28>)
 800123e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001242:	4a07      	ldr	r2, [pc, #28]	; (8001260 <SystemInit+0x28>)
 8001244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SystemInit+0x28>)
 800124e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001252:	609a      	str	r2, [r3, #8]
#endif
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <delay+0x2c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8001274:	bf00      	nop
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <delay+0x2c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	429a      	cmp	r2, r3
 8001280:	d8f9      	bhi.n	8001276 <delay+0x12>
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000148 	.word	0x20000148

08001294 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	2200      	movs	r2, #0
 80012a4:	4619      	mov	r1, r3
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f005 f888 	bl	80063bc <HAL_GPIO_WritePin>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80012c0:	887b      	ldrh	r3, [r7, #2]
 80012c2:	2201      	movs	r2, #1
 80012c4:	4619      	mov	r1, r3
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f005 f878 	bl	80063bc <HAL_GPIO_WritePin>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4619      	mov	r1, r3
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f004 fea0 	bl	8006038 <HAL_GPIO_Init>
}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001318:	2302      	movs	r3, #2
 800131a:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4619      	mov	r1, r3
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f004 fe88 	bl	8006038 <HAL_GPIO_Init>
}
 8001328:	bf00      	nop
 800132a:	3720      	adds	r7, #32
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <width+0x14>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	2000002c 	.word	0x2000002c

08001348 <height>:

uint16_t height(void)
{ return _height; }
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <height+0x14>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2000002e 	.word	0x2000002e

08001360 <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 800136a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001372:	b21a      	sxth	r2, r3
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	b21b      	sxth	r3, r3
 800137a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800137e:	b21b      	sxth	r3, r3
 8001380:	4313      	orrs	r3, r2
 8001382:	b21a      	sxth	r2, r3
 8001384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	b21b      	sxth	r3, r3
 800138e:	4313      	orrs	r3, r2
 8001390:	b21b      	sxth	r3, r3
 8001392:	b29b      	uxth	r3, r3
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 80013aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013b2:	b21a      	sxth	r2, r3
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	115b      	asrs	r3, r3, #5
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	f003 0320 	and.w	r3, r3, #32
 80013be:	b21b      	sxth	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	105b      	asrs	r3, r3, #1
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	b29b      	uxth	r3, r3
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	121b      	asrs	r3, r3, #8
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f023 0307 	bic.w	r3, r3, #7
 80013f6:	b2db      	uxtb	r3, r3
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	10db      	asrs	r3, r3, #3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f023 0303 	bic.w	r3, r3, #3
 8001418:	b2db      	uxtb	r3, r3
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	b2db      	uxtb	r3, r3
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	460b      	mov	r3, r1
 8001450:	71bb      	strb	r3, [r7, #6]
 8001452:	4613      	mov	r3, r2
 8001454:	717b      	strb	r3, [r7, #5]
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	b21a      	sxth	r2, r3
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <color565+0x48>)
 800145e:	4013      	ands	r3, r2
 8001460:	b21a      	sxth	r2, r3
 8001462:	79bb      	ldrb	r3, [r7, #6]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	b21b      	sxth	r3, r3
 8001468:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800146c:	b21b      	sxth	r3, r3
 800146e:	4313      	orrs	r3, r2
 8001470:	b21a      	sxth	r2, r3
 8001472:	797b      	ldrb	r3, [r7, #5]
 8001474:	08db      	lsrs	r3, r3, #3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b21b      	sxth	r3, r3
 800147e:	b29b      	uxth	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	fffff800 	.word	0xfffff800

08001490 <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af02      	add	r7, sp, #8
 8001496:	4603      	mov	r3, r0
 8001498:	460a      	mov	r2, r1
 800149a:	80fb      	strh	r3, [r7, #6]
 800149c:	4613      	mov	r3, r2
 800149e:	80bb      	strh	r3, [r7, #4]
 80014a0:	f107 020e 	add.w	r2, r7, #14
 80014a4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014a8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80014ac:	2301      	movs	r3, #1
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2301      	movs	r3, #1
 80014b2:	f001 fbef 	bl	8002c94 <readGRAM>
 80014b6:	89fb      	ldrh	r3, [r7, #14]
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	460a      	mov	r2, r1
 80014ca:	80fb      	strh	r3, [r7, #6]
 80014cc:	4613      	mov	r3, r2
 80014ce:	80bb      	strh	r3, [r7, #4]
 80014d0:	88ba      	ldrh	r2, [r7, #4]
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f964 	bl	80017a4 <writecmddata>
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	80fb      	strh	r3, [r7, #6]
 80014f0:	4613      	mov	r3, r2
 80014f2:	717b      	strb	r3, [r7, #5]
 80014f4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 fa9d 	bl	8001a3c <WriteCmdParamN>
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <setReadDir>:


//extern GFXfont *gfxFont;

void setReadDir (void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8001510:	2102      	movs	r1, #2
 8001512:	4811      	ldr	r0, [pc, #68]	; (8001558 <setReadDir+0x4c>)
 8001514:	f7ff fede 	bl	80012d4 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8001518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151c:	480f      	ldr	r0, [pc, #60]	; (800155c <setReadDir+0x50>)
 800151e:	f7ff fed9 	bl	80012d4 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8001522:	2180      	movs	r1, #128	; 0x80
 8001524:	480d      	ldr	r0, [pc, #52]	; (800155c <setReadDir+0x50>)
 8001526:	f7ff fed5 	bl	80012d4 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 800152a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800152e:	480b      	ldr	r0, [pc, #44]	; (800155c <setReadDir+0x50>)
 8001530:	f7ff fed0 	bl	80012d4 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8001534:	2108      	movs	r1, #8
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <setReadDir+0x54>)
 8001538:	f7ff fecc 	bl	80012d4 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 800153c:	2140      	movs	r1, #64	; 0x40
 800153e:	4808      	ldr	r0, [pc, #32]	; (8001560 <setReadDir+0x54>)
 8001540:	f7ff fec8 	bl	80012d4 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8001544:	2120      	movs	r1, #32
 8001546:	4806      	ldr	r0, [pc, #24]	; (8001560 <setReadDir+0x54>)
 8001548:	f7ff fec4 	bl	80012d4 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 800154c:	2110      	movs	r1, #16
 800154e:	4804      	ldr	r0, [pc, #16]	; (8001560 <setReadDir+0x54>)
 8001550:	f7ff fec0 	bl	80012d4 <PIN_INPUT>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021800 	.word	0x40021800
 800155c:	40021400 	.word	0x40021400
 8001560:	40021000 	.word	0x40021000

08001564 <setWriteDir>:

void setWriteDir (void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8001568:	2102      	movs	r1, #2
 800156a:	4811      	ldr	r0, [pc, #68]	; (80015b0 <setWriteDir+0x4c>)
 800156c:	f7ff fec8 	bl	8001300 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8001570:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001574:	480f      	ldr	r0, [pc, #60]	; (80015b4 <setWriteDir+0x50>)
 8001576:	f7ff fec3 	bl	8001300 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	480d      	ldr	r0, [pc, #52]	; (80015b4 <setWriteDir+0x50>)
 800157e:	f7ff febf 	bl	8001300 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8001582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001586:	480b      	ldr	r0, [pc, #44]	; (80015b4 <setWriteDir+0x50>)
 8001588:	f7ff feba 	bl	8001300 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 800158c:	2108      	movs	r1, #8
 800158e:	480a      	ldr	r0, [pc, #40]	; (80015b8 <setWriteDir+0x54>)
 8001590:	f7ff feb6 	bl	8001300 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8001594:	2140      	movs	r1, #64	; 0x40
 8001596:	4808      	ldr	r0, [pc, #32]	; (80015b8 <setWriteDir+0x54>)
 8001598:	f7ff feb2 	bl	8001300 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 800159c:	2120      	movs	r1, #32
 800159e:	4806      	ldr	r0, [pc, #24]	; (80015b8 <setWriteDir+0x54>)
 80015a0:	f7ff feae 	bl	8001300 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 80015a4:	2110      	movs	r1, #16
 80015a6:	4804      	ldr	r0, [pc, #16]	; (80015b8 <setWriteDir+0x54>)
 80015a8:	f7ff feaa 	bl	8001300 <PIN_OUTPUT>
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021800 	.word	0x40021800
 80015b4:	40021400 	.word	0x40021400
 80015b8:	40021000 	.word	0x40021000

080015bc <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff0a 	bl	80013e2 <color565_to_r>
 80015ce:	4603      	mov	r3, r0
 80015d0:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff15 	bl	8001404 <color565_to_g>
 80015da:	4603      	mov	r3, r0
 80015dc:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff20 	bl	8001426 <color565_to_b>
 80015e6:	4603      	mov	r3, r0
 80015e8:	737b      	strb	r3, [r7, #13]
    write8(r);
 80015ea:	4b6b      	ldr	r3, [pc, #428]	; (8001798 <write24+0x1dc>)
 80015ec:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80015f0:	619a      	str	r2, [r3, #24]
 80015f2:	4b6a      	ldr	r3, [pc, #424]	; (800179c <write24+0x1e0>)
 80015f4:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80015f8:	619a      	str	r2, [r3, #24]
 80015fa:	4b69      	ldr	r3, [pc, #420]	; (80017a0 <write24+0x1e4>)
 80015fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001600:	619a      	str	r2, [r3, #24]
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4a66      	ldr	r2, [pc, #408]	; (80017a0 <write24+0x1e4>)
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	6193      	str	r3, [r2, #24]
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	015b      	lsls	r3, r3, #5
 800161a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161e:	431a      	orrs	r2, r3
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	015b      	lsls	r3, r3, #5
 8001624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001628:	431a      	orrs	r2, r3
 800162a:	4b5c      	ldr	r3, [pc, #368]	; (800179c <write24+0x1e0>)
 800162c:	619a      	str	r2, [r3, #24]
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	105b      	asrs	r3, r3, #1
 8001632:	f003 0208 	and.w	r2, r3, #8
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163e:	431a      	orrs	r2, r3
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	105b      	asrs	r3, r3, #1
 8001644:	f003 0320 	and.w	r3, r3, #32
 8001648:	431a      	orrs	r2, r3
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	10db      	asrs	r3, r3, #3
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	431a      	orrs	r2, r3
 8001654:	4b50      	ldr	r3, [pc, #320]	; (8001798 <write24+0x1dc>)
 8001656:	619a      	str	r2, [r3, #24]
 8001658:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800165c:	484e      	ldr	r0, [pc, #312]	; (8001798 <write24+0x1dc>)
 800165e:	f7ff fe19 	bl	8001294 <PIN_LOW>
 8001662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001666:	484c      	ldr	r0, [pc, #304]	; (8001798 <write24+0x1dc>)
 8001668:	f7ff fe24 	bl	80012b4 <PIN_HIGH>
 800166c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001670:	4849      	ldr	r0, [pc, #292]	; (8001798 <write24+0x1dc>)
 8001672:	f7ff fe1f 	bl	80012b4 <PIN_HIGH>
    write8(g);
 8001676:	4b48      	ldr	r3, [pc, #288]	; (8001798 <write24+0x1dc>)
 8001678:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800167c:	619a      	str	r2, [r3, #24]
 800167e:	4b47      	ldr	r3, [pc, #284]	; (800179c <write24+0x1e0>)
 8001680:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8001684:	619a      	str	r2, [r3, #24]
 8001686:	4b46      	ldr	r3, [pc, #280]	; (80017a0 <write24+0x1e4>)
 8001688:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800168c:	619a      	str	r2, [r3, #24]
 800168e:	7bbb      	ldrb	r3, [r7, #14]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4a43      	ldr	r2, [pc, #268]	; (80017a0 <write24+0x1e4>)
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	6193      	str	r3, [r2, #24]
 800169a:	7bbb      	ldrb	r3, [r7, #14]
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80016a2:	7bbb      	ldrb	r3, [r7, #14]
 80016a4:	015b      	lsls	r3, r3, #5
 80016a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016aa:	431a      	orrs	r2, r3
 80016ac:	7bbb      	ldrb	r3, [r7, #14]
 80016ae:	015b      	lsls	r3, r3, #5
 80016b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b4:	431a      	orrs	r2, r3
 80016b6:	4b39      	ldr	r3, [pc, #228]	; (800179c <write24+0x1e0>)
 80016b8:	619a      	str	r2, [r3, #24]
 80016ba:	7bbb      	ldrb	r3, [r7, #14]
 80016bc:	105b      	asrs	r3, r3, #1
 80016be:	f003 0208 	and.w	r2, r3, #8
 80016c2:	7bbb      	ldrb	r3, [r7, #14]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ca:	431a      	orrs	r2, r3
 80016cc:	7bbb      	ldrb	r3, [r7, #14]
 80016ce:	105b      	asrs	r3, r3, #1
 80016d0:	f003 0320 	and.w	r3, r3, #32
 80016d4:	431a      	orrs	r2, r3
 80016d6:	7bbb      	ldrb	r3, [r7, #14]
 80016d8:	10db      	asrs	r3, r3, #3
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	431a      	orrs	r2, r3
 80016e0:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <write24+0x1dc>)
 80016e2:	619a      	str	r2, [r3, #24]
 80016e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e8:	482b      	ldr	r0, [pc, #172]	; (8001798 <write24+0x1dc>)
 80016ea:	f7ff fdd3 	bl	8001294 <PIN_LOW>
 80016ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016f2:	4829      	ldr	r0, [pc, #164]	; (8001798 <write24+0x1dc>)
 80016f4:	f7ff fdde 	bl	80012b4 <PIN_HIGH>
 80016f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016fc:	4826      	ldr	r0, [pc, #152]	; (8001798 <write24+0x1dc>)
 80016fe:	f7ff fdd9 	bl	80012b4 <PIN_HIGH>
    write8(b);
 8001702:	4b25      	ldr	r3, [pc, #148]	; (8001798 <write24+0x1dc>)
 8001704:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001708:	619a      	str	r2, [r3, #24]
 800170a:	4b24      	ldr	r3, [pc, #144]	; (800179c <write24+0x1e0>)
 800170c:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8001710:	619a      	str	r2, [r3, #24]
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <write24+0x1e4>)
 8001714:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001718:	619a      	str	r2, [r3, #24]
 800171a:	7b7b      	ldrb	r3, [r7, #13]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4a20      	ldr	r2, [pc, #128]	; (80017a0 <write24+0x1e4>)
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	6193      	str	r3, [r2, #24]
 8001726:	7b7b      	ldrb	r3, [r7, #13]
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800172e:	7b7b      	ldrb	r3, [r7, #13]
 8001730:	015b      	lsls	r3, r3, #5
 8001732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001736:	431a      	orrs	r2, r3
 8001738:	7b7b      	ldrb	r3, [r7, #13]
 800173a:	015b      	lsls	r3, r3, #5
 800173c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001740:	431a      	orrs	r2, r3
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <write24+0x1e0>)
 8001744:	619a      	str	r2, [r3, #24]
 8001746:	7b7b      	ldrb	r3, [r7, #13]
 8001748:	105b      	asrs	r3, r3, #1
 800174a:	f003 0208 	and.w	r2, r3, #8
 800174e:	7b7b      	ldrb	r3, [r7, #13]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001756:	431a      	orrs	r2, r3
 8001758:	7b7b      	ldrb	r3, [r7, #13]
 800175a:	105b      	asrs	r3, r3, #1
 800175c:	f003 0320 	and.w	r3, r3, #32
 8001760:	431a      	orrs	r2, r3
 8001762:	7b7b      	ldrb	r3, [r7, #13]
 8001764:	10db      	asrs	r3, r3, #3
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	431a      	orrs	r2, r3
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <write24+0x1dc>)
 800176e:	619a      	str	r2, [r3, #24]
 8001770:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001774:	4808      	ldr	r0, [pc, #32]	; (8001798 <write24+0x1dc>)
 8001776:	f7ff fd8d 	bl	8001294 <PIN_LOW>
 800177a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800177e:	4806      	ldr	r0, [pc, #24]	; (8001798 <write24+0x1dc>)
 8001780:	f7ff fd98 	bl	80012b4 <PIN_HIGH>
 8001784:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001788:	4803      	ldr	r0, [pc, #12]	; (8001798 <write24+0x1dc>)
 800178a:	f7ff fd93 	bl	80012b4 <PIN_HIGH>
}
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	40021400 	.word	0x40021400
 80017a0:	40021800 	.word	0x40021800

080017a4 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	460a      	mov	r2, r1
 80017ae:	80fb      	strh	r3, [r7, #6]
 80017b0:	4613      	mov	r3, r2
 80017b2:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 80017b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017b8:	489c      	ldr	r0, [pc, #624]	; (8001a2c <writecmddata+0x288>)
 80017ba:	f7ff fd6b 	bl	8001294 <PIN_LOW>
    WriteCmd(cmd);
 80017be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c2:	489b      	ldr	r0, [pc, #620]	; (8001a30 <writecmddata+0x28c>)
 80017c4:	f7ff fd66 	bl	8001294 <PIN_LOW>
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	73bb      	strb	r3, [r7, #14]
 80017d4:	4b96      	ldr	r3, [pc, #600]	; (8001a30 <writecmddata+0x28c>)
 80017d6:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80017da:	619a      	str	r2, [r3, #24]
 80017dc:	4b95      	ldr	r3, [pc, #596]	; (8001a34 <writecmddata+0x290>)
 80017de:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80017e2:	619a      	str	r2, [r3, #24]
 80017e4:	4b94      	ldr	r3, [pc, #592]	; (8001a38 <writecmddata+0x294>)
 80017e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017ea:	619a      	str	r2, [r3, #24]
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4a91      	ldr	r2, [pc, #580]	; (8001a38 <writecmddata+0x294>)
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	015b      	lsls	r3, r3, #5
 8001804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001808:	431a      	orrs	r2, r3
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	015b      	lsls	r3, r3, #5
 800180e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001812:	431a      	orrs	r2, r3
 8001814:	4b87      	ldr	r3, [pc, #540]	; (8001a34 <writecmddata+0x290>)
 8001816:	619a      	str	r2, [r3, #24]
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	105b      	asrs	r3, r3, #1
 800181c:	f003 0208 	and.w	r2, r3, #8
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001828:	431a      	orrs	r2, r3
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	105b      	asrs	r3, r3, #1
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	431a      	orrs	r2, r3
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	10db      	asrs	r3, r3, #3
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	431a      	orrs	r2, r3
 800183e:	4b7c      	ldr	r3, [pc, #496]	; (8001a30 <writecmddata+0x28c>)
 8001840:	619a      	str	r2, [r3, #24]
 8001842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001846:	487a      	ldr	r0, [pc, #488]	; (8001a30 <writecmddata+0x28c>)
 8001848:	f7ff fd24 	bl	8001294 <PIN_LOW>
 800184c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001850:	4877      	ldr	r0, [pc, #476]	; (8001a30 <writecmddata+0x28c>)
 8001852:	f7ff fd2f 	bl	80012b4 <PIN_HIGH>
 8001856:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800185a:	4875      	ldr	r0, [pc, #468]	; (8001a30 <writecmddata+0x28c>)
 800185c:	f7ff fd2a 	bl	80012b4 <PIN_HIGH>
 8001860:	4b73      	ldr	r3, [pc, #460]	; (8001a30 <writecmddata+0x28c>)
 8001862:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001866:	619a      	str	r2, [r3, #24]
 8001868:	4b72      	ldr	r3, [pc, #456]	; (8001a34 <writecmddata+0x290>)
 800186a:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800186e:	619a      	str	r2, [r3, #24]
 8001870:	4b71      	ldr	r3, [pc, #452]	; (8001a38 <writecmddata+0x294>)
 8001872:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001876:	619a      	str	r2, [r3, #24]
 8001878:	7bbb      	ldrb	r3, [r7, #14]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4a6e      	ldr	r2, [pc, #440]	; (8001a38 <writecmddata+0x294>)
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	7bbb      	ldrb	r3, [r7, #14]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800188c:	7bbb      	ldrb	r3, [r7, #14]
 800188e:	015b      	lsls	r3, r3, #5
 8001890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001894:	431a      	orrs	r2, r3
 8001896:	7bbb      	ldrb	r3, [r7, #14]
 8001898:	015b      	lsls	r3, r3, #5
 800189a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189e:	431a      	orrs	r2, r3
 80018a0:	4b64      	ldr	r3, [pc, #400]	; (8001a34 <writecmddata+0x290>)
 80018a2:	619a      	str	r2, [r3, #24]
 80018a4:	7bbb      	ldrb	r3, [r7, #14]
 80018a6:	105b      	asrs	r3, r3, #1
 80018a8:	f003 0208 	and.w	r2, r3, #8
 80018ac:	7bbb      	ldrb	r3, [r7, #14]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b4:	431a      	orrs	r2, r3
 80018b6:	7bbb      	ldrb	r3, [r7, #14]
 80018b8:	105b      	asrs	r3, r3, #1
 80018ba:	f003 0320 	and.w	r3, r3, #32
 80018be:	431a      	orrs	r2, r3
 80018c0:	7bbb      	ldrb	r3, [r7, #14]
 80018c2:	10db      	asrs	r3, r3, #3
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	431a      	orrs	r2, r3
 80018ca:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <writecmddata+0x28c>)
 80018cc:	619a      	str	r2, [r3, #24]
 80018ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d2:	4857      	ldr	r0, [pc, #348]	; (8001a30 <writecmddata+0x28c>)
 80018d4:	f7ff fcde 	bl	8001294 <PIN_LOW>
 80018d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018dc:	4854      	ldr	r0, [pc, #336]	; (8001a30 <writecmddata+0x28c>)
 80018de:	f7ff fce9 	bl	80012b4 <PIN_HIGH>
 80018e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e6:	4852      	ldr	r0, [pc, #328]	; (8001a30 <writecmddata+0x28c>)
 80018e8:	f7ff fce4 	bl	80012b4 <PIN_HIGH>
 80018ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f0:	484f      	ldr	r0, [pc, #316]	; (8001a30 <writecmddata+0x28c>)
 80018f2:	f7ff fcdf 	bl	80012b4 <PIN_HIGH>
    WriteData(dat);
 80018f6:	88bb      	ldrh	r3, [r7, #4]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	737b      	strb	r3, [r7, #13]
 80018fe:	88bb      	ldrh	r3, [r7, #4]
 8001900:	733b      	strb	r3, [r7, #12]
 8001902:	4b4b      	ldr	r3, [pc, #300]	; (8001a30 <writecmddata+0x28c>)
 8001904:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001908:	619a      	str	r2, [r3, #24]
 800190a:	4b4a      	ldr	r3, [pc, #296]	; (8001a34 <writecmddata+0x290>)
 800190c:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8001910:	619a      	str	r2, [r3, #24]
 8001912:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <writecmddata+0x294>)
 8001914:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001918:	619a      	str	r2, [r3, #24]
 800191a:	7b7b      	ldrb	r3, [r7, #13]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4a46      	ldr	r2, [pc, #280]	; (8001a38 <writecmddata+0x294>)
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	6193      	str	r3, [r2, #24]
 8001926:	7b7b      	ldrb	r3, [r7, #13]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800192e:	7b7b      	ldrb	r3, [r7, #13]
 8001930:	015b      	lsls	r3, r3, #5
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	431a      	orrs	r2, r3
 8001938:	7b7b      	ldrb	r3, [r7, #13]
 800193a:	015b      	lsls	r3, r3, #5
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	431a      	orrs	r2, r3
 8001942:	4b3c      	ldr	r3, [pc, #240]	; (8001a34 <writecmddata+0x290>)
 8001944:	619a      	str	r2, [r3, #24]
 8001946:	7b7b      	ldrb	r3, [r7, #13]
 8001948:	105b      	asrs	r3, r3, #1
 800194a:	f003 0208 	and.w	r2, r3, #8
 800194e:	7b7b      	ldrb	r3, [r7, #13]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001956:	431a      	orrs	r2, r3
 8001958:	7b7b      	ldrb	r3, [r7, #13]
 800195a:	105b      	asrs	r3, r3, #1
 800195c:	f003 0320 	and.w	r3, r3, #32
 8001960:	431a      	orrs	r2, r3
 8001962:	7b7b      	ldrb	r3, [r7, #13]
 8001964:	10db      	asrs	r3, r3, #3
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	431a      	orrs	r2, r3
 800196c:	4b30      	ldr	r3, [pc, #192]	; (8001a30 <writecmddata+0x28c>)
 800196e:	619a      	str	r2, [r3, #24]
 8001970:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001974:	482e      	ldr	r0, [pc, #184]	; (8001a30 <writecmddata+0x28c>)
 8001976:	f7ff fc8d 	bl	8001294 <PIN_LOW>
 800197a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800197e:	482c      	ldr	r0, [pc, #176]	; (8001a30 <writecmddata+0x28c>)
 8001980:	f7ff fc98 	bl	80012b4 <PIN_HIGH>
 8001984:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001988:	4829      	ldr	r0, [pc, #164]	; (8001a30 <writecmddata+0x28c>)
 800198a:	f7ff fc93 	bl	80012b4 <PIN_HIGH>
 800198e:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <writecmddata+0x28c>)
 8001990:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001994:	619a      	str	r2, [r3, #24]
 8001996:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <writecmddata+0x290>)
 8001998:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800199c:	619a      	str	r2, [r3, #24]
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <writecmddata+0x294>)
 80019a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019a4:	619a      	str	r2, [r3, #24]
 80019a6:	7b3b      	ldrb	r3, [r7, #12]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4a23      	ldr	r2, [pc, #140]	; (8001a38 <writecmddata+0x294>)
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	6193      	str	r3, [r2, #24]
 80019b2:	7b3b      	ldrb	r3, [r7, #12]
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80019ba:	7b3b      	ldrb	r3, [r7, #12]
 80019bc:	015b      	lsls	r3, r3, #5
 80019be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c2:	431a      	orrs	r2, r3
 80019c4:	7b3b      	ldrb	r3, [r7, #12]
 80019c6:	015b      	lsls	r3, r3, #5
 80019c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019cc:	431a      	orrs	r2, r3
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <writecmddata+0x290>)
 80019d0:	619a      	str	r2, [r3, #24]
 80019d2:	7b3b      	ldrb	r3, [r7, #12]
 80019d4:	105b      	asrs	r3, r3, #1
 80019d6:	f003 0208 	and.w	r2, r3, #8
 80019da:	7b3b      	ldrb	r3, [r7, #12]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e2:	431a      	orrs	r2, r3
 80019e4:	7b3b      	ldrb	r3, [r7, #12]
 80019e6:	105b      	asrs	r3, r3, #1
 80019e8:	f003 0320 	and.w	r3, r3, #32
 80019ec:	431a      	orrs	r2, r3
 80019ee:	7b3b      	ldrb	r3, [r7, #12]
 80019f0:	10db      	asrs	r3, r3, #3
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	431a      	orrs	r2, r3
 80019f8:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <writecmddata+0x28c>)
 80019fa:	619a      	str	r2, [r3, #24]
 80019fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a00:	480b      	ldr	r0, [pc, #44]	; (8001a30 <writecmddata+0x28c>)
 8001a02:	f7ff fc47 	bl	8001294 <PIN_LOW>
 8001a06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a0a:	4809      	ldr	r0, [pc, #36]	; (8001a30 <writecmddata+0x28c>)
 8001a0c:	f7ff fc52 	bl	80012b4 <PIN_HIGH>
 8001a10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a14:	4806      	ldr	r0, [pc, #24]	; (8001a30 <writecmddata+0x28c>)
 8001a16:	f7ff fc4d 	bl	80012b4 <PIN_HIGH>
    CS_IDLE;
 8001a1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a1e:	4803      	ldr	r0, [pc, #12]	; (8001a2c <writecmddata+0x288>)
 8001a20:	f7ff fc48 	bl	80012b4 <PIN_HIGH>
}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40021400 	.word	0x40021400
 8001a38:	40021800 	.word	0x40021800

08001a3c <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	603a      	str	r2, [r7, #0]
 8001a46:	80fb      	strh	r3, [r7, #6]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8001a4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a50:	484f      	ldr	r0, [pc, #316]	; (8001b90 <WriteCmdParamN+0x154>)
 8001a52:	f7ff fc1f 	bl	8001294 <PIN_LOW>
    WriteCmd(cmd);
 8001a56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a5a:	484e      	ldr	r0, [pc, #312]	; (8001b94 <WriteCmdParamN+0x158>)
 8001a5c:	f7ff fc1a 	bl	8001294 <PIN_LOW>
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	73fb      	strb	r3, [r7, #15]
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	73bb      	strb	r3, [r7, #14]
 8001a6c:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <WriteCmdParamN+0x158>)
 8001a6e:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001a72:	619a      	str	r2, [r3, #24]
 8001a74:	4b48      	ldr	r3, [pc, #288]	; (8001b98 <WriteCmdParamN+0x15c>)
 8001a76:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8001a7a:	619a      	str	r2, [r3, #24]
 8001a7c:	4b47      	ldr	r3, [pc, #284]	; (8001b9c <WriteCmdParamN+0x160>)
 8001a7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a82:	619a      	str	r2, [r3, #24]
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4a44      	ldr	r2, [pc, #272]	; (8001b9c <WriteCmdParamN+0x160>)
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	015b      	lsls	r3, r3, #5
 8001a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	015b      	lsls	r3, r3, #5
 8001aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <WriteCmdParamN+0x15c>)
 8001aae:	619a      	str	r2, [r3, #24]
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	105b      	asrs	r3, r3, #1
 8001ab4:	f003 0208 	and.w	r2, r3, #8
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	105b      	asrs	r3, r3, #1
 8001ac6:	f003 0320 	and.w	r3, r3, #32
 8001aca:	431a      	orrs	r2, r3
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	10db      	asrs	r3, r3, #3
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <WriteCmdParamN+0x158>)
 8001ad8:	619a      	str	r2, [r3, #24]
 8001ada:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ade:	482d      	ldr	r0, [pc, #180]	; (8001b94 <WriteCmdParamN+0x158>)
 8001ae0:	f7ff fbd8 	bl	8001294 <PIN_LOW>
 8001ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ae8:	482a      	ldr	r0, [pc, #168]	; (8001b94 <WriteCmdParamN+0x158>)
 8001aea:	f7ff fbe3 	bl	80012b4 <PIN_HIGH>
 8001aee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001af2:	4828      	ldr	r0, [pc, #160]	; (8001b94 <WriteCmdParamN+0x158>)
 8001af4:	f7ff fbde 	bl	80012b4 <PIN_HIGH>
 8001af8:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <WriteCmdParamN+0x158>)
 8001afa:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001afe:	619a      	str	r2, [r3, #24]
 8001b00:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <WriteCmdParamN+0x15c>)
 8001b02:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8001b06:	619a      	str	r2, [r3, #24]
 8001b08:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <WriteCmdParamN+0x160>)
 8001b0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b0e:	619a      	str	r2, [r3, #24]
 8001b10:	7bbb      	ldrb	r3, [r7, #14]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4a21      	ldr	r2, [pc, #132]	; (8001b9c <WriteCmdParamN+0x160>)
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	7bbb      	ldrb	r3, [r7, #14]
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001b24:	7bbb      	ldrb	r3, [r7, #14]
 8001b26:	015b      	lsls	r3, r3, #5
 8001b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	7bbb      	ldrb	r3, [r7, #14]
 8001b30:	015b      	lsls	r3, r3, #5
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	431a      	orrs	r2, r3
 8001b38:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <WriteCmdParamN+0x15c>)
 8001b3a:	619a      	str	r2, [r3, #24]
 8001b3c:	7bbb      	ldrb	r3, [r7, #14]
 8001b3e:	105b      	asrs	r3, r3, #1
 8001b40:	f003 0208 	and.w	r2, r3, #8
 8001b44:	7bbb      	ldrb	r3, [r7, #14]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	7bbb      	ldrb	r3, [r7, #14]
 8001b50:	105b      	asrs	r3, r3, #1
 8001b52:	f003 0320 	and.w	r3, r3, #32
 8001b56:	431a      	orrs	r2, r3
 8001b58:	7bbb      	ldrb	r3, [r7, #14]
 8001b5a:	10db      	asrs	r3, r3, #3
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	431a      	orrs	r2, r3
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <WriteCmdParamN+0x158>)
 8001b64:	619a      	str	r2, [r3, #24]
 8001b66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b6a:	480a      	ldr	r0, [pc, #40]	; (8001b94 <WriteCmdParamN+0x158>)
 8001b6c:	f7ff fb92 	bl	8001294 <PIN_LOW>
 8001b70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b74:	4807      	ldr	r0, [pc, #28]	; (8001b94 <WriteCmdParamN+0x158>)
 8001b76:	f7ff fb9d 	bl	80012b4 <PIN_HIGH>
 8001b7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <WriteCmdParamN+0x158>)
 8001b80:	f7ff fb98 	bl	80012b4 <PIN_HIGH>
 8001b84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <WriteCmdParamN+0x158>)
 8001b8a:	f7ff fb93 	bl	80012b4 <PIN_HIGH>
    while (N-- > 0) {
 8001b8e:	e0fb      	b.n	8001d88 <WriteCmdParamN+0x34c>
 8001b90:	40020400 	.word	0x40020400
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40021400 	.word	0x40021400
 8001b9c:	40021800 	.word	0x40021800
        uint8_t u8 = *block++;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	603a      	str	r2, [r7, #0]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	737b      	strb	r3, [r7, #13]
        write8(u8);
 8001baa:	4b80      	ldr	r3, [pc, #512]	; (8001dac <WriteCmdParamN+0x370>)
 8001bac:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001bb0:	619a      	str	r2, [r3, #24]
 8001bb2:	4b7f      	ldr	r3, [pc, #508]	; (8001db0 <WriteCmdParamN+0x374>)
 8001bb4:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8001bb8:	619a      	str	r2, [r3, #24]
 8001bba:	4b7e      	ldr	r3, [pc, #504]	; (8001db4 <WriteCmdParamN+0x378>)
 8001bbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bc0:	619a      	str	r2, [r3, #24]
 8001bc2:	7b7b      	ldrb	r3, [r7, #13]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4a7b      	ldr	r2, [pc, #492]	; (8001db4 <WriteCmdParamN+0x378>)
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	6193      	str	r3, [r2, #24]
 8001bce:	7b7b      	ldrb	r3, [r7, #13]
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001bd6:	7b7b      	ldrb	r3, [r7, #13]
 8001bd8:	015b      	lsls	r3, r3, #5
 8001bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bde:	431a      	orrs	r2, r3
 8001be0:	7b7b      	ldrb	r3, [r7, #13]
 8001be2:	015b      	lsls	r3, r3, #5
 8001be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be8:	431a      	orrs	r2, r3
 8001bea:	4b71      	ldr	r3, [pc, #452]	; (8001db0 <WriteCmdParamN+0x374>)
 8001bec:	619a      	str	r2, [r3, #24]
 8001bee:	7b7b      	ldrb	r3, [r7, #13]
 8001bf0:	105b      	asrs	r3, r3, #1
 8001bf2:	f003 0208 	and.w	r2, r3, #8
 8001bf6:	7b7b      	ldrb	r3, [r7, #13]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	7b7b      	ldrb	r3, [r7, #13]
 8001c02:	105b      	asrs	r3, r3, #1
 8001c04:	f003 0320 	and.w	r3, r3, #32
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	7b7b      	ldrb	r3, [r7, #13]
 8001c0c:	10db      	asrs	r3, r3, #3
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	431a      	orrs	r2, r3
 8001c14:	4b65      	ldr	r3, [pc, #404]	; (8001dac <WriteCmdParamN+0x370>)
 8001c16:	619a      	str	r2, [r3, #24]
 8001c18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c1c:	4863      	ldr	r0, [pc, #396]	; (8001dac <WriteCmdParamN+0x370>)
 8001c1e:	f7ff fb39 	bl	8001294 <PIN_LOW>
 8001c22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c26:	4861      	ldr	r0, [pc, #388]	; (8001dac <WriteCmdParamN+0x370>)
 8001c28:	f7ff fb44 	bl	80012b4 <PIN_HIGH>
 8001c2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c30:	485e      	ldr	r0, [pc, #376]	; (8001dac <WriteCmdParamN+0x370>)
 8001c32:	f7ff fb3f 	bl	80012b4 <PIN_HIGH>
        if (N && is8347) {
 8001c36:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80a4 	beq.w	8001d88 <WriteCmdParamN+0x34c>
 8001c40:	4b5d      	ldr	r3, [pc, #372]	; (8001db8 <WriteCmdParamN+0x37c>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 809f 	beq.w	8001d88 <WriteCmdParamN+0x34c>
            cmd++;
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8001c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c54:	4855      	ldr	r0, [pc, #340]	; (8001dac <WriteCmdParamN+0x370>)
 8001c56:	f7ff fb1d 	bl	8001294 <PIN_LOW>
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	733b      	strb	r3, [r7, #12]
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	72fb      	strb	r3, [r7, #11]
 8001c66:	4b51      	ldr	r3, [pc, #324]	; (8001dac <WriteCmdParamN+0x370>)
 8001c68:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001c6c:	619a      	str	r2, [r3, #24]
 8001c6e:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <WriteCmdParamN+0x374>)
 8001c70:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8001c74:	619a      	str	r2, [r3, #24]
 8001c76:	4b4f      	ldr	r3, [pc, #316]	; (8001db4 <WriteCmdParamN+0x378>)
 8001c78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c7c:	619a      	str	r2, [r3, #24]
 8001c7e:	7b3b      	ldrb	r3, [r7, #12]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4a4c      	ldr	r2, [pc, #304]	; (8001db4 <WriteCmdParamN+0x378>)
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	6193      	str	r3, [r2, #24]
 8001c8a:	7b3b      	ldrb	r3, [r7, #12]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001c92:	7b3b      	ldrb	r3, [r7, #12]
 8001c94:	015b      	lsls	r3, r3, #5
 8001c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	7b3b      	ldrb	r3, [r7, #12]
 8001c9e:	015b      	lsls	r3, r3, #5
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	4b42      	ldr	r3, [pc, #264]	; (8001db0 <WriteCmdParamN+0x374>)
 8001ca8:	619a      	str	r2, [r3, #24]
 8001caa:	7b3b      	ldrb	r3, [r7, #12]
 8001cac:	105b      	asrs	r3, r3, #1
 8001cae:	f003 0208 	and.w	r2, r3, #8
 8001cb2:	7b3b      	ldrb	r3, [r7, #12]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	7b3b      	ldrb	r3, [r7, #12]
 8001cbe:	105b      	asrs	r3, r3, #1
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	7b3b      	ldrb	r3, [r7, #12]
 8001cc8:	10db      	asrs	r3, r3, #3
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	4b36      	ldr	r3, [pc, #216]	; (8001dac <WriteCmdParamN+0x370>)
 8001cd2:	619a      	str	r2, [r3, #24]
 8001cd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cd8:	4834      	ldr	r0, [pc, #208]	; (8001dac <WriteCmdParamN+0x370>)
 8001cda:	f7ff fadb 	bl	8001294 <PIN_LOW>
 8001cde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ce2:	4832      	ldr	r0, [pc, #200]	; (8001dac <WriteCmdParamN+0x370>)
 8001ce4:	f7ff fae6 	bl	80012b4 <PIN_HIGH>
 8001ce8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cec:	482f      	ldr	r0, [pc, #188]	; (8001dac <WriteCmdParamN+0x370>)
 8001cee:	f7ff fae1 	bl	80012b4 <PIN_HIGH>
 8001cf2:	4b2e      	ldr	r3, [pc, #184]	; (8001dac <WriteCmdParamN+0x370>)
 8001cf4:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001cf8:	619a      	str	r2, [r3, #24]
 8001cfa:	4b2d      	ldr	r3, [pc, #180]	; (8001db0 <WriteCmdParamN+0x374>)
 8001cfc:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8001d00:	619a      	str	r2, [r3, #24]
 8001d02:	4b2c      	ldr	r3, [pc, #176]	; (8001db4 <WriteCmdParamN+0x378>)
 8001d04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d08:	619a      	str	r2, [r3, #24]
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4a29      	ldr	r2, [pc, #164]	; (8001db4 <WriteCmdParamN+0x378>)
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	6193      	str	r3, [r2, #24]
 8001d16:	7afb      	ldrb	r3, [r7, #11]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001d1e:	7afb      	ldrb	r3, [r7, #11]
 8001d20:	015b      	lsls	r3, r3, #5
 8001d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d26:	431a      	orrs	r2, r3
 8001d28:	7afb      	ldrb	r3, [r7, #11]
 8001d2a:	015b      	lsls	r3, r3, #5
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	431a      	orrs	r2, r3
 8001d32:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <WriteCmdParamN+0x374>)
 8001d34:	619a      	str	r2, [r3, #24]
 8001d36:	7afb      	ldrb	r3, [r7, #11]
 8001d38:	105b      	asrs	r3, r3, #1
 8001d3a:	f003 0208 	and.w	r2, r3, #8
 8001d3e:	7afb      	ldrb	r3, [r7, #11]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d46:	431a      	orrs	r2, r3
 8001d48:	7afb      	ldrb	r3, [r7, #11]
 8001d4a:	105b      	asrs	r3, r3, #1
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	431a      	orrs	r2, r3
 8001d52:	7afb      	ldrb	r3, [r7, #11]
 8001d54:	10db      	asrs	r3, r3, #3
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <WriteCmdParamN+0x370>)
 8001d5e:	619a      	str	r2, [r3, #24]
 8001d60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d64:	4811      	ldr	r0, [pc, #68]	; (8001dac <WriteCmdParamN+0x370>)
 8001d66:	f7ff fa95 	bl	8001294 <PIN_LOW>
 8001d6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d6e:	480f      	ldr	r0, [pc, #60]	; (8001dac <WriteCmdParamN+0x370>)
 8001d70:	f7ff faa0 	bl	80012b4 <PIN_HIGH>
 8001d74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d78:	480c      	ldr	r0, [pc, #48]	; (8001dac <WriteCmdParamN+0x370>)
 8001d7a:	f7ff fa9b 	bl	80012b4 <PIN_HIGH>
 8001d7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d82:	480a      	ldr	r0, [pc, #40]	; (8001dac <WriteCmdParamN+0x370>)
 8001d84:	f7ff fa96 	bl	80012b4 <PIN_HIGH>
    while (N-- > 0) {
 8001d88:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	3a01      	subs	r2, #1
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	717a      	strb	r2, [r7, #5]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f73f af03 	bgt.w	8001ba0 <WriteCmdParamN+0x164>
        }
    }
    CS_IDLE;
 8001d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d9e:	4807      	ldr	r0, [pc, #28]	; (8001dbc <WriteCmdParamN+0x380>)
 8001da0:	f7ff fa88 	bl	80012b4 <PIN_HIGH>
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40021400 	.word	0x40021400
 8001db4:	40021800 	.word	0x40021800
 8001db8:	20000064 	.word	0x20000064
 8001dbc:	40020400 	.word	0x40020400

08001dc0 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	4608      	mov	r0, r1
 8001dca:	4611      	mov	r1, r2
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4623      	mov	r3, r4
 8001dd0:	71fb      	strb	r3, [r7, #7]
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71bb      	strb	r3, [r7, #6]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	717b      	strb	r3, [r7, #5]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8001dde:	79bb      	ldrb	r3, [r7, #6]
 8001de0:	733b      	strb	r3, [r7, #12]
 8001de2:	797b      	ldrb	r3, [r7, #5]
 8001de4:	737b      	strb	r3, [r7, #13]
 8001de6:	793b      	ldrb	r3, [r7, #4]
 8001de8:	73bb      	strb	r3, [r7, #14]
 8001dea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dee:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	f107 020c 	add.w	r2, r7, #12
 8001df8:	2104      	movs	r1, #4
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fe1e 	bl	8001a3c <WriteCmdParamN>
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd90      	pop	{r4, r7, pc}

08001e08 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 8001e18:	e046      	b.n	8001ea8 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	627a      	str	r2, [r7, #36]	; 0x24
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	627a      	str	r2, [r7, #36]	; 0x24
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 8001e32:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001e36:	2b7f      	cmp	r3, #127	; 0x7f
 8001e38:	d108      	bne.n	8001e4c <init_table+0x44>
        {
            delay(len);
 8001e3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fa10 	bl	8001264 <delay>
            len = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001e4a:	e024      	b.n	8001e96 <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001e52:	e010      	b.n	8001e76 <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	627a      	str	r2, [r7, #36]	; 0x24
 8001e5a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001e5e:	7819      	ldrb	r1, [r3, #0]
 8001e60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e64:	4413      	add	r3, r2
 8001e66:	460a      	mov	r2, r1
 8001e68:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 8001e6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e70:	3301      	adds	r3, #1
 8001e72:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001e76:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001e7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d3e8      	bcc.n	8001e54 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 8001e82:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8001e8c:	f107 0208 	add.w	r2, r7, #8
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fdd3 	bl	8001a3c <WriteCmdParamN>
        }
        size -= len + 2;
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b02      	subs	r3, #2
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 8001ea8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	dcb4      	bgt.n	8001e1a <init_table+0x12>
    }
}
 8001eb0:	bf00      	nop
 8001eb2:	3728      	adds	r7, #40	; 0x28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 8001ec8:	e01d      	b.n	8001f06 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1c9a      	adds	r2, r3, #2
 8001ece:	60fa      	str	r2, [r7, #12]
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1c9a      	adds	r2, r3, #2
 8001ed8:	60fa      	str	r2, [r7, #12]
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8001ede:	897b      	ldrh	r3, [r7, #10]
 8001ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d104      	bne.n	8001ef2 <init_table16+0x3a>
            delay(d);
 8001ee8:	893b      	ldrh	r3, [r7, #8]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f9ba 	bl	8001264 <delay>
 8001ef0:	e005      	b.n	8001efe <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 8001ef2:	893a      	ldrh	r2, [r7, #8]
 8001ef4:	897b      	ldrh	r3, [r7, #10]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff fc53 	bl	80017a4 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8001efe:	887b      	ldrh	r3, [r7, #2]
 8001f00:	3b04      	subs	r3, #4
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 8001f06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	dcdd      	bgt.n	8001eca <init_table16+0x12>
    }
}
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <reset>:



void reset(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
    done_reset = 1;
 8001f1c:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <reset+0x9c>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8001f22:	f7ff fb1f 	bl	8001564 <setWriteDir>
    CTL_INIT();
 8001f26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f2a:	4823      	ldr	r0, [pc, #140]	; (8001fb8 <reset+0xa0>)
 8001f2c:	f7ff f9e8 	bl	8001300 <PIN_OUTPUT>
 8001f30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f34:	4820      	ldr	r0, [pc, #128]	; (8001fb8 <reset+0xa0>)
 8001f36:	f7ff f9e3 	bl	8001300 <PIN_OUTPUT>
 8001f3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f3e:	481e      	ldr	r0, [pc, #120]	; (8001fb8 <reset+0xa0>)
 8001f40:	f7ff f9de 	bl	8001300 <PIN_OUTPUT>
 8001f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f48:	481c      	ldr	r0, [pc, #112]	; (8001fbc <reset+0xa4>)
 8001f4a:	f7ff f9d9 	bl	8001300 <PIN_OUTPUT>
 8001f4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f52:	481a      	ldr	r0, [pc, #104]	; (8001fbc <reset+0xa4>)
 8001f54:	f7ff f9d4 	bl	8001300 <PIN_OUTPUT>
    CS_IDLE;
 8001f58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f5c:	4817      	ldr	r0, [pc, #92]	; (8001fbc <reset+0xa4>)
 8001f5e:	f7ff f9a9 	bl	80012b4 <PIN_HIGH>
    RD_IDLE;
 8001f62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f66:	4814      	ldr	r0, [pc, #80]	; (8001fb8 <reset+0xa0>)
 8001f68:	f7ff f9a4 	bl	80012b4 <PIN_HIGH>
    WR_IDLE;
 8001f6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f70:	4811      	ldr	r0, [pc, #68]	; (8001fb8 <reset+0xa0>)
 8001f72:	f7ff f99f 	bl	80012b4 <PIN_HIGH>
    RESET_IDLE;
 8001f76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f7a:	4810      	ldr	r0, [pc, #64]	; (8001fbc <reset+0xa4>)
 8001f7c:	f7ff f99a 	bl	80012b4 <PIN_HIGH>
    delay(50);
 8001f80:	2032      	movs	r0, #50	; 0x32
 8001f82:	f7ff f96f 	bl	8001264 <delay>
    RESET_ACTIVE;
 8001f86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f8a:	480c      	ldr	r0, [pc, #48]	; (8001fbc <reset+0xa4>)
 8001f8c:	f7ff f982 	bl	8001294 <PIN_LOW>
    delay(100);
 8001f90:	2064      	movs	r0, #100	; 0x64
 8001f92:	f7ff f967 	bl	8001264 <delay>
    RESET_IDLE;
 8001f96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f9a:	4808      	ldr	r0, [pc, #32]	; (8001fbc <reset+0xa4>)
 8001f9c:	f7ff f98a 	bl	80012b4 <PIN_HIGH>
    delay(100);
 8001fa0:	2064      	movs	r0, #100	; 0x64
 8001fa2:	f7ff f95f 	bl	8001264 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	20b0      	movs	r0, #176	; 0xb0
 8001faa:	f7ff fa89 	bl	80014c0 <WriteCmdData>
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000063 	.word	0x20000063
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40020400 	.word	0x40020400

08001fc0 <read16bits>:

static uint16_t read16bits(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8001fc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fca:	4871      	ldr	r0, [pc, #452]	; (8002190 <read16bits+0x1d0>)
 8001fcc:	f7ff f972 	bl	80012b4 <PIN_HIGH>
 8001fd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd4:	486e      	ldr	r0, [pc, #440]	; (8002190 <read16bits+0x1d0>)
 8001fd6:	f7ff f95d 	bl	8001294 <PIN_LOW>
 8001fda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fde:	486c      	ldr	r0, [pc, #432]	; (8002190 <read16bits+0x1d0>)
 8001fe0:	f7ff f958 	bl	8001294 <PIN_LOW>
 8001fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe8:	4869      	ldr	r0, [pc, #420]	; (8002190 <read16bits+0x1d0>)
 8001fea:	f7ff f953 	bl	8001294 <PIN_LOW>
 8001fee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff2:	4867      	ldr	r0, [pc, #412]	; (8002190 <read16bits+0x1d0>)
 8001ff4:	f7ff f94e 	bl	8001294 <PIN_LOW>
 8001ff8:	4b66      	ldr	r3, [pc, #408]	; (8002194 <read16bits+0x1d4>)
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	085b      	lsrs	r3, r3, #1
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	4b64      	ldr	r3, [pc, #400]	; (8002198 <read16bits+0x1d8>)
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	0a1b      	lsrs	r3, r3, #8
 800200c:	b29b      	uxth	r3, r3
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	b29b      	uxth	r3, r3
 8002014:	4313      	orrs	r3, r2
 8002016:	b29a      	uxth	r2, r3
 8002018:	4b5f      	ldr	r3, [pc, #380]	; (8002198 <read16bits+0x1d8>)
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	095b      	lsrs	r3, r3, #5
 800201e:	b29b      	uxth	r3, r3
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	b29b      	uxth	r3, r3
 8002026:	4313      	orrs	r3, r2
 8002028:	b29a      	uxth	r2, r3
 800202a:	4b5b      	ldr	r3, [pc, #364]	; (8002198 <read16bits+0x1d8>)
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	b29b      	uxth	r3, r3
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	b29b      	uxth	r3, r3
 8002038:	4313      	orrs	r3, r2
 800203a:	b29a      	uxth	r2, r3
 800203c:	4b54      	ldr	r3, [pc, #336]	; (8002190 <read16bits+0x1d0>)
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	b29b      	uxth	r3, r3
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	b29b      	uxth	r3, r3
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	b29b      	uxth	r3, r3
 800204c:	4313      	orrs	r3, r2
 800204e:	b29a      	uxth	r2, r3
 8002050:	4b4f      	ldr	r3, [pc, #316]	; (8002190 <read16bits+0x1d0>)
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	085b      	lsrs	r3, r3, #1
 8002056:	b29b      	uxth	r3, r3
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	b29b      	uxth	r3, r3
 800205e:	4313      	orrs	r3, r2
 8002060:	b29a      	uxth	r2, r3
 8002062:	4b4b      	ldr	r3, [pc, #300]	; (8002190 <read16bits+0x1d0>)
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	b29b      	uxth	r3, r3
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	b29b      	uxth	r3, r3
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	b29b      	uxth	r3, r3
 8002072:	4313      	orrs	r3, r2
 8002074:	b29a      	uxth	r2, r3
 8002076:	4b46      	ldr	r3, [pc, #280]	; (8002190 <read16bits+0x1d0>)
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	b29b      	uxth	r3, r3
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	b29b      	uxth	r3, r3
 8002080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002084:	b29b      	uxth	r3, r3
 8002086:	4313      	orrs	r3, r2
 8002088:	80fb      	strh	r3, [r7, #6]
 800208a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800208e:	4840      	ldr	r0, [pc, #256]	; (8002190 <read16bits+0x1d0>)
 8002090:	f7ff f910 	bl	80012b4 <PIN_HIGH>
 8002094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002098:	483d      	ldr	r0, [pc, #244]	; (8002190 <read16bits+0x1d0>)
 800209a:	f7ff f90b 	bl	80012b4 <PIN_HIGH>
    READ_8(lo);
 800209e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020a2:	483b      	ldr	r0, [pc, #236]	; (8002190 <read16bits+0x1d0>)
 80020a4:	f7ff f906 	bl	80012b4 <PIN_HIGH>
 80020a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ac:	4838      	ldr	r0, [pc, #224]	; (8002190 <read16bits+0x1d0>)
 80020ae:	f7ff f8f1 	bl	8001294 <PIN_LOW>
 80020b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020b6:	4836      	ldr	r0, [pc, #216]	; (8002190 <read16bits+0x1d0>)
 80020b8:	f7ff f8ec 	bl	8001294 <PIN_LOW>
 80020bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020c0:	4833      	ldr	r0, [pc, #204]	; (8002190 <read16bits+0x1d0>)
 80020c2:	f7ff f8e7 	bl	8001294 <PIN_LOW>
 80020c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ca:	4831      	ldr	r0, [pc, #196]	; (8002190 <read16bits+0x1d0>)
 80020cc:	f7ff f8e2 	bl	8001294 <PIN_LOW>
 80020d0:	4b30      	ldr	r3, [pc, #192]	; (8002194 <read16bits+0x1d4>)
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4b2e      	ldr	r3, [pc, #184]	; (8002198 <read16bits+0x1d8>)
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b29      	ldr	r3, [pc, #164]	; (8002198 <read16bits+0x1d8>)
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	4313      	orrs	r3, r2
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <read16bits+0x1d8>)
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	b2db      	uxtb	r3, r3
 8002110:	4313      	orrs	r3, r2
 8002112:	b2da      	uxtb	r2, r3
 8002114:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <read16bits+0x1d0>)
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	b2db      	uxtb	r3, r3
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	b2db      	uxtb	r3, r3
 8002124:	4313      	orrs	r3, r2
 8002126:	b2da      	uxtb	r2, r3
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <read16bits+0x1d0>)
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	085b      	lsrs	r3, r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	b2db      	uxtb	r3, r3
 8002136:	4313      	orrs	r3, r2
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <read16bits+0x1d0>)
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002148:	b2db      	uxtb	r3, r3
 800214a:	4313      	orrs	r3, r2
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <read16bits+0x1d0>)
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800215c:	b2db      	uxtb	r3, r3
 800215e:	4313      	orrs	r3, r2
 8002160:	717b      	strb	r3, [r7, #5]
 8002162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002166:	480a      	ldr	r0, [pc, #40]	; (8002190 <read16bits+0x1d0>)
 8002168:	f7ff f8a4 	bl	80012b4 <PIN_HIGH>
 800216c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002170:	4807      	ldr	r0, [pc, #28]	; (8002190 <read16bits+0x1d0>)
 8002172:	f7ff f89f 	bl	80012b4 <PIN_HIGH>
    return (ret << 8) | lo;
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	b21a      	sxth	r2, r3
 800217c:	797b      	ldrb	r3, [r7, #5]
 800217e:	b21b      	sxth	r3, r3
 8002180:	4313      	orrs	r3, r2
 8002182:	b21b      	sxth	r3, r3
 8002184:	b29b      	uxth	r3, r3
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	40021800 	.word	0x40021800
 8002198:	40021400 	.word	0x40021400

0800219c <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	460a      	mov	r2, r1
 80021a6:	80fb      	strh	r3, [r7, #6]
 80021a8:	4613      	mov	r3, r2
 80021aa:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 80021ac:	4b64      	ldr	r3, [pc, #400]	; (8002340 <readReg+0x1a4>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <readReg+0x1c>
        reset();
 80021b4:	f7ff feb0 	bl	8001f18 <reset>
    CS_ACTIVE;
 80021b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021bc:	4861      	ldr	r0, [pc, #388]	; (8002344 <readReg+0x1a8>)
 80021be:	f7ff f869 	bl	8001294 <PIN_LOW>
    WriteCmd(reg);
 80021c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c6:	4860      	ldr	r0, [pc, #384]	; (8002348 <readReg+0x1ac>)
 80021c8:	f7ff f864 	bl	8001294 <PIN_LOW>
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	73fb      	strb	r3, [r7, #15]
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	73bb      	strb	r3, [r7, #14]
 80021d8:	4b5b      	ldr	r3, [pc, #364]	; (8002348 <readReg+0x1ac>)
 80021da:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80021de:	619a      	str	r2, [r3, #24]
 80021e0:	4b5a      	ldr	r3, [pc, #360]	; (800234c <readReg+0x1b0>)
 80021e2:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80021e6:	619a      	str	r2, [r3, #24]
 80021e8:	4b59      	ldr	r3, [pc, #356]	; (8002350 <readReg+0x1b4>)
 80021ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021ee:	619a      	str	r2, [r3, #24]
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4a56      	ldr	r2, [pc, #344]	; (8002350 <readReg+0x1b4>)
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	6193      	str	r3, [r2, #24]
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	015b      	lsls	r3, r3, #5
 8002208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220c:	431a      	orrs	r2, r3
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	015b      	lsls	r3, r3, #5
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	431a      	orrs	r2, r3
 8002218:	4b4c      	ldr	r3, [pc, #304]	; (800234c <readReg+0x1b0>)
 800221a:	619a      	str	r2, [r3, #24]
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	105b      	asrs	r3, r3, #1
 8002220:	f003 0208 	and.w	r2, r3, #8
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222c:	431a      	orrs	r2, r3
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	105b      	asrs	r3, r3, #1
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	431a      	orrs	r2, r3
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	10db      	asrs	r3, r3, #3
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	431a      	orrs	r2, r3
 8002242:	4b41      	ldr	r3, [pc, #260]	; (8002348 <readReg+0x1ac>)
 8002244:	619a      	str	r2, [r3, #24]
 8002246:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800224a:	483f      	ldr	r0, [pc, #252]	; (8002348 <readReg+0x1ac>)
 800224c:	f7ff f822 	bl	8001294 <PIN_LOW>
 8002250:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002254:	483c      	ldr	r0, [pc, #240]	; (8002348 <readReg+0x1ac>)
 8002256:	f7ff f82d 	bl	80012b4 <PIN_HIGH>
 800225a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800225e:	483a      	ldr	r0, [pc, #232]	; (8002348 <readReg+0x1ac>)
 8002260:	f7ff f828 	bl	80012b4 <PIN_HIGH>
 8002264:	4b38      	ldr	r3, [pc, #224]	; (8002348 <readReg+0x1ac>)
 8002266:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800226a:	619a      	str	r2, [r3, #24]
 800226c:	4b37      	ldr	r3, [pc, #220]	; (800234c <readReg+0x1b0>)
 800226e:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002272:	619a      	str	r2, [r3, #24]
 8002274:	4b36      	ldr	r3, [pc, #216]	; (8002350 <readReg+0x1b4>)
 8002276:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800227a:	619a      	str	r2, [r3, #24]
 800227c:	7bbb      	ldrb	r3, [r7, #14]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4a33      	ldr	r2, [pc, #204]	; (8002350 <readReg+0x1b4>)
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	6193      	str	r3, [r2, #24]
 8002288:	7bbb      	ldrb	r3, [r7, #14]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002290:	7bbb      	ldrb	r3, [r7, #14]
 8002292:	015b      	lsls	r3, r3, #5
 8002294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002298:	431a      	orrs	r2, r3
 800229a:	7bbb      	ldrb	r3, [r7, #14]
 800229c:	015b      	lsls	r3, r3, #5
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	431a      	orrs	r2, r3
 80022a4:	4b29      	ldr	r3, [pc, #164]	; (800234c <readReg+0x1b0>)
 80022a6:	619a      	str	r2, [r3, #24]
 80022a8:	7bbb      	ldrb	r3, [r7, #14]
 80022aa:	105b      	asrs	r3, r3, #1
 80022ac:	f003 0208 	and.w	r2, r3, #8
 80022b0:	7bbb      	ldrb	r3, [r7, #14]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b8:	431a      	orrs	r2, r3
 80022ba:	7bbb      	ldrb	r3, [r7, #14]
 80022bc:	105b      	asrs	r3, r3, #1
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	431a      	orrs	r2, r3
 80022c4:	7bbb      	ldrb	r3, [r7, #14]
 80022c6:	10db      	asrs	r3, r3, #3
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	431a      	orrs	r2, r3
 80022ce:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <readReg+0x1ac>)
 80022d0:	619a      	str	r2, [r3, #24]
 80022d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022d6:	481c      	ldr	r0, [pc, #112]	; (8002348 <readReg+0x1ac>)
 80022d8:	f7fe ffdc 	bl	8001294 <PIN_LOW>
 80022dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022e0:	4819      	ldr	r0, [pc, #100]	; (8002348 <readReg+0x1ac>)
 80022e2:	f7fe ffe7 	bl	80012b4 <PIN_HIGH>
 80022e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022ea:	4817      	ldr	r0, [pc, #92]	; (8002348 <readReg+0x1ac>)
 80022ec:	f7fe ffe2 	bl	80012b4 <PIN_HIGH>
 80022f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022f4:	4814      	ldr	r0, [pc, #80]	; (8002348 <readReg+0x1ac>)
 80022f6:	f7fe ffdd 	bl	80012b4 <PIN_HIGH>
    setReadDir();
 80022fa:	f7ff f907 	bl	800150c <setReadDir>
    delay(1);    //1us should be adequate
 80022fe:	2001      	movs	r0, #1
 8002300:	f7fe ffb0 	bl	8001264 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8002304:	f7ff fe5c 	bl	8001fc0 <read16bits>
 8002308:	4603      	mov	r3, r0
 800230a:	81bb      	strh	r3, [r7, #12]
 800230c:	797b      	ldrb	r3, [r7, #5]
 800230e:	3b01      	subs	r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	717b      	strb	r3, [r7, #5]
 8002314:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002318:	2b00      	cmp	r3, #0
 800231a:	daf3      	bge.n	8002304 <readReg+0x168>
    RD_IDLE;
 800231c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002320:	4809      	ldr	r0, [pc, #36]	; (8002348 <readReg+0x1ac>)
 8002322:	f7fe ffc7 	bl	80012b4 <PIN_HIGH>
    CS_IDLE;
 8002326:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800232a:	4806      	ldr	r0, [pc, #24]	; (8002344 <readReg+0x1a8>)
 800232c:	f7fe ffc2 	bl	80012b4 <PIN_HIGH>
    setWriteDir();
 8002330:	f7ff f918 	bl	8001564 <setWriteDir>
    return ret;
 8002334:	89bb      	ldrh	r3, [r7, #12]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000063 	.word	0x20000063
 8002344:	40020400 	.word	0x40020400
 8002348:	40021000 	.word	0x40021000
 800234c:	40021400 	.word	0x40021400
 8002350:	40021800 	.word	0x40021800

08002354 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff1a 	bl	800219c <readReg>
 8002368:	4603      	mov	r3, r0
 800236a:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	2101      	movs	r1, #1
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff13 	bl	800219c <readReg>
 8002376:	4603      	mov	r3, r0
 8002378:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 800237a:	89fb      	ldrh	r3, [r7, #14]
 800237c:	041a      	lsls	r2, r3, #16
 800237e:	89bb      	ldrh	r3, [r7, #12]
 8002380:	4313      	orrs	r3, r2
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff feff 	bl	800219c <readReg>
 800239e:	4603      	mov	r3, r0
 80023a0:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	2101      	movs	r1, #1
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fef8 	bl	800219c <readReg>
 80023ac:	4603      	mov	r3, r0
 80023ae:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	2102      	movs	r1, #2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fef1 	bl	800219c <readReg>
 80023ba:	4603      	mov	r3, r0
 80023bc:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 80023be:	89fb      	ldrh	r3, [r7, #14]
 80023c0:	061b      	lsls	r3, r3, #24
 80023c2:	89ba      	ldrh	r2, [r7, #12]
 80023c4:	0212      	lsls	r2, r2, #8
 80023c6:	4313      	orrs	r3, r2
 80023c8:	897a      	ldrh	r2, [r7, #10]
 80023ca:	0a12      	lsrs	r2, r2, #8
 80023cc:	b292      	uxth	r2, r2
 80023ce:	4313      	orrs	r3, r2
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <tft_init>:


void tft_init(uint16_t ID)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 80023ea:	4bc4      	ldr	r3, [pc, #784]	; (80026fc <tft_init+0x324>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 80023f0:	4ac3      	ldr	r2, [pc, #780]	; (8002700 <tft_init+0x328>)
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	8013      	strh	r3, [r2, #0]
 80023f6:	4bc2      	ldr	r3, [pc, #776]	; (8002700 <tft_init+0x328>)
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	f249 0290 	movw	r2, #37008	; 0x9090
 80023fe:	4293      	cmp	r3, r2
 8002400:	f000 8164 	beq.w	80026cc <tft_init+0x2f4>
 8002404:	f249 0290 	movw	r2, #37008	; 0x9090
 8002408:	4293      	cmp	r3, r2
 800240a:	dc7f      	bgt.n	800250c <tft_init+0x134>
 800240c:	f244 7247 	movw	r2, #18247	; 0x4747
 8002410:	4293      	cmp	r3, r2
 8002412:	f000 8145 	beq.w	80026a0 <tft_init+0x2c8>
 8002416:	f244 7247 	movw	r2, #18247	; 0x4747
 800241a:	4293      	cmp	r3, r2
 800241c:	dc34      	bgt.n	8002488 <tft_init+0xb0>
 800241e:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8002422:	f000 8104 	beq.w	800262e <tft_init+0x256>
 8002426:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 800242a:	dc13      	bgt.n	8002454 <tft_init+0x7c>
 800242c:	2b99      	cmp	r3, #153	; 0x99
 800242e:	f000 8181 	beq.w	8002734 <tft_init+0x35c>
 8002432:	2b99      	cmp	r3, #153	; 0x99
 8002434:	dc03      	bgt.n	800243e <tft_init+0x66>
 8002436:	2b01      	cmp	r3, #1
 8002438:	f000 8191 	beq.w	800275e <tft_init+0x386>
 800243c:	e268      	b.n	8002910 <tft_init+0x538>
 800243e:	f241 5205 	movw	r2, #5381	; 0x1505
 8002442:	4293      	cmp	r3, r2
 8002444:	f000 8195 	beq.w	8002772 <tft_init+0x39a>
 8002448:	f241 5211 	movw	r2, #5393	; 0x1511
 800244c:	4293      	cmp	r3, r2
 800244e:	f000 80da 	beq.w	8002606 <tft_init+0x22e>
 8002452:	e25d      	b.n	8002910 <tft_init+0x538>
 8002454:	f241 5281 	movw	r2, #5505	; 0x1581
 8002458:	4293      	cmp	r3, r2
 800245a:	f000 81f4 	beq.w	8002846 <tft_init+0x46e>
 800245e:	f241 5281 	movw	r2, #5505	; 0x1581
 8002462:	4293      	cmp	r3, r2
 8002464:	dc05      	bgt.n	8002472 <tft_init+0x9a>
 8002466:	f241 5226 	movw	r2, #5414	; 0x1526
 800246a:	4293      	cmp	r3, r2
 800246c:	f000 80e8 	beq.w	8002640 <tft_init+0x268>
 8002470:	e24e      	b.n	8002910 <tft_init+0x538>
 8002472:	f241 6202 	movw	r2, #5634	; 0x1602
 8002476:	4293      	cmp	r3, r2
 8002478:	f000 81af 	beq.w	80027da <tft_init+0x402>
 800247c:	f242 0253 	movw	r2, #8275	; 0x2053
 8002480:	4293      	cmp	r3, r2
 8002482:	f000 81b3 	beq.w	80027ec <tft_init+0x414>
 8002486:	e243      	b.n	8002910 <tft_init+0x538>
 8002488:	f247 5275 	movw	r2, #30069	; 0x7575
 800248c:	4293      	cmp	r3, r2
 800248e:	f000 810c 	beq.w	80026aa <tft_init+0x2d2>
 8002492:	f247 5275 	movw	r2, #30069	; 0x7575
 8002496:	4293      	cmp	r3, r2
 8002498:	dc19      	bgt.n	80024ce <tft_init+0xf6>
 800249a:	f245 4208 	movw	r2, #21512	; 0x5408
 800249e:	4293      	cmp	r3, r2
 80024a0:	f000 8162 	beq.w	8002768 <tft_init+0x390>
 80024a4:	f245 4208 	movw	r2, #21512	; 0x5408
 80024a8:	4293      	cmp	r3, r2
 80024aa:	dc05      	bgt.n	80024b8 <tft_init+0xe0>
 80024ac:	f245 3210 	movw	r2, #21264	; 0x5310
 80024b0:	4293      	cmp	r3, r2
 80024b2:	f000 80ce 	beq.w	8002652 <tft_init+0x27a>
 80024b6:	e22b      	b.n	8002910 <tft_init+0x538>
 80024b8:	f246 7267 	movw	r2, #26471	; 0x6767
 80024bc:	4293      	cmp	r3, r2
 80024be:	f000 80f4 	beq.w	80026aa <tft_init+0x2d2>
 80024c2:	f646 0209 	movw	r2, #26633	; 0x6809
 80024c6:	4293      	cmp	r3, r2
 80024c8:	f000 815e 	beq.w	8002788 <tft_init+0x3b0>
 80024cc:	e220      	b.n	8002910 <tft_init+0x538>
 80024ce:	f247 7296 	movw	r2, #30614	; 0x7796
 80024d2:	4293      	cmp	r3, r2
 80024d4:	f000 81e8 	beq.w	80028a8 <tft_init+0x4d0>
 80024d8:	f247 7296 	movw	r2, #30614	; 0x7796
 80024dc:	4293      	cmp	r3, r2
 80024de:	dc0a      	bgt.n	80024f6 <tft_init+0x11e>
 80024e0:	f247 7289 	movw	r2, #30601	; 0x7789
 80024e4:	4293      	cmp	r3, r2
 80024e6:	f000 80c9 	beq.w	800267c <tft_init+0x2a4>
 80024ea:	f247 7293 	movw	r2, #30611	; 0x7793
 80024ee:	4293      	cmp	r3, r2
 80024f0:	f000 81ff 	beq.w	80028f2 <tft_init+0x51a>
 80024f4:	e20c      	b.n	8002910 <tft_init+0x538>
 80024f6:	f248 0231 	movw	r2, #32817	; 0x8031
 80024fa:	4293      	cmp	r3, r2
 80024fc:	f000 80c7 	beq.w	800268e <tft_init+0x2b6>
 8002500:	f248 3257 	movw	r2, #33623	; 0x8357
 8002504:	4293      	cmp	r3, r2
 8002506:	f000 80dc 	beq.w	80026c2 <tft_init+0x2ea>
 800250a:	e201      	b.n	8002910 <tft_init+0x538>
 800250c:	f249 3240 	movw	r2, #37696	; 0x9340
 8002510:	4293      	cmp	r3, r2
 8002512:	f000 818a 	beq.w	800282a <tft_init+0x452>
 8002516:	f249 3240 	movw	r2, #37696	; 0x9340
 800251a:	4293      	cmp	r3, r2
 800251c:	dc3c      	bgt.n	8002598 <tft_init+0x1c0>
 800251e:	f249 3228 	movw	r2, #37672	; 0x9328
 8002522:	4293      	cmp	r3, r2
 8002524:	f000 8135 	beq.w	8002792 <tft_init+0x3ba>
 8002528:	f249 3228 	movw	r2, #37672	; 0x9328
 800252c:	4293      	cmp	r3, r2
 800252e:	dc19      	bgt.n	8002564 <tft_init+0x18c>
 8002530:	f249 3220 	movw	r2, #37664	; 0x9320
 8002534:	4293      	cmp	r3, r2
 8002536:	f000 811c 	beq.w	8002772 <tft_init+0x39a>
 800253a:	f249 3220 	movw	r2, #37664	; 0x9320
 800253e:	4293      	cmp	r3, r2
 8002540:	dc05      	bgt.n	800254e <tft_init+0x176>
 8002542:	f249 3202 	movw	r2, #37634	; 0x9302
 8002546:	4293      	cmp	r3, r2
 8002548:	f000 815a 	beq.w	8002800 <tft_init+0x428>
 800254c:	e1e0      	b.n	8002910 <tft_init+0x538>
 800254e:	f249 3225 	movw	r2, #37669	; 0x9325
 8002552:	4293      	cmp	r3, r2
 8002554:	f000 811d 	beq.w	8002792 <tft_init+0x3ba>
 8002558:	f249 3227 	movw	r2, #37671	; 0x9327
 800255c:	4293      	cmp	r3, r2
 800255e:	f000 8128 	beq.w	80027b2 <tft_init+0x3da>
 8002562:	e1d5      	b.n	8002910 <tft_init+0x538>
 8002564:	f249 3231 	movw	r2, #37681	; 0x9331
 8002568:	4293      	cmp	r3, r2
 800256a:	f000 8117 	beq.w	800279c <tft_init+0x3c4>
 800256e:	f249 3231 	movw	r2, #37681	; 0x9331
 8002572:	4293      	cmp	r3, r2
 8002574:	dc05      	bgt.n	8002582 <tft_init+0x1aa>
 8002576:	f249 3229 	movw	r2, #37673	; 0x9329
 800257a:	4293      	cmp	r3, r2
 800257c:	f000 814a 	beq.w	8002814 <tft_init+0x43c>
 8002580:	e1c6      	b.n	8002910 <tft_init+0x538>
 8002582:	f249 3235 	movw	r2, #37685	; 0x9335
 8002586:	4293      	cmp	r3, r2
 8002588:	f000 8108 	beq.w	800279c <tft_init+0x3c4>
 800258c:	f249 3238 	movw	r2, #37688	; 0x9338
 8002590:	4293      	cmp	r3, r2
 8002592:	f000 813a 	beq.w	800280a <tft_init+0x432>
 8002596:	e1bb      	b.n	8002910 <tft_init+0x538>
 8002598:	f249 4288 	movw	r2, #38024	; 0x9488
 800259c:	4293      	cmp	r3, r2
 800259e:	dc14      	bgt.n	80025ca <tft_init+0x1f2>
 80025a0:	f249 4287 	movw	r2, #38023	; 0x9487
 80025a4:	4293      	cmp	r3, r2
 80025a6:	f280 8184 	bge.w	80028b2 <tft_init+0x4da>
 80025aa:	f249 4281 	movw	r2, #38017	; 0x9481
 80025ae:	4293      	cmp	r3, r2
 80025b0:	f000 814e 	beq.w	8002850 <tft_init+0x478>
 80025b4:	f249 4286 	movw	r2, #38022	; 0x9486
 80025b8:	4293      	cmp	r3, r2
 80025ba:	f000 8160 	beq.w	800287e <tft_init+0x4a6>
 80025be:	f249 3241 	movw	r2, #37697	; 0x9341
 80025c2:	4293      	cmp	r3, r2
 80025c4:	f000 8136 	beq.w	8002834 <tft_init+0x45c>
 80025c8:	e1a2      	b.n	8002910 <tft_init+0x538>
 80025ca:	f24b 5205 	movw	r2, #46341	; 0xb505
 80025ce:	4293      	cmp	r3, r2
 80025d0:	f000 8186 	beq.w	80028e0 <tft_init+0x508>
 80025d4:	f24b 5205 	movw	r2, #46341	; 0xb505
 80025d8:	4293      	cmp	r3, r2
 80025da:	dc09      	bgt.n	80025f0 <tft_init+0x218>
 80025dc:	f249 5295 	movw	r2, #38293	; 0x9595
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d062      	beq.n	80026aa <tft_init+0x2d2>
 80025e4:	f64a 4211 	movw	r2, #44049	; 0xac11
 80025e8:	4293      	cmp	r3, r2
 80025ea:	f000 8104 	beq.w	80027f6 <tft_init+0x41e>
 80025ee:	e18f      	b.n	8002910 <tft_init+0x538>
 80025f0:	f24b 5209 	movw	r2, #46345	; 0xb509
 80025f4:	4293      	cmp	r3, r2
 80025f6:	f000 817c 	beq.w	80028f2 <tft_init+0x51a>
 80025fa:	f24c 5205 	movw	r2, #50437	; 0xc505
 80025fe:	4293      	cmp	r3, r2
 8002600:	f000 816e 	beq.w	80028e0 <tft_init+0x508>
 8002604:	e184      	b.n	8002910 <tft_init+0x538>
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8002606:	4b3f      	ldr	r3, [pc, #252]	; (8002704 <tft_init+0x32c>)
 8002608:	2203      	movs	r2, #3
 800260a:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 800260c:	4b3e      	ldr	r3, [pc, #248]	; (8002708 <tft_init+0x330>)
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	2303      	movs	r3, #3
 8002612:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002614:	4b3d      	ldr	r3, [pc, #244]	; (800270c <tft_init+0x334>)
 8002616:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800261e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002620:	4b3b      	ldr	r3, [pc, #236]	; (8002710 <tft_init+0x338>)
 8002622:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800262a:	801a      	strh	r2, [r3, #0]
        break;
 800262c:	e176      	b.n	800291c <tft_init+0x544>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800262e:	4b35      	ldr	r3, [pc, #212]	; (8002704 <tft_init+0x32c>)
 8002630:	f240 4213 	movw	r2, #1043	; 0x413
 8002634:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 8002636:	4b37      	ldr	r3, [pc, #220]	; (8002714 <tft_init+0x33c>)
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	2306      	movs	r3, #6
 800263c:	837b      	strh	r3, [r7, #26]
        break;
 800263e:	e16d      	b.n	800291c <tft_init+0x544>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002640:	4b30      	ldr	r3, [pc, #192]	; (8002704 <tft_init+0x32c>)
 8002642:	f240 4213 	movw	r2, #1043	; 0x413
 8002646:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 8002648:	4b33      	ldr	r3, [pc, #204]	; (8002718 <tft_init+0x340>)
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	230c      	movs	r3, #12
 800264e:	837b      	strh	r3, [r7, #26]
        break;
 8002650:	e164      	b.n	800291c <tft_init+0x544>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8002652:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <tft_init+0x32c>)
 8002654:	f640 6213 	movw	r2, #3603	; 0xe13
 8002658:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 800265a:	4b30      	ldr	r3, [pc, #192]	; (800271c <tft_init+0x344>)
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	2302      	movs	r3, #2
 8002660:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002662:	4b2a      	ldr	r3, [pc, #168]	; (800270c <tft_init+0x334>)
 8002664:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800266c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800266e:	4b28      	ldr	r3, [pc, #160]	; (8002710 <tft_init+0x338>)
 8002670:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002678:	801a      	strh	r2, [r3, #0]
        break;
 800267a:	e14f      	b.n	800291c <tft_init+0x544>
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800267c:	4b21      	ldr	r3, [pc, #132]	; (8002704 <tft_init+0x32c>)
 800267e:	f240 4213 	movw	r2, #1043	; 0x413
 8002682:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 8002684:	4b26      	ldr	r3, [pc, #152]	; (8002720 <tft_init+0x348>)
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	2341      	movs	r3, #65	; 0x41
 800268a:	837b      	strh	r3, [r7, #26]
        break;
 800268c:	e146      	b.n	800291c <tft_init+0x544>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <tft_init+0x32c>)
 8002690:	f241 4213 	movw	r2, #5139	; 0x1413
 8002694:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 8002696:	4b23      	ldr	r3, [pc, #140]	; (8002724 <tft_init+0x34c>)
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	2312      	movs	r3, #18
 800269c:	837b      	strh	r3, [r7, #26]
        break;
 800269e:	e13d      	b.n	800291c <tft_init+0x544>

#ifdef SUPPORT_8347D
    case 0x4747:       //HX8347-D
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | AUTO_READINC | READ_24BITS;
 80026a0:	4b18      	ldr	r3, [pc, #96]	; (8002704 <tft_init+0x32c>)
 80026a2:	f241 6213 	movw	r2, #5651	; 0x1613
 80026a6:	801a      	strh	r2, [r3, #0]
		goto common_8347DGI;
 80026a8:	e003      	b.n	80026b2 <tft_init+0x2da>
    case 0x6767:       //HX8367-A
	case 0x7575:       //HX8347-G
	case 0x9595:       //HX8347-I
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS;
 80026aa:	4b16      	ldr	r3, [pc, #88]	; (8002704 <tft_init+0x32c>)
 80026ac:	f241 4201 	movw	r2, #5121	; 0x1401
 80026b0:	801a      	strh	r2, [r3, #0]
      common_8347DGI:
		is8347 = 1;
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <tft_init+0x350>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
            TFTLCD_DELAY8, 40,
            0x28, 1, 0x3F,      //GON=1, DTE=1, D=1100

            0x16, 1, 0x18,
        };
        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
 80026b8:	2170      	movs	r1, #112	; 0x70
 80026ba:	481c      	ldr	r0, [pc, #112]	; (800272c <tft_init+0x354>)
 80026bc:	f7ff fba4 	bl	8001e08 <init_table>
        break;
 80026c0:	e12c      	b.n	800291c <tft_init+0x544>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <tft_init+0x32c>)
 80026c4:	f241 4203 	movw	r2, #5123	; 0x1403
 80026c8:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 80026ca:	e003      	b.n	80026d4 <tft_init+0x2fc>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80026cc:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <tft_init+0x32c>)
 80026ce:	f241 4213 	movw	r2, #5139	; 0x1413
 80026d2:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 80026d4:	2301      	movs	r3, #1
 80026d6:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <tft_init+0x358>)
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	2302      	movs	r3, #2
 80026de:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <tft_init+0x334>)
 80026e2:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80026ea:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <tft_init+0x338>)
 80026ee:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026f6:	801a      	strh	r2, [r3, #0]
        break;
 80026f8:	e110      	b.n	800291c <tft_init+0x544>
 80026fa:	bf00      	nop
 80026fc:	2000029c 	.word	0x2000029c
 8002700:	2000029a 	.word	0x2000029a
 8002704:	2000028c 	.word	0x2000028c
 8002708:	08008c2c 	.word	0x08008c2c
 800270c:	08001349 	.word	0x08001349
 8002710:	08001331 	.word	0x08001331
 8002714:	08008c30 	.word	0x08008c30
 8002718:	08008c38 	.word	0x08008c38
 800271c:	08008c44 	.word	0x08008c44
 8002720:	08008c48 	.word	0x08008c48
 8002724:	08008c8c 	.word	0x08008c8c
 8002728:	20000064 	.word	0x20000064
 800272c:	08008ca0 	.word	0x08008ca0
 8002730:	08008d10 	.word	0x08008d10

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8002734:	4ba3      	ldr	r3, [pc, #652]	; (80029c4 <tft_init+0x5ec>)
 8002736:	f241 4213 	movw	r2, #5139	; 0x1413
 800273a:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 800273c:	4ba2      	ldr	r3, [pc, #648]	; (80029c8 <tft_init+0x5f0>)
 800273e:	61fb      	str	r3, [r7, #28]
 8002740:	231d      	movs	r3, #29
 8002742:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002744:	4ba1      	ldr	r3, [pc, #644]	; (80029cc <tft_init+0x5f4>)
 8002746:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800274e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002750:	4b9f      	ldr	r3, [pc, #636]	; (80029d0 <tft_init+0x5f8>)
 8002752:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800275a:	801a      	strh	r2, [r3, #0]
        break;
 800275c:	e0de      	b.n	800291c <tft_init+0x544>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 800275e:	4b99      	ldr	r3, [pc, #612]	; (80029c4 <tft_init+0x5ec>)
 8002760:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8002764:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 8002766:	e008      	b.n	800277a <tft_init+0x3a2>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 8002768:	4b96      	ldr	r3, [pc, #600]	; (80029c4 <tft_init+0x5ec>)
 800276a:	f241 0204 	movw	r2, #4100	; 0x1004
 800276e:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 8002770:	e003      	b.n	800277a <tft_init+0x3a2>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 8002772:	4b94      	ldr	r3, [pc, #592]	; (80029c4 <tft_init+0x5ec>)
 8002774:	f241 0204 	movw	r2, #4100	; 0x1004
 8002778:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 800277a:	2301      	movs	r3, #1
 800277c:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 800277e:	21d8      	movs	r1, #216	; 0xd8
 8002780:	4894      	ldr	r0, [pc, #592]	; (80029d4 <tft_init+0x5fc>)
 8002782:	f7ff fb99 	bl	8001eb8 <init_table16>
        break;
 8002786:	e0c9      	b.n	800291c <tft_init+0x544>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8002788:	4b8e      	ldr	r3, [pc, #568]	; (80029c4 <tft_init+0x5ec>)
 800278a:	f241 1202 	movw	r2, #4354	; 0x1102
 800278e:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8002790:	e008      	b.n	80027a4 <tft_init+0x3cc>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 8002792:	4b8c      	ldr	r3, [pc, #560]	; (80029c4 <tft_init+0x5ec>)
 8002794:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8002798:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 800279a:	e003      	b.n	80027a4 <tft_init+0x3cc>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 800279c:	4b89      	ldr	r3, [pc, #548]	; (80029c4 <tft_init+0x5ec>)
 800279e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027a2:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 80027a4:	2301      	movs	r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 80027a8:	21cc      	movs	r1, #204	; 0xcc
 80027aa:	488b      	ldr	r0, [pc, #556]	; (80029d8 <tft_init+0x600>)
 80027ac:	f7ff fb84 	bl	8001eb8 <init_table16>
        break;
 80027b0:	e0b4      	b.n	800291c <tft_init+0x544>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80027b2:	4b84      	ldr	r3, [pc, #528]	; (80029c4 <tft_init+0x5ec>)
 80027b4:	f240 4203 	movw	r2, #1027	; 0x403
 80027b8:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 80027ba:	4b88      	ldr	r3, [pc, #544]	; (80029dc <tft_init+0x604>)
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	231e      	movs	r3, #30
 80027c0:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80027c2:	4b82      	ldr	r3, [pc, #520]	; (80029cc <tft_init+0x5f4>)
 80027c4:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80027cc:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80027ce:	4b80      	ldr	r3, [pc, #512]	; (80029d0 <tft_init+0x5f8>)
 80027d0:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	22f0      	movs	r2, #240	; 0xf0
 80027d6:	801a      	strh	r2, [r3, #0]
        break;
 80027d8:	e0a0      	b.n	800291c <tft_init+0x544>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 80027da:	4b7a      	ldr	r3, [pc, #488]	; (80029c4 <tft_init+0x5ec>)
 80027dc:	f240 4203 	movw	r2, #1027	; 0x403
 80027e0:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 80027e2:	4b7f      	ldr	r3, [pc, #508]	; (80029e0 <tft_init+0x608>)
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	2306      	movs	r3, #6
 80027e8:	837b      	strh	r3, [r7, #26]
        break;
 80027ea:	e097      	b.n	800291c <tft_init+0x544>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 80027ec:	4b75      	ldr	r3, [pc, #468]	; (80029c4 <tft_init+0x5ec>)
 80027ee:	f241 4217 	movw	r2, #5143	; 0x1417
 80027f2:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80027f4:	e012      	b.n	800281c <tft_init+0x444>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 80027f6:	4b73      	ldr	r3, [pc, #460]	; (80029c4 <tft_init+0x5ec>)
 80027f8:	f241 4213 	movw	r2, #5139	; 0x1413
 80027fc:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80027fe:	e00d      	b.n	800281c <tft_init+0x444>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8002800:	4b70      	ldr	r3, [pc, #448]	; (80029c4 <tft_init+0x5ec>)
 8002802:	f240 4203 	movw	r2, #1027	; 0x403
 8002806:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8002808:	e008      	b.n	800281c <tft_init+0x444>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800280a:	4b6e      	ldr	r3, [pc, #440]	; (80029c4 <tft_init+0x5ec>)
 800280c:	f240 4213 	movw	r2, #1043	; 0x413
 8002810:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8002812:	e003      	b.n	800281c <tft_init+0x444>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 8002814:	4b6b      	ldr	r3, [pc, #428]	; (80029c4 <tft_init+0x5ec>)
 8002816:	f241 6203 	movw	r2, #5635	; 0x1603
 800281a:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 800281c:	2301      	movs	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8002820:	4b70      	ldr	r3, [pc, #448]	; (80029e4 <tft_init+0x60c>)
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	2303      	movs	r3, #3
 8002826:	837b      	strh	r3, [r7, #26]
        break;
 8002828:	e078      	b.n	800291c <tft_init+0x544>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 800282a:	4b66      	ldr	r3, [pc, #408]	; (80029c4 <tft_init+0x5ec>)
 800282c:	f241 4213 	movw	r2, #5139	; 0x1413
 8002830:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 8002832:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002834:	4b63      	ldr	r3, [pc, #396]	; (80029c4 <tft_init+0x5ec>)
 8002836:	f240 4213 	movw	r2, #1043	; 0x413
 800283a:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 800283c:	4b6a      	ldr	r3, [pc, #424]	; (80029e8 <tft_init+0x610>)
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	2365      	movs	r3, #101	; 0x65
 8002842:	837b      	strh	r3, [r7, #26]
        break;
 8002844:	e06a      	b.n	800291c <tft_init+0x544>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 8002846:	4b5f      	ldr	r3, [pc, #380]	; (80029c4 <tft_init+0x5ec>)
 8002848:	f240 4213 	movw	r2, #1043	; 0x413
 800284c:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 800284e:	e003      	b.n	8002858 <tft_init+0x480>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 8002850:	4b5c      	ldr	r3, [pc, #368]	; (80029c4 <tft_init+0x5ec>)
 8002852:	f240 4207 	movw	r2, #1031	; 0x407
 8002856:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 8002858:	2301      	movs	r3, #1
 800285a:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 800285c:	4b63      	ldr	r3, [pc, #396]	; (80029ec <tft_init+0x614>)
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	2345      	movs	r3, #69	; 0x45
 8002862:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 8002864:	4b59      	ldr	r3, [pc, #356]	; (80029cc <tft_init+0x5f4>)
 8002866:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800286e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002870:	4b57      	ldr	r3, [pc, #348]	; (80029d0 <tft_init+0x5f8>)
 8002872:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800287a:	801a      	strh	r2, [r3, #0]
        break;
 800287c:	e04e      	b.n	800291c <tft_init+0x544>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 800287e:	4b51      	ldr	r3, [pc, #324]	; (80029c4 <tft_init+0x5ec>)
 8002880:	f240 4203 	movw	r2, #1027	; 0x403
 8002884:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 8002886:	4b5a      	ldr	r3, [pc, #360]	; (80029f0 <tft_init+0x618>)
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	233b      	movs	r3, #59	; 0x3b
 800288c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800288e:	4b4f      	ldr	r3, [pc, #316]	; (80029cc <tft_init+0x5f4>)
 8002890:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002898:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800289a:	4b4d      	ldr	r3, [pc, #308]	; (80029d0 <tft_init+0x5f8>)
 800289c:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80028a4:	801a      	strh	r2, [r3, #0]
        break;
 80028a6:	e039      	b.n	800291c <tft_init+0x544>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 80028a8:	4b46      	ldr	r3, [pc, #280]	; (80029c4 <tft_init+0x5ec>)
 80028aa:	f240 4203 	movw	r2, #1027	; 0x403
 80028ae:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 80028b0:	e003      	b.n	80028ba <tft_init+0x4e2>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80028b2:	4b44      	ldr	r3, [pc, #272]	; (80029c4 <tft_init+0x5ec>)
 80028b4:	f240 4213 	movw	r2, #1043	; 0x413
 80028b8:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 80028ba:	2301      	movs	r3, #1
 80028bc:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 80028be:	4b4d      	ldr	r3, [pc, #308]	; (80029f4 <tft_init+0x61c>)
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	232b      	movs	r3, #43	; 0x2b
 80028c4:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80028c6:	4b41      	ldr	r3, [pc, #260]	; (80029cc <tft_init+0x5f4>)
 80028c8:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80028d0:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80028d2:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <tft_init+0x5f8>)
 80028d4:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80028dc:	801a      	strh	r2, [r3, #0]
        break;
 80028de:	e01d      	b.n	800291c <tft_init+0x544>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 80028e0:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <tft_init+0x5ec>)
 80028e2:	f241 0208 	movw	r2, #4104	; 0x1008
 80028e6:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 80028e8:	21b0      	movs	r1, #176	; 0xb0
 80028ea:	4843      	ldr	r0, [pc, #268]	; (80029f8 <tft_init+0x620>)
 80028ec:	f7ff fae4 	bl	8001eb8 <init_table16>
        break;
 80028f0:	e014      	b.n	800291c <tft_init+0x544>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 80028f2:	4b34      	ldr	r3, [pc, #208]	; (80029c4 <tft_init+0x5ec>)
 80028f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028f8:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 80028fa:	21c0      	movs	r1, #192	; 0xc0
 80028fc:	483f      	ldr	r0, [pc, #252]	; (80029fc <tft_init+0x624>)
 80028fe:	f7ff fadb 	bl	8001eb8 <init_table16>
        p16 = (int16_t *) & height;
 8002902:	4b32      	ldr	r3, [pc, #200]	; (80029cc <tft_init+0x5f4>)
 8002904:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800290c:	801a      	strh	r2, [r3, #0]
        break;
 800290e:	e005      	b.n	800291c <tft_init+0x544>
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 8002910:	4b2f      	ldr	r3, [pc, #188]	; (80029d0 <tft_init+0x5f8>)
 8002912:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	2200      	movs	r2, #0
 8002918:	801a      	strh	r2, [r3, #0]
        break;
 800291a:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 800291c:	4b29      	ldr	r3, [pc, #164]	; (80029c4 <tft_init+0x5ec>)
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf14      	ite	ne
 8002928:	2301      	movne	r3, #1
 800292a:	2300      	moveq	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	b29a      	uxth	r2, r3
 8002930:	4b33      	ldr	r3, [pc, #204]	; (8002a00 <tft_init+0x628>)
 8002932:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00d      	beq.n	8002956 <tft_init+0x57e>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 800293a:	2109      	movs	r1, #9
 800293c:	4831      	ldr	r0, [pc, #196]	; (8002a04 <tft_init+0x62c>)
 800293e:	f7ff fa63 	bl	8001e08 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8002942:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002946:	4619      	mov	r1, r3
 8002948:	69f8      	ldr	r0, [r7, #28]
 800294a:	f7ff fa5d 	bl	8001e08 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 800294e:	2106      	movs	r1, #6
 8002950:	482d      	ldr	r0, [pc, #180]	; (8002a08 <tft_init+0x630>)
 8002952:	f7ff fa59 	bl	8001e08 <init_table>
    }
    setRotation(0);             //PORTRAIT
 8002956:	2000      	movs	r0, #0
 8002958:	f000 ff7a 	bl	8003850 <setRotation>
    invertDisplay(false);
 800295c:	2000      	movs	r0, #0
 800295e:	f001 fd5f 	bl	8004420 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 8002962:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <tft_init+0x634>)
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	f249 4288 	movw	r2, #38024	; 0x9488
 800296a:	4293      	cmp	r3, r2
 800296c:	d125      	bne.n	80029ba <tft_init+0x5e2>
		is555 = 0;
 800296e:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <tft_init+0x638>)
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 8002974:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002978:	2100      	movs	r1, #0
 800297a:	2000      	movs	r0, #0
 800297c:	f001 f9e8 	bl	8003d50 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 8002980:	2100      	movs	r1, #0
 8002982:	2000      	movs	r0, #0
 8002984:	f7fe fd84 	bl	8001490 <readPixel>
 8002988:	4603      	mov	r3, r0
 800298a:	461a      	mov	r2, r3
 800298c:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8002990:	429a      	cmp	r2, r3
 8002992:	d112      	bne.n	80029ba <tft_init+0x5e2>
			uint8_t pixfmt = 0x06;
 8002994:	2306      	movs	r3, #6
 8002996:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8002998:	f107 030f 	add.w	r3, r7, #15
 800299c:	2201      	movs	r2, #1
 800299e:	4619      	mov	r1, r3
 80029a0:	203a      	movs	r0, #58	; 0x3a
 80029a2:	f7fe fd9f 	bl	80014e4 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <tft_init+0x5ec>)
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	f023 0310 	bic.w	r3, r3, #16
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <tft_init+0x5ec>)
 80029b2:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <tft_init+0x638>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 80029ba:	bf00      	nop
 80029bc:	3720      	adds	r7, #32
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2000028c 	.word	0x2000028c
 80029c8:	08008d14 	.word	0x08008d14
 80029cc:	08001349 	.word	0x08001349
 80029d0:	08001331 	.word	0x08001331
 80029d4:	08008d34 	.word	0x08008d34
 80029d8:	08008e0c 	.word	0x08008e0c
 80029dc:	08008ed8 	.word	0x08008ed8
 80029e0:	08008ef8 	.word	0x08008ef8
 80029e4:	08008f00 	.word	0x08008f00
 80029e8:	08008f04 	.word	0x08008f04
 80029ec:	08008f6c 	.word	0x08008f6c
 80029f0:	08008fb4 	.word	0x08008fb4
 80029f4:	08008ff0 	.word	0x08008ff0
 80029f8:	0800901c 	.word	0x0800901c
 80029fc:	080090cc 	.word	0x080090cc
 8002a00:	20000290 	.word	0x20000290
 8002a04:	0800918c 	.word	0x0800918c
 8002a08:	08009198 	.word	0x08009198
 8002a0c:	2000029a 	.word	0x2000029a
 8002a10:	20000065 	.word	0x20000065

08002a14 <readID>:




uint16_t readID(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7ff fbbd 	bl	800219c <readReg>
 8002a22:	4603      	mov	r3, r0
 8002a24:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 8002a26:	89fb      	ldrh	r3, [r7, #14]
 8002a28:	f245 4208 	movw	r2, #21512	; 0x5408
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d102      	bne.n	8002a36 <readID+0x22>
        return 0x5408;
 8002a30:	f245 4308 	movw	r3, #21512	; 0x5408
 8002a34:	e128      	b.n	8002c88 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 8002a36:	89fb      	ldrh	r3, [r7, #14]
 8002a38:	f245 4220 	movw	r2, #21536	; 0x5420
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d102      	bne.n	8002a46 <readID+0x32>
        return 0x5420;
 8002a40:	f245 4320 	movw	r3, #21536	; 0x5420
 8002a44:	e120      	b.n	8002c88 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 8002a46:	89fb      	ldrh	r3, [r7, #14]
 8002a48:	f648 1289 	movw	r2, #35209	; 0x8989
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d102      	bne.n	8002a56 <readID+0x42>
        return 0x1289;
 8002a50:	f241 2389 	movw	r3, #4745	; 0x1289
 8002a54:	e118      	b.n	8002c88 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 8002a56:	2100      	movs	r1, #0
 8002a58:	2067      	movs	r0, #103	; 0x67
 8002a5a:	f7ff fb9f 	bl	800219c <readReg>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 8002a62:	89fb      	ldrh	r3, [r7, #14]
 8002a64:	f244 7247 	movw	r2, #18247	; 0x4747
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d102      	bne.n	8002a72 <readID+0x5e>
        return 0x8347;
 8002a6c:	f248 3347 	movw	r3, #33607	; 0x8347
 8002a70:	e10a      	b.n	8002c88 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8002a72:	20a1      	movs	r0, #161	; 0xa1
 8002a74:	f7ff fc6e 	bl	8002354 <readReg32>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8002a7c:	89fb      	ldrh	r3, [r7, #14]
 8002a7e:	f246 1201 	movw	r2, #24833	; 0x6101
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d102      	bne.n	8002a8c <readID+0x78>
        return 0x1963;
 8002a86:	f641 1363 	movw	r3, #6499	; 0x1963
 8002a8a:	e0fd      	b.n	8002c88 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8002a8c:	89fb      	ldrh	r3, [r7, #14]
 8002a8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d102      	bne.n	8002a9c <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8002a96:	f241 5326 	movw	r3, #5414	; 0x1526
 8002a9a:	e0f5      	b.n	8002c88 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 8002a9c:	20bf      	movs	r0, #191	; 0xbf
 8002a9e:	f7ff fc74 	bl	800238a <readReg40>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8002aa6:	89fb      	ldrh	r3, [r7, #14]
 8002aa8:	f248 3257 	movw	r2, #33623	; 0x8357
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d102      	bne.n	8002ab6 <readID+0xa2>
        return 0x8357;
 8002ab0:	f248 3357 	movw	r3, #33623	; 0x8357
 8002ab4:	e0e8      	b.n	8002c88 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8002ab6:	89fb      	ldrh	r3, [r7, #14]
 8002ab8:	f249 4281 	movw	r2, #38017	; 0x9481
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d102      	bne.n	8002ac6 <readID+0xb2>
        return 0x9481;
 8002ac0:	f249 4381 	movw	r3, #38017	; 0x9481
 8002ac4:	e0e0      	b.n	8002c88 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8002ac6:	89fb      	ldrh	r3, [r7, #14]
 8002ac8:	f241 5211 	movw	r2, #5393	; 0x1511
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d102      	bne.n	8002ad6 <readID+0xc2>
        return 0x1511;
 8002ad0:	f241 5311 	movw	r3, #5393	; 0x1511
 8002ad4:	e0d8      	b.n	8002c88 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8002ad6:	89fb      	ldrh	r3, [r7, #14]
 8002ad8:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8002adc:	d102      	bne.n	8002ae4 <readID+0xd0>
        return 0x1520;
 8002ade:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 8002ae2:	e0d1      	b.n	8002c88 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8002ae4:	89fb      	ldrh	r3, [r7, #14]
 8002ae6:	f241 5226 	movw	r2, #5414	; 0x1526
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d102      	bne.n	8002af4 <readID+0xe0>
        return 0x1526;
 8002aee:	f241 5326 	movw	r3, #5414	; 0x1526
 8002af2:	e0c9      	b.n	8002c88 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8002af4:	89fb      	ldrh	r3, [r7, #14]
 8002af6:	f241 5281 	movw	r2, #5505	; 0x1581
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d102      	bne.n	8002b04 <readID+0xf0>
        return 0x1581;
 8002afe:	f241 5381 	movw	r3, #5505	; 0x1581
 8002b02:	e0c1      	b.n	8002c88 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8002b04:	89fb      	ldrh	r3, [r7, #14]
 8002b06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002b0a:	d102      	bne.n	8002b12 <readID+0xfe>
        return 0x6814;
 8002b0c:	f646 0314 	movw	r3, #26644	; 0x6814
 8002b10:	e0ba      	b.n	8002c88 <readID+0x274>
    ret = readReg32(0xD4);
 8002b12:	20d4      	movs	r0, #212	; 0xd4
 8002b14:	f7ff fc1e 	bl	8002354 <readReg32>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8002b1c:	89fb      	ldrh	r3, [r7, #14]
 8002b1e:	f245 3210 	movw	r2, #21264	; 0x5310
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d102      	bne.n	8002b2c <readID+0x118>
        return 0x5310;
 8002b26:	f245 3310 	movw	r3, #21264	; 0x5310
 8002b2a:	e0ad      	b.n	8002c88 <readID+0x274>
    ret = readReg32(0xD7);
 8002b2c:	20d7      	movs	r0, #215	; 0xd7
 8002b2e:	f7ff fc11 	bl	8002354 <readReg32>
 8002b32:	4603      	mov	r3, r0
 8002b34:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8002b36:	89fb      	ldrh	r3, [r7, #14]
 8002b38:	f248 0231 	movw	r2, #32817	; 0x8031
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d102      	bne.n	8002b46 <readID+0x132>
        return 0x8031;
 8002b40:	f248 0331 	movw	r3, #32817	; 0x8031
 8002b44:	e0a0      	b.n	8002c88 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8002b46:	20ef      	movs	r0, #239	; 0xef
 8002b48:	f7ff fc1f 	bl	800238a <readReg40>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8002b50:	89fb      	ldrh	r3, [r7, #14]
 8002b52:	f249 3227 	movw	r2, #37671	; 0x9327
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d102      	bne.n	8002b60 <readID+0x14c>
        return 0x9327;
 8002b5a:	f249 3327 	movw	r3, #37671	; 0x9327
 8002b5e:	e093      	b.n	8002c88 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8002b60:	20fe      	movs	r0, #254	; 0xfe
 8002b62:	f7ff fbf7 	bl	8002354 <readReg32>
 8002b66:	4603      	mov	r3, r0
 8002b68:	0a1b      	lsrs	r3, r3, #8
 8002b6a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8002b6c:	89fb      	ldrh	r3, [r7, #14]
 8002b6e:	f242 0253 	movw	r2, #8275	; 0x2053
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d102      	bne.n	8002b7c <readID+0x168>
        return 0x2053;
 8002b76:	f242 0353 	movw	r3, #8275	; 0x2053
 8002b7a:	e085      	b.n	8002c88 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8002b7c:	2004      	movs	r0, #4
 8002b7e:	f7ff fbe9 	bl	8002354 <readReg32>
 8002b82:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	0c1b      	lsrs	r3, r3, #16
 8002b88:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d122      	bne.n	8002bda <readID+0x1c6>
 8002b94:	89fb      	ldrh	r3, [r7, #14]
 8002b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b9a:	d11e      	bne.n	8002bda <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8002b9c:	4a3c      	ldr	r2, [pc, #240]	; (8002c90 <readID+0x27c>)
 8002b9e:	1d3b      	adds	r3, r7, #4
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	8019      	strh	r1, [r3, #0]
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	0c12      	lsrs	r2, r2, #16
 8002baa:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	2203      	movs	r2, #3
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	20b9      	movs	r0, #185	; 0xb9
 8002bb4:	f7fe fc96 	bl	80014e4 <pushCommand>
        msb = readReg(0xD0,0);
 8002bb8:	2100      	movs	r1, #0
 8002bba:	20d0      	movs	r0, #208	; 0xd0
 8002bbc:	f7ff faee 	bl	800219c <readReg>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	2b99      	cmp	r3, #153	; 0x99
 8002bc8:	d101      	bne.n	8002bce <readID+0x1ba>
 8002bca:	2399      	movs	r3, #153	; 0x99
 8002bcc:	e05c      	b.n	8002c88 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	2b90      	cmp	r3, #144	; 0x90
 8002bd2:	d102      	bne.n	8002bda <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8002bd4:	f249 0390 	movw	r3, #37008	; 0x9090
 8002bd8:	e056      	b.n	8002c88 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8002bda:	89fb      	ldrh	r3, [r7, #14]
 8002bdc:	f241 5226 	movw	r2, #5414	; 0x1526
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d102      	bne.n	8002bea <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8002be4:	f241 5326 	movw	r3, #5414	; 0x1526
 8002be8:	e04e      	b.n	8002c88 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8002bea:	89fb      	ldrh	r3, [r7, #14]
 8002bec:	f648 12f0 	movw	r2, #35312	; 0x89f0
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d102      	bne.n	8002bfa <readID+0x1e6>
        return 0x7735;
 8002bf4:	f247 7335 	movw	r3, #30517	; 0x7735
 8002bf8:	e046      	b.n	8002c88 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8002bfa:	89fb      	ldrh	r3, [r7, #14]
 8002bfc:	f248 5252 	movw	r2, #34130	; 0x8552
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d102      	bne.n	8002c0a <readID+0x1f6>
        return 0x7789;
 8002c04:	f247 7389 	movw	r3, #30601	; 0x7789
 8002c08:	e03e      	b.n	8002c88 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 8002c0a:	89fb      	ldrh	r3, [r7, #14]
 8002c0c:	f64a 4211 	movw	r2, #44049	; 0xac11
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d102      	bne.n	8002c1a <readID+0x206>
        return 0xAC11;
 8002c14:	f64a 4311 	movw	r3, #44049	; 0xac11
 8002c18:	e036      	b.n	8002c88 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 8002c1a:	20d3      	movs	r0, #211	; 0xd3
 8002c1c:	f7ff fb9a 	bl	8002354 <readReg32>
 8002c20:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 8002c28:	89fb      	ldrh	r3, [r7, #14]
 8002c2a:	f249 1263 	movw	r2, #37219	; 0x9163
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <readID+0x222>
 8002c32:	89fb      	ldrh	r3, [r7, #14]
 8002c34:	e028      	b.n	8002c88 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8002c36:	20d3      	movs	r0, #211	; 0xd3
 8002c38:	f7ff fb8c 	bl	8002354 <readReg32>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8002c40:	89fb      	ldrh	r3, [r7, #14]
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	2b93      	cmp	r3, #147	; 0x93
 8002c4c:	d00b      	beq.n	8002c66 <readID+0x252>
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	2b94      	cmp	r3, #148	; 0x94
 8002c52:	d008      	beq.n	8002c66 <readID+0x252>
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	2b98      	cmp	r3, #152	; 0x98
 8002c58:	d005      	beq.n	8002c66 <readID+0x252>
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	2b77      	cmp	r3, #119	; 0x77
 8002c5e:	d002      	beq.n	8002c66 <readID+0x252>
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	2b16      	cmp	r3, #22
 8002c64:	d101      	bne.n	8002c6a <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8002c66:	89fb      	ldrh	r3, [r7, #14]
 8002c68:	e00e      	b.n	8002c88 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 8002c6a:	89fb      	ldrh	r3, [r7, #14]
 8002c6c:	2bd3      	cmp	r3, #211	; 0xd3
 8002c6e:	d004      	beq.n	8002c7a <readID+0x266>
 8002c70:	89fb      	ldrh	r3, [r7, #14]
 8002c72:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d101      	bne.n	8002c7e <readID+0x26a>
        return ret;             //16-bit write-only bus
 8002c7a:	89fb      	ldrh	r3, [r7, #14]
 8002c7c:	e004      	b.n	8002c88 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 8002c7e:	2100      	movs	r1, #0
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7ff fa8b 	bl	800219c <readReg>
 8002c86:	4603      	mov	r3, r0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	08008c10 	.word	0x08008c10

08002c94 <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b08b      	sub	sp, #44	; 0x2c
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60ba      	str	r2, [r7, #8]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	81fb      	strh	r3, [r7, #14]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	81bb      	strh	r3, [r7, #12]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 8002caa:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <readGRAM+0x88>)
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 8002cb0:	88fa      	ldrh	r2, [r7, #6]
 8002cb2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002cb4:	fb12 f303 	smulbb	r3, r2, r3
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	847b      	strh	r3, [r7, #34]	; 0x22
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	843b      	strh	r3, [r7, #32]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8002cc4:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <readGRAM+0x8c>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d107      	bne.n	8002cdc <readGRAM+0x48>
 8002ccc:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <readGRAM+0x90>)
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <readGRAM+0x48>
        _MR = 0x2E;
 8002cd8:	232e      	movs	r3, #46	; 0x2e
 8002cda:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <readGRAM+0x94>)
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	f241 6202 	movw	r2, #5634	; 0x1602
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d101      	bne.n	8002cec <readGRAM+0x58>
 8002ce8:	232e      	movs	r3, #46	; 0x2e
 8002cea:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8002cec:	89fa      	ldrh	r2, [r7, #14]
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	b21c      	sxth	r4, r3
 8002cfa:	89ba      	ldrh	r2, [r7, #12]
 8002cfc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002cfe:	4413      	add	r3, r2
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	b21b      	sxth	r3, r3
 8002d08:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002d0c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002d10:	4622      	mov	r2, r4
 8002d12:	f001 f921 	bl	8003f58 <setAddrWindow>
    while (n > 0) {
 8002d16:	f000 bd74 	b.w	8003802 <readGRAM+0xb6e>
 8002d1a:	bf00      	nop
 8002d1c:	2000028a 	.word	0x2000028a
 8002d20:	20000064 	.word	0x20000064
 8002d24:	2000028c 	.word	0x2000028c
 8002d28:	2000029a 	.word	0x2000029a
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 8002d2c:	4b9d      	ldr	r3, [pc, #628]	; (8002fa4 <readGRAM+0x310>)
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d111      	bne.n	8002d5c <readGRAM+0xc8>
            WriteCmdData(_MC, x + col);
 8002d38:	4b9b      	ldr	r3, [pc, #620]	; (8002fa8 <readGRAM+0x314>)
 8002d3a:	8818      	ldrh	r0, [r3, #0]
 8002d3c:	89fa      	ldrh	r2, [r7, #14]
 8002d3e:	8bfb      	ldrh	r3, [r7, #30]
 8002d40:	4413      	add	r3, r2
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	4619      	mov	r1, r3
 8002d46:	f7fe fbbb 	bl	80014c0 <WriteCmdData>
            WriteCmdData(_MP, y + row);
 8002d4a:	4b98      	ldr	r3, [pc, #608]	; (8002fac <readGRAM+0x318>)
 8002d4c:	8818      	ldrh	r0, [r3, #0]
 8002d4e:	89ba      	ldrh	r2, [r7, #12]
 8002d50:	8c3b      	ldrh	r3, [r7, #32]
 8002d52:	4413      	add	r3, r2
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	4619      	mov	r1, r3
 8002d58:	f7fe fbb2 	bl	80014c0 <WriteCmdData>
        }
        CS_ACTIVE;
 8002d5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d60:	4893      	ldr	r0, [pc, #588]	; (8002fb0 <readGRAM+0x31c>)
 8002d62:	f7fe fa97 	bl	8001294 <PIN_LOW>
        WriteCmd(_MR);
 8002d66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d6a:	4892      	ldr	r0, [pc, #584]	; (8002fb4 <readGRAM+0x320>)
 8002d6c:	f7fe fa92 	bl	8001294 <PIN_LOW>
 8002d70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d72:	0a1b      	lsrs	r3, r3, #8
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	777b      	strb	r3, [r7, #29]
 8002d78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d7a:	773b      	strb	r3, [r7, #28]
 8002d7c:	4b8d      	ldr	r3, [pc, #564]	; (8002fb4 <readGRAM+0x320>)
 8002d7e:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002d82:	619a      	str	r2, [r3, #24]
 8002d84:	4b8c      	ldr	r3, [pc, #560]	; (8002fb8 <readGRAM+0x324>)
 8002d86:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002d8a:	619a      	str	r2, [r3, #24]
 8002d8c:	4b8b      	ldr	r3, [pc, #556]	; (8002fbc <readGRAM+0x328>)
 8002d8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d92:	619a      	str	r2, [r3, #24]
 8002d94:	7f7b      	ldrb	r3, [r7, #29]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4a88      	ldr	r2, [pc, #544]	; (8002fbc <readGRAM+0x328>)
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	6193      	str	r3, [r2, #24]
 8002da0:	7f7b      	ldrb	r3, [r7, #29]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002da8:	7f7b      	ldrb	r3, [r7, #29]
 8002daa:	015b      	lsls	r3, r3, #5
 8002dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db0:	431a      	orrs	r2, r3
 8002db2:	7f7b      	ldrb	r3, [r7, #29]
 8002db4:	015b      	lsls	r3, r3, #5
 8002db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	4b7e      	ldr	r3, [pc, #504]	; (8002fb8 <readGRAM+0x324>)
 8002dbe:	619a      	str	r2, [r3, #24]
 8002dc0:	7f7b      	ldrb	r3, [r7, #29]
 8002dc2:	105b      	asrs	r3, r3, #1
 8002dc4:	f003 0208 	and.w	r2, r3, #8
 8002dc8:	7f7b      	ldrb	r3, [r7, #29]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	7f7b      	ldrb	r3, [r7, #29]
 8002dd4:	105b      	asrs	r3, r3, #1
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	7f7b      	ldrb	r3, [r7, #29]
 8002dde:	10db      	asrs	r3, r3, #3
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	431a      	orrs	r2, r3
 8002de6:	4b73      	ldr	r3, [pc, #460]	; (8002fb4 <readGRAM+0x320>)
 8002de8:	619a      	str	r2, [r3, #24]
 8002dea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dee:	4871      	ldr	r0, [pc, #452]	; (8002fb4 <readGRAM+0x320>)
 8002df0:	f7fe fa50 	bl	8001294 <PIN_LOW>
 8002df4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002df8:	486e      	ldr	r0, [pc, #440]	; (8002fb4 <readGRAM+0x320>)
 8002dfa:	f7fe fa5b 	bl	80012b4 <PIN_HIGH>
 8002dfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e02:	486c      	ldr	r0, [pc, #432]	; (8002fb4 <readGRAM+0x320>)
 8002e04:	f7fe fa56 	bl	80012b4 <PIN_HIGH>
 8002e08:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <readGRAM+0x320>)
 8002e0a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002e0e:	619a      	str	r2, [r3, #24]
 8002e10:	4b69      	ldr	r3, [pc, #420]	; (8002fb8 <readGRAM+0x324>)
 8002e12:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002e16:	619a      	str	r2, [r3, #24]
 8002e18:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <readGRAM+0x328>)
 8002e1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e1e:	619a      	str	r2, [r3, #24]
 8002e20:	7f3b      	ldrb	r3, [r7, #28]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4a65      	ldr	r2, [pc, #404]	; (8002fbc <readGRAM+0x328>)
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	6193      	str	r3, [r2, #24]
 8002e2c:	7f3b      	ldrb	r3, [r7, #28]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002e34:	7f3b      	ldrb	r3, [r7, #28]
 8002e36:	015b      	lsls	r3, r3, #5
 8002e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	7f3b      	ldrb	r3, [r7, #28]
 8002e40:	015b      	lsls	r3, r3, #5
 8002e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e46:	431a      	orrs	r2, r3
 8002e48:	4b5b      	ldr	r3, [pc, #364]	; (8002fb8 <readGRAM+0x324>)
 8002e4a:	619a      	str	r2, [r3, #24]
 8002e4c:	7f3b      	ldrb	r3, [r7, #28]
 8002e4e:	105b      	asrs	r3, r3, #1
 8002e50:	f003 0208 	and.w	r2, r3, #8
 8002e54:	7f3b      	ldrb	r3, [r7, #28]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	7f3b      	ldrb	r3, [r7, #28]
 8002e60:	105b      	asrs	r3, r3, #1
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	431a      	orrs	r2, r3
 8002e68:	7f3b      	ldrb	r3, [r7, #28]
 8002e6a:	10db      	asrs	r3, r3, #3
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	431a      	orrs	r2, r3
 8002e72:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <readGRAM+0x320>)
 8002e74:	619a      	str	r2, [r3, #24]
 8002e76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e7a:	484e      	ldr	r0, [pc, #312]	; (8002fb4 <readGRAM+0x320>)
 8002e7c:	f7fe fa0a 	bl	8001294 <PIN_LOW>
 8002e80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e84:	484b      	ldr	r0, [pc, #300]	; (8002fb4 <readGRAM+0x320>)
 8002e86:	f7fe fa15 	bl	80012b4 <PIN_HIGH>
 8002e8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e8e:	4849      	ldr	r0, [pc, #292]	; (8002fb4 <readGRAM+0x320>)
 8002e90:	f7fe fa10 	bl	80012b4 <PIN_HIGH>
 8002e94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e98:	4846      	ldr	r0, [pc, #280]	; (8002fb4 <readGRAM+0x320>)
 8002e9a:	f7fe fa0b 	bl	80012b4 <PIN_HIGH>
        setReadDir();
 8002e9e:	f7fe fb35 	bl	800150c <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 8002ea2:	4b40      	ldr	r3, [pc, #256]	; (8002fa4 <readGRAM+0x310>)
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f040 816a 	bne.w	8003184 <readGRAM+0x4f0>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8002eb0:	4b3c      	ldr	r3, [pc, #240]	; (8002fa4 <readGRAM+0x310>)
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d105      	bne.n	8002ec8 <readGRAM+0x234>
 8002ebc:	4b40      	ldr	r3, [pc, #256]	; (8002fc0 <readGRAM+0x32c>)
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	f241 2289 	movw	r2, #4745	; 0x1289
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d17d      	bne.n	8002fc4 <readGRAM+0x330>
            READ_8(r);
 8002ec8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ecc:	4839      	ldr	r0, [pc, #228]	; (8002fb4 <readGRAM+0x320>)
 8002ece:	f7fe f9f1 	bl	80012b4 <PIN_HIGH>
 8002ed2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ed6:	4837      	ldr	r0, [pc, #220]	; (8002fb4 <readGRAM+0x320>)
 8002ed8:	f7fe f9dc 	bl	8001294 <PIN_LOW>
 8002edc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ee0:	4834      	ldr	r0, [pc, #208]	; (8002fb4 <readGRAM+0x320>)
 8002ee2:	f7fe f9d7 	bl	8001294 <PIN_LOW>
 8002ee6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002eea:	4832      	ldr	r0, [pc, #200]	; (8002fb4 <readGRAM+0x320>)
 8002eec:	f7fe f9d2 	bl	8001294 <PIN_LOW>
 8002ef0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ef4:	482f      	ldr	r0, [pc, #188]	; (8002fb4 <readGRAM+0x320>)
 8002ef6:	f7fe f9cd 	bl	8001294 <PIN_LOW>
 8002efa:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <readGRAM+0x328>)
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	085b      	lsrs	r3, r3, #1
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <readGRAM+0x324>)
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	0a1b      	lsrs	r3, r3, #8
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	4313      	orrs	r3, r2
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	4b27      	ldr	r3, [pc, #156]	; (8002fb8 <readGRAM+0x324>)
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <readGRAM+0x324>)
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <readGRAM+0x320>)
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <readGRAM+0x320>)
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	085b      	lsrs	r3, r3, #1
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	4313      	orrs	r3, r2
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <readGRAM+0x320>)
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	4313      	orrs	r3, r2
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <readGRAM+0x320>)
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	75fb      	strb	r3, [r7, #23]
 8002f8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f90:	4808      	ldr	r0, [pc, #32]	; (8002fb4 <readGRAM+0x320>)
 8002f92:	f7fe f98f 	bl	80012b4 <PIN_HIGH>
 8002f96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f9a:	4806      	ldr	r0, [pc, #24]	; (8002fb4 <readGRAM+0x320>)
 8002f9c:	f7fe f98a 	bl	80012b4 <PIN_HIGH>
 8002fa0:	e0f0      	b.n	8003184 <readGRAM+0x4f0>
 8002fa2:	bf00      	nop
 8002fa4:	2000028c 	.word	0x2000028c
 8002fa8:	20000294 	.word	0x20000294
 8002fac:	20000292 	.word	0x20000292
 8002fb0:	40020400 	.word	0x40020400
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40021400 	.word	0x40021400
 8002fbc:	40021800 	.word	0x40021800
 8002fc0:	2000029a 	.word	0x2000029a
        } else {
            READ_16(dummy);
 8002fc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fc8:	48a8      	ldr	r0, [pc, #672]	; (800326c <readGRAM+0x5d8>)
 8002fca:	f7fe f973 	bl	80012b4 <PIN_HIGH>
 8002fce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fd2:	48a6      	ldr	r0, [pc, #664]	; (800326c <readGRAM+0x5d8>)
 8002fd4:	f7fe f95e 	bl	8001294 <PIN_LOW>
 8002fd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fdc:	48a3      	ldr	r0, [pc, #652]	; (800326c <readGRAM+0x5d8>)
 8002fde:	f7fe f959 	bl	8001294 <PIN_LOW>
 8002fe2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fe6:	48a1      	ldr	r0, [pc, #644]	; (800326c <readGRAM+0x5d8>)
 8002fe8:	f7fe f954 	bl	8001294 <PIN_LOW>
 8002fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ff0:	489e      	ldr	r0, [pc, #632]	; (800326c <readGRAM+0x5d8>)
 8002ff2:	f7fe f94f 	bl	8001294 <PIN_LOW>
 8002ff6:	4b9e      	ldr	r3, [pc, #632]	; (8003270 <readGRAM+0x5dc>)
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	085b      	lsrs	r3, r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	b2da      	uxtb	r2, r3
 8003004:	4b9b      	ldr	r3, [pc, #620]	; (8003274 <readGRAM+0x5e0>)
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	0a1b      	lsrs	r3, r3, #8
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	b2db      	uxtb	r3, r3
 8003012:	4313      	orrs	r3, r2
 8003014:	b2da      	uxtb	r2, r3
 8003016:	4b97      	ldr	r3, [pc, #604]	; (8003274 <readGRAM+0x5e0>)
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	b2db      	uxtb	r3, r3
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	b2db      	uxtb	r3, r3
 8003024:	4313      	orrs	r3, r2
 8003026:	b2da      	uxtb	r2, r3
 8003028:	4b92      	ldr	r3, [pc, #584]	; (8003274 <readGRAM+0x5e0>)
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	095b      	lsrs	r3, r3, #5
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	b2db      	uxtb	r3, r3
 8003036:	4313      	orrs	r3, r2
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4b8c      	ldr	r3, [pc, #560]	; (800326c <readGRAM+0x5d8>)
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	b2db      	uxtb	r3, r3
 800304a:	4313      	orrs	r3, r2
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4b87      	ldr	r3, [pc, #540]	; (800326c <readGRAM+0x5d8>)
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	b2db      	uxtb	r3, r3
 800305c:	4313      	orrs	r3, r2
 800305e:	b2da      	uxtb	r2, r3
 8003060:	4b82      	ldr	r3, [pc, #520]	; (800326c <readGRAM+0x5d8>)
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306e:	b2db      	uxtb	r3, r3
 8003070:	4313      	orrs	r3, r2
 8003072:	b2da      	uxtb	r2, r3
 8003074:	4b7d      	ldr	r3, [pc, #500]	; (800326c <readGRAM+0x5d8>)
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003082:	b2db      	uxtb	r3, r3
 8003084:	4313      	orrs	r3, r2
 8003086:	76fb      	strb	r3, [r7, #27]
 8003088:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800308c:	4877      	ldr	r0, [pc, #476]	; (800326c <readGRAM+0x5d8>)
 800308e:	f7fe f911 	bl	80012b4 <PIN_HIGH>
 8003092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003096:	4875      	ldr	r0, [pc, #468]	; (800326c <readGRAM+0x5d8>)
 8003098:	f7fe f90c 	bl	80012b4 <PIN_HIGH>
 800309c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030a0:	4872      	ldr	r0, [pc, #456]	; (800326c <readGRAM+0x5d8>)
 80030a2:	f7fe f907 	bl	80012b4 <PIN_HIGH>
 80030a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030aa:	4870      	ldr	r0, [pc, #448]	; (800326c <readGRAM+0x5d8>)
 80030ac:	f7fe f8f2 	bl	8001294 <PIN_LOW>
 80030b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030b4:	486d      	ldr	r0, [pc, #436]	; (800326c <readGRAM+0x5d8>)
 80030b6:	f7fe f8ed 	bl	8001294 <PIN_LOW>
 80030ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030be:	486b      	ldr	r0, [pc, #428]	; (800326c <readGRAM+0x5d8>)
 80030c0:	f7fe f8e8 	bl	8001294 <PIN_LOW>
 80030c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030c8:	4868      	ldr	r0, [pc, #416]	; (800326c <readGRAM+0x5d8>)
 80030ca:	f7fe f8e3 	bl	8001294 <PIN_LOW>
 80030ce:	4b68      	ldr	r3, [pc, #416]	; (8003270 <readGRAM+0x5dc>)
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	4b65      	ldr	r3, [pc, #404]	; (8003274 <readGRAM+0x5e0>)
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	0a1b      	lsrs	r3, r3, #8
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	4313      	orrs	r3, r2
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	4b61      	ldr	r3, [pc, #388]	; (8003274 <readGRAM+0x5e0>)
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	4313      	orrs	r3, r2
 80030fe:	b29a      	uxth	r2, r3
 8003100:	4b5c      	ldr	r3, [pc, #368]	; (8003274 <readGRAM+0x5e0>)
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	b29b      	uxth	r3, r3
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	b29b      	uxth	r3, r3
 800310e:	4313      	orrs	r3, r2
 8003110:	b29a      	uxth	r2, r3
 8003112:	4b56      	ldr	r3, [pc, #344]	; (800326c <readGRAM+0x5d8>)
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	b29b      	uxth	r3, r3
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	b29b      	uxth	r3, r3
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	b29b      	uxth	r3, r3
 8003122:	4313      	orrs	r3, r2
 8003124:	b29a      	uxth	r2, r3
 8003126:	4b51      	ldr	r3, [pc, #324]	; (800326c <readGRAM+0x5d8>)
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	085b      	lsrs	r3, r3, #1
 800312c:	b29b      	uxth	r3, r3
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	b29b      	uxth	r3, r3
 8003134:	4313      	orrs	r3, r2
 8003136:	b29a      	uxth	r2, r3
 8003138:	4b4c      	ldr	r3, [pc, #304]	; (800326c <readGRAM+0x5d8>)
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	b29b      	uxth	r3, r3
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	b29b      	uxth	r3, r3
 8003142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003146:	b29b      	uxth	r3, r3
 8003148:	4313      	orrs	r3, r2
 800314a:	b29a      	uxth	r2, r3
 800314c:	4b47      	ldr	r3, [pc, #284]	; (800326c <readGRAM+0x5d8>)
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	b29b      	uxth	r3, r3
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	b29b      	uxth	r3, r3
 8003156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315a:	b29b      	uxth	r3, r3
 800315c:	4313      	orrs	r3, r2
 800315e:	833b      	strh	r3, [r7, #24]
 8003160:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003164:	4841      	ldr	r0, [pc, #260]	; (800326c <readGRAM+0x5d8>)
 8003166:	f7fe f8a5 	bl	80012b4 <PIN_HIGH>
 800316a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800316e:	483f      	ldr	r0, [pc, #252]	; (800326c <readGRAM+0x5d8>)
 8003170:	f7fe f8a0 	bl	80012b4 <PIN_HIGH>
 8003174:	7efb      	ldrb	r3, [r7, #27]
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	b21a      	sxth	r2, r3
 800317a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	b21b      	sxth	r3, r3
 8003182:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8003184:	4b3c      	ldr	r3, [pc, #240]	; (8003278 <readGRAM+0x5e4>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	f241 5211 	movw	r2, #5393	; 0x1511
 800318c:	4293      	cmp	r3, r2
 800318e:	f040 8302 	bne.w	8003796 <readGRAM+0xb02>
 8003192:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003196:	4835      	ldr	r0, [pc, #212]	; (800326c <readGRAM+0x5d8>)
 8003198:	f7fe f88c 	bl	80012b4 <PIN_HIGH>
 800319c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031a0:	4832      	ldr	r0, [pc, #200]	; (800326c <readGRAM+0x5d8>)
 80031a2:	f7fe f877 	bl	8001294 <PIN_LOW>
 80031a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031aa:	4830      	ldr	r0, [pc, #192]	; (800326c <readGRAM+0x5d8>)
 80031ac:	f7fe f872 	bl	8001294 <PIN_LOW>
 80031b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031b4:	482d      	ldr	r0, [pc, #180]	; (800326c <readGRAM+0x5d8>)
 80031b6:	f7fe f86d 	bl	8001294 <PIN_LOW>
 80031ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031be:	482b      	ldr	r0, [pc, #172]	; (800326c <readGRAM+0x5d8>)
 80031c0:	f7fe f868 	bl	8001294 <PIN_LOW>
 80031c4:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <readGRAM+0x5dc>)
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	085b      	lsrs	r3, r3, #1
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	4b28      	ldr	r3, [pc, #160]	; (8003274 <readGRAM+0x5e0>)
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	4313      	orrs	r3, r2
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	4b23      	ldr	r3, [pc, #140]	; (8003274 <readGRAM+0x5e0>)
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	4313      	orrs	r3, r2
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	4b1f      	ldr	r3, [pc, #124]	; (8003274 <readGRAM+0x5e0>)
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	b2db      	uxtb	r3, r3
 8003204:	4313      	orrs	r3, r2
 8003206:	b2da      	uxtb	r2, r3
 8003208:	4b18      	ldr	r3, [pc, #96]	; (800326c <readGRAM+0x5d8>)
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	b2db      	uxtb	r3, r3
 8003218:	4313      	orrs	r3, r2
 800321a:	b2da      	uxtb	r2, r3
 800321c:	4b13      	ldr	r3, [pc, #76]	; (800326c <readGRAM+0x5d8>)
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	085b      	lsrs	r3, r3, #1
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	b2db      	uxtb	r3, r3
 800322a:	4313      	orrs	r3, r2
 800322c:	b2da      	uxtb	r2, r3
 800322e:	4b0f      	ldr	r3, [pc, #60]	; (800326c <readGRAM+0x5d8>)
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	b2db      	uxtb	r3, r3
 800323e:	4313      	orrs	r3, r2
 8003240:	b2da      	uxtb	r2, r3
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <readGRAM+0x5d8>)
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003250:	b2db      	uxtb	r3, r3
 8003252:	4313      	orrs	r3, r2
 8003254:	75fb      	strb	r3, [r7, #23]
 8003256:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800325a:	4804      	ldr	r0, [pc, #16]	; (800326c <readGRAM+0x5d8>)
 800325c:	f7fe f82a 	bl	80012b4 <PIN_HIGH>
 8003260:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003264:	4801      	ldr	r0, [pc, #4]	; (800326c <readGRAM+0x5d8>)
 8003266:	f7fe f825 	bl	80012b4 <PIN_HIGH>
        while (n)
 800326a:	e294      	b.n	8003796 <readGRAM+0xb02>
 800326c:	40021000 	.word	0x40021000
 8003270:	40021800 	.word	0x40021800
 8003274:	40021400 	.word	0x40021400
 8003278:	2000029a 	.word	0x2000029a
        {
            if (_lcd_capable & READ_24BITS)
 800327c:	4bac      	ldr	r3, [pc, #688]	; (8003530 <readGRAM+0x89c>)
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8164 	beq.w	8003552 <readGRAM+0x8be>
            {
                READ_8(r);
 800328a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800328e:	48a9      	ldr	r0, [pc, #676]	; (8003534 <readGRAM+0x8a0>)
 8003290:	f7fe f810 	bl	80012b4 <PIN_HIGH>
 8003294:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003298:	48a6      	ldr	r0, [pc, #664]	; (8003534 <readGRAM+0x8a0>)
 800329a:	f7fd fffb 	bl	8001294 <PIN_LOW>
 800329e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032a2:	48a4      	ldr	r0, [pc, #656]	; (8003534 <readGRAM+0x8a0>)
 80032a4:	f7fd fff6 	bl	8001294 <PIN_LOW>
 80032a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032ac:	48a1      	ldr	r0, [pc, #644]	; (8003534 <readGRAM+0x8a0>)
 80032ae:	f7fd fff1 	bl	8001294 <PIN_LOW>
 80032b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032b6:	489f      	ldr	r0, [pc, #636]	; (8003534 <readGRAM+0x8a0>)
 80032b8:	f7fd ffec 	bl	8001294 <PIN_LOW>
 80032bc:	4b9e      	ldr	r3, [pc, #632]	; (8003538 <readGRAM+0x8a4>)
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	085b      	lsrs	r3, r3, #1
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4b9c      	ldr	r3, [pc, #624]	; (800353c <readGRAM+0x8a8>)
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	4313      	orrs	r3, r2
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	4b97      	ldr	r3, [pc, #604]	; (800353c <readGRAM+0x8a8>)
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	4313      	orrs	r3, r2
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	4b93      	ldr	r3, [pc, #588]	; (800353c <readGRAM+0x8a8>)
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	4313      	orrs	r3, r2
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	4b8c      	ldr	r3, [pc, #560]	; (8003534 <readGRAM+0x8a0>)
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	b2db      	uxtb	r3, r3
 8003310:	4313      	orrs	r3, r2
 8003312:	b2da      	uxtb	r2, r3
 8003314:	4b87      	ldr	r3, [pc, #540]	; (8003534 <readGRAM+0x8a0>)
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	b2db      	uxtb	r3, r3
 8003322:	4313      	orrs	r3, r2
 8003324:	b2da      	uxtb	r2, r3
 8003326:	4b83      	ldr	r3, [pc, #524]	; (8003534 <readGRAM+0x8a0>)
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	b2db      	uxtb	r3, r3
 8003336:	4313      	orrs	r3, r2
 8003338:	b2da      	uxtb	r2, r3
 800333a:	4b7e      	ldr	r3, [pc, #504]	; (8003534 <readGRAM+0x8a0>)
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4313      	orrs	r3, r2
 800334c:	75fb      	strb	r3, [r7, #23]
 800334e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003352:	4878      	ldr	r0, [pc, #480]	; (8003534 <readGRAM+0x8a0>)
 8003354:	f7fd ffae 	bl	80012b4 <PIN_HIGH>
 8003358:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800335c:	4875      	ldr	r0, [pc, #468]	; (8003534 <readGRAM+0x8a0>)
 800335e:	f7fd ffa9 	bl	80012b4 <PIN_HIGH>
                READ_8(g);
 8003362:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003366:	4873      	ldr	r0, [pc, #460]	; (8003534 <readGRAM+0x8a0>)
 8003368:	f7fd ffa4 	bl	80012b4 <PIN_HIGH>
 800336c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003370:	4870      	ldr	r0, [pc, #448]	; (8003534 <readGRAM+0x8a0>)
 8003372:	f7fd ff8f 	bl	8001294 <PIN_LOW>
 8003376:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800337a:	486e      	ldr	r0, [pc, #440]	; (8003534 <readGRAM+0x8a0>)
 800337c:	f7fd ff8a 	bl	8001294 <PIN_LOW>
 8003380:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003384:	486b      	ldr	r0, [pc, #428]	; (8003534 <readGRAM+0x8a0>)
 8003386:	f7fd ff85 	bl	8001294 <PIN_LOW>
 800338a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800338e:	4869      	ldr	r0, [pc, #420]	; (8003534 <readGRAM+0x8a0>)
 8003390:	f7fd ff80 	bl	8001294 <PIN_LOW>
 8003394:	4b68      	ldr	r3, [pc, #416]	; (8003538 <readGRAM+0x8a4>)
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	4b66      	ldr	r3, [pc, #408]	; (800353c <readGRAM+0x8a8>)
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	0a1b      	lsrs	r3, r3, #8
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	4313      	orrs	r3, r2
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	4b61      	ldr	r3, [pc, #388]	; (800353c <readGRAM+0x8a8>)
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	4313      	orrs	r3, r2
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4b5d      	ldr	r3, [pc, #372]	; (800353c <readGRAM+0x8a8>)
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	4313      	orrs	r3, r2
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	4b56      	ldr	r3, [pc, #344]	; (8003534 <readGRAM+0x8a0>)
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	4313      	orrs	r3, r2
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	4b51      	ldr	r3, [pc, #324]	; (8003534 <readGRAM+0x8a0>)
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	085b      	lsrs	r3, r3, #1
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	4313      	orrs	r3, r2
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	4b4d      	ldr	r3, [pc, #308]	; (8003534 <readGRAM+0x8a0>)
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340c:	b2db      	uxtb	r3, r3
 800340e:	4313      	orrs	r3, r2
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4b48      	ldr	r3, [pc, #288]	; (8003534 <readGRAM+0x8a0>)
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003420:	b2db      	uxtb	r3, r3
 8003422:	4313      	orrs	r3, r2
 8003424:	757b      	strb	r3, [r7, #21]
 8003426:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800342a:	4842      	ldr	r0, [pc, #264]	; (8003534 <readGRAM+0x8a0>)
 800342c:	f7fd ff42 	bl	80012b4 <PIN_HIGH>
 8003430:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003434:	483f      	ldr	r0, [pc, #252]	; (8003534 <readGRAM+0x8a0>)
 8003436:	f7fd ff3d 	bl	80012b4 <PIN_HIGH>
                READ_8(b);
 800343a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800343e:	483d      	ldr	r0, [pc, #244]	; (8003534 <readGRAM+0x8a0>)
 8003440:	f7fd ff38 	bl	80012b4 <PIN_HIGH>
 8003444:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003448:	483a      	ldr	r0, [pc, #232]	; (8003534 <readGRAM+0x8a0>)
 800344a:	f7fd ff23 	bl	8001294 <PIN_LOW>
 800344e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003452:	4838      	ldr	r0, [pc, #224]	; (8003534 <readGRAM+0x8a0>)
 8003454:	f7fd ff1e 	bl	8001294 <PIN_LOW>
 8003458:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800345c:	4835      	ldr	r0, [pc, #212]	; (8003534 <readGRAM+0x8a0>)
 800345e:	f7fd ff19 	bl	8001294 <PIN_LOW>
 8003462:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003466:	4833      	ldr	r0, [pc, #204]	; (8003534 <readGRAM+0x8a0>)
 8003468:	f7fd ff14 	bl	8001294 <PIN_LOW>
 800346c:	4b32      	ldr	r3, [pc, #200]	; (8003538 <readGRAM+0x8a4>)
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	085b      	lsrs	r3, r3, #1
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	b2da      	uxtb	r2, r3
 800347a:	4b30      	ldr	r3, [pc, #192]	; (800353c <readGRAM+0x8a8>)
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	0a1b      	lsrs	r3, r3, #8
 8003480:	b2db      	uxtb	r3, r3
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	b2db      	uxtb	r3, r3
 8003488:	4313      	orrs	r3, r2
 800348a:	b2da      	uxtb	r2, r3
 800348c:	4b2b      	ldr	r3, [pc, #172]	; (800353c <readGRAM+0x8a8>)
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	b2db      	uxtb	r3, r3
 800349a:	4313      	orrs	r3, r2
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4b27      	ldr	r3, [pc, #156]	; (800353c <readGRAM+0x8a8>)
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	4313      	orrs	r3, r2
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	4b20      	ldr	r3, [pc, #128]	; (8003534 <readGRAM+0x8a0>)
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	4313      	orrs	r3, r2
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <readGRAM+0x8a0>)
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	085b      	lsrs	r3, r3, #1
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	4313      	orrs	r3, r2
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	4b17      	ldr	r3, [pc, #92]	; (8003534 <readGRAM+0x8a0>)
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	4313      	orrs	r3, r2
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4b12      	ldr	r3, [pc, #72]	; (8003534 <readGRAM+0x8a0>)
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	4313      	orrs	r3, r2
 80034fc:	753b      	strb	r3, [r7, #20]
 80034fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003502:	480c      	ldr	r0, [pc, #48]	; (8003534 <readGRAM+0x8a0>)
 8003504:	f7fd fed6 	bl	80012b4 <PIN_HIGH>
 8003508:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800350c:	4809      	ldr	r0, [pc, #36]	; (8003534 <readGRAM+0x8a0>)
 800350e:	f7fd fed1 	bl	80012b4 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <readGRAM+0x89c>)
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d010      	beq.n	8003540 <readGRAM+0x8ac>
                    ret = color565(b, g, r);
 800351e:	7dfa      	ldrb	r2, [r7, #23]
 8003520:	7d79      	ldrb	r1, [r7, #21]
 8003522:	7d3b      	ldrb	r3, [r7, #20]
 8003524:	4618      	mov	r0, r3
 8003526:	f7fd ff8d 	bl	8001444 <color565>
 800352a:	4603      	mov	r3, r0
 800352c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800352e:	e117      	b.n	8003760 <readGRAM+0xacc>
 8003530:	2000028c 	.word	0x2000028c
 8003534:	40021000 	.word	0x40021000
 8003538:	40021800 	.word	0x40021800
 800353c:	40021400 	.word	0x40021400
                else
                    ret = color565(r, g, b);
 8003540:	7d3a      	ldrb	r2, [r7, #20]
 8003542:	7d79      	ldrb	r1, [r7, #21]
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fd ff7c 	bl	8001444 <color565>
 800354c:	4603      	mov	r3, r0
 800354e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003550:	e106      	b.n	8003760 <readGRAM+0xacc>
            } else
            {
                READ_16(ret);
 8003552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003556:	4893      	ldr	r0, [pc, #588]	; (80037a4 <readGRAM+0xb10>)
 8003558:	f7fd feac 	bl	80012b4 <PIN_HIGH>
 800355c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003560:	4890      	ldr	r0, [pc, #576]	; (80037a4 <readGRAM+0xb10>)
 8003562:	f7fd fe97 	bl	8001294 <PIN_LOW>
 8003566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800356a:	488e      	ldr	r0, [pc, #568]	; (80037a4 <readGRAM+0xb10>)
 800356c:	f7fd fe92 	bl	8001294 <PIN_LOW>
 8003570:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003574:	488b      	ldr	r0, [pc, #556]	; (80037a4 <readGRAM+0xb10>)
 8003576:	f7fd fe8d 	bl	8001294 <PIN_LOW>
 800357a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800357e:	4889      	ldr	r0, [pc, #548]	; (80037a4 <readGRAM+0xb10>)
 8003580:	f7fd fe88 	bl	8001294 <PIN_LOW>
 8003584:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <readGRAM+0xb14>)
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	b2da      	uxtb	r2, r3
 8003592:	4b86      	ldr	r3, [pc, #536]	; (80037ac <readGRAM+0xb18>)
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	0a1b      	lsrs	r3, r3, #8
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	4313      	orrs	r3, r2
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	4b81      	ldr	r3, [pc, #516]	; (80037ac <readGRAM+0xb18>)
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	095b      	lsrs	r3, r3, #5
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	4313      	orrs	r3, r2
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4b7d      	ldr	r3, [pc, #500]	; (80037ac <readGRAM+0xb18>)
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	4313      	orrs	r3, r2
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	4b76      	ldr	r3, [pc, #472]	; (80037a4 <readGRAM+0xb10>)
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	4313      	orrs	r3, r2
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	4b71      	ldr	r3, [pc, #452]	; (80037a4 <readGRAM+0xb10>)
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	085b      	lsrs	r3, r3, #1
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	4313      	orrs	r3, r2
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	4b6d      	ldr	r3, [pc, #436]	; (80037a4 <readGRAM+0xb10>)
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	4313      	orrs	r3, r2
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4b68      	ldr	r3, [pc, #416]	; (80037a4 <readGRAM+0xb10>)
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003610:	b2db      	uxtb	r3, r3
 8003612:	4313      	orrs	r3, r2
 8003614:	75bb      	strb	r3, [r7, #22]
 8003616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800361a:	4862      	ldr	r0, [pc, #392]	; (80037a4 <readGRAM+0xb10>)
 800361c:	f7fd fe4a 	bl	80012b4 <PIN_HIGH>
 8003620:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003624:	485f      	ldr	r0, [pc, #380]	; (80037a4 <readGRAM+0xb10>)
 8003626:	f7fd fe45 	bl	80012b4 <PIN_HIGH>
 800362a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800362e:	485d      	ldr	r0, [pc, #372]	; (80037a4 <readGRAM+0xb10>)
 8003630:	f7fd fe40 	bl	80012b4 <PIN_HIGH>
 8003634:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003638:	485a      	ldr	r0, [pc, #360]	; (80037a4 <readGRAM+0xb10>)
 800363a:	f7fd fe2b 	bl	8001294 <PIN_LOW>
 800363e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003642:	4858      	ldr	r0, [pc, #352]	; (80037a4 <readGRAM+0xb10>)
 8003644:	f7fd fe26 	bl	8001294 <PIN_LOW>
 8003648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800364c:	4855      	ldr	r0, [pc, #340]	; (80037a4 <readGRAM+0xb10>)
 800364e:	f7fd fe21 	bl	8001294 <PIN_LOW>
 8003652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003656:	4853      	ldr	r0, [pc, #332]	; (80037a4 <readGRAM+0xb10>)
 8003658:	f7fd fe1c 	bl	8001294 <PIN_LOW>
 800365c:	4b52      	ldr	r3, [pc, #328]	; (80037a8 <readGRAM+0xb14>)
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	085b      	lsrs	r3, r3, #1
 8003662:	b29b      	uxth	r3, r3
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	4b50      	ldr	r3, [pc, #320]	; (80037ac <readGRAM+0xb18>)
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	b29b      	uxth	r3, r3
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	b29b      	uxth	r3, r3
 8003678:	4313      	orrs	r3, r2
 800367a:	b29a      	uxth	r2, r3
 800367c:	4b4b      	ldr	r3, [pc, #300]	; (80037ac <readGRAM+0xb18>)
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	b29b      	uxth	r3, r3
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	b29b      	uxth	r3, r3
 800368a:	4313      	orrs	r3, r2
 800368c:	b29a      	uxth	r2, r3
 800368e:	4b47      	ldr	r3, [pc, #284]	; (80037ac <readGRAM+0xb18>)
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	b29b      	uxth	r3, r3
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	b29b      	uxth	r3, r3
 800369c:	4313      	orrs	r3, r2
 800369e:	b29a      	uxth	r2, r3
 80036a0:	4b40      	ldr	r3, [pc, #256]	; (80037a4 <readGRAM+0xb10>)
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	4313      	orrs	r3, r2
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	4b3b      	ldr	r3, [pc, #236]	; (80037a4 <readGRAM+0xb10>)
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	4313      	orrs	r3, r2
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	4b37      	ldr	r3, [pc, #220]	; (80037a4 <readGRAM+0xb10>)
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	4313      	orrs	r3, r2
 80036d8:	b29a      	uxth	r2, r3
 80036da:	4b32      	ldr	r3, [pc, #200]	; (80037a4 <readGRAM+0xb10>)
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	4313      	orrs	r3, r2
 80036ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80036ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036f2:	482c      	ldr	r0, [pc, #176]	; (80037a4 <readGRAM+0xb10>)
 80036f4:	f7fd fdde 	bl	80012b4 <PIN_HIGH>
 80036f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036fc:	4829      	ldr	r0, [pc, #164]	; (80037a4 <readGRAM+0xb10>)
 80036fe:	f7fd fdd9 	bl	80012b4 <PIN_HIGH>
 8003702:	7dbb      	ldrb	r3, [r7, #22]
 8003704:	021b      	lsls	r3, r3, #8
 8003706:	b21a      	sxth	r2, r3
 8003708:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800370c:	4313      	orrs	r3, r2
 800370e:	b21b      	sxth	r3, r3
 8003710:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 8003712:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <readGRAM+0xb1c>)
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <readGRAM+0xa9e>
                    ret = (ret >> 8) | (ret << 8);
 800371e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003720:	0a1b      	lsrs	r3, r3, #8
 8003722:	b29b      	uxth	r3, r3
 8003724:	b21a      	sxth	r2, r3
 8003726:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	b21b      	sxth	r3, r3
 800372c:	4313      	orrs	r3, r2
 800372e:	b21b      	sxth	r3, r3
 8003730:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 8003732:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <readGRAM+0xb1c>)
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	d010      	beq.n	8003760 <readGRAM+0xacc>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 800373e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003742:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003746:	b21a      	sxth	r2, r3
 8003748:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800374a:	0adb      	lsrs	r3, r3, #11
 800374c:	b29b      	uxth	r3, r3
 800374e:	b21b      	sxth	r3, r3
 8003750:	4313      	orrs	r3, r2
 8003752:	b21a      	sxth	r2, r3
 8003754:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003756:	02db      	lsls	r3, r3, #11
 8003758:	b21b      	sxth	r3, r3
 800375a:	4313      	orrs	r3, r2
 800375c:	b21b      	sxth	r3, r3
 800375e:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 8003760:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <readGRAM+0xb20>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <readGRAM+0xae0>
 8003768:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800376a:	4618      	mov	r0, r3
 800376c:	f7fd fe18 	bl	80013a0 <color555_to_565>
 8003770:	4603      	mov	r3, r0
 8003772:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	1c9a      	adds	r2, r3, #2
 8003778:	60ba      	str	r2, [r7, #8]
 800377a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800377c:	801a      	strh	r2, [r3, #0]
            n--;
 800377e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003782:	b29b      	uxth	r3, r3
 8003784:	3b01      	subs	r3, #1
 8003786:	b29b      	uxth	r3, r3
 8003788:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <readGRAM+0xb1c>)
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d010      	beq.n	80037b8 <readGRAM+0xb24>
        while (n)
 8003796:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800379a:	2b00      	cmp	r3, #0
 800379c:	f47f ad6e 	bne.w	800327c <readGRAM+0x5e8>
 80037a0:	e00b      	b.n	80037ba <readGRAM+0xb26>
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40021800 	.word	0x40021800
 80037ac:	40021400 	.word	0x40021400
 80037b0:	2000028c 	.word	0x2000028c
 80037b4:	20000065 	.word	0x20000065
                break;
 80037b8:	bf00      	nop
        }
        if (++col >= w) {
 80037ba:	8bfb      	ldrh	r3, [r7, #30]
 80037bc:	3301      	adds	r3, #1
 80037be:	b29b      	uxth	r3, r3
 80037c0:	83fb      	strh	r3, [r7, #30]
 80037c2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80037c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	db0d      	blt.n	80037ea <readGRAM+0xb56>
            col = 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 80037d2:	8c3b      	ldrh	r3, [r7, #32]
 80037d4:	3301      	adds	r3, #1
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	843b      	strh	r3, [r7, #32]
 80037da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80037de:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80037e2:	429a      	cmp	r2, r3
 80037e4:	db01      	blt.n	80037ea <readGRAM+0xb56>
                row = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 80037ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037ee:	4815      	ldr	r0, [pc, #84]	; (8003844 <readGRAM+0xbb0>)
 80037f0:	f7fd fd60 	bl	80012b4 <PIN_HIGH>
        CS_IDLE;
 80037f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037f8:	4813      	ldr	r0, [pc, #76]	; (8003848 <readGRAM+0xbb4>)
 80037fa:	f7fd fd5b 	bl	80012b4 <PIN_HIGH>
        setWriteDir();
 80037fe:	f7fd feb1 	bl	8001564 <setWriteDir>
    while (n > 0) {
 8003802:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003806:	2b00      	cmp	r3, #0
 8003808:	f73f aa90 	bgt.w	8002d2c <readGRAM+0x98>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 800380c:	4b0f      	ldr	r3, [pc, #60]	; (800384c <readGRAM+0xbb8>)
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d110      	bne.n	800383a <readGRAM+0xba6>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8003818:	f7fd fd8a 	bl	8001330 <width>
 800381c:	4603      	mov	r3, r0
 800381e:	3b01      	subs	r3, #1
 8003820:	b29b      	uxth	r3, r3
 8003822:	b21c      	sxth	r4, r3
 8003824:	f7fd fd90 	bl	8001348 <height>
 8003828:	4603      	mov	r3, r0
 800382a:	3b01      	subs	r3, #1
 800382c:	b29b      	uxth	r3, r3
 800382e:	b21b      	sxth	r3, r3
 8003830:	4622      	mov	r2, r4
 8003832:	2100      	movs	r1, #0
 8003834:	2000      	movs	r0, #0
 8003836:	f000 fb8f 	bl	8003f58 <setAddrWindow>
    return 0;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	372c      	adds	r7, #44	; 0x2c
 8003840:	46bd      	mov	sp, r7
 8003842:	bd90      	pop	{r4, r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	40020400 	.word	0x40020400
 800384c:	2000028c 	.word	0x2000028c

08003850 <setRotation>:

void setRotation(uint8_t r)
{
 8003850:	b590      	push	{r4, r7, lr}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 800385a:	4bab      	ldr	r3, [pc, #684]	; (8003b08 <setRotation+0x2b8>)
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	b2da      	uxtb	r2, r3
 8003868:	4ba8      	ldr	r3, [pc, #672]	; (8003b0c <setRotation+0x2bc>)
 800386a:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 800386c:	4ba7      	ldr	r3, [pc, #668]	; (8003b0c <setRotation+0x2bc>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <setRotation+0x2e>
 8003878:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800387c:	e000      	b.n	8003880 <setRotation+0x30>
 800387e:	22f0      	movs	r2, #240	; 0xf0
 8003880:	4ba3      	ldr	r3, [pc, #652]	; (8003b10 <setRotation+0x2c0>)
 8003882:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8003884:	4ba1      	ldr	r3, [pc, #644]	; (8003b0c <setRotation+0x2bc>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <setRotation+0x44>
 8003890:	22f0      	movs	r2, #240	; 0xf0
 8003892:	e001      	b.n	8003898 <setRotation+0x48>
 8003894:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003898:	4b9e      	ldr	r3, [pc, #632]	; (8003b14 <setRotation+0x2c4>)
 800389a:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 800389c:	4b9b      	ldr	r3, [pc, #620]	; (8003b0c <setRotation+0x2bc>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d817      	bhi.n	80038d4 <setRotation+0x84>
 80038a4:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <setRotation+0x5c>)
 80038a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038aa:	bf00      	nop
 80038ac:	080038bd 	.word	0x080038bd
 80038b0:	080038c3 	.word	0x080038c3
 80038b4:	080038c9 	.word	0x080038c9
 80038b8:	080038cf 	.word	0x080038cf
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 80038bc:	2348      	movs	r3, #72	; 0x48
 80038be:	72fb      	strb	r3, [r7, #11]
       break;
 80038c0:	e008      	b.n	80038d4 <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 80038c2:	2328      	movs	r3, #40	; 0x28
 80038c4:	72fb      	strb	r3, [r7, #11]
       break;
 80038c6:	e005      	b.n	80038d4 <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 80038c8:	2398      	movs	r3, #152	; 0x98
 80038ca:	72fb      	strb	r3, [r7, #11]
       break;
 80038cc:	e002      	b.n	80038d4 <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 80038ce:	23f8      	movs	r3, #248	; 0xf8
 80038d0:	72fb      	strb	r3, [r7, #11]
       break;
 80038d2:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 80038d4:	4b90      	ldr	r3, [pc, #576]	; (8003b18 <setRotation+0x2c8>)
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <setRotation+0x9c>
       val ^= 0x80;
 80038e0:	7afa      	ldrb	r2, [r7, #11]
 80038e2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80038e6:	4053      	eors	r3, r2
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 80038ec:	4b8a      	ldr	r3, [pc, #552]	; (8003b18 <setRotation+0x2c8>)
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d004      	beq.n	8003902 <setRotation+0xb2>
       val ^= 0x40;
 80038f8:	7afb      	ldrb	r3, [r7, #11]
 80038fa:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 8003902:	4b85      	ldr	r3, [pc, #532]	; (8003b18 <setRotation+0x2c8>)
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <setRotation+0xc8>
       val ^= 0x08;
 800390e:	7afb      	ldrb	r3, [r7, #11]
 8003910:	f083 0308 	eor.w	r3, r3, #8
 8003914:	b2db      	uxtb	r3, r3
 8003916:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8003918:	4b7f      	ldr	r3, [pc, #508]	; (8003b18 <setRotation+0x2c8>)
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8119 	beq.w	8003b58 <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 8003926:	4b7d      	ldr	r3, [pc, #500]	; (8003b1c <setRotation+0x2cc>)
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	f646 0214 	movw	r2, #26644	; 0x6814
 800392e:	4293      	cmp	r3, r2
 8003930:	d128      	bne.n	8003984 <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8003932:	7afb      	ldrb	r3, [r7, #11]
 8003934:	b25b      	sxtb	r3, r3
 8003936:	105b      	asrs	r3, r3, #1
 8003938:	b25b      	sxtb	r3, r3
 800393a:	b29b      	uxth	r3, r3
 800393c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003940:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8003942:	7afb      	ldrb	r3, [r7, #11]
 8003944:	105b      	asrs	r3, r3, #1
 8003946:	b29b      	uxth	r3, r3
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 800394e:	7afb      	ldrb	r3, [r7, #11]
 8003950:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003954:	b2db      	uxtb	r3, r3
 8003956:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 800395c:	8a3b      	ldrh	r3, [r7, #16]
 800395e:	b2da      	uxtb	r2, r3
 8003960:	89fb      	ldrh	r3, [r7, #14]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	4313      	orrs	r3, r2
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f043 0302 	orr.w	r3, r3, #2
 800396c:	b2db      	uxtb	r3, r3
 800396e:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 8003970:	233b      	movs	r3, #59	; 0x3b
 8003972:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 8003974:	f107 0308 	add.w	r3, r7, #8
 8003978:	461a      	mov	r2, r3
 800397a:	2103      	movs	r1, #3
 800397c:	20b6      	movs	r0, #182	; 0xb6
 800397e:	f7fe f85d 	bl	8001a3c <WriteCmdParamN>
           goto common_MC;
 8003982:	e0a4      	b.n	8003ace <setRotation+0x27e>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8003984:	4b65      	ldr	r3, [pc, #404]	; (8003b1c <setRotation+0x2cc>)
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	f641 1263 	movw	r2, #6499	; 0x1963
 800398c:	4293      	cmp	r3, r2
 800398e:	d00b      	beq.n	80039a8 <setRotation+0x158>
 8003990:	4b62      	ldr	r3, [pc, #392]	; (8003b1c <setRotation+0x2cc>)
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	f249 4281 	movw	r2, #38017	; 0x9481
 8003998:	4293      	cmp	r3, r2
 800399a:	d005      	beq.n	80039a8 <setRotation+0x158>
 800399c:	4b5f      	ldr	r3, [pc, #380]	; (8003b1c <setRotation+0x2cc>)
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	f241 5211 	movw	r2, #5393	; 0x1511
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d139      	bne.n	8003a1c <setRotation+0x1cc>
           if (val & 0x80)
 80039a8:	7afb      	ldrb	r3, [r7, #11]
 80039aa:	b25b      	sxtb	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	da04      	bge.n	80039ba <setRotation+0x16a>
               val |= 0x01;    //GS
 80039b0:	7afb      	ldrb	r3, [r7, #11]
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 80039ba:	7afb      	ldrb	r3, [r7, #11]
 80039bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d004      	beq.n	80039ce <setRotation+0x17e>
               val |= 0x02;    //SS
 80039c4:	7afb      	ldrb	r3, [r7, #11]
 80039c6:	f043 0302 	orr.w	r3, r3, #2
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 80039ce:	4b53      	ldr	r3, [pc, #332]	; (8003b1c <setRotation+0x2cc>)
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	f641 1263 	movw	r2, #6499	; 0x1963
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d104      	bne.n	80039e4 <setRotation+0x194>
 80039da:	7afb      	ldrb	r3, [r7, #11]
 80039dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 80039e4:	4b4d      	ldr	r3, [pc, #308]	; (8003b1c <setRotation+0x2cc>)
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	f249 4281 	movw	r2, #38017	; 0x9481
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d104      	bne.n	80039fa <setRotation+0x1aa>
 80039f0:	7afb      	ldrb	r3, [r7, #11]
 80039f2:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 80039fa:	4b48      	ldr	r3, [pc, #288]	; (8003b1c <setRotation+0x2cc>)
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	f241 5211 	movw	r2, #5393	; 0x1511
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d160      	bne.n	8003ac8 <setRotation+0x278>
               val &= ~0x10;   //remove ML
 8003a06:	7afb      	ldrb	r3, [r7, #11]
 8003a08:	f023 0310 	bic.w	r3, r3, #16
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 8003a10:	7afb      	ldrb	r3, [r7, #11]
 8003a12:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 8003a1a:	e055      	b.n	8003ac8 <setRotation+0x278>
      }
       else if (is8347) {
 8003a1c:	4b40      	ldr	r3, [pc, #256]	; (8003b20 <setRotation+0x2d0>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d053      	beq.n	8003acc <setRotation+0x27c>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8003a24:	4b3f      	ldr	r3, [pc, #252]	; (8003b24 <setRotation+0x2d4>)
 8003a26:	2202      	movs	r2, #2
 8003a28:	801a      	strh	r2, [r3, #0]
 8003a2a:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <setRotation+0x2d8>)
 8003a2c:	2206      	movs	r2, #6
 8003a2e:	801a      	strh	r2, [r3, #0]
 8003a30:	4b3e      	ldr	r3, [pc, #248]	; (8003b2c <setRotation+0x2dc>)
 8003a32:	2222      	movs	r2, #34	; 0x22
 8003a34:	801a      	strh	r2, [r3, #0]
 8003a36:	4b3e      	ldr	r3, [pc, #248]	; (8003b30 <setRotation+0x2e0>)
 8003a38:	2202      	movs	r2, #2
 8003a3a:	801a      	strh	r2, [r3, #0]
 8003a3c:	4b3d      	ldr	r3, [pc, #244]	; (8003b34 <setRotation+0x2e4>)
 8003a3e:	2204      	movs	r2, #4
 8003a40:	801a      	strh	r2, [r3, #0]
 8003a42:	4b3d      	ldr	r3, [pc, #244]	; (8003b38 <setRotation+0x2e8>)
 8003a44:	2206      	movs	r2, #6
 8003a46:	801a      	strh	r2, [r3, #0]
 8003a48:	4b3c      	ldr	r3, [pc, #240]	; (8003b3c <setRotation+0x2ec>)
 8003a4a:	2208      	movs	r2, #8
 8003a4c:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 8003a4e:	4b33      	ldr	r3, [pc, #204]	; (8003b1c <setRotation+0x2cc>)
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	2b65      	cmp	r3, #101	; 0x65
 8003a54:	d121      	bne.n	8003a9a <setRotation+0x24a>
               val |= 0x01;    //GS=1
 8003a56:	7afb      	ldrb	r3, [r7, #11]
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8003a60:	7afb      	ldrb	r3, [r7, #11]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <setRotation+0x226>
 8003a6a:	7afa      	ldrb	r2, [r7, #11]
 8003a6c:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 8003a70:	4053      	eors	r3, r2
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d006      	beq.n	8003a8e <setRotation+0x23e>
 8003a80:	4b28      	ldr	r3, [pc, #160]	; (8003b24 <setRotation+0x2d4>)
 8003a82:	2282      	movs	r2, #130	; 0x82
 8003a84:	801a      	strh	r2, [r3, #0]
 8003a86:	4b28      	ldr	r3, [pc, #160]	; (8003b28 <setRotation+0x2d8>)
 8003a88:	2280      	movs	r2, #128	; 0x80
 8003a8a:	801a      	strh	r2, [r3, #0]
 8003a8c:	e005      	b.n	8003a9a <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 8003a8e:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <setRotation+0x2d4>)
 8003a90:	2280      	movs	r2, #128	; 0x80
 8003a92:	801a      	strh	r2, [r3, #0]
 8003a94:	4b24      	ldr	r3, [pc, #144]	; (8003b28 <setRotation+0x2d8>)
 8003a96:	2282      	movs	r2, #130	; 0x82
 8003a98:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 8003a9a:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <setRotation+0x2cc>)
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	f245 2252 	movw	r2, #21074	; 0x5252
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d129      	bne.n	8003afa <setRotation+0x2aa>
               val |= 0x02;   //VERT_SCROLLON
 8003aa6:	7afb      	ldrb	r3, [r7, #11]
 8003aa8:	f043 0302 	orr.w	r3, r3, #2
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 8003ab0:	7afb      	ldrb	r3, [r7, #11]
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d01f      	beq.n	8003afa <setRotation+0x2aa>
 8003aba:	7afa      	ldrb	r2, [r7, #11]
 8003abc:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8003ac0:	4053      	eors	r3, r2
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 8003ac6:	e018      	b.n	8003afa <setRotation+0x2aa>
           goto common_MC;
 8003ac8:	bf00      	nop
 8003aca:	e000      	b.n	8003ace <setRotation+0x27e>
       }
     common_MC:
 8003acc:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8003ace:	4b15      	ldr	r3, [pc, #84]	; (8003b24 <setRotation+0x2d4>)
 8003ad0:	222a      	movs	r2, #42	; 0x2a
 8003ad2:	801a      	strh	r2, [r3, #0]
 8003ad4:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <setRotation+0x2d8>)
 8003ad6:	222b      	movs	r2, #43	; 0x2b
 8003ad8:	801a      	strh	r2, [r3, #0]
 8003ada:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <setRotation+0x2dc>)
 8003adc:	222c      	movs	r2, #44	; 0x2c
 8003ade:	801a      	strh	r2, [r3, #0]
 8003ae0:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <setRotation+0x2e0>)
 8003ae2:	222a      	movs	r2, #42	; 0x2a
 8003ae4:	801a      	strh	r2, [r3, #0]
 8003ae6:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <setRotation+0x2e4>)
 8003ae8:	222a      	movs	r2, #42	; 0x2a
 8003aea:	801a      	strh	r2, [r3, #0]
 8003aec:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <setRotation+0x2e8>)
 8003aee:	222b      	movs	r2, #43	; 0x2b
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <setRotation+0x2ec>)
 8003af4:	222b      	movs	r2, #43	; 0x2b
 8003af6:	801a      	strh	r2, [r3, #0]
 8003af8:	e000      	b.n	8003afc <setRotation+0x2ac>
			goto common_BGR;
 8003afa:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8003afc:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <setRotation+0x2d0>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01d      	beq.n	8003b40 <setRotation+0x2f0>
 8003b04:	2316      	movs	r3, #22
 8003b06:	e01c      	b.n	8003b42 <setRotation+0x2f2>
 8003b08:	20000290 	.word	0x20000290
 8003b0c:	20000067 	.word	0x20000067
 8003b10:	2000002c 	.word	0x2000002c
 8003b14:	2000002e 	.word	0x2000002e
 8003b18:	2000028c 	.word	0x2000028c
 8003b1c:	2000029a 	.word	0x2000029a
 8003b20:	20000064 	.word	0x20000064
 8003b24:	20000294 	.word	0x20000294
 8003b28:	20000292 	.word	0x20000292
 8003b2c:	2000028a 	.word	0x2000028a
 8003b30:	20000296 	.word	0x20000296
 8003b34:	2000029e 	.word	0x2000029e
 8003b38:	2000028e 	.word	0x2000028e
 8003b3c:	20000298 	.word	0x20000298
 8003b40:	2336      	movs	r3, #54	; 0x36
 8003b42:	f107 020b 	add.w	r2, r7, #11
 8003b46:	2101      	movs	r1, #1
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fd ff77 	bl	8001a3c <WriteCmdParamN>
       _lcd_madctl = val;
 8003b4e:	7afb      	ldrb	r3, [r7, #11]
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	4b73      	ldr	r3, [pc, #460]	; (8003d20 <setRotation+0x4d0>)
 8003b54:	801a      	strh	r2, [r3, #0]
 8003b56:	e09e      	b.n	8003c96 <setRotation+0x446>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8003b58:	4b72      	ldr	r3, [pc, #456]	; (8003d24 <setRotation+0x4d4>)
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	f247 7293 	movw	r2, #30611	; 0x7793
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d010      	beq.n	8003b86 <setRotation+0x336>
 8003b64:	f247 7293 	movw	r2, #30611	; 0x7793
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	dc04      	bgt.n	8003b76 <setRotation+0x326>
 8003b6c:	f245 4220 	movw	r2, #21536	; 0x5420
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d008      	beq.n	8003b86 <setRotation+0x336>
 8003b74:	e045      	b.n	8003c02 <setRotation+0x3b2>
 8003b76:	f249 3226 	movw	r2, #37670	; 0x9326
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <setRotation+0x336>
 8003b7e:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d13d      	bne.n	8003c02 <setRotation+0x3b2>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8003b86:	4b68      	ldr	r3, [pc, #416]	; (8003d28 <setRotation+0x4d8>)
 8003b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b8c:	801a      	strh	r2, [r3, #0]
 8003b8e:	4b67      	ldr	r3, [pc, #412]	; (8003d2c <setRotation+0x4dc>)
 8003b90:	f240 2201 	movw	r2, #513	; 0x201
 8003b94:	801a      	strh	r2, [r3, #0]
 8003b96:	4b66      	ldr	r3, [pc, #408]	; (8003d30 <setRotation+0x4e0>)
 8003b98:	f240 2202 	movw	r2, #514	; 0x202
 8003b9c:	801a      	strh	r2, [r3, #0]
 8003b9e:	4b65      	ldr	r3, [pc, #404]	; (8003d34 <setRotation+0x4e4>)
 8003ba0:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	4b64      	ldr	r3, [pc, #400]	; (8003d38 <setRotation+0x4e8>)
 8003ba8:	f240 2211 	movw	r2, #529	; 0x211
 8003bac:	801a      	strh	r2, [r3, #0]
 8003bae:	4b63      	ldr	r3, [pc, #396]	; (8003d3c <setRotation+0x4ec>)
 8003bb0:	f240 2212 	movw	r2, #530	; 0x212
 8003bb4:	801a      	strh	r2, [r3, #0]
 8003bb6:	4b62      	ldr	r3, [pc, #392]	; (8003d40 <setRotation+0x4f0>)
 8003bb8:	f240 2213 	movw	r2, #531	; 0x213
 8003bbc:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8003bbe:	7afb      	ldrb	r3, [r7, #11]
 8003bc0:	b25b      	sxtb	r3, r3
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	4b5f      	ldr	r3, [pc, #380]	; (8003d44 <setRotation+0x4f4>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8003bca:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003bce:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8003bd0:	4b54      	ldr	r3, [pc, #336]	; (8003d24 <setRotation+0x4d4>)
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	f249 3226 	movw	r2, #37670	; 0x9326
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d005      	beq.n	8003be8 <setRotation+0x398>
 8003bdc:	4b51      	ldr	r3, [pc, #324]	; (8003d24 <setRotation+0x4d4>)
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	f245 4220 	movw	r2, #21536	; 0x5420
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d102      	bne.n	8003bee <setRotation+0x39e>
 8003be8:	8abb      	ldrh	r3, [r7, #20]
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 8003bee:	8a3a      	ldrh	r2, [r7, #16]
 8003bf0:	8abb      	ldrh	r3, [r7, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003bfc:	f7fd fc60 	bl	80014c0 <WriteCmdData>
           goto common_SS;
 8003c00:	e022      	b.n	8003c48 <setRotation+0x3f8>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8003c02:	4b49      	ldr	r3, [pc, #292]	; (8003d28 <setRotation+0x4d8>)
 8003c04:	2220      	movs	r2, #32
 8003c06:	801a      	strh	r2, [r3, #0]
 8003c08:	4b48      	ldr	r3, [pc, #288]	; (8003d2c <setRotation+0x4dc>)
 8003c0a:	2221      	movs	r2, #33	; 0x21
 8003c0c:	801a      	strh	r2, [r3, #0]
 8003c0e:	4b48      	ldr	r3, [pc, #288]	; (8003d30 <setRotation+0x4e0>)
 8003c10:	2222      	movs	r2, #34	; 0x22
 8003c12:	801a      	strh	r2, [r3, #0]
 8003c14:	4b47      	ldr	r3, [pc, #284]	; (8003d34 <setRotation+0x4e4>)
 8003c16:	2250      	movs	r2, #80	; 0x50
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <setRotation+0x4e8>)
 8003c1c:	2251      	movs	r2, #81	; 0x51
 8003c1e:	801a      	strh	r2, [r3, #0]
 8003c20:	4b46      	ldr	r3, [pc, #280]	; (8003d3c <setRotation+0x4ec>)
 8003c22:	2252      	movs	r2, #82	; 0x52
 8003c24:	801a      	strh	r2, [r3, #0]
 8003c26:	4b46      	ldr	r3, [pc, #280]	; (8003d40 <setRotation+0x4f0>)
 8003c28:	2253      	movs	r2, #83	; 0x53
 8003c2a:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8003c2c:	7afb      	ldrb	r3, [r7, #11]
 8003c2e:	b25b      	sxtb	r3, r3
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	4b44      	ldr	r3, [pc, #272]	; (8003d44 <setRotation+0x4f4>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8003c38:	8a3b      	ldrh	r3, [r7, #16]
 8003c3a:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	4619      	mov	r1, r3
 8003c42:	2060      	movs	r0, #96	; 0x60
 8003c44:	f7fd fc3c 	bl	80014c0 <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 8003c48:	7afb      	ldrb	r3, [r7, #11]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c52:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8003c54:	89fb      	ldrh	r3, [r7, #14]
 8003c56:	4619      	mov	r1, r3
 8003c58:	2001      	movs	r0, #1
 8003c5a:	f7fd fc31 	bl	80014c0 <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 8003c5e:	7afb      	ldrb	r3, [r7, #11]
 8003c60:	109b      	asrs	r3, r3, #2
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 8003c6a:	7afb      	ldrb	r3, [r7, #11]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <setRotation+0x42c>
               ORG |= 0x1000;  //BGR
 8003c74:	8afb      	ldrh	r3, [r7, #22]
 8003c76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c7a:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 8003c7c:	8afb      	ldrh	r3, [r7, #22]
 8003c7e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	4b26      	ldr	r3, [pc, #152]	; (8003d20 <setRotation+0x4d0>)
 8003c86:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8003c88:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <setRotation+0x4d0>)
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	2003      	movs	r0, #3
 8003c90:	f7fd fc16 	bl	80014c0 <WriteCmdData>
           break;
 8003c94:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8003c96:	4b2c      	ldr	r3, [pc, #176]	; (8003d48 <setRotation+0x4f8>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d023      	beq.n	8003cea <setRotation+0x49a>
 8003ca2:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <setRotation+0x4fc>)
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d11d      	bne.n	8003cea <setRotation+0x49a>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 8003cae:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <setRotation+0x4d8>)
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	81bb      	strh	r3, [r7, #12]
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <setRotation+0x4dc>)
 8003cb6:	881a      	ldrh	r2, [r3, #0]
 8003cb8:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <setRotation+0x4d8>)
 8003cba:	801a      	strh	r2, [r3, #0]
 8003cbc:	4a1b      	ldr	r2, [pc, #108]	; (8003d2c <setRotation+0x4dc>)
 8003cbe:	89bb      	ldrh	r3, [r7, #12]
 8003cc0:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8003cc2:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <setRotation+0x4e4>)
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	81bb      	strh	r3, [r7, #12]
 8003cc8:	4b1c      	ldr	r3, [pc, #112]	; (8003d3c <setRotation+0x4ec>)
 8003cca:	881a      	ldrh	r2, [r3, #0]
 8003ccc:	4b19      	ldr	r3, [pc, #100]	; (8003d34 <setRotation+0x4e4>)
 8003cce:	801a      	strh	r2, [r3, #0]
 8003cd0:	4a1a      	ldr	r2, [pc, #104]	; (8003d3c <setRotation+0x4ec>)
 8003cd2:	89bb      	ldrh	r3, [r7, #12]
 8003cd4:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8003cd6:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <setRotation+0x4e8>)
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	81bb      	strh	r3, [r7, #12]
 8003cdc:	4b18      	ldr	r3, [pc, #96]	; (8003d40 <setRotation+0x4f0>)
 8003cde:	881a      	ldrh	r2, [r3, #0]
 8003ce0:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <setRotation+0x4e8>)
 8003ce2:	801a      	strh	r2, [r3, #0]
 8003ce4:	4a16      	ldr	r2, [pc, #88]	; (8003d40 <setRotation+0x4f0>)
 8003ce6:	89bb      	ldrh	r3, [r7, #12]
 8003ce8:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8003cea:	f7fd fb21 	bl	8001330 <width>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	b21c      	sxth	r4, r3
 8003cf6:	f7fd fb27 	bl	8001348 <height>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	b21b      	sxth	r3, r3
 8003d02:	4622      	mov	r2, r4
 8003d04:	2100      	movs	r1, #0
 8003d06:	2000      	movs	r0, #0
 8003d08:	f000 f926 	bl	8003f58 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003d12:	2000      	movs	r0, #0
 8003d14:	f000 fa44 	bl	80041a0 <vertScroll>
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd90      	pop	{r4, r7, pc}
 8003d20:	200002a0 	.word	0x200002a0
 8003d24:	2000029a 	.word	0x2000029a
 8003d28:	20000294 	.word	0x20000294
 8003d2c:	20000292 	.word	0x20000292
 8003d30:	2000028a 	.word	0x2000028a
 8003d34:	20000296 	.word	0x20000296
 8003d38:	2000029e 	.word	0x2000029e
 8003d3c:	2000028e 	.word	0x2000028e
 8003d40:	20000298 	.word	0x20000298
 8003d44:	ffff8000 	.word	0xffff8000
 8003d48:	20000067 	.word	0x20000067
 8003d4c:	2000028c 	.word	0x2000028c

08003d50 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	80fb      	strh	r3, [r7, #6]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	80bb      	strh	r3, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 8003d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f2c0 80e3 	blt.w	8003f32 <drawPixel+0x1e2>
 8003d6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f2c0 80de 	blt.w	8003f32 <drawPixel+0x1e2>
 8003d76:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8003d7a:	f7fd fad9 	bl	8001330 <width>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	429c      	cmp	r4, r3
 8003d82:	f280 80d6 	bge.w	8003f32 <drawPixel+0x1e2>
 8003d86:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003d8a:	f7fd fadd 	bl	8001348 <height>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	429c      	cmp	r4, r3
 8003d92:	f280 80ce 	bge.w	8003f32 <drawPixel+0x1e2>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 8003d96:	4b69      	ldr	r3, [pc, #420]	; (8003f3c <drawPixel+0x1ec>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <drawPixel+0x5a>
 8003d9e:	887b      	ldrh	r3, [r7, #2]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fd fadd 	bl	8001360 <color565_to_555>
 8003da6:	4603      	mov	r3, r0
 8003da8:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 8003daa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003dae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003db2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003db6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003dba:	f000 f8cd 	bl	8003f58 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8003dbe:	4b60      	ldr	r3, [pc, #384]	; (8003f40 <drawPixel+0x1f0>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80ad 	beq.w	8003f22 <drawPixel+0x1d2>
 8003dc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003dcc:	485d      	ldr	r0, [pc, #372]	; (8003f44 <drawPixel+0x1f4>)
 8003dce:	f7fd fa61 	bl	8001294 <PIN_LOW>
 8003dd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dd6:	485c      	ldr	r0, [pc, #368]	; (8003f48 <drawPixel+0x1f8>)
 8003dd8:	f7fd fa5c 	bl	8001294 <PIN_LOW>
 8003ddc:	4b5b      	ldr	r3, [pc, #364]	; (8003f4c <drawPixel+0x1fc>)
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	0a1b      	lsrs	r3, r3, #8
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	73fb      	strb	r3, [r7, #15]
 8003de6:	4b59      	ldr	r3, [pc, #356]	; (8003f4c <drawPixel+0x1fc>)
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	73bb      	strb	r3, [r7, #14]
 8003dec:	4b56      	ldr	r3, [pc, #344]	; (8003f48 <drawPixel+0x1f8>)
 8003dee:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8003df2:	619a      	str	r2, [r3, #24]
 8003df4:	4b56      	ldr	r3, [pc, #344]	; (8003f50 <drawPixel+0x200>)
 8003df6:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8003dfa:	619a      	str	r2, [r3, #24]
 8003dfc:	4b55      	ldr	r3, [pc, #340]	; (8003f54 <drawPixel+0x204>)
 8003dfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e02:	619a      	str	r2, [r3, #24]
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	4a52      	ldr	r2, [pc, #328]	; (8003f54 <drawPixel+0x204>)
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	6193      	str	r3, [r2, #24]
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	015b      	lsls	r3, r3, #5
 8003e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e20:	431a      	orrs	r2, r3
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	015b      	lsls	r3, r3, #5
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	4b48      	ldr	r3, [pc, #288]	; (8003f50 <drawPixel+0x200>)
 8003e2e:	619a      	str	r2, [r3, #24]
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	105b      	asrs	r3, r3, #1
 8003e34:	f003 0208 	and.w	r2, r3, #8
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e40:	431a      	orrs	r2, r3
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	105b      	asrs	r3, r3, #1
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	10db      	asrs	r3, r3, #3
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	431a      	orrs	r2, r3
 8003e56:	4b3c      	ldr	r3, [pc, #240]	; (8003f48 <drawPixel+0x1f8>)
 8003e58:	619a      	str	r2, [r3, #24]
 8003e5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e5e:	483a      	ldr	r0, [pc, #232]	; (8003f48 <drawPixel+0x1f8>)
 8003e60:	f7fd fa18 	bl	8001294 <PIN_LOW>
 8003e64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e68:	4837      	ldr	r0, [pc, #220]	; (8003f48 <drawPixel+0x1f8>)
 8003e6a:	f7fd fa23 	bl	80012b4 <PIN_HIGH>
 8003e6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e72:	4835      	ldr	r0, [pc, #212]	; (8003f48 <drawPixel+0x1f8>)
 8003e74:	f7fd fa1e 	bl	80012b4 <PIN_HIGH>
 8003e78:	4b33      	ldr	r3, [pc, #204]	; (8003f48 <drawPixel+0x1f8>)
 8003e7a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8003e7e:	619a      	str	r2, [r3, #24]
 8003e80:	4b33      	ldr	r3, [pc, #204]	; (8003f50 <drawPixel+0x200>)
 8003e82:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8003e86:	619a      	str	r2, [r3, #24]
 8003e88:	4b32      	ldr	r3, [pc, #200]	; (8003f54 <drawPixel+0x204>)
 8003e8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e8e:	619a      	str	r2, [r3, #24]
 8003e90:	7bbb      	ldrb	r3, [r7, #14]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4a2f      	ldr	r2, [pc, #188]	; (8003f54 <drawPixel+0x204>)
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	6193      	str	r3, [r2, #24]
 8003e9c:	7bbb      	ldrb	r3, [r7, #14]
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8003ea4:	7bbb      	ldrb	r3, [r7, #14]
 8003ea6:	015b      	lsls	r3, r3, #5
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	431a      	orrs	r2, r3
 8003eae:	7bbb      	ldrb	r3, [r7, #14]
 8003eb0:	015b      	lsls	r3, r3, #5
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	4b25      	ldr	r3, [pc, #148]	; (8003f50 <drawPixel+0x200>)
 8003eba:	619a      	str	r2, [r3, #24]
 8003ebc:	7bbb      	ldrb	r3, [r7, #14]
 8003ebe:	105b      	asrs	r3, r3, #1
 8003ec0:	f003 0208 	and.w	r2, r3, #8
 8003ec4:	7bbb      	ldrb	r3, [r7, #14]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	7bbb      	ldrb	r3, [r7, #14]
 8003ed0:	105b      	asrs	r3, r3, #1
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	7bbb      	ldrb	r3, [r7, #14]
 8003eda:	10db      	asrs	r3, r3, #3
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	4b19      	ldr	r3, [pc, #100]	; (8003f48 <drawPixel+0x1f8>)
 8003ee4:	619a      	str	r2, [r3, #24]
 8003ee6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003eea:	4817      	ldr	r0, [pc, #92]	; (8003f48 <drawPixel+0x1f8>)
 8003eec:	f7fd f9d2 	bl	8001294 <PIN_LOW>
 8003ef0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ef4:	4814      	ldr	r0, [pc, #80]	; (8003f48 <drawPixel+0x1f8>)
 8003ef6:	f7fd f9dd 	bl	80012b4 <PIN_HIGH>
 8003efa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003efe:	4812      	ldr	r0, [pc, #72]	; (8003f48 <drawPixel+0x1f8>)
 8003f00:	f7fd f9d8 	bl	80012b4 <PIN_HIGH>
 8003f04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f08:	480f      	ldr	r0, [pc, #60]	; (8003f48 <drawPixel+0x1f8>)
 8003f0a:	f7fd f9d3 	bl	80012b4 <PIN_HIGH>
 8003f0e:	887b      	ldrh	r3, [r7, #2]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fd fb53 	bl	80015bc <write24>
 8003f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f1a:	480a      	ldr	r0, [pc, #40]	; (8003f44 <drawPixel+0x1f4>)
 8003f1c:	f7fd f9ca 	bl	80012b4 <PIN_HIGH>
 8003f20:	e008      	b.n	8003f34 <drawPixel+0x1e4>
   WriteCmdData(_MW, color);
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <drawPixel+0x1fc>)
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	887a      	ldrh	r2, [r7, #2]
 8003f28:	4611      	mov	r1, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fd fac8 	bl	80014c0 <WriteCmdData>
 8003f30:	e000      	b.n	8003f34 <drawPixel+0x1e4>
       return;
 8003f32:	bf00      	nop
}
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd90      	pop	{r4, r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000065 	.word	0x20000065
 8003f40:	20000066 	.word	0x20000066
 8003f44:	40020400 	.word	0x40020400
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	2000028a 	.word	0x2000028a
 8003f50:	40021400 	.word	0x40021400
 8003f54:	40021800 	.word	0x40021800

08003f58 <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8003f58:	b590      	push	{r4, r7, lr}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	4604      	mov	r4, r0
 8003f60:	4608      	mov	r0, r1
 8003f62:	4611      	mov	r1, r2
 8003f64:	461a      	mov	r2, r3
 8003f66:	4623      	mov	r3, r4
 8003f68:	80fb      	strh	r3, [r7, #6]
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	80bb      	strh	r3, [r7, #4]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	807b      	strh	r3, [r7, #2]
 8003f72:	4613      	mov	r3, r2
 8003f74:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8003f76:	4b80      	ldr	r3, [pc, #512]	; (8004178 <setAddrWindow+0x220>)
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	f249 3227 	movw	r2, #37671	; 0x9327
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d117      	bne.n	8003fb2 <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 8003f82:	4b7e      	ldr	r3, [pc, #504]	; (800417c <setAddrWindow+0x224>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d107      	bne.n	8003f9a <setAddrWindow+0x42>
 8003f8a:	88bb      	ldrh	r3, [r7, #4]
 8003f8c:	3320      	adds	r3, #32
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	80bb      	strh	r3, [r7, #4]
 8003f92:	883b      	ldrh	r3, [r7, #0]
 8003f94:	3320      	adds	r3, #32
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8003f9a:	4b78      	ldr	r3, [pc, #480]	; (800417c <setAddrWindow+0x224>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d107      	bne.n	8003fb2 <setAddrWindow+0x5a>
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	3320      	adds	r3, #32
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	80fb      	strh	r3, [r7, #6]
 8003faa:	887b      	ldrh	r3, [r7, #2]
 8003fac:	3320      	adds	r3, #32
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 8003fb2:	4b71      	ldr	r3, [pc, #452]	; (8004178 <setAddrWindow+0x220>)
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	f241 5226 	movw	r2, #5414	; 0x1526
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d128      	bne.n	8004010 <setAddrWindow+0xb8>
 8003fbe:	4b6f      	ldr	r3, [pc, #444]	; (800417c <setAddrWindow+0x224>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d022      	beq.n	8004010 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8003fca:	887a      	ldrh	r2, [r7, #2]
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	81fb      	strh	r3, [r7, #14]
 8003fd4:	883a      	ldrh	r2, [r7, #0]
 8003fd6:	88bb      	ldrh	r3, [r7, #4]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8003fde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <setAddrWindow+0x9c>
 8003fe6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3301      	adds	r3, #1
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	803b      	strh	r3, [r7, #0]
 8003ff2:	e00d      	b.n	8004010 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8003ff4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d109      	bne.n	8004010 <setAddrWindow+0xb8>
 8003ffc:	887a      	ldrh	r2, [r7, #2]
 8003ffe:	89bb      	ldrh	r3, [r7, #12]
 8004000:	4413      	add	r3, r2
 8004002:	b29b      	uxth	r3, r3
 8004004:	807b      	strh	r3, [r7, #2]
 8004006:	883a      	ldrh	r2, [r7, #0]
 8004008:	89bb      	ldrh	r3, [r7, #12]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	b29b      	uxth	r3, r3
 800400e:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8004010:	4b5b      	ldr	r3, [pc, #364]	; (8004180 <setAddrWindow+0x228>)
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d054      	beq.n	80040c6 <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 800401c:	4b59      	ldr	r3, [pc, #356]	; (8004184 <setAddrWindow+0x22c>)
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b2d8      	uxtb	r0, r3
 8004022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004026:	121b      	asrs	r3, r3, #8
 8004028:	b21b      	sxth	r3, r3
 800402a:	b2d9      	uxtb	r1, r3
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	b2da      	uxtb	r2, r3
 8004030:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004034:	121b      	asrs	r3, r3, #8
 8004036:	b21b      	sxth	r3, r3
 8004038:	b2dc      	uxtb	r4, r3
 800403a:	887b      	ldrh	r3, [r7, #2]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	4623      	mov	r3, r4
 8004042:	f7fd febd 	bl	8001dc0 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8004046:	4b50      	ldr	r3, [pc, #320]	; (8004188 <setAddrWindow+0x230>)
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	b2d8      	uxtb	r0, r3
 800404c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004050:	121b      	asrs	r3, r3, #8
 8004052:	b21b      	sxth	r3, r3
 8004054:	b2d9      	uxtb	r1, r3
 8004056:	88bb      	ldrh	r3, [r7, #4]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800405e:	121b      	asrs	r3, r3, #8
 8004060:	b21b      	sxth	r3, r3
 8004062:	b2dc      	uxtb	r4, r3
 8004064:	883b      	ldrh	r3, [r7, #0]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	4623      	mov	r3, r4
 800406c:	f7fd fea8 	bl	8001dc0 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8004070:	4b46      	ldr	r3, [pc, #280]	; (800418c <setAddrWindow+0x234>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d07b      	beq.n	8004170 <setAddrWindow+0x218>
 8004078:	4b3f      	ldr	r3, [pc, #252]	; (8004178 <setAddrWindow+0x220>)
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	2b65      	cmp	r3, #101	; 0x65
 800407e:	d177      	bne.n	8004170 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8004080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004084:	121b      	asrs	r3, r3, #8
 8004086:	b21b      	sxth	r3, r3
 8004088:	b2db      	uxtb	r3, r3
 800408a:	723b      	strb	r3, [r7, #8]
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	b2db      	uxtb	r3, r3
 8004090:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8004092:	4b3f      	ldr	r3, [pc, #252]	; (8004190 <setAddrWindow+0x238>)
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	f107 0208 	add.w	r2, r7, #8
 800409a:	2102      	movs	r1, #2
 800409c:	4618      	mov	r0, r3
 800409e:	f7fd fccd 	bl	8001a3c <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 80040a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80040a6:	121b      	asrs	r3, r3, #8
 80040a8:	b21b      	sxth	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	723b      	strb	r3, [r7, #8]
 80040ae:	88bb      	ldrh	r3, [r7, #4]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 80040b4:	4b37      	ldr	r3, [pc, #220]	; (8004194 <setAddrWindow+0x23c>)
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	f107 0208 	add.w	r2, r7, #8
 80040bc:	2102      	movs	r1, #2
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fd fcbc 	bl	8001a3c <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 80040c4:	e054      	b.n	8004170 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 80040c6:	4b32      	ldr	r3, [pc, #200]	; (8004190 <setAddrWindow+0x238>)
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	4611      	mov	r1, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fd f9f6 	bl	80014c0 <WriteCmdData>
       WriteCmdData(_MP, y);
 80040d4:	4b2f      	ldr	r3, [pc, #188]	; (8004194 <setAddrWindow+0x23c>)
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	88ba      	ldrh	r2, [r7, #4]
 80040da:	4611      	mov	r1, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fd f9ef 	bl	80014c0 <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 80040e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80040e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d105      	bne.n	80040fa <setAddrWindow+0x1a2>
 80040ee:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80040f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d03a      	beq.n	8004170 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 80040fa:	4b21      	ldr	r3, [pc, #132]	; (8004180 <setAddrWindow+0x228>)
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d018      	beq.n	8004138 <setAddrWindow+0x1e0>
               if (rotation & 1)
 8004106:	4b1d      	ldr	r3, [pc, #116]	; (800417c <setAddrWindow+0x224>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 8004112:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004116:	021b      	lsls	r3, r3, #8
 8004118:	b21a      	sxth	r2, r3
 800411a:	88bb      	ldrh	r3, [r7, #4]
 800411c:	4313      	orrs	r3, r2
 800411e:	80bb      	strh	r3, [r7, #4]
 8004120:	88bb      	ldrh	r3, [r7, #4]
 8004122:	803b      	strh	r3, [r7, #0]
 8004124:	e008      	b.n	8004138 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 8004126:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	b21a      	sxth	r2, r3
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	4313      	orrs	r3, r2
 8004132:	80fb      	strh	r3, [r7, #6]
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8004138:	4b12      	ldr	r3, [pc, #72]	; (8004184 <setAddrWindow+0x22c>)
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	88fa      	ldrh	r2, [r7, #6]
 800413e:	4611      	mov	r1, r2
 8004140:	4618      	mov	r0, r3
 8004142:	f7fd f9bd 	bl	80014c0 <WriteCmdData>
           WriteCmdData(_SP, y);
 8004146:	4b10      	ldr	r3, [pc, #64]	; (8004188 <setAddrWindow+0x230>)
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	88ba      	ldrh	r2, [r7, #4]
 800414c:	4611      	mov	r1, r2
 800414e:	4618      	mov	r0, r3
 8004150:	f7fd f9b6 	bl	80014c0 <WriteCmdData>
           WriteCmdData(_EC, x1);
 8004154:	4b10      	ldr	r3, [pc, #64]	; (8004198 <setAddrWindow+0x240>)
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	887a      	ldrh	r2, [r7, #2]
 800415a:	4611      	mov	r1, r2
 800415c:	4618      	mov	r0, r3
 800415e:	f7fd f9af 	bl	80014c0 <WriteCmdData>
           WriteCmdData(_EP, y1);
 8004162:	4b0e      	ldr	r3, [pc, #56]	; (800419c <setAddrWindow+0x244>)
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	883a      	ldrh	r2, [r7, #0]
 8004168:	4611      	mov	r1, r2
 800416a:	4618      	mov	r0, r3
 800416c:	f7fd f9a8 	bl	80014c0 <WriteCmdData>
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	bd90      	pop	{r4, r7, pc}
 8004178:	2000029a 	.word	0x2000029a
 800417c:	20000067 	.word	0x20000067
 8004180:	2000028c 	.word	0x2000028c
 8004184:	20000296 	.word	0x20000296
 8004188:	2000028e 	.word	0x2000028e
 800418c:	20000064 	.word	0x20000064
 8004190:	20000294 	.word	0x20000294
 8004194:	20000292 	.word	0x20000292
 8004198:	2000029e 	.word	0x2000029e
 800419c:	20000298 	.word	0x20000298

080041a0 <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	80fb      	strh	r3, [r7, #6]
 80041aa:	460b      	mov	r3, r1
 80041ac:	80bb      	strh	r3, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 80041b2:	4b89      	ldr	r3, [pc, #548]	; (80043d8 <vertScroll+0x238>)
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	f249 3227 	movw	r2, #37671	; 0x9327
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d10b      	bne.n	80041d6 <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 80041be:	4b87      	ldr	r3, [pc, #540]	; (80043dc <vertScroll+0x23c>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d003      	beq.n	80041ce <vertScroll+0x2e>
 80041c6:	4b85      	ldr	r3, [pc, #532]	; (80043dc <vertScroll+0x23c>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d103      	bne.n	80041d6 <vertScroll+0x36>
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	3320      	adds	r3, #32
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	425b      	negs	r3, r3
 80041da:	b29a      	uxth	r2, r3
 80041dc:	88bb      	ldrh	r3, [r7, #4]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 80041ee:	4b7a      	ldr	r3, [pc, #488]	; (80043d8 <vertScroll+0x238>)
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	f249 3227 	movw	r2, #37671	; 0x9327
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d103      	bne.n	8004202 <vertScroll+0x62>
 80041fa:	8afb      	ldrh	r3, [r7, #22]
 80041fc:	3320      	adds	r3, #32
 80041fe:	b29b      	uxth	r3, r3
 8004200:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8004202:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004206:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800420a:	425b      	negs	r3, r3
 800420c:	429a      	cmp	r2, r3
 800420e:	dd05      	ble.n	800421c <vertScroll+0x7c>
 8004210:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004214:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004218:	429a      	cmp	r2, r3
 800421a:	db01      	blt.n	8004220 <vertScroll+0x80>
 800421c:	2300      	movs	r3, #0
 800421e:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8004220:	88fa      	ldrh	r2, [r7, #6]
 8004222:	887b      	ldrh	r3, [r7, #2]
 8004224:	4413      	add	r3, r2
 8004226:	b29b      	uxth	r3, r3
 8004228:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 800422a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800422e:	2b00      	cmp	r3, #0
 8004230:	da04      	bge.n	800423c <vertScroll+0x9c>
        vsp += scrollines;          //keep in unsigned range
 8004232:	8aba      	ldrh	r2, [r7, #20]
 8004234:	88bb      	ldrh	r3, [r7, #4]
 8004236:	4413      	add	r3, r2
 8004238:	b29b      	uxth	r3, r3
 800423a:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 800423c:	88fa      	ldrh	r2, [r7, #6]
 800423e:	88bb      	ldrh	r3, [r7, #4]
 8004240:	4413      	add	r3, r2
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29b      	uxth	r3, r3
 8004248:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 800424a:	4b65      	ldr	r3, [pc, #404]	; (80043e0 <vertScroll+0x240>)
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d072      	beq.n	800433c <vertScroll+0x19c>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8004256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800425a:	121b      	asrs	r3, r3, #8
 800425c:	b21b      	sxth	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 8004268:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800426c:	121b      	asrs	r3, r3, #8
 800426e:	b21b      	sxth	r3, r3
 8004270:	b2db      	uxtb	r3, r3
 8004272:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 8004274:	88bb      	ldrh	r3, [r7, #4]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 800427a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800427e:	121b      	asrs	r3, r3, #8
 8004280:	b21b      	sxth	r3, r3
 8004282:	b2db      	uxtb	r3, r3
 8004284:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 8004286:	8afb      	ldrh	r3, [r7, #22]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 800428c:	4b55      	ldr	r3, [pc, #340]	; (80043e4 <vertScroll+0x244>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <vertScroll+0xf8>
 8004294:	230e      	movs	r3, #14
 8004296:	e000      	b.n	800429a <vertScroll+0xfa>
 8004298:	2333      	movs	r3, #51	; 0x33
 800429a:	f107 020c 	add.w	r2, r7, #12
 800429e:	2106      	movs	r1, #6
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fd fbcb 	bl	8001a3c <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 80042a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80042aa:	121b      	asrs	r3, r3, #8
 80042ac:	b21b      	sxth	r3, r3
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 80042b2:	8abb      	ldrh	r3, [r7, #20]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 80042b8:	4b4a      	ldr	r3, [pc, #296]	; (80043e4 <vertScroll+0x244>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <vertScroll+0x124>
 80042c0:	2314      	movs	r3, #20
 80042c2:	e000      	b.n	80042c6 <vertScroll+0x126>
 80042c4:	2337      	movs	r3, #55	; 0x37
 80042c6:	f107 020c 	add.w	r2, r7, #12
 80042ca:	2102      	movs	r1, #2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fd fbb5 	bl	8001a3c <WriteCmdParamN>
		if (is8347) {
 80042d2:	4b44      	ldr	r3, [pc, #272]	; (80043e4 <vertScroll+0x244>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d01f      	beq.n	800431a <vertScroll+0x17a>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 80042da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <vertScroll+0x156>
 80042e2:	4b3d      	ldr	r3, [pc, #244]	; (80043d8 <vertScroll+0x238>)
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	f248 3247 	movw	r2, #33607	; 0x8347
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d101      	bne.n	80042f2 <vertScroll+0x152>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e002      	b.n	80042f8 <vertScroll+0x158>
 80042f2:	2308      	movs	r3, #8
 80042f4:	e000      	b.n	80042f8 <vertScroll+0x158>
 80042f6:	2300      	movs	r3, #0
 80042f8:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 80042fa:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <vertScroll+0x238>)
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	f248 3247 	movw	r2, #33607	; 0x8347
 8004302:	4293      	cmp	r3, r2
 8004304:	d101      	bne.n	800430a <vertScroll+0x16a>
 8004306:	2318      	movs	r3, #24
 8004308:	e000      	b.n	800430c <vertScroll+0x16c>
 800430a:	2301      	movs	r3, #1
 800430c:	f107 020c 	add.w	r2, r7, #12
 8004310:	2101      	movs	r1, #1
 8004312:	4618      	mov	r0, r3
 8004314:	f7fd fb92 	bl	8001a3c <WriteCmdParamN>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
		}
		return;
 8004318:	e059      	b.n	80043ce <vertScroll+0x22e>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 800431a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d155      	bne.n	80043ce <vertScroll+0x22e>
 8004322:	4b2f      	ldr	r3, [pc, #188]	; (80043e0 <vertScroll+0x240>)
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d04f      	beq.n	80043ce <vertScroll+0x22e>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 800432e:	2200      	movs	r2, #0
 8004330:	2100      	movs	r1, #0
 8004332:	2013      	movs	r0, #19
 8004334:	f7fd fb82 	bl	8001a3c <WriteCmdParamN>
		return;
 8004338:	bf00      	nop
 800433a:	e048      	b.n	80043ce <vertScroll+0x22e>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 800433c:	4b26      	ldr	r3, [pc, #152]	; (80043d8 <vertScroll+0x238>)
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	f247 7293 	movw	r2, #30611	; 0x7793
 8004344:	4293      	cmp	r3, r2
 8004346:	d021      	beq.n	800438c <vertScroll+0x1ec>
 8004348:	f247 7293 	movw	r2, #30611	; 0x7793
 800434c:	4293      	cmp	r3, r2
 800434e:	dc08      	bgt.n	8004362 <vertScroll+0x1c2>
 8004350:	f245 4220 	movw	r2, #21536	; 0x5420
 8004354:	4293      	cmp	r3, r2
 8004356:	d019      	beq.n	800438c <vertScroll+0x1ec>
 8004358:	f247 7283 	movw	r2, #30595	; 0x7783
 800435c:	4293      	cmp	r3, r2
 800435e:	d009      	beq.n	8004374 <vertScroll+0x1d4>
 8004360:	e025      	b.n	80043ae <vertScroll+0x20e>
 8004362:	f249 3226 	movw	r2, #37670	; 0x9326
 8004366:	4293      	cmp	r3, r2
 8004368:	d010      	beq.n	800438c <vertScroll+0x1ec>
 800436a:	f24b 5209 	movw	r2, #46345	; 0xb509
 800436e:	4293      	cmp	r3, r2
 8004370:	d00c      	beq.n	800438c <vertScroll+0x1ec>
 8004372:	e01c      	b.n	80043ae <vertScroll+0x20e>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 8004374:	4b1c      	ldr	r3, [pc, #112]	; (80043e8 <vertScroll+0x248>)
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	4619      	mov	r1, r3
 800437a:	2061      	movs	r0, #97	; 0x61
 800437c:	f7fd f8a0 	bl	80014c0 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8004380:	8abb      	ldrh	r3, [r7, #20]
 8004382:	4619      	mov	r1, r3
 8004384:	206a      	movs	r0, #106	; 0x6a
 8004386:	f7fd f89b 	bl	80014c0 <WriteCmdData>
        break;
 800438a:	e021      	b.n	80043d0 <vertScroll+0x230>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 800438c:	4b16      	ldr	r3, [pc, #88]	; (80043e8 <vertScroll+0x248>)
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	f043 0302 	orr.w	r3, r3, #2
 8004394:	b29b      	uxth	r3, r3
 8004396:	4619      	mov	r1, r3
 8004398:	f240 4001 	movw	r0, #1025	; 0x401
 800439c:	f7fd f890 	bl	80014c0 <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 80043a0:	8abb      	ldrh	r3, [r7, #20]
 80043a2:	4619      	mov	r1, r3
 80043a4:	f240 4004 	movw	r0, #1028	; 0x404
 80043a8:	f7fd f88a 	bl	80014c0 <WriteCmdData>
        break;
 80043ac:	e010      	b.n	80043d0 <vertScroll+0x230>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 80043ae:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <vertScroll+0x248>)
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	f043 0302 	orr.w	r3, r3, #2
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	4619      	mov	r1, r3
 80043ba:	2061      	movs	r0, #97	; 0x61
 80043bc:	f7fd f880 	bl	80014c0 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 80043c0:	8abb      	ldrh	r3, [r7, #20]
 80043c2:	4619      	mov	r1, r3
 80043c4:	206a      	movs	r0, #106	; 0x6a
 80043c6:	f7fd f87b 	bl	80014c0 <WriteCmdData>
        break;
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <vertScroll+0x230>
		return;
 80043ce:	bf00      	nop
    }
}
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	2000029a 	.word	0x2000029a
 80043dc:	20000067 	.word	0x20000067
 80043e0:	2000028c 	.word	0x2000028c
 80043e4:	20000064 	.word	0x20000064
 80043e8:	20000290 	.word	0x20000290

080043ec <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	4603      	mov	r3, r0
 80043f4:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80043f6:	4b08      	ldr	r3, [pc, #32]	; (8004418 <fillScreen+0x2c>)
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b21a      	sxth	r2, r3
 80043fc:	4b07      	ldr	r3, [pc, #28]	; (800441c <fillScreen+0x30>)
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	b219      	sxth	r1, r3
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	460b      	mov	r3, r1
 8004408:	2100      	movs	r1, #0
 800440a:	2000      	movs	r0, #0
 800440c:	f000 fcb4 	bl	8004d78 <fillRect>
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	2000002c 	.word	0x2000002c
 800441c:	2000002e 	.word	0x2000002e

08004420 <invertDisplay>:

void invertDisplay(uint8_t i)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 800442a:	4b46      	ldr	r3, [pc, #280]	; (8004544 <invertDisplay+0x124>)
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004432:	2b00      	cmp	r3, #0
 8004434:	bf14      	ite	ne
 8004436:	2301      	movne	r3, #1
 8004438:	2300      	moveq	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	b21a      	sxth	r2, r3
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	b21b      	sxth	r3, r3
 8004442:	4053      	eors	r3, r2
 8004444:	b21b      	sxth	r3, r3
 8004446:	b29a      	uxth	r2, r3
 8004448:	4b3f      	ldr	r3, [pc, #252]	; (8004548 <invertDisplay+0x128>)
 800444a:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 800444c:	4b3d      	ldr	r3, [pc, #244]	; (8004544 <invertDisplay+0x124>)
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d035      	beq.n	80044c4 <invertDisplay+0xa4>
        if (is8347) {
 8004458:	4b3c      	ldr	r3, [pc, #240]	; (800454c <invertDisplay+0x12c>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d024      	beq.n	80044aa <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8004460:	4b3b      	ldr	r3, [pc, #236]	; (8004550 <invertDisplay+0x130>)
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	f248 3247 	movw	r2, #33607	; 0x8347
 8004468:	4293      	cmp	r3, r2
 800446a:	d005      	beq.n	8004478 <invertDisplay+0x58>
 800446c:	4b38      	ldr	r3, [pc, #224]	; (8004550 <invertDisplay+0x130>)
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	f245 2252 	movw	r2, #21074	; 0x5252
 8004474:	4293      	cmp	r3, r2
 8004476:	d108      	bne.n	800448a <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 8004478:	4b33      	ldr	r3, [pc, #204]	; (8004548 <invertDisplay+0x128>)
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <invertDisplay+0x64>
 8004480:	2306      	movs	r3, #6
 8004482:	e000      	b.n	8004486 <invertDisplay+0x66>
 8004484:	2302      	movs	r3, #2
 8004486:	73fb      	strb	r3, [r7, #15]
 8004488:	e007      	b.n	800449a <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 800448a:	4b2f      	ldr	r3, [pc, #188]	; (8004548 <invertDisplay+0x128>)
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <invertDisplay+0x76>
 8004492:	2308      	movs	r3, #8
 8004494:	e000      	b.n	8004498 <invertDisplay+0x78>
 8004496:	230a      	movs	r3, #10
 8004498:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 800449a:	f107 030f 	add.w	r3, r7, #15
 800449e:	461a      	mov	r2, r3
 80044a0:	2101      	movs	r1, #1
 80044a2:	2001      	movs	r0, #1
 80044a4:	f7fd faca 	bl	8001a3c <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 80044a8:	e049      	b.n	800453e <invertDisplay+0x11e>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 80044aa:	4b27      	ldr	r3, [pc, #156]	; (8004548 <invertDisplay+0x128>)
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <invertDisplay+0x96>
 80044b2:	2321      	movs	r3, #33	; 0x21
 80044b4:	e000      	b.n	80044b8 <invertDisplay+0x98>
 80044b6:	2320      	movs	r3, #32
 80044b8:	2200      	movs	r2, #0
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fd fabd 	bl	8001a3c <WriteCmdParamN>
 80044c2:	e03c      	b.n	800453e <invertDisplay+0x11e>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 80044c4:	4b22      	ldr	r3, [pc, #136]	; (8004550 <invertDisplay+0x130>)
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	f247 7293 	movw	r2, #30611	; 0x7793
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d024      	beq.n	800451a <invertDisplay+0xfa>
 80044d0:	f247 7293 	movw	r2, #30611	; 0x7793
 80044d4:	4293      	cmp	r3, r2
 80044d6:	dc07      	bgt.n	80044e8 <invertDisplay+0xc8>
 80044d8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80044dc:	d010      	beq.n	8004500 <invertDisplay+0xe0>
 80044de:	f245 4220 	movw	r2, #21536	; 0x5420
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d019      	beq.n	800451a <invertDisplay+0xfa>
 80044e6:	e023      	b.n	8004530 <invertDisplay+0x110>
 80044e8:	f249 3226 	movw	r2, #37670	; 0x9326
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d014      	beq.n	800451a <invertDisplay+0xfa>
 80044f0:	f24b 5209 	movw	r2, #46345	; 0xb509
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d010      	beq.n	800451a <invertDisplay+0xfa>
 80044f8:	f249 2225 	movw	r2, #37413	; 0x9225
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d117      	bne.n	8004530 <invertDisplay+0x110>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8004500:	4b11      	ldr	r3, [pc, #68]	; (8004548 <invertDisplay+0x128>)
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	b21b      	sxth	r3, r3
 8004508:	f043 0313 	orr.w	r3, r3, #19
 800450c:	b21b      	sxth	r3, r3
 800450e:	b29b      	uxth	r3, r3
 8004510:	4619      	mov	r1, r3
 8004512:	2007      	movs	r0, #7
 8004514:	f7fc ffd4 	bl	80014c0 <WriteCmdData>
        break;
 8004518:	e011      	b.n	800453e <invertDisplay+0x11e>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <invertDisplay+0x128>)
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	f043 0302 	orr.w	r3, r3, #2
 8004522:	b29b      	uxth	r3, r3
 8004524:	4619      	mov	r1, r3
 8004526:	f240 4001 	movw	r0, #1025	; 0x401
 800452a:	f7fc ffc9 	bl	80014c0 <WriteCmdData>
        break;
 800452e:	e006      	b.n	800453e <invertDisplay+0x11e>
    default:
        WriteCmdData(0x61, _lcd_rev);
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <invertDisplay+0x128>)
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	4619      	mov	r1, r3
 8004536:	2061      	movs	r0, #97	; 0x61
 8004538:	f7fc ffc2 	bl	80014c0 <WriteCmdData>
        break;
 800453c:	bf00      	nop
    }
}
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	2000028c 	.word	0x2000028c
 8004548:	20000290 	.word	0x20000290
 800454c:	20000064 	.word	0x20000064
 8004550:	2000029a 	.word	0x2000029a

08004554 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8004554:	b590      	push	{r4, r7, lr}
 8004556:	b085      	sub	sp, #20
 8004558:	af02      	add	r7, sp, #8
 800455a:	4604      	mov	r4, r0
 800455c:	4608      	mov	r0, r1
 800455e:	4611      	mov	r1, r2
 8004560:	461a      	mov	r2, r3
 8004562:	4623      	mov	r3, r4
 8004564:	80fb      	strh	r3, [r7, #6]
 8004566:	4603      	mov	r3, r0
 8004568:	80bb      	strh	r3, [r7, #4]
 800456a:	460b      	mov	r3, r1
 800456c:	807b      	strh	r3, [r7, #2]
 800456e:	4613      	mov	r3, r2
 8004570:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, 1, h, color);
 8004572:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004576:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800457a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800457e:	883b      	ldrh	r3, [r7, #0]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	4613      	mov	r3, r2
 8004584:	2201      	movs	r2, #1
 8004586:	f000 fbf7 	bl	8004d78 <fillRect>
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	bd90      	pop	{r4, r7, pc}

08004592 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8004592:	b590      	push	{r4, r7, lr}
 8004594:	b085      	sub	sp, #20
 8004596:	af02      	add	r7, sp, #8
 8004598:	4604      	mov	r4, r0
 800459a:	4608      	mov	r0, r1
 800459c:	4611      	mov	r1, r2
 800459e:	461a      	mov	r2, r3
 80045a0:	4623      	mov	r3, r4
 80045a2:	80fb      	strh	r3, [r7, #6]
 80045a4:	4603      	mov	r3, r0
 80045a6:	80bb      	strh	r3, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	807b      	strh	r3, [r7, #2]
 80045ac:	4613      	mov	r3, r2
 80045ae:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, w, 1, color);
 80045b0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80045b4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80045b8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80045bc:	883b      	ldrh	r3, [r7, #0]
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	2301      	movs	r3, #1
 80045c2:	f000 fbd9 	bl	8004d78 <fillRect>
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd90      	pop	{r4, r7, pc}

080045ce <writePixel>:

void writePixel(int16_t x, int16_t y, uint16_t color)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	4603      	mov	r3, r0
 80045d6:	80fb      	strh	r3, [r7, #6]
 80045d8:	460b      	mov	r3, r1
 80045da:	80bb      	strh	r3, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 80045e0:	887a      	ldrh	r2, [r7, #2]
 80045e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80045e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff fbb0 	bl	8003d50 <drawPixel>
}
 80045f0:	bf00      	nop
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80045f8:	b590      	push	{r4, r7, lr}
 80045fa:	b089      	sub	sp, #36	; 0x24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4604      	mov	r4, r0
 8004600:	4608      	mov	r0, r1
 8004602:	4611      	mov	r1, r2
 8004604:	461a      	mov	r2, r3
 8004606:	4623      	mov	r3, r4
 8004608:	80fb      	strh	r3, [r7, #6]
 800460a:	4603      	mov	r3, r0
 800460c:	80bb      	strh	r3, [r7, #4]
 800460e:	460b      	mov	r3, r1
 8004610:	807b      	strh	r3, [r7, #2]
 8004612:	4613      	mov	r3, r2
 8004614:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8004616:	f9b7 2000 	ldrsh.w	r2, [r7]
 800461a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004624:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004628:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800462c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004630:	1acb      	subs	r3, r1, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	bfb8      	it	lt
 8004636:	425b      	neglt	r3, r3
 8004638:	429a      	cmp	r2, r3
 800463a:	bfcc      	ite	gt
 800463c:	2301      	movgt	r3, #1
 800463e:	2300      	movle	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	837b      	strh	r3, [r7, #26]
    if (steep) {
 8004644:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00b      	beq.n	8004664 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 800464c:	88fb      	ldrh	r3, [r7, #6]
 800464e:	833b      	strh	r3, [r7, #24]
 8004650:	88bb      	ldrh	r3, [r7, #4]
 8004652:	80fb      	strh	r3, [r7, #6]
 8004654:	8b3b      	ldrh	r3, [r7, #24]
 8004656:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8004658:	887b      	ldrh	r3, [r7, #2]
 800465a:	82fb      	strh	r3, [r7, #22]
 800465c:	883b      	ldrh	r3, [r7, #0]
 800465e:	807b      	strh	r3, [r7, #2]
 8004660:	8afb      	ldrh	r3, [r7, #22]
 8004662:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8004664:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004668:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800466c:	429a      	cmp	r2, r3
 800466e:	dd0b      	ble.n	8004688 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	82bb      	strh	r3, [r7, #20]
 8004674:	887b      	ldrh	r3, [r7, #2]
 8004676:	80fb      	strh	r3, [r7, #6]
 8004678:	8abb      	ldrh	r3, [r7, #20]
 800467a:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 800467c:	88bb      	ldrh	r3, [r7, #4]
 800467e:	827b      	strh	r3, [r7, #18]
 8004680:	883b      	ldrh	r3, [r7, #0]
 8004682:	80bb      	strh	r3, [r7, #4]
 8004684:	8a7b      	ldrh	r3, [r7, #18]
 8004686:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8004688:	887a      	ldrh	r2, [r7, #2]
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	b29b      	uxth	r3, r3
 8004690:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 8004692:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004696:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	bfb8      	it	lt
 80046a0:	425b      	neglt	r3, r3
 80046a2:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 80046a4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	da00      	bge.n	80046ae <writeLine+0xb6>
 80046ac:	3301      	adds	r3, #1
 80046ae:	105b      	asrs	r3, r3, #1
 80046b0:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 80046b2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80046b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	da02      	bge.n	80046c4 <writeLine+0xcc>
        ystep = 1;
 80046be:	2301      	movs	r3, #1
 80046c0:	83bb      	strh	r3, [r7, #28]
 80046c2:	e031      	b.n	8004728 <writeLine+0x130>
    } else {
        ystep = -1;
 80046c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046c8:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 80046ca:	e02d      	b.n	8004728 <writeLine+0x130>
        if (steep) {
 80046cc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <writeLine+0xee>
            writePixel(y0, x0, color);
 80046d4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80046d6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80046da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff ff75 	bl	80045ce <writePixel>
 80046e4:	e007      	b.n	80046f6 <writeLine+0xfe>
        } else {
            writePixel(x0, y0, color);
 80046e6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80046e8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80046ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ff6c 	bl	80045ce <writePixel>
        }
        err -= dy;
 80046f6:	8bfa      	ldrh	r2, [r7, #30]
 80046f8:	89fb      	ldrh	r3, [r7, #14]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 8004700:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004704:	2b00      	cmp	r3, #0
 8004706:	da09      	bge.n	800471c <writeLine+0x124>
            y0 += ystep;
 8004708:	88ba      	ldrh	r2, [r7, #4]
 800470a:	8bbb      	ldrh	r3, [r7, #28]
 800470c:	4413      	add	r3, r2
 800470e:	b29b      	uxth	r3, r3
 8004710:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8004712:	8bfa      	ldrh	r2, [r7, #30]
 8004714:	8a3b      	ldrh	r3, [r7, #16]
 8004716:	4413      	add	r3, r2
 8004718:	b29b      	uxth	r3, r3
 800471a:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 800471c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004720:	b29b      	uxth	r3, r3
 8004722:	3301      	adds	r3, #1
 8004724:	b29b      	uxth	r3, r3
 8004726:	80fb      	strh	r3, [r7, #6]
 8004728:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800472c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004730:	429a      	cmp	r2, r3
 8004732:	ddcb      	ble.n	80046cc <writeLine+0xd4>
        }
    }
}
 8004734:	bf00      	nop
 8004736:	3724      	adds	r7, #36	; 0x24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd90      	pop	{r4, r7, pc}

0800473c <drawLine>:


void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800473c:	b590      	push	{r4, r7, lr}
 800473e:	b087      	sub	sp, #28
 8004740:	af02      	add	r7, sp, #8
 8004742:	4604      	mov	r4, r0
 8004744:	4608      	mov	r0, r1
 8004746:	4611      	mov	r1, r2
 8004748:	461a      	mov	r2, r3
 800474a:	4623      	mov	r3, r4
 800474c:	80fb      	strh	r3, [r7, #6]
 800474e:	4603      	mov	r3, r0
 8004750:	80bb      	strh	r3, [r7, #4]
 8004752:	460b      	mov	r3, r1
 8004754:	807b      	strh	r3, [r7, #2]
 8004756:	4613      	mov	r3, r2
 8004758:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 800475a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800475e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004762:	429a      	cmp	r2, r3
 8004764:	d11a      	bne.n	800479c <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8004766:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800476a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800476e:	429a      	cmp	r2, r3
 8004770:	dd05      	ble.n	800477e <drawLine+0x42>
 8004772:	88bb      	ldrh	r3, [r7, #4]
 8004774:	81bb      	strh	r3, [r7, #12]
 8004776:	883b      	ldrh	r3, [r7, #0]
 8004778:	80bb      	strh	r3, [r7, #4]
 800477a:	89bb      	ldrh	r3, [r7, #12]
 800477c:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 800477e:	883a      	ldrh	r2, [r7, #0]
 8004780:	88bb      	ldrh	r3, [r7, #4]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	b29b      	uxth	r3, r3
 8004786:	3301      	adds	r3, #1
 8004788:	b29b      	uxth	r3, r3
 800478a:	b21a      	sxth	r2, r3
 800478c:	8c3b      	ldrh	r3, [r7, #32]
 800478e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004792:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004796:	f7ff fedd 	bl	8004554 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 800479a:	e02d      	b.n	80047f8 <drawLine+0xbc>
    } else if(y0 == y1){
 800479c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80047a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d11a      	bne.n	80047de <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80047a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80047ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	dd05      	ble.n	80047c0 <drawLine+0x84>
 80047b4:	88fb      	ldrh	r3, [r7, #6]
 80047b6:	81fb      	strh	r3, [r7, #14]
 80047b8:	887b      	ldrh	r3, [r7, #2]
 80047ba:	80fb      	strh	r3, [r7, #6]
 80047bc:	89fb      	ldrh	r3, [r7, #14]
 80047be:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80047c0:	887a      	ldrh	r2, [r7, #2]
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3301      	adds	r3, #1
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	b21a      	sxth	r2, r3
 80047ce:	8c3b      	ldrh	r3, [r7, #32]
 80047d0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80047d4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80047d8:	f7ff fedb 	bl	8004592 <drawFastHLine>
}
 80047dc:	e00c      	b.n	80047f8 <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 80047de:	f9b7 4000 	ldrsh.w	r4, [r7]
 80047e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80047e6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80047ea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80047ee:	8c3b      	ldrh	r3, [r7, #32]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	4623      	mov	r3, r4
 80047f4:	f7ff ff00 	bl	80045f8 <writeLine>
}
 80047f8:	bf00      	nop
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd90      	pop	{r4, r7, pc}

08004800 <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8004800:	b590      	push	{r4, r7, lr}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	4604      	mov	r4, r0
 8004808:	4608      	mov	r0, r1
 800480a:	4611      	mov	r1, r2
 800480c:	461a      	mov	r2, r3
 800480e:	4623      	mov	r3, r4
 8004810:	80fb      	strh	r3, [r7, #6]
 8004812:	4603      	mov	r3, r0
 8004814:	80bb      	strh	r3, [r7, #4]
 8004816:	460b      	mov	r3, r1
 8004818:	807b      	strh	r3, [r7, #2]
 800481a:	4613      	mov	r3, r2
 800481c:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800481e:	887b      	ldrh	r3, [r7, #2]
 8004820:	f1c3 0301 	rsb	r3, r3, #1
 8004824:	b29b      	uxth	r3, r3
 8004826:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8004828:	2301      	movs	r3, #1
 800482a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800482c:	887b      	ldrh	r3, [r7, #2]
 800482e:	461a      	mov	r2, r3
 8004830:	03d2      	lsls	r2, r2, #15
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	b29b      	uxth	r3, r3
 8004838:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 800483a:	2300      	movs	r3, #0
 800483c:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800483e:	887b      	ldrh	r3, [r7, #2]
 8004840:	81fb      	strh	r3, [r7, #14]

    writePixel(x0  , y0+r, color);
 8004842:	88ba      	ldrh	r2, [r7, #4]
 8004844:	887b      	ldrh	r3, [r7, #2]
 8004846:	4413      	add	r3, r2
 8004848:	b29b      	uxth	r3, r3
 800484a:	b219      	sxth	r1, r3
 800484c:	883a      	ldrh	r2, [r7, #0]
 800484e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff febb 	bl	80045ce <writePixel>
    writePixel(x0  , y0-r, color);
 8004858:	88ba      	ldrh	r2, [r7, #4]
 800485a:	887b      	ldrh	r3, [r7, #2]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	b29b      	uxth	r3, r3
 8004860:	b219      	sxth	r1, r3
 8004862:	883a      	ldrh	r2, [r7, #0]
 8004864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff feb0 	bl	80045ce <writePixel>
    writePixel(x0+r, y0  , color);
 800486e:	88fa      	ldrh	r2, [r7, #6]
 8004870:	887b      	ldrh	r3, [r7, #2]
 8004872:	4413      	add	r3, r2
 8004874:	b29b      	uxth	r3, r3
 8004876:	b21b      	sxth	r3, r3
 8004878:	883a      	ldrh	r2, [r7, #0]
 800487a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff fea5 	bl	80045ce <writePixel>
    writePixel(x0-r, y0  , color);
 8004884:	88fa      	ldrh	r2, [r7, #6]
 8004886:	887b      	ldrh	r3, [r7, #2]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	b29b      	uxth	r3, r3
 800488c:	b21b      	sxth	r3, r3
 800488e:	883a      	ldrh	r2, [r7, #0]
 8004890:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff fe9a 	bl	80045ce <writePixel>

    while (x<y) {
 800489a:	e091      	b.n	80049c0 <drawCircle+0x1c0>
        if (f >= 0) {
 800489c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	db0e      	blt.n	80048c2 <drawCircle+0xc2>
            y--;
 80048a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80048b0:	8a7b      	ldrh	r3, [r7, #18]
 80048b2:	3302      	adds	r3, #2
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80048b8:	8afa      	ldrh	r2, [r7, #22]
 80048ba:	8a7b      	ldrh	r3, [r7, #18]
 80048bc:	4413      	add	r3, r2
 80048be:	b29b      	uxth	r3, r3
 80048c0:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80048c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3301      	adds	r3, #1
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80048ce:	8abb      	ldrh	r3, [r7, #20]
 80048d0:	3302      	adds	r3, #2
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80048d6:	8afa      	ldrh	r2, [r7, #22]
 80048d8:	8abb      	ldrh	r3, [r7, #20]
 80048da:	4413      	add	r3, r2
 80048dc:	b29b      	uxth	r3, r3
 80048de:	82fb      	strh	r3, [r7, #22]

        writePixel(x0 + x, y0 + y, color);
 80048e0:	88fa      	ldrh	r2, [r7, #6]
 80048e2:	8a3b      	ldrh	r3, [r7, #16]
 80048e4:	4413      	add	r3, r2
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	b218      	sxth	r0, r3
 80048ea:	88ba      	ldrh	r2, [r7, #4]
 80048ec:	89fb      	ldrh	r3, [r7, #14]
 80048ee:	4413      	add	r3, r2
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	b21b      	sxth	r3, r3
 80048f4:	883a      	ldrh	r2, [r7, #0]
 80048f6:	4619      	mov	r1, r3
 80048f8:	f7ff fe69 	bl	80045ce <writePixel>
        writePixel(x0 - x, y0 + y, color);
 80048fc:	88fa      	ldrh	r2, [r7, #6]
 80048fe:	8a3b      	ldrh	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	b29b      	uxth	r3, r3
 8004904:	b218      	sxth	r0, r3
 8004906:	88ba      	ldrh	r2, [r7, #4]
 8004908:	89fb      	ldrh	r3, [r7, #14]
 800490a:	4413      	add	r3, r2
 800490c:	b29b      	uxth	r3, r3
 800490e:	b21b      	sxth	r3, r3
 8004910:	883a      	ldrh	r2, [r7, #0]
 8004912:	4619      	mov	r1, r3
 8004914:	f7ff fe5b 	bl	80045ce <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8004918:	88fa      	ldrh	r2, [r7, #6]
 800491a:	8a3b      	ldrh	r3, [r7, #16]
 800491c:	4413      	add	r3, r2
 800491e:	b29b      	uxth	r3, r3
 8004920:	b218      	sxth	r0, r3
 8004922:	88ba      	ldrh	r2, [r7, #4]
 8004924:	89fb      	ldrh	r3, [r7, #14]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	b29b      	uxth	r3, r3
 800492a:	b21b      	sxth	r3, r3
 800492c:	883a      	ldrh	r2, [r7, #0]
 800492e:	4619      	mov	r1, r3
 8004930:	f7ff fe4d 	bl	80045ce <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8004934:	88fa      	ldrh	r2, [r7, #6]
 8004936:	8a3b      	ldrh	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	b29b      	uxth	r3, r3
 800493c:	b218      	sxth	r0, r3
 800493e:	88ba      	ldrh	r2, [r7, #4]
 8004940:	89fb      	ldrh	r3, [r7, #14]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	b29b      	uxth	r3, r3
 8004946:	b21b      	sxth	r3, r3
 8004948:	883a      	ldrh	r2, [r7, #0]
 800494a:	4619      	mov	r1, r3
 800494c:	f7ff fe3f 	bl	80045ce <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8004950:	88fa      	ldrh	r2, [r7, #6]
 8004952:	89fb      	ldrh	r3, [r7, #14]
 8004954:	4413      	add	r3, r2
 8004956:	b29b      	uxth	r3, r3
 8004958:	b218      	sxth	r0, r3
 800495a:	88ba      	ldrh	r2, [r7, #4]
 800495c:	8a3b      	ldrh	r3, [r7, #16]
 800495e:	4413      	add	r3, r2
 8004960:	b29b      	uxth	r3, r3
 8004962:	b21b      	sxth	r3, r3
 8004964:	883a      	ldrh	r2, [r7, #0]
 8004966:	4619      	mov	r1, r3
 8004968:	f7ff fe31 	bl	80045ce <writePixel>
        writePixel(x0 - y, y0 + x, color);
 800496c:	88fa      	ldrh	r2, [r7, #6]
 800496e:	89fb      	ldrh	r3, [r7, #14]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	b29b      	uxth	r3, r3
 8004974:	b218      	sxth	r0, r3
 8004976:	88ba      	ldrh	r2, [r7, #4]
 8004978:	8a3b      	ldrh	r3, [r7, #16]
 800497a:	4413      	add	r3, r2
 800497c:	b29b      	uxth	r3, r3
 800497e:	b21b      	sxth	r3, r3
 8004980:	883a      	ldrh	r2, [r7, #0]
 8004982:	4619      	mov	r1, r3
 8004984:	f7ff fe23 	bl	80045ce <writePixel>
        writePixel(x0 + y, y0 - x, color);
 8004988:	88fa      	ldrh	r2, [r7, #6]
 800498a:	89fb      	ldrh	r3, [r7, #14]
 800498c:	4413      	add	r3, r2
 800498e:	b29b      	uxth	r3, r3
 8004990:	b218      	sxth	r0, r3
 8004992:	88ba      	ldrh	r2, [r7, #4]
 8004994:	8a3b      	ldrh	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	b29b      	uxth	r3, r3
 800499a:	b21b      	sxth	r3, r3
 800499c:	883a      	ldrh	r2, [r7, #0]
 800499e:	4619      	mov	r1, r3
 80049a0:	f7ff fe15 	bl	80045ce <writePixel>
        writePixel(x0 - y, y0 - x, color);
 80049a4:	88fa      	ldrh	r2, [r7, #6]
 80049a6:	89fb      	ldrh	r3, [r7, #14]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	b218      	sxth	r0, r3
 80049ae:	88ba      	ldrh	r2, [r7, #4]
 80049b0:	8a3b      	ldrh	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	b21b      	sxth	r3, r3
 80049b8:	883a      	ldrh	r2, [r7, #0]
 80049ba:	4619      	mov	r1, r3
 80049bc:	f7ff fe07 	bl	80045ce <writePixel>
    while (x<y) {
 80049c0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80049c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	f6ff af67 	blt.w	800489c <drawCircle+0x9c>
    }
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd90      	pop	{r4, r7, pc}

080049d6 <drawCircleHelper>:

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 80049d6:	b590      	push	{r4, r7, lr}
 80049d8:	b087      	sub	sp, #28
 80049da:	af00      	add	r7, sp, #0
 80049dc:	4604      	mov	r4, r0
 80049de:	4608      	mov	r0, r1
 80049e0:	4611      	mov	r1, r2
 80049e2:	461a      	mov	r2, r3
 80049e4:	4623      	mov	r3, r4
 80049e6:	80fb      	strh	r3, [r7, #6]
 80049e8:	4603      	mov	r3, r0
 80049ea:	80bb      	strh	r3, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	807b      	strh	r3, [r7, #2]
 80049f0:	4613      	mov	r3, r2
 80049f2:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 80049f4:	887b      	ldrh	r3, [r7, #2]
 80049f6:	f1c3 0301 	rsb	r3, r3, #1
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80049fe:	2301      	movs	r3, #1
 8004a00:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8004a02:	887b      	ldrh	r3, [r7, #2]
 8004a04:	461a      	mov	r2, r3
 8004a06:	03d2      	lsls	r2, r2, #15
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8004a14:	887b      	ldrh	r3, [r7, #2]
 8004a16:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8004a18:	e0a5      	b.n	8004b66 <drawCircleHelper+0x190>
        if (f >= 0) {
 8004a1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	db0e      	blt.n	8004a40 <drawCircleHelper+0x6a>
            y--;
 8004a22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8004a2e:	8a7b      	ldrh	r3, [r7, #18]
 8004a30:	3302      	adds	r3, #2
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8004a36:	8afa      	ldrh	r2, [r7, #22]
 8004a38:	8a7b      	ldrh	r3, [r7, #18]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8004a40:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3301      	adds	r3, #1
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8004a4c:	8abb      	ldrh	r3, [r7, #20]
 8004a4e:	3302      	adds	r3, #2
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8004a54:	8afa      	ldrh	r2, [r7, #22]
 8004a56:	8abb      	ldrh	r3, [r7, #20]
 8004a58:	4413      	add	r3, r2
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8004a5e:	787b      	ldrb	r3, [r7, #1]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01b      	beq.n	8004aa0 <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 8004a68:	88fa      	ldrh	r2, [r7, #6]
 8004a6a:	8a3b      	ldrh	r3, [r7, #16]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	b218      	sxth	r0, r3
 8004a72:	88ba      	ldrh	r2, [r7, #4]
 8004a74:	89fb      	ldrh	r3, [r7, #14]
 8004a76:	4413      	add	r3, r2
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	b21b      	sxth	r3, r3
 8004a7c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004a7e:	4619      	mov	r1, r3
 8004a80:	f7ff fda5 	bl	80045ce <writePixel>
            writePixel(x0 + y, y0 + x, color);
 8004a84:	88fa      	ldrh	r2, [r7, #6]
 8004a86:	89fb      	ldrh	r3, [r7, #14]
 8004a88:	4413      	add	r3, r2
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	b218      	sxth	r0, r3
 8004a8e:	88ba      	ldrh	r2, [r7, #4]
 8004a90:	8a3b      	ldrh	r3, [r7, #16]
 8004a92:	4413      	add	r3, r2
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	b21b      	sxth	r3, r3
 8004a98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	f7ff fd97 	bl	80045ce <writePixel>
        }
        if (cornername & 0x2) {
 8004aa0:	787b      	ldrb	r3, [r7, #1]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d01b      	beq.n	8004ae2 <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 8004aaa:	88fa      	ldrh	r2, [r7, #6]
 8004aac:	8a3b      	ldrh	r3, [r7, #16]
 8004aae:	4413      	add	r3, r2
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	b218      	sxth	r0, r3
 8004ab4:	88ba      	ldrh	r2, [r7, #4]
 8004ab6:	89fb      	ldrh	r3, [r7, #14]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	b21b      	sxth	r3, r3
 8004abe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	f7ff fd84 	bl	80045ce <writePixel>
            writePixel(x0 + y, y0 - x, color);
 8004ac6:	88fa      	ldrh	r2, [r7, #6]
 8004ac8:	89fb      	ldrh	r3, [r7, #14]
 8004aca:	4413      	add	r3, r2
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	b218      	sxth	r0, r3
 8004ad0:	88ba      	ldrh	r2, [r7, #4]
 8004ad2:	8a3b      	ldrh	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	b21b      	sxth	r3, r3
 8004ada:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004adc:	4619      	mov	r1, r3
 8004ade:	f7ff fd76 	bl	80045ce <writePixel>
        }
        if (cornername & 0x8) {
 8004ae2:	787b      	ldrb	r3, [r7, #1]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01b      	beq.n	8004b24 <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 8004aec:	88fa      	ldrh	r2, [r7, #6]
 8004aee:	89fb      	ldrh	r3, [r7, #14]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	b218      	sxth	r0, r3
 8004af6:	88ba      	ldrh	r2, [r7, #4]
 8004af8:	8a3b      	ldrh	r3, [r7, #16]
 8004afa:	4413      	add	r3, r2
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	b21b      	sxth	r3, r3
 8004b00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004b02:	4619      	mov	r1, r3
 8004b04:	f7ff fd63 	bl	80045ce <writePixel>
            writePixel(x0 - x, y0 + y, color);
 8004b08:	88fa      	ldrh	r2, [r7, #6]
 8004b0a:	8a3b      	ldrh	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	b218      	sxth	r0, r3
 8004b12:	88ba      	ldrh	r2, [r7, #4]
 8004b14:	89fb      	ldrh	r3, [r7, #14]
 8004b16:	4413      	add	r3, r2
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	b21b      	sxth	r3, r3
 8004b1c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004b1e:	4619      	mov	r1, r3
 8004b20:	f7ff fd55 	bl	80045ce <writePixel>
        }
        if (cornername & 0x1) {
 8004b24:	787b      	ldrb	r3, [r7, #1]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d01b      	beq.n	8004b66 <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 8004b2e:	88fa      	ldrh	r2, [r7, #6]
 8004b30:	89fb      	ldrh	r3, [r7, #14]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	b218      	sxth	r0, r3
 8004b38:	88ba      	ldrh	r2, [r7, #4]
 8004b3a:	8a3b      	ldrh	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	b21b      	sxth	r3, r3
 8004b42:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004b44:	4619      	mov	r1, r3
 8004b46:	f7ff fd42 	bl	80045ce <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8004b4a:	88fa      	ldrh	r2, [r7, #6]
 8004b4c:	8a3b      	ldrh	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	b218      	sxth	r0, r3
 8004b54:	88ba      	ldrh	r2, [r7, #4]
 8004b56:	89fb      	ldrh	r3, [r7, #14]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	b21b      	sxth	r3, r3
 8004b5e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004b60:	4619      	mov	r1, r3
 8004b62:	f7ff fd34 	bl	80045ce <writePixel>
    while (x<y) {
 8004b66:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004b6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	f6ff af53 	blt.w	8004a1a <drawCircleHelper+0x44>
        }
    }
}
 8004b74:	bf00      	nop
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd90      	pop	{r4, r7, pc}

08004b7c <fillCircle>:

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8004b7c:	b590      	push	{r4, r7, lr}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af02      	add	r7, sp, #8
 8004b82:	4604      	mov	r4, r0
 8004b84:	4608      	mov	r0, r1
 8004b86:	4611      	mov	r1, r2
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4623      	mov	r3, r4
 8004b8c:	80fb      	strh	r3, [r7, #6]
 8004b8e:	4603      	mov	r3, r0
 8004b90:	80bb      	strh	r3, [r7, #4]
 8004b92:	460b      	mov	r3, r1
 8004b94:	807b      	strh	r3, [r7, #2]
 8004b96:	4613      	mov	r3, r2
 8004b98:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8004b9a:	88ba      	ldrh	r2, [r7, #4]
 8004b9c:	887b      	ldrh	r3, [r7, #2]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	b219      	sxth	r1, r3
 8004ba4:	887b      	ldrh	r3, [r7, #2]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3301      	adds	r3, #1
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	b21a      	sxth	r2, r3
 8004bb0:	883b      	ldrh	r3, [r7, #0]
 8004bb2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004bb6:	f7ff fccd 	bl	8004554 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8004bba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004bbe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004bc2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004bc6:	883b      	ldrh	r3, [r7, #0]
 8004bc8:	9301      	str	r3, [sp, #4]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	2303      	movs	r3, #3
 8004bd0:	f000 f804 	bl	8004bdc <fillCircleHelper>
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd90      	pop	{r4, r7, pc}

08004bdc <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8004bdc:	b590      	push	{r4, r7, lr}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4604      	mov	r4, r0
 8004be4:	4608      	mov	r0, r1
 8004be6:	4611      	mov	r1, r2
 8004be8:	461a      	mov	r2, r3
 8004bea:	4623      	mov	r3, r4
 8004bec:	80fb      	strh	r3, [r7, #6]
 8004bee:	4603      	mov	r3, r0
 8004bf0:	80bb      	strh	r3, [r7, #4]
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	807b      	strh	r3, [r7, #2]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 8004bfa:	887b      	ldrh	r3, [r7, #2]
 8004bfc:	f1c3 0301 	rsb	r3, r3, #1
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8004c04:	2301      	movs	r3, #1
 8004c06:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8004c08:	887b      	ldrh	r3, [r7, #2]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	03d2      	lsls	r2, r2, #15
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8004c1a:	887b      	ldrh	r3, [r7, #2]
 8004c1c:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8004c1e:	8a3b      	ldrh	r3, [r7, #16]
 8004c20:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8004c22:	89fb      	ldrh	r3, [r7, #14]
 8004c24:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8004c26:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 8004c32:	e096      	b.n	8004d62 <fillCircleHelper+0x186>
        if (f >= 0) {
 8004c34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	db0e      	blt.n	8004c5a <fillCircleHelper+0x7e>
            y--;
 8004c3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8004c48:	8a7b      	ldrh	r3, [r7, #18]
 8004c4a:	3302      	adds	r3, #2
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8004c50:	8afa      	ldrh	r2, [r7, #22]
 8004c52:	8a7b      	ldrh	r3, [r7, #18]
 8004c54:	4413      	add	r3, r2
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8004c5a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3301      	adds	r3, #1
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8004c66:	8abb      	ldrh	r3, [r7, #20]
 8004c68:	3302      	adds	r3, #2
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8004c6e:	8afa      	ldrh	r2, [r7, #22]
 8004c70:	8abb      	ldrh	r3, [r7, #20]
 8004c72:	4413      	add	r3, r2
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8004c78:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004c7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c80:	3301      	adds	r3, #1
 8004c82:	429a      	cmp	r2, r3
 8004c84:	da31      	bge.n	8004cea <fillCircleHelper+0x10e>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8004c86:	787b      	ldrb	r3, [r7, #1]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d013      	beq.n	8004cb8 <fillCircleHelper+0xdc>
 8004c90:	88fa      	ldrh	r2, [r7, #6]
 8004c92:	8a3b      	ldrh	r3, [r7, #16]
 8004c94:	4413      	add	r3, r2
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	b218      	sxth	r0, r3
 8004c9a:	88ba      	ldrh	r2, [r7, #4]
 8004c9c:	89fb      	ldrh	r3, [r7, #14]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	b219      	sxth	r1, r3
 8004ca4:	89fb      	ldrh	r3, [r7, #14]
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004cac:	4413      	add	r3, r2
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	b21a      	sxth	r2, r3
 8004cb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004cb4:	f7ff fc4e 	bl	8004554 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8004cb8:	787b      	ldrb	r3, [r7, #1]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d013      	beq.n	8004cea <fillCircleHelper+0x10e>
 8004cc2:	88fa      	ldrh	r2, [r7, #6]
 8004cc4:	8a3b      	ldrh	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	b218      	sxth	r0, r3
 8004ccc:	88ba      	ldrh	r2, [r7, #4]
 8004cce:	89fb      	ldrh	r3, [r7, #14]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	b219      	sxth	r1, r3
 8004cd6:	89fb      	ldrh	r3, [r7, #14]
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004cde:	4413      	add	r3, r2
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	b21a      	sxth	r2, r3
 8004ce4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ce6:	f7ff fc35 	bl	8004554 <drawFastVLine>
        }
        if(y != py) {
 8004cea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004cee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d033      	beq.n	8004d5e <fillCircleHelper+0x182>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8004cf6:	787b      	ldrb	r3, [r7, #1]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d013      	beq.n	8004d28 <fillCircleHelper+0x14c>
 8004d00:	88fa      	ldrh	r2, [r7, #6]
 8004d02:	897b      	ldrh	r3, [r7, #10]
 8004d04:	4413      	add	r3, r2
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	b218      	sxth	r0, r3
 8004d0a:	88ba      	ldrh	r2, [r7, #4]
 8004d0c:	89bb      	ldrh	r3, [r7, #12]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	b219      	sxth	r1, r3
 8004d14:	89bb      	ldrh	r3, [r7, #12]
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d1c:	4413      	add	r3, r2
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	b21a      	sxth	r2, r3
 8004d22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d24:	f7ff fc16 	bl	8004554 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8004d28:	787b      	ldrb	r3, [r7, #1]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d013      	beq.n	8004d5a <fillCircleHelper+0x17e>
 8004d32:	88fa      	ldrh	r2, [r7, #6]
 8004d34:	897b      	ldrh	r3, [r7, #10]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	b218      	sxth	r0, r3
 8004d3c:	88ba      	ldrh	r2, [r7, #4]
 8004d3e:	89bb      	ldrh	r3, [r7, #12]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	b219      	sxth	r1, r3
 8004d46:	89bb      	ldrh	r3, [r7, #12]
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d4e:	4413      	add	r3, r2
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	b21a      	sxth	r2, r3
 8004d54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d56:	f7ff fbfd 	bl	8004554 <drawFastVLine>
            py = y;
 8004d5a:	89fb      	ldrh	r3, [r7, #14]
 8004d5c:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8004d5e:	8a3b      	ldrh	r3, [r7, #16]
 8004d60:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8004d62:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004d66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	f6ff af62 	blt.w	8004c34 <fillCircleHelper+0x58>
    }
}
 8004d70:	bf00      	nop
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd90      	pop	{r4, r7, pc}

08004d78 <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8004d78:	b590      	push	{r4, r7, lr}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	4604      	mov	r4, r0
 8004d80:	4608      	mov	r0, r1
 8004d82:	4611      	mov	r1, r2
 8004d84:	461a      	mov	r2, r3
 8004d86:	4623      	mov	r3, r4
 8004d88:	80fb      	strh	r3, [r7, #6]
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	80bb      	strh	r3, [r7, #4]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	807b      	strh	r3, [r7, #2]
 8004d92:	4613      	mov	r3, r2
 8004d94:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 8004d96:	4b92      	ldr	r3, [pc, #584]	; (8004fe0 <fillRect+0x268>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <fillRect+0x32>
 8004d9e:	8c3b      	ldrh	r3, [r7, #32]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fc fadd 	bl	8001360 <color565_to_555>
 8004da6:	4603      	mov	r3, r0
 8004da8:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 8004daa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	da08      	bge.n	8004dc4 <fillRect+0x4c>
        w = -w;
 8004db2:	887b      	ldrh	r3, [r7, #2]
 8004db4:	425b      	negs	r3, r3
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	807b      	strh	r3, [r7, #2]
        x -= w;
 8004dba:	88fa      	ldrh	r2, [r7, #6]
 8004dbc:	887b      	ldrh	r3, [r7, #2]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8004dc4:	88fa      	ldrh	r2, [r7, #6]
 8004dc6:	887b      	ldrh	r3, [r7, #2]
 8004dc8:	4413      	add	r3, r2
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8004dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	da01      	bge.n	8004dda <fillRect+0x62>
        x = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 8004dda:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8004dde:	f7fc faa7 	bl	8001330 <width>
 8004de2:	4603      	mov	r3, r0
 8004de4:	429c      	cmp	r4, r3
 8004de6:	dd03      	ble.n	8004df0 <fillRect+0x78>
        end = width();
 8004de8:	f7fc faa2 	bl	8001330 <width>
 8004dec:	4603      	mov	r3, r0
 8004dee:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 8004df0:	89fa      	ldrh	r2, [r7, #14]
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 8004dfa:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da08      	bge.n	8004e14 <fillRect+0x9c>
        h = -h;
 8004e02:	883b      	ldrh	r3, [r7, #0]
 8004e04:	425b      	negs	r3, r3
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	803b      	strh	r3, [r7, #0]
        y -= h;
 8004e0a:	88ba      	ldrh	r2, [r7, #4]
 8004e0c:	883b      	ldrh	r3, [r7, #0]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8004e14:	88ba      	ldrh	r2, [r7, #4]
 8004e16:	883b      	ldrh	r3, [r7, #0]
 8004e18:	4413      	add	r3, r2
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8004e1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	da01      	bge.n	8004e2a <fillRect+0xb2>
        y = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 8004e2a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8004e2e:	f7fc fa8b 	bl	8001348 <height>
 8004e32:	4603      	mov	r3, r0
 8004e34:	429c      	cmp	r4, r3
 8004e36:	dd03      	ble.n	8004e40 <fillRect+0xc8>
        end = height();
 8004e38:	f7fc fa86 	bl	8001348 <height>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 8004e40:	89fa      	ldrh	r2, [r7, #14]
 8004e42:	88bb      	ldrh	r3, [r7, #4]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8004e4a:	88fa      	ldrh	r2, [r7, #6]
 8004e4c:	887b      	ldrh	r3, [r7, #2]
 8004e4e:	4413      	add	r3, r2
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	b21c      	sxth	r4, r3
 8004e58:	88ba      	ldrh	r2, [r7, #4]
 8004e5a:	883b      	ldrh	r3, [r7, #0]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	b21b      	sxth	r3, r3
 8004e66:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004e6a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004e6e:	4622      	mov	r2, r4
 8004e70:	f7ff f872 	bl	8003f58 <setAddrWindow>
    CS_ACTIVE;
 8004e74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e78:	485a      	ldr	r0, [pc, #360]	; (8004fe4 <fillRect+0x26c>)
 8004e7a:	f7fc fa0b 	bl	8001294 <PIN_LOW>
    WriteCmd(_MW);
 8004e7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e82:	4859      	ldr	r0, [pc, #356]	; (8004fe8 <fillRect+0x270>)
 8004e84:	f7fc fa06 	bl	8001294 <PIN_LOW>
 8004e88:	4b58      	ldr	r3, [pc, #352]	; (8004fec <fillRect+0x274>)
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	0a1b      	lsrs	r3, r3, #8
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	737b      	strb	r3, [r7, #13]
 8004e92:	4b56      	ldr	r3, [pc, #344]	; (8004fec <fillRect+0x274>)
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	733b      	strb	r3, [r7, #12]
 8004e98:	4b53      	ldr	r3, [pc, #332]	; (8004fe8 <fillRect+0x270>)
 8004e9a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8004e9e:	619a      	str	r2, [r3, #24]
 8004ea0:	4b53      	ldr	r3, [pc, #332]	; (8004ff0 <fillRect+0x278>)
 8004ea2:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8004ea6:	619a      	str	r2, [r3, #24]
 8004ea8:	4b52      	ldr	r3, [pc, #328]	; (8004ff4 <fillRect+0x27c>)
 8004eaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004eae:	619a      	str	r2, [r3, #24]
 8004eb0:	7b7b      	ldrb	r3, [r7, #13]
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	4a4f      	ldr	r2, [pc, #316]	; (8004ff4 <fillRect+0x27c>)
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	6193      	str	r3, [r2, #24]
 8004ebc:	7b7b      	ldrb	r3, [r7, #13]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8004ec4:	7b7b      	ldrb	r3, [r7, #13]
 8004ec6:	015b      	lsls	r3, r3, #5
 8004ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	7b7b      	ldrb	r3, [r7, #13]
 8004ed0:	015b      	lsls	r3, r3, #5
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	4b45      	ldr	r3, [pc, #276]	; (8004ff0 <fillRect+0x278>)
 8004eda:	619a      	str	r2, [r3, #24]
 8004edc:	7b7b      	ldrb	r3, [r7, #13]
 8004ede:	105b      	asrs	r3, r3, #1
 8004ee0:	f003 0208 	and.w	r2, r3, #8
 8004ee4:	7b7b      	ldrb	r3, [r7, #13]
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eec:	431a      	orrs	r2, r3
 8004eee:	7b7b      	ldrb	r3, [r7, #13]
 8004ef0:	105b      	asrs	r3, r3, #1
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	7b7b      	ldrb	r3, [r7, #13]
 8004efa:	10db      	asrs	r3, r3, #3
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	431a      	orrs	r2, r3
 8004f02:	4b39      	ldr	r3, [pc, #228]	; (8004fe8 <fillRect+0x270>)
 8004f04:	619a      	str	r2, [r3, #24]
 8004f06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f0a:	4837      	ldr	r0, [pc, #220]	; (8004fe8 <fillRect+0x270>)
 8004f0c:	f7fc f9c2 	bl	8001294 <PIN_LOW>
 8004f10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f14:	4834      	ldr	r0, [pc, #208]	; (8004fe8 <fillRect+0x270>)
 8004f16:	f7fc f9cd 	bl	80012b4 <PIN_HIGH>
 8004f1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f1e:	4832      	ldr	r0, [pc, #200]	; (8004fe8 <fillRect+0x270>)
 8004f20:	f7fc f9c8 	bl	80012b4 <PIN_HIGH>
 8004f24:	4b30      	ldr	r3, [pc, #192]	; (8004fe8 <fillRect+0x270>)
 8004f26:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8004f2a:	619a      	str	r2, [r3, #24]
 8004f2c:	4b30      	ldr	r3, [pc, #192]	; (8004ff0 <fillRect+0x278>)
 8004f2e:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8004f32:	619a      	str	r2, [r3, #24]
 8004f34:	4b2f      	ldr	r3, [pc, #188]	; (8004ff4 <fillRect+0x27c>)
 8004f36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f3a:	619a      	str	r2, [r3, #24]
 8004f3c:	7b3b      	ldrb	r3, [r7, #12]
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	4a2c      	ldr	r2, [pc, #176]	; (8004ff4 <fillRect+0x27c>)
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	6193      	str	r3, [r2, #24]
 8004f48:	7b3b      	ldrb	r3, [r7, #12]
 8004f4a:	021b      	lsls	r3, r3, #8
 8004f4c:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8004f50:	7b3b      	ldrb	r3, [r7, #12]
 8004f52:	015b      	lsls	r3, r3, #5
 8004f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	7b3b      	ldrb	r3, [r7, #12]
 8004f5c:	015b      	lsls	r3, r3, #5
 8004f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f62:	431a      	orrs	r2, r3
 8004f64:	4b22      	ldr	r3, [pc, #136]	; (8004ff0 <fillRect+0x278>)
 8004f66:	619a      	str	r2, [r3, #24]
 8004f68:	7b3b      	ldrb	r3, [r7, #12]
 8004f6a:	105b      	asrs	r3, r3, #1
 8004f6c:	f003 0208 	and.w	r2, r3, #8
 8004f70:	7b3b      	ldrb	r3, [r7, #12]
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	7b3b      	ldrb	r3, [r7, #12]
 8004f7c:	105b      	asrs	r3, r3, #1
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	431a      	orrs	r2, r3
 8004f84:	7b3b      	ldrb	r3, [r7, #12]
 8004f86:	10db      	asrs	r3, r3, #3
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	4b16      	ldr	r3, [pc, #88]	; (8004fe8 <fillRect+0x270>)
 8004f90:	619a      	str	r2, [r3, #24]
 8004f92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f96:	4814      	ldr	r0, [pc, #80]	; (8004fe8 <fillRect+0x270>)
 8004f98:	f7fc f97c 	bl	8001294 <PIN_LOW>
 8004f9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004fa0:	4811      	ldr	r0, [pc, #68]	; (8004fe8 <fillRect+0x270>)
 8004fa2:	f7fc f987 	bl	80012b4 <PIN_HIGH>
 8004fa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004faa:	480f      	ldr	r0, [pc, #60]	; (8004fe8 <fillRect+0x270>)
 8004fac:	f7fc f982 	bl	80012b4 <PIN_HIGH>
 8004fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fb4:	480c      	ldr	r0, [pc, #48]	; (8004fe8 <fillRect+0x270>)
 8004fb6:	f7fc f97d 	bl	80012b4 <PIN_HIGH>
    if (h > w) {
 8004fba:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004fbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	dd05      	ble.n	8004fd2 <fillRect+0x25a>
        end = h;
 8004fc6:	883b      	ldrh	r3, [r7, #0]
 8004fc8:	81fb      	strh	r3, [r7, #14]
        h = w;
 8004fca:	887b      	ldrh	r3, [r7, #2]
 8004fcc:	803b      	strh	r3, [r7, #0]
        w = end;
 8004fce:	89fb      	ldrh	r3, [r7, #14]
 8004fd0:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8004fd2:	8c3b      	ldrh	r3, [r7, #32]
 8004fd4:	0a1b      	lsrs	r3, r3, #8
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	72fb      	strb	r3, [r7, #11]
 8004fda:	8c3b      	ldrh	r3, [r7, #32]
 8004fdc:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 8004fde:	e0a2      	b.n	8005126 <fillRect+0x3ae>
 8004fe0:	20000065 	.word	0x20000065
 8004fe4:	40020400 	.word	0x40020400
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	2000028a 	.word	0x2000028a
 8004ff0:	40021400 	.word	0x40021400
 8004ff4:	40021800 	.word	0x40021800
        end = w;
 8004ff8:	887b      	ldrh	r3, [r7, #2]
 8004ffa:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 8004ffc:	4b64      	ldr	r3, [pc, #400]	; (8005190 <fillRect+0x418>)
 8004ffe:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8005002:	619a      	str	r2, [r3, #24]
 8005004:	4b63      	ldr	r3, [pc, #396]	; (8005194 <fillRect+0x41c>)
 8005006:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800500a:	619a      	str	r2, [r3, #24]
 800500c:	4b62      	ldr	r3, [pc, #392]	; (8005198 <fillRect+0x420>)
 800500e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005012:	619a      	str	r2, [r3, #24]
 8005014:	7afb      	ldrb	r3, [r7, #11]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	4a5f      	ldr	r2, [pc, #380]	; (8005198 <fillRect+0x420>)
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	6193      	str	r3, [r2, #24]
 8005020:	7afb      	ldrb	r3, [r7, #11]
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8005028:	7afb      	ldrb	r3, [r7, #11]
 800502a:	015b      	lsls	r3, r3, #5
 800502c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005030:	431a      	orrs	r2, r3
 8005032:	7afb      	ldrb	r3, [r7, #11]
 8005034:	015b      	lsls	r3, r3, #5
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	431a      	orrs	r2, r3
 800503c:	4b55      	ldr	r3, [pc, #340]	; (8005194 <fillRect+0x41c>)
 800503e:	619a      	str	r2, [r3, #24]
 8005040:	7afb      	ldrb	r3, [r7, #11]
 8005042:	105b      	asrs	r3, r3, #1
 8005044:	f003 0208 	and.w	r2, r3, #8
 8005048:	7afb      	ldrb	r3, [r7, #11]
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	431a      	orrs	r2, r3
 8005052:	7afb      	ldrb	r3, [r7, #11]
 8005054:	105b      	asrs	r3, r3, #1
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	431a      	orrs	r2, r3
 800505c:	7afb      	ldrb	r3, [r7, #11]
 800505e:	10db      	asrs	r3, r3, #3
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	431a      	orrs	r2, r3
 8005066:	4b4a      	ldr	r3, [pc, #296]	; (8005190 <fillRect+0x418>)
 8005068:	619a      	str	r2, [r3, #24]
 800506a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800506e:	4848      	ldr	r0, [pc, #288]	; (8005190 <fillRect+0x418>)
 8005070:	f7fc f910 	bl	8001294 <PIN_LOW>
 8005074:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005078:	4845      	ldr	r0, [pc, #276]	; (8005190 <fillRect+0x418>)
 800507a:	f7fc f91b 	bl	80012b4 <PIN_HIGH>
 800507e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005082:	4843      	ldr	r0, [pc, #268]	; (8005190 <fillRect+0x418>)
 8005084:	f7fc f916 	bl	80012b4 <PIN_HIGH>
            write8(lo);
 8005088:	4b41      	ldr	r3, [pc, #260]	; (8005190 <fillRect+0x418>)
 800508a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800508e:	619a      	str	r2, [r3, #24]
 8005090:	4b40      	ldr	r3, [pc, #256]	; (8005194 <fillRect+0x41c>)
 8005092:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8005096:	619a      	str	r2, [r3, #24]
 8005098:	4b3f      	ldr	r3, [pc, #252]	; (8005198 <fillRect+0x420>)
 800509a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800509e:	619a      	str	r2, [r3, #24]
 80050a0:	7abb      	ldrb	r3, [r7, #10]
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	4a3c      	ldr	r2, [pc, #240]	; (8005198 <fillRect+0x420>)
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	6193      	str	r3, [r2, #24]
 80050ac:	7abb      	ldrb	r3, [r7, #10]
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80050b4:	7abb      	ldrb	r3, [r7, #10]
 80050b6:	015b      	lsls	r3, r3, #5
 80050b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050bc:	431a      	orrs	r2, r3
 80050be:	7abb      	ldrb	r3, [r7, #10]
 80050c0:	015b      	lsls	r3, r3, #5
 80050c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c6:	431a      	orrs	r2, r3
 80050c8:	4b32      	ldr	r3, [pc, #200]	; (8005194 <fillRect+0x41c>)
 80050ca:	619a      	str	r2, [r3, #24]
 80050cc:	7abb      	ldrb	r3, [r7, #10]
 80050ce:	105b      	asrs	r3, r3, #1
 80050d0:	f003 0208 	and.w	r2, r3, #8
 80050d4:	7abb      	ldrb	r3, [r7, #10]
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	431a      	orrs	r2, r3
 80050de:	7abb      	ldrb	r3, [r7, #10]
 80050e0:	105b      	asrs	r3, r3, #1
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	431a      	orrs	r2, r3
 80050e8:	7abb      	ldrb	r3, [r7, #10]
 80050ea:	10db      	asrs	r3, r3, #3
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	431a      	orrs	r2, r3
 80050f2:	4b27      	ldr	r3, [pc, #156]	; (8005190 <fillRect+0x418>)
 80050f4:	619a      	str	r2, [r3, #24]
 80050f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050fa:	4825      	ldr	r0, [pc, #148]	; (8005190 <fillRect+0x418>)
 80050fc:	f7fc f8ca 	bl	8001294 <PIN_LOW>
 8005100:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005104:	4822      	ldr	r0, [pc, #136]	; (8005190 <fillRect+0x418>)
 8005106:	f7fc f8d5 	bl	80012b4 <PIN_HIGH>
 800510a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800510e:	4820      	ldr	r0, [pc, #128]	; (8005190 <fillRect+0x418>)
 8005110:	f7fc f8d0 	bl	80012b4 <PIN_HIGH>
        } while (--end != 0);
 8005114:	89fb      	ldrh	r3, [r7, #14]
 8005116:	3b01      	subs	r3, #1
 8005118:	b29b      	uxth	r3, r3
 800511a:	81fb      	strh	r3, [r7, #14]
 800511c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005120:	2b00      	cmp	r3, #0
 8005122:	f47f af6b 	bne.w	8004ffc <fillRect+0x284>
    while (h-- > 0) {
 8005126:	f9b7 3000 	ldrsh.w	r3, [r7]
 800512a:	b29a      	uxth	r2, r3
 800512c:	3a01      	subs	r2, #1
 800512e:	b292      	uxth	r2, r2
 8005130:	803a      	strh	r2, [r7, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	f73f af60 	bgt.w	8004ff8 <fillRect+0x280>
#endif
    }
    CS_IDLE;
 8005138:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800513c:	4817      	ldr	r0, [pc, #92]	; (800519c <fillRect+0x424>)
 800513e:	f7fc f8b9 	bl	80012b4 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8005142:	4b17      	ldr	r3, [pc, #92]	; (80051a0 <fillRect+0x428>)
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00b      	beq.n	8005166 <fillRect+0x3ee>
 800514e:	4b15      	ldr	r3, [pc, #84]	; (80051a4 <fillRect+0x42c>)
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	f241 5226 	movw	r2, #5414	; 0x1526
 8005156:	4293      	cmp	r3, r2
 8005158:	d116      	bne.n	8005188 <fillRect+0x410>
 800515a:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <fillRect+0x430>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d010      	beq.n	8005188 <fillRect+0x410>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8005166:	f7fc f8e3 	bl	8001330 <width>
 800516a:	4603      	mov	r3, r0
 800516c:	3b01      	subs	r3, #1
 800516e:	b29b      	uxth	r3, r3
 8005170:	b21c      	sxth	r4, r3
 8005172:	f7fc f8e9 	bl	8001348 <height>
 8005176:	4603      	mov	r3, r0
 8005178:	3b01      	subs	r3, #1
 800517a:	b29b      	uxth	r3, r3
 800517c:	b21b      	sxth	r3, r3
 800517e:	4622      	mov	r2, r4
 8005180:	2100      	movs	r1, #0
 8005182:	2000      	movs	r0, #0
 8005184:	f7fe fee8 	bl	8003f58 <setAddrWindow>
}
 8005188:	bf00      	nop
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	bd90      	pop	{r4, r7, pc}
 8005190:	40021000 	.word	0x40021000
 8005194:	40021400 	.word	0x40021400
 8005198:	40021800 	.word	0x40021800
 800519c:	40020400 	.word	0x40020400
 80051a0:	2000028c 	.word	0x2000028c
 80051a4:	2000029a 	.word	0x2000029a
 80051a8:	20000067 	.word	0x20000067

080051ac <drawRoundRect>:


void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80051ac:	b590      	push	{r4, r7, lr}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	4604      	mov	r4, r0
 80051b4:	4608      	mov	r0, r1
 80051b6:	4611      	mov	r1, r2
 80051b8:	461a      	mov	r2, r3
 80051ba:	4623      	mov	r3, r4
 80051bc:	80fb      	strh	r3, [r7, #6]
 80051be:	4603      	mov	r3, r0
 80051c0:	80bb      	strh	r3, [r7, #4]
 80051c2:	460b      	mov	r3, r1
 80051c4:	807b      	strh	r3, [r7, #2]
 80051c6:	4613      	mov	r3, r2
 80051c8:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 80051ca:	f9b7 2000 	ldrsh.w	r2, [r7]
 80051ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80051d2:	4293      	cmp	r3, r2
 80051d4:	bfa8      	it	ge
 80051d6:	4613      	movge	r3, r2
 80051d8:	b21b      	sxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	da00      	bge.n	80051e0 <drawRoundRect+0x34>
 80051de:	3301      	adds	r3, #1
 80051e0:	105b      	asrs	r3, r3, #1
 80051e2:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 80051e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80051e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	dd01      	ble.n	80051f4 <drawRoundRect+0x48>
 80051f0:	89fb      	ldrh	r3, [r7, #14]
 80051f2:	843b      	strh	r3, [r7, #32]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 80051f4:	88fa      	ldrh	r2, [r7, #6]
 80051f6:	8c3b      	ldrh	r3, [r7, #32]
 80051f8:	4413      	add	r3, r2
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	b218      	sxth	r0, r3
 80051fe:	887a      	ldrh	r2, [r7, #2]
 8005200:	8c3b      	ldrh	r3, [r7, #32]
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	b29b      	uxth	r3, r3
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	b29b      	uxth	r3, r3
 800520a:	b21a      	sxth	r2, r3
 800520c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800520e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005212:	f7ff f9be 	bl	8004592 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8005216:	88fa      	ldrh	r2, [r7, #6]
 8005218:	8c3b      	ldrh	r3, [r7, #32]
 800521a:	4413      	add	r3, r2
 800521c:	b29b      	uxth	r3, r3
 800521e:	b218      	sxth	r0, r3
 8005220:	88ba      	ldrh	r2, [r7, #4]
 8005222:	883b      	ldrh	r3, [r7, #0]
 8005224:	4413      	add	r3, r2
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29b      	uxth	r3, r3
 800522c:	b219      	sxth	r1, r3
 800522e:	887a      	ldrh	r2, [r7, #2]
 8005230:	8c3b      	ldrh	r3, [r7, #32]
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	b29b      	uxth	r3, r3
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	b29b      	uxth	r3, r3
 800523a:	b21a      	sxth	r2, r3
 800523c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800523e:	f7ff f9a8 	bl	8004592 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 8005242:	88ba      	ldrh	r2, [r7, #4]
 8005244:	8c3b      	ldrh	r3, [r7, #32]
 8005246:	4413      	add	r3, r2
 8005248:	b29b      	uxth	r3, r3
 800524a:	b219      	sxth	r1, r3
 800524c:	883a      	ldrh	r2, [r7, #0]
 800524e:	8c3b      	ldrh	r3, [r7, #32]
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	b29b      	uxth	r3, r3
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	b29b      	uxth	r3, r3
 8005258:	b21a      	sxth	r2, r3
 800525a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800525c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005260:	f7ff f978 	bl	8004554 <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 8005264:	88fa      	ldrh	r2, [r7, #6]
 8005266:	887b      	ldrh	r3, [r7, #2]
 8005268:	4413      	add	r3, r2
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29b      	uxth	r3, r3
 8005270:	b218      	sxth	r0, r3
 8005272:	88ba      	ldrh	r2, [r7, #4]
 8005274:	8c3b      	ldrh	r3, [r7, #32]
 8005276:	4413      	add	r3, r2
 8005278:	b29b      	uxth	r3, r3
 800527a:	b219      	sxth	r1, r3
 800527c:	883a      	ldrh	r2, [r7, #0]
 800527e:	8c3b      	ldrh	r3, [r7, #32]
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	b29b      	uxth	r3, r3
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	b29b      	uxth	r3, r3
 8005288:	b21a      	sxth	r2, r3
 800528a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800528c:	f7ff f962 	bl	8004554 <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8005290:	88fa      	ldrh	r2, [r7, #6]
 8005292:	8c3b      	ldrh	r3, [r7, #32]
 8005294:	4413      	add	r3, r2
 8005296:	b29b      	uxth	r3, r3
 8005298:	b218      	sxth	r0, r3
 800529a:	88ba      	ldrh	r2, [r7, #4]
 800529c:	8c3b      	ldrh	r3, [r7, #32]
 800529e:	4413      	add	r3, r2
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	b219      	sxth	r1, r3
 80052a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80052a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	2301      	movs	r3, #1
 80052ae:	f7ff fb92 	bl	80049d6 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80052b2:	88fa      	ldrh	r2, [r7, #6]
 80052b4:	887b      	ldrh	r3, [r7, #2]
 80052b6:	4413      	add	r3, r2
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	8c3b      	ldrh	r3, [r7, #32]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	b218      	sxth	r0, r3
 80052c6:	88ba      	ldrh	r2, [r7, #4]
 80052c8:	8c3b      	ldrh	r3, [r7, #32]
 80052ca:	4413      	add	r3, r2
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	b219      	sxth	r1, r3
 80052d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80052d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	2302      	movs	r3, #2
 80052da:	f7ff fb7c 	bl	80049d6 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 80052de:	88fa      	ldrh	r2, [r7, #6]
 80052e0:	887b      	ldrh	r3, [r7, #2]
 80052e2:	4413      	add	r3, r2
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	8c3b      	ldrh	r3, [r7, #32]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	b218      	sxth	r0, r3
 80052f2:	88ba      	ldrh	r2, [r7, #4]
 80052f4:	883b      	ldrh	r3, [r7, #0]
 80052f6:	4413      	add	r3, r2
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	8c3b      	ldrh	r3, [r7, #32]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	b29b      	uxth	r3, r3
 8005304:	b219      	sxth	r1, r3
 8005306:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800530a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	2304      	movs	r3, #4
 8005310:	f7ff fb61 	bl	80049d6 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8005314:	88fa      	ldrh	r2, [r7, #6]
 8005316:	8c3b      	ldrh	r3, [r7, #32]
 8005318:	4413      	add	r3, r2
 800531a:	b29b      	uxth	r3, r3
 800531c:	b218      	sxth	r0, r3
 800531e:	88ba      	ldrh	r2, [r7, #4]
 8005320:	883b      	ldrh	r3, [r7, #0]
 8005322:	4413      	add	r3, r2
 8005324:	b29a      	uxth	r2, r3
 8005326:	8c3b      	ldrh	r3, [r7, #32]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29b      	uxth	r3, r3
 8005330:	b219      	sxth	r1, r3
 8005332:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	2308      	movs	r3, #8
 800533c:	f7ff fb4b 	bl	80049d6 <drawCircleHelper>
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	bd90      	pop	{r4, r7, pc}

08005348 <drawTriangle>:
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
}


void drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8005348:	b590      	push	{r4, r7, lr}
 800534a:	b085      	sub	sp, #20
 800534c:	af02      	add	r7, sp, #8
 800534e:	4604      	mov	r4, r0
 8005350:	4608      	mov	r0, r1
 8005352:	4611      	mov	r1, r2
 8005354:	461a      	mov	r2, r3
 8005356:	4623      	mov	r3, r4
 8005358:	80fb      	strh	r3, [r7, #6]
 800535a:	4603      	mov	r3, r0
 800535c:	80bb      	strh	r3, [r7, #4]
 800535e:	460b      	mov	r3, r1
 8005360:	807b      	strh	r3, [r7, #2]
 8005362:	4613      	mov	r3, r2
 8005364:	803b      	strh	r3, [r7, #0]
    drawLine(x0, y0, x1, y1, color);
 8005366:	f9b7 4000 	ldrsh.w	r4, [r7]
 800536a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800536e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005372:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005376:	8c3b      	ldrh	r3, [r7, #32]
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	4623      	mov	r3, r4
 800537c:	f7ff f9de 	bl	800473c <drawLine>
    drawLine(x1, y1, x2, y2, color);
 8005380:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8005384:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005388:	f9b7 1000 	ldrsh.w	r1, [r7]
 800538c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005390:	8c3b      	ldrh	r3, [r7, #32]
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	4623      	mov	r3, r4
 8005396:	f7ff f9d1 	bl	800473c <drawLine>
    drawLine(x2, y2, x0, y0, color);
 800539a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800539e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80053a2:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80053a6:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80053aa:	8c3b      	ldrh	r3, [r7, #32]
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	4623      	mov	r3, r4
 80053b0:	f7ff f9c4 	bl	800473c <drawLine>
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd90      	pop	{r4, r7, pc}

080053bc <testFilledCircles>:
        drawRect(cx - i2, cy - i2, i, i, color2);
    }
}

void testFilledCircles(uint8_t radius, uint16_t color)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	460a      	mov	r2, r1
 80053c6:	71fb      	strb	r3, [r7, #7]
 80053c8:	4613      	mov	r3, r2
 80053ca:	80bb      	strh	r3, [r7, #4]
    int x, y, w = width(), h = height(), r2 = radius * 2;
 80053cc:	f7fb ffb0 	bl	8001330 <width>
 80053d0:	4603      	mov	r3, r0
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	f7fb ffb8 	bl	8001348 <height>
 80053d8:	4603      	mov	r3, r0
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 80053e2:	2000      	movs	r0, #0
 80053e4:	f7ff f802 	bl	80043ec <fillScreen>
    for (x = radius; x < w; x += r2) {
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	61fb      	str	r3, [r7, #28]
 80053ec:	e017      	b.n	800541e <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	e00c      	b.n	800540e <testFilledCircles+0x52>
            fillCircle(x, y, radius, color);
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	b218      	sxth	r0, r3
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	b219      	sxth	r1, r3
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	b21a      	sxth	r2, r3
 8005400:	88bb      	ldrh	r3, [r7, #4]
 8005402:	f7ff fbbb 	bl	8004b7c <fillCircle>
        for (y = radius; y < h; y += r2) {
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	429a      	cmp	r2, r3
 8005414:	dbee      	blt.n	80053f4 <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	61fb      	str	r3, [r7, #28]
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	429a      	cmp	r2, r3
 8005424:	dbe3      	blt.n	80053ee <testFilledCircles+0x32>
        }
    }

}
 8005426:	bf00      	nop
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <testTriangles>:
        }
    }

}

void testTriangles() {
 800542e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af04      	add	r7, sp, #16
    int           n, i, cx = width()  / 2 - 1,
 8005436:	f7fb ff7b 	bl	8001330 <width>
 800543a:	4603      	mov	r3, r0
 800543c:	085b      	lsrs	r3, r3, #1
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b01      	subs	r3, #1
 8005442:	60bb      	str	r3, [r7, #8]
                        cy = height() / 2 - 1;
 8005444:	f7fb ff80 	bl	8001348 <height>
 8005448:	4603      	mov	r3, r0
 800544a:	085b      	lsrs	r3, r3, #1
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 8005452:	2000      	movs	r0, #0
 8005454:	f7fe ffca 	bl	80043ec <fillScreen>
    n     = min(cx, cy);
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	4293      	cmp	r3, r2
 800545e:	bfa8      	it	ge
 8005460:	4613      	movge	r3, r2
 8005462:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	e03b      	b.n	80054e2 <testTriangles+0xb4>
        drawTriangle(
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	b21e      	sxth	r6, r3
            cx    , cy - i, // peak
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	b29b      	uxth	r3, r3
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	b29b      	uxth	r3, r3
        drawTriangle(
 800547a:	fa0f f883 	sxth.w	r8, r3
            cx - i, cy + i, // bottom left
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	b29b      	uxth	r3, r3
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	b29b      	uxth	r3, r3
        drawTriangle(
 800548a:	fa0f f983 	sxth.w	r9, r3
            cx - i, cy + i, // bottom left
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	b29b      	uxth	r3, r3
 8005496:	4413      	add	r3, r2
 8005498:	b29b      	uxth	r3, r3
        drawTriangle(
 800549a:	fa0f fa83 	sxth.w	sl, r3
            cx + i, cy + i, // bottom right
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	4413      	add	r3, r2
 80054a8:	b29b      	uxth	r3, r3
        drawTriangle(
 80054aa:	b21c      	sxth	r4, r3
            cx + i, cy + i, // bottom right
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	4413      	add	r3, r2
 80054b6:	b29b      	uxth	r3, r3
        drawTriangle(
 80054b8:	b21d      	sxth	r5, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	2100      	movs	r1, #0
 80054c2:	2000      	movs	r0, #0
 80054c4:	f7fb ffbe 	bl	8001444 <color565>
 80054c8:	4603      	mov	r3, r0
 80054ca:	9302      	str	r3, [sp, #8]
 80054cc:	9501      	str	r5, [sp, #4]
 80054ce:	9400      	str	r4, [sp, #0]
 80054d0:	4653      	mov	r3, sl
 80054d2:	464a      	mov	r2, r9
 80054d4:	4641      	mov	r1, r8
 80054d6:	4630      	mov	r0, r6
 80054d8:	f7ff ff36 	bl	8005348 <drawTriangle>
    for (i = 0; i < n; i += 5) {
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3305      	adds	r3, #5
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	dbbf      	blt.n	800546a <testTriangles+0x3c>
            color565(0, 0, i));
    }

}
 80054ea:	bf00      	nop
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080054f4 <testRoundRects>:
        drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
                         color565(i, i, 0));
    }
}

void testRoundRects() {
 80054f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054f8:	b08b      	sub	sp, #44	; 0x2c
 80054fa:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = width()  / 2 - 1,
 80054fc:	f7fb ff18 	bl	8001330 <width>
 8005500:	4603      	mov	r3, r0
 8005502:	085b      	lsrs	r3, r3, #1
 8005504:	b29b      	uxth	r3, r3
 8005506:	3b01      	subs	r3, #1
 8005508:	617b      	str	r3, [r7, #20]
                  cy = height() / 2 - 1;
 800550a:	f7fb ff1d 	bl	8001348 <height>
 800550e:	4603      	mov	r3, r0
 8005510:	085b      	lsrs	r3, r3, #1
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 8005518:	2000      	movs	r0, #0
 800551a:	f7fe ff67 	bl	80043ec <fillScreen>
    w     = min(width(), height());
 800551e:	f7fb ff07 	bl	8001330 <width>
 8005522:	4603      	mov	r3, r0
 8005524:	461c      	mov	r4, r3
 8005526:	f7fb ff0f 	bl	8001348 <height>
 800552a:	4603      	mov	r3, r0
 800552c:	429c      	cmp	r4, r3
 800552e:	d203      	bcs.n	8005538 <testRoundRects+0x44>
 8005530:	f7fb fefe 	bl	8001330 <width>
 8005534:	4603      	mov	r3, r0
 8005536:	e002      	b.n	800553e <testRoundRects+0x4a>
 8005538:	f7fb ff06 	bl	8001348 <height>
 800553c:	4603      	mov	r3, r0
 800553e:	60fb      	str	r3, [r7, #12]
    red = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 8005544:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	fb92 f3f3 	sdiv	r3, r2, r3
 800554e:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 8005550:	2300      	movs	r3, #0
 8005552:	61fb      	str	r3, [r7, #28]
 8005554:	e036      	b.n	80055c4 <testRoundRects+0xd0>
        i2 = i / 2;
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	2b00      	cmp	r3, #0
 800555a:	da00      	bge.n	800555e <testRoundRects+0x6a>
 800555c:	3301      	adds	r3, #1
 800555e:	105b      	asrs	r3, r3, #1
 8005560:	607b      	str	r3, [r7, #4]
        red += step;
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4413      	add	r3, r2
 8005568:	61bb      	str	r3, [r7, #24]
        drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	b29a      	uxth	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	b29b      	uxth	r3, r3
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	b29b      	uxth	r3, r3
 8005576:	b21d      	sxth	r5, r3
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	b29a      	uxth	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	b29b      	uxth	r3, r3
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	b29b      	uxth	r3, r3
 8005584:	b21e      	sxth	r6, r3
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	fa0f f883 	sxth.w	r8, r3
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	fa0f f983 	sxth.w	r9, r3
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	2b00      	cmp	r3, #0
 8005596:	da00      	bge.n	800559a <testRoundRects+0xa6>
 8005598:	3307      	adds	r3, #7
 800559a:	10db      	asrs	r3, r3, #3
 800559c:	b21c      	sxth	r4, r3
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2200      	movs	r2, #0
 80055a4:	2100      	movs	r1, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fb ff4c 	bl	8001444 <color565>
 80055ac:	4603      	mov	r3, r0
 80055ae:	9301      	str	r3, [sp, #4]
 80055b0:	9400      	str	r4, [sp, #0]
 80055b2:	464b      	mov	r3, r9
 80055b4:	4642      	mov	r2, r8
 80055b6:	4631      	mov	r1, r6
 80055b8:	4628      	mov	r0, r5
 80055ba:	f7ff fdf7 	bl	80051ac <drawRoundRect>
    for (i = 0; i < w; i += 6) {
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	3306      	adds	r3, #6
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	dbc4      	blt.n	8005556 <testRoundRects+0x62>
    }

}
 80055cc:	bf00      	nop
 80055ce:	3724      	adds	r7, #36	; 0x24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080055d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80055d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005610 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80055dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80055de:	e003      	b.n	80055e8 <LoopCopyDataInit>

080055e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80055e0:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80055e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80055e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80055e6:	3104      	adds	r1, #4

080055e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80055e8:	480b      	ldr	r0, [pc, #44]	; (8005618 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80055ea:	4b0c      	ldr	r3, [pc, #48]	; (800561c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80055ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80055ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80055f0:	d3f6      	bcc.n	80055e0 <CopyDataInit>
  ldr  r2, =_sbss
 80055f2:	4a0b      	ldr	r2, [pc, #44]	; (8005620 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80055f4:	e002      	b.n	80055fc <LoopFillZerobss>

080055f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80055f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80055f8:	f842 3b04 	str.w	r3, [r2], #4

080055fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80055fc:	4b09      	ldr	r3, [pc, #36]	; (8005624 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80055fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005600:	d3f9      	bcc.n	80055f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005602:	f7fb fe19 	bl	8001238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005606:	f003 facb 	bl	8008ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800560a:	f7fa ff95 	bl	8000538 <main>
  bx  lr    
 800560e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005610:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8005614:	080091b8 	.word	0x080091b8
  ldr  r0, =_sdata
 8005618:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800561c:	20000038 	.word	0x20000038
  ldr  r2, =_sbss
 8005620:	20000038 	.word	0x20000038
  ldr  r3, = _ebss
 8005624:	200002a8 	.word	0x200002a8

08005628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005628:	e7fe      	b.n	8005628 <ADC_IRQHandler>

0800562a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800562e:	2003      	movs	r0, #3
 8005630:	f000 f94a 	bl	80058c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005634:	2000      	movs	r0, #0
 8005636:	f000 f805 	bl	8005644 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800563a:	f7fb fc69 	bl	8000f10 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800564c:	4b12      	ldr	r3, [pc, #72]	; (8005698 <HAL_InitTick+0x54>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	4b12      	ldr	r3, [pc, #72]	; (800569c <HAL_InitTick+0x58>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	4619      	mov	r1, r3
 8005656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800565a:	fbb3 f3f1 	udiv	r3, r3, r1
 800565e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005662:	4618      	mov	r0, r3
 8005664:	f000 f965 	bl	8005932 <HAL_SYSTICK_Config>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e00e      	b.n	8005690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b0f      	cmp	r3, #15
 8005676:	d80a      	bhi.n	800568e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005678:	2200      	movs	r2, #0
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	f04f 30ff 	mov.w	r0, #4294967295
 8005680:	f000 f92d 	bl	80058de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005684:	4a06      	ldr	r2, [pc, #24]	; (80056a0 <HAL_InitTick+0x5c>)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	e000      	b.n	8005690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
}
 8005690:	4618      	mov	r0, r3
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20000028 	.word	0x20000028
 800569c:	20000034 	.word	0x20000034
 80056a0:	20000030 	.word	0x20000030

080056a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <HAL_IncTick+0x20>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <HAL_IncTick+0x24>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4413      	add	r3, r2
 80056b4:	4a04      	ldr	r2, [pc, #16]	; (80056c8 <HAL_IncTick+0x24>)
 80056b6:	6013      	str	r3, [r2, #0]
}
 80056b8:	bf00      	nop
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	20000034 	.word	0x20000034
 80056c8:	200002a4 	.word	0x200002a4

080056cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  return uwTick;
 80056d0:	4b03      	ldr	r3, [pc, #12]	; (80056e0 <HAL_GetTick+0x14>)
 80056d2:	681b      	ldr	r3, [r3, #0]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	200002a4 	.word	0x200002a4

080056e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056ec:	f7ff ffee 	bl	80056cc <HAL_GetTick>
 80056f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fc:	d005      	beq.n	800570a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056fe:	4b09      	ldr	r3, [pc, #36]	; (8005724 <HAL_Delay+0x40>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800570a:	bf00      	nop
 800570c:	f7ff ffde 	bl	80056cc <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	429a      	cmp	r2, r3
 800571a:	d8f7      	bhi.n	800570c <HAL_Delay+0x28>
  {
  }
}
 800571c:	bf00      	nop
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	20000034 	.word	0x20000034

08005728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005738:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <__NVIC_SetPriorityGrouping+0x40>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005744:	4013      	ands	r3, r2
 8005746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005750:	4b06      	ldr	r3, [pc, #24]	; (800576c <__NVIC_SetPriorityGrouping+0x44>)
 8005752:	4313      	orrs	r3, r2
 8005754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005756:	4a04      	ldr	r2, [pc, #16]	; (8005768 <__NVIC_SetPriorityGrouping+0x40>)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	60d3      	str	r3, [r2, #12]
}
 800575c:	bf00      	nop
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	e000ed00 	.word	0xe000ed00
 800576c:	05fa0000 	.word	0x05fa0000

08005770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005774:	4b04      	ldr	r3, [pc, #16]	; (8005788 <__NVIC_GetPriorityGrouping+0x18>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	0a1b      	lsrs	r3, r3, #8
 800577a:	f003 0307 	and.w	r3, r3, #7
}
 800577e:	4618      	mov	r0, r3
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	e000ed00 	.word	0xe000ed00

0800578c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	4603      	mov	r3, r0
 8005794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800579a:	2b00      	cmp	r3, #0
 800579c:	db0b      	blt.n	80057b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	f003 021f 	and.w	r2, r3, #31
 80057a4:	4907      	ldr	r1, [pc, #28]	; (80057c4 <__NVIC_EnableIRQ+0x38>)
 80057a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	2001      	movs	r0, #1
 80057ae:	fa00 f202 	lsl.w	r2, r0, r2
 80057b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	e000e100 	.word	0xe000e100

080057c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	4603      	mov	r3, r0
 80057d0:	6039      	str	r1, [r7, #0]
 80057d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	db0a      	blt.n	80057f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	490c      	ldr	r1, [pc, #48]	; (8005814 <__NVIC_SetPriority+0x4c>)
 80057e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e6:	0112      	lsls	r2, r2, #4
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	440b      	add	r3, r1
 80057ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057f0:	e00a      	b.n	8005808 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	4908      	ldr	r1, [pc, #32]	; (8005818 <__NVIC_SetPriority+0x50>)
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	f003 030f 	and.w	r3, r3, #15
 80057fe:	3b04      	subs	r3, #4
 8005800:	0112      	lsls	r2, r2, #4
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	440b      	add	r3, r1
 8005806:	761a      	strb	r2, [r3, #24]
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	e000e100 	.word	0xe000e100
 8005818:	e000ed00 	.word	0xe000ed00

0800581c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800581c:	b480      	push	{r7}
 800581e:	b089      	sub	sp, #36	; 0x24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	f1c3 0307 	rsb	r3, r3, #7
 8005836:	2b04      	cmp	r3, #4
 8005838:	bf28      	it	cs
 800583a:	2304      	movcs	r3, #4
 800583c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	3304      	adds	r3, #4
 8005842:	2b06      	cmp	r3, #6
 8005844:	d902      	bls.n	800584c <NVIC_EncodePriority+0x30>
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	3b03      	subs	r3, #3
 800584a:	e000      	b.n	800584e <NVIC_EncodePriority+0x32>
 800584c:	2300      	movs	r3, #0
 800584e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005850:	f04f 32ff 	mov.w	r2, #4294967295
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	43da      	mvns	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	401a      	ands	r2, r3
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005864:	f04f 31ff 	mov.w	r1, #4294967295
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	fa01 f303 	lsl.w	r3, r1, r3
 800586e:	43d9      	mvns	r1, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005874:	4313      	orrs	r3, r2
         );
}
 8005876:	4618      	mov	r0, r3
 8005878:	3724      	adds	r7, #36	; 0x24
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
	...

08005884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3b01      	subs	r3, #1
 8005890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005894:	d301      	bcc.n	800589a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005896:	2301      	movs	r3, #1
 8005898:	e00f      	b.n	80058ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800589a:	4a0a      	ldr	r2, [pc, #40]	; (80058c4 <SysTick_Config+0x40>)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3b01      	subs	r3, #1
 80058a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058a2:	210f      	movs	r1, #15
 80058a4:	f04f 30ff 	mov.w	r0, #4294967295
 80058a8:	f7ff ff8e 	bl	80057c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058ac:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <SysTick_Config+0x40>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058b2:	4b04      	ldr	r3, [pc, #16]	; (80058c4 <SysTick_Config+0x40>)
 80058b4:	2207      	movs	r2, #7
 80058b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	e000e010 	.word	0xe000e010

080058c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff ff29 	bl	8005728 <__NVIC_SetPriorityGrouping>
}
 80058d6:	bf00      	nop
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058de:	b580      	push	{r7, lr}
 80058e0:	b086      	sub	sp, #24
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	4603      	mov	r3, r0
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	607a      	str	r2, [r7, #4]
 80058ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80058ec:	2300      	movs	r3, #0
 80058ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058f0:	f7ff ff3e 	bl	8005770 <__NVIC_GetPriorityGrouping>
 80058f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	6978      	ldr	r0, [r7, #20]
 80058fc:	f7ff ff8e 	bl	800581c <NVIC_EncodePriority>
 8005900:	4602      	mov	r2, r0
 8005902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005906:	4611      	mov	r1, r2
 8005908:	4618      	mov	r0, r3
 800590a:	f7ff ff5d 	bl	80057c8 <__NVIC_SetPriority>
}
 800590e:	bf00      	nop
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b082      	sub	sp, #8
 800591a:	af00      	add	r7, sp, #0
 800591c:	4603      	mov	r3, r0
 800591e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff ff31 	bl	800578c <__NVIC_EnableIRQ>
}
 800592a:	bf00      	nop
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff ffa2 	bl	8005884 <SysTick_Config>
 8005940:	4603      	mov	r3, r0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005958:	f7ff feb8 	bl	80056cc <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e099      	b.n	8005a9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0201 	bic.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005988:	e00f      	b.n	80059aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800598a:	f7ff fe9f 	bl	80056cc <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b05      	cmp	r3, #5
 8005996:	d908      	bls.n	80059aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2220      	movs	r2, #32
 800599c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2203      	movs	r2, #3
 80059a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e078      	b.n	8005a9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e8      	bne.n	800598a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	4b38      	ldr	r3, [pc, #224]	; (8005aa4 <HAL_DMA_Init+0x158>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d107      	bne.n	8005a14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f023 0307 	bic.w	r3, r3, #7
 8005a2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d117      	bne.n	8005a6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00e      	beq.n	8005a6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fa77 	bl	8005f44 <DMA_CheckFifoParam>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d008      	beq.n	8005a6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2240      	movs	r2, #64	; 0x40
 8005a60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e016      	b.n	8005a9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa2e 	bl	8005ed8 <DMA_CalcBaseAndBitshift>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a84:	223f      	movs	r2, #63	; 0x3f
 8005a86:	409a      	lsls	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	e010803f 	.word	0xe010803f

08005aa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005abe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_DMA_Start_IT+0x26>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e048      	b.n	8005b60 <HAL_DMA_Start_IT+0xb8>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d137      	bne.n	8005b52 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 f9c0 	bl	8005e7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b00:	223f      	movs	r2, #63	; 0x3f
 8005b02:	409a      	lsls	r2, r3
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0216 	orr.w	r2, r2, #22
 8005b16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695a      	ldr	r2, [r3, #20]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b26:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0208 	orr.w	r2, r2, #8
 8005b3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0201 	orr.w	r2, r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	e005      	b.n	8005b5e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005b74:	4b92      	ldr	r3, [pc, #584]	; (8005dc0 <HAL_DMA_IRQHandler+0x258>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a92      	ldr	r2, [pc, #584]	; (8005dc4 <HAL_DMA_IRQHandler+0x25c>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	0a9b      	lsrs	r3, r3, #10
 8005b80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b92:	2208      	movs	r2, #8
 8005b94:	409a      	lsls	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d01a      	beq.n	8005bd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d013      	beq.n	8005bd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0204 	bic.w	r2, r2, #4
 8005bba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc0:	2208      	movs	r2, #8
 8005bc2:	409a      	lsls	r2, r3
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bcc:	f043 0201 	orr.w	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd8:	2201      	movs	r2, #1
 8005bda:	409a      	lsls	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4013      	ands	r3, r2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d012      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00b      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	409a      	lsls	r2, r3
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c02:	f043 0202 	orr.w	r2, r3, #2
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c0e:	2204      	movs	r2, #4
 8005c10:	409a      	lsls	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4013      	ands	r3, r2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d012      	beq.n	8005c40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00b      	beq.n	8005c40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c2c:	2204      	movs	r2, #4
 8005c2e:	409a      	lsls	r2, r3
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c38:	f043 0204 	orr.w	r2, r3, #4
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c44:	2210      	movs	r2, #16
 8005c46:	409a      	lsls	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d043      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d03c      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c62:	2210      	movs	r2, #16
 8005c64:	409a      	lsls	r2, r3
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d018      	beq.n	8005caa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d108      	bne.n	8005c98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d024      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	4798      	blx	r3
 8005c96:	e01f      	b.n	8005cd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01b      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	4798      	blx	r3
 8005ca8:	e016      	b.n	8005cd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d107      	bne.n	8005cc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0208 	bic.w	r2, r2, #8
 8005cc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cdc:	2220      	movs	r2, #32
 8005cde:	409a      	lsls	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 808e 	beq.w	8005e06 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8086 	beq.w	8005e06 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfe:	2220      	movs	r2, #32
 8005d00:	409a      	lsls	r2, r3
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b05      	cmp	r3, #5
 8005d10:	d136      	bne.n	8005d80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0216 	bic.w	r2, r2, #22
 8005d20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695a      	ldr	r2, [r3, #20]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d103      	bne.n	8005d42 <HAL_DMA_IRQHandler+0x1da>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d007      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0208 	bic.w	r2, r2, #8
 8005d50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d56:	223f      	movs	r2, #63	; 0x3f
 8005d58:	409a      	lsls	r2, r3
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d07d      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	4798      	blx	r3
        }
        return;
 8005d7e:	e078      	b.n	8005e72 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01c      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d108      	bne.n	8005dae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d030      	beq.n	8005e06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	4798      	blx	r3
 8005dac:	e02b      	b.n	8005e06 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d027      	beq.n	8005e06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	4798      	blx	r3
 8005dbe:	e022      	b.n	8005e06 <HAL_DMA_IRQHandler+0x29e>
 8005dc0:	20000028 	.word	0x20000028
 8005dc4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10f      	bne.n	8005df6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0210 	bic.w	r2, r2, #16
 8005de4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d032      	beq.n	8005e74 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d022      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2205      	movs	r2, #5
 8005e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0201 	bic.w	r2, r2, #1
 8005e30:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	3301      	adds	r3, #1
 8005e36:	60bb      	str	r3, [r7, #8]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d307      	bcc.n	8005e4e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f2      	bne.n	8005e32 <HAL_DMA_IRQHandler+0x2ca>
 8005e4c:	e000      	b.n	8005e50 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005e4e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	4798      	blx	r3
 8005e70:	e000      	b.n	8005e74 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005e72:	bf00      	nop
    }
  }
}
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop

08005e7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	2b40      	cmp	r3, #64	; 0x40
 8005ea8:	d108      	bne.n	8005ebc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005eba:	e007      	b.n	8005ecc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	60da      	str	r2, [r3, #12]
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	3b10      	subs	r3, #16
 8005ee8:	4a13      	ldr	r2, [pc, #76]	; (8005f38 <DMA_CalcBaseAndBitshift+0x60>)
 8005eea:	fba2 2303 	umull	r2, r3, r2, r3
 8005eee:	091b      	lsrs	r3, r3, #4
 8005ef0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ef2:	4a12      	ldr	r2, [pc, #72]	; (8005f3c <DMA_CalcBaseAndBitshift+0x64>)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d908      	bls.n	8005f18 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	4b0c      	ldr	r3, [pc, #48]	; (8005f40 <DMA_CalcBaseAndBitshift+0x68>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	1d1a      	adds	r2, r3, #4
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	659a      	str	r2, [r3, #88]	; 0x58
 8005f16:	e006      	b.n	8005f26 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <DMA_CalcBaseAndBitshift+0x68>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	aaaaaaab 	.word	0xaaaaaaab
 8005f3c:	080091a0 	.word	0x080091a0
 8005f40:	fffffc00 	.word	0xfffffc00

08005f44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d11f      	bne.n	8005f9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d855      	bhi.n	8006010 <DMA_CheckFifoParam+0xcc>
 8005f64:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <DMA_CheckFifoParam+0x28>)
 8005f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6a:	bf00      	nop
 8005f6c:	08005f7d 	.word	0x08005f7d
 8005f70:	08005f8f 	.word	0x08005f8f
 8005f74:	08005f7d 	.word	0x08005f7d
 8005f78:	08006011 	.word	0x08006011
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d045      	beq.n	8006014 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f8c:	e042      	b.n	8006014 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f96:	d13f      	bne.n	8006018 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f9c:	e03c      	b.n	8006018 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa6:	d121      	bne.n	8005fec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d836      	bhi.n	800601c <DMA_CheckFifoParam+0xd8>
 8005fae:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <DMA_CheckFifoParam+0x70>)
 8005fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb4:	08005fc5 	.word	0x08005fc5
 8005fb8:	08005fcb 	.word	0x08005fcb
 8005fbc:	08005fc5 	.word	0x08005fc5
 8005fc0:	08005fdd 	.word	0x08005fdd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc8:	e02f      	b.n	800602a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d024      	beq.n	8006020 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fda:	e021      	b.n	8006020 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fe4:	d11e      	bne.n	8006024 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005fea:	e01b      	b.n	8006024 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d902      	bls.n	8005ff8 <DMA_CheckFifoParam+0xb4>
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d003      	beq.n	8005ffe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005ff6:	e018      	b.n	800602a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8005ffc:	e015      	b.n	800602a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00e      	beq.n	8006028 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	73fb      	strb	r3, [r7, #15]
      break;
 800600e:	e00b      	b.n	8006028 <DMA_CheckFifoParam+0xe4>
      break;
 8006010:	bf00      	nop
 8006012:	e00a      	b.n	800602a <DMA_CheckFifoParam+0xe6>
      break;
 8006014:	bf00      	nop
 8006016:	e008      	b.n	800602a <DMA_CheckFifoParam+0xe6>
      break;
 8006018:	bf00      	nop
 800601a:	e006      	b.n	800602a <DMA_CheckFifoParam+0xe6>
      break;
 800601c:	bf00      	nop
 800601e:	e004      	b.n	800602a <DMA_CheckFifoParam+0xe6>
      break;
 8006020:	bf00      	nop
 8006022:	e002      	b.n	800602a <DMA_CheckFifoParam+0xe6>
      break;   
 8006024:	bf00      	nop
 8006026:	e000      	b.n	800602a <DMA_CheckFifoParam+0xe6>
      break;
 8006028:	bf00      	nop
    }
  } 
  
  return status; 
 800602a:	7bfb      	ldrb	r3, [r7, #15]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006038:	b480      	push	{r7}
 800603a:	b089      	sub	sp, #36	; 0x24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006042:	2300      	movs	r3, #0
 8006044:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006046:	2300      	movs	r3, #0
 8006048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800604a:	2300      	movs	r3, #0
 800604c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800604e:	2300      	movs	r3, #0
 8006050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006052:	2300      	movs	r3, #0
 8006054:	61fb      	str	r3, [r7, #28]
 8006056:	e175      	b.n	8006344 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006058:	2201      	movs	r2, #1
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4013      	ands	r3, r2
 800606a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	429a      	cmp	r2, r3
 8006072:	f040 8164 	bne.w	800633e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d00b      	beq.n	8006096 <HAL_GPIO_Init+0x5e>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b02      	cmp	r3, #2
 8006084:	d007      	beq.n	8006096 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800608a:	2b11      	cmp	r3, #17
 800608c:	d003      	beq.n	8006096 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	2b12      	cmp	r3, #18
 8006094:	d130      	bne.n	80060f8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	2203      	movs	r2, #3
 80060a2:	fa02 f303 	lsl.w	r3, r2, r3
 80060a6:	43db      	mvns	r3, r3
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	4013      	ands	r3, r2
 80060ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	4313      	orrs	r3, r2
 80060be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060cc:	2201      	movs	r2, #1
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	43db      	mvns	r3, r3
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	4013      	ands	r3, r2
 80060da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	091b      	lsrs	r3, r3, #4
 80060e2:	f003 0201 	and.w	r2, r3, #1
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	2203      	movs	r2, #3
 8006104:	fa02 f303 	lsl.w	r3, r2, r3
 8006108:	43db      	mvns	r3, r3
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	4013      	ands	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	fa02 f303 	lsl.w	r3, r2, r3
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	4313      	orrs	r3, r2
 8006120:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d003      	beq.n	8006138 <HAL_GPIO_Init+0x100>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	2b12      	cmp	r3, #18
 8006136:	d123      	bne.n	8006180 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	08da      	lsrs	r2, r3, #3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3208      	adds	r2, #8
 8006140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	220f      	movs	r2, #15
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	43db      	mvns	r3, r3
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	4013      	ands	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	691a      	ldr	r2, [r3, #16]
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	4313      	orrs	r3, r2
 8006170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	08da      	lsrs	r2, r3, #3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3208      	adds	r2, #8
 800617a:	69b9      	ldr	r1, [r7, #24]
 800617c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	005b      	lsls	r3, r3, #1
 800618a:	2203      	movs	r2, #3
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	43db      	mvns	r3, r3
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	4013      	ands	r3, r2
 8006196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f003 0203 	and.w	r2, r3, #3
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 80be 	beq.w	800633e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061c2:	4b65      	ldr	r3, [pc, #404]	; (8006358 <HAL_GPIO_Init+0x320>)
 80061c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c6:	4a64      	ldr	r2, [pc, #400]	; (8006358 <HAL_GPIO_Init+0x320>)
 80061c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061cc:	6453      	str	r3, [r2, #68]	; 0x44
 80061ce:	4b62      	ldr	r3, [pc, #392]	; (8006358 <HAL_GPIO_Init+0x320>)
 80061d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80061da:	4a60      	ldr	r2, [pc, #384]	; (800635c <HAL_GPIO_Init+0x324>)
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	089b      	lsrs	r3, r3, #2
 80061e0:	3302      	adds	r3, #2
 80061e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	220f      	movs	r2, #15
 80061f2:	fa02 f303 	lsl.w	r3, r2, r3
 80061f6:	43db      	mvns	r3, r3
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	4013      	ands	r3, r2
 80061fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a57      	ldr	r2, [pc, #348]	; (8006360 <HAL_GPIO_Init+0x328>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d037      	beq.n	8006276 <HAL_GPIO_Init+0x23e>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a56      	ldr	r2, [pc, #344]	; (8006364 <HAL_GPIO_Init+0x32c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d031      	beq.n	8006272 <HAL_GPIO_Init+0x23a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a55      	ldr	r2, [pc, #340]	; (8006368 <HAL_GPIO_Init+0x330>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d02b      	beq.n	800626e <HAL_GPIO_Init+0x236>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a54      	ldr	r2, [pc, #336]	; (800636c <HAL_GPIO_Init+0x334>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d025      	beq.n	800626a <HAL_GPIO_Init+0x232>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a53      	ldr	r2, [pc, #332]	; (8006370 <HAL_GPIO_Init+0x338>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d01f      	beq.n	8006266 <HAL_GPIO_Init+0x22e>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a52      	ldr	r2, [pc, #328]	; (8006374 <HAL_GPIO_Init+0x33c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d019      	beq.n	8006262 <HAL_GPIO_Init+0x22a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a51      	ldr	r2, [pc, #324]	; (8006378 <HAL_GPIO_Init+0x340>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d013      	beq.n	800625e <HAL_GPIO_Init+0x226>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a50      	ldr	r2, [pc, #320]	; (800637c <HAL_GPIO_Init+0x344>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d00d      	beq.n	800625a <HAL_GPIO_Init+0x222>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a4f      	ldr	r2, [pc, #316]	; (8006380 <HAL_GPIO_Init+0x348>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d007      	beq.n	8006256 <HAL_GPIO_Init+0x21e>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a4e      	ldr	r2, [pc, #312]	; (8006384 <HAL_GPIO_Init+0x34c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d101      	bne.n	8006252 <HAL_GPIO_Init+0x21a>
 800624e:	2309      	movs	r3, #9
 8006250:	e012      	b.n	8006278 <HAL_GPIO_Init+0x240>
 8006252:	230a      	movs	r3, #10
 8006254:	e010      	b.n	8006278 <HAL_GPIO_Init+0x240>
 8006256:	2308      	movs	r3, #8
 8006258:	e00e      	b.n	8006278 <HAL_GPIO_Init+0x240>
 800625a:	2307      	movs	r3, #7
 800625c:	e00c      	b.n	8006278 <HAL_GPIO_Init+0x240>
 800625e:	2306      	movs	r3, #6
 8006260:	e00a      	b.n	8006278 <HAL_GPIO_Init+0x240>
 8006262:	2305      	movs	r3, #5
 8006264:	e008      	b.n	8006278 <HAL_GPIO_Init+0x240>
 8006266:	2304      	movs	r3, #4
 8006268:	e006      	b.n	8006278 <HAL_GPIO_Init+0x240>
 800626a:	2303      	movs	r3, #3
 800626c:	e004      	b.n	8006278 <HAL_GPIO_Init+0x240>
 800626e:	2302      	movs	r3, #2
 8006270:	e002      	b.n	8006278 <HAL_GPIO_Init+0x240>
 8006272:	2301      	movs	r3, #1
 8006274:	e000      	b.n	8006278 <HAL_GPIO_Init+0x240>
 8006276:	2300      	movs	r3, #0
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	f002 0203 	and.w	r2, r2, #3
 800627e:	0092      	lsls	r2, r2, #2
 8006280:	4093      	lsls	r3, r2
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	4313      	orrs	r3, r2
 8006286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006288:	4934      	ldr	r1, [pc, #208]	; (800635c <HAL_GPIO_Init+0x324>)
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	089b      	lsrs	r3, r3, #2
 800628e:	3302      	adds	r3, #2
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006296:	4b3c      	ldr	r3, [pc, #240]	; (8006388 <HAL_GPIO_Init+0x350>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	43db      	mvns	r3, r3
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	4013      	ands	r3, r2
 80062a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80062ba:	4a33      	ldr	r2, [pc, #204]	; (8006388 <HAL_GPIO_Init+0x350>)
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80062c0:	4b31      	ldr	r3, [pc, #196]	; (8006388 <HAL_GPIO_Init+0x350>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	43db      	mvns	r3, r3
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	4013      	ands	r3, r2
 80062ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062e4:	4a28      	ldr	r2, [pc, #160]	; (8006388 <HAL_GPIO_Init+0x350>)
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062ea:	4b27      	ldr	r3, [pc, #156]	; (8006388 <HAL_GPIO_Init+0x350>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	43db      	mvns	r3, r3
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	4013      	ands	r3, r2
 80062f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800630e:	4a1e      	ldr	r2, [pc, #120]	; (8006388 <HAL_GPIO_Init+0x350>)
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006314:	4b1c      	ldr	r3, [pc, #112]	; (8006388 <HAL_GPIO_Init+0x350>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	43db      	mvns	r3, r3
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	4013      	ands	r3, r2
 8006322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006338:	4a13      	ldr	r2, [pc, #76]	; (8006388 <HAL_GPIO_Init+0x350>)
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	3301      	adds	r3, #1
 8006342:	61fb      	str	r3, [r7, #28]
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	2b0f      	cmp	r3, #15
 8006348:	f67f ae86 	bls.w	8006058 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800634c:	bf00      	nop
 800634e:	3724      	adds	r7, #36	; 0x24
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	40023800 	.word	0x40023800
 800635c:	40013800 	.word	0x40013800
 8006360:	40020000 	.word	0x40020000
 8006364:	40020400 	.word	0x40020400
 8006368:	40020800 	.word	0x40020800
 800636c:	40020c00 	.word	0x40020c00
 8006370:	40021000 	.word	0x40021000
 8006374:	40021400 	.word	0x40021400
 8006378:	40021800 	.word	0x40021800
 800637c:	40021c00 	.word	0x40021c00
 8006380:	40022000 	.word	0x40022000
 8006384:	40022400 	.word	0x40022400
 8006388:	40013c00 	.word	0x40013c00

0800638c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691a      	ldr	r2, [r3, #16]
 800639c:	887b      	ldrh	r3, [r7, #2]
 800639e:	4013      	ands	r3, r2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063a4:	2301      	movs	r3, #1
 80063a6:	73fb      	strb	r3, [r7, #15]
 80063a8:	e001      	b.n	80063ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063aa:	2300      	movs	r3, #0
 80063ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	807b      	strh	r3, [r7, #2]
 80063c8:	4613      	mov	r3, r2
 80063ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063cc:	787b      	ldrb	r3, [r7, #1]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063d2:	887a      	ldrh	r2, [r7, #2]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80063d8:	e003      	b.n	80063e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80063da:	887b      	ldrh	r3, [r7, #2]
 80063dc:	041a      	lsls	r2, r3, #16
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	619a      	str	r2, [r3, #24]
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	460b      	mov	r3, r1
 80063f8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695a      	ldr	r2, [r3, #20]
 80063fe:	887b      	ldrh	r3, [r7, #2]
 8006400:	4013      	ands	r3, r2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d004      	beq.n	8006410 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006406:	887b      	ldrh	r3, [r7, #2]
 8006408:	041a      	lsls	r2, r3, #16
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800640e:	e002      	b.n	8006416 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006410:	887a      	ldrh	r2, [r7, #2]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	619a      	str	r2, [r3, #24]
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
	...

08006424 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	4603      	mov	r3, r0
 800642c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800642e:	4b08      	ldr	r3, [pc, #32]	; (8006450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006430:	695a      	ldr	r2, [r3, #20]
 8006432:	88fb      	ldrh	r3, [r7, #6]
 8006434:	4013      	ands	r3, r2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d006      	beq.n	8006448 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800643a:	4a05      	ldr	r2, [pc, #20]	; (8006450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800643c:	88fb      	ldrh	r3, [r7, #6]
 800643e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006440:	88fb      	ldrh	r3, [r7, #6]
 8006442:	4618      	mov	r0, r3
 8006444:	f7fa fca6 	bl	8000d94 <HAL_GPIO_EXTI_Callback>
  }
}
 8006448:	bf00      	nop
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	40013c00 	.word	0x40013c00

08006454 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006454:	b480      	push	{r7}
 8006456:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006458:	4b05      	ldr	r3, [pc, #20]	; (8006470 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a04      	ldr	r2, [pc, #16]	; (8006470 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800645e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006462:	6013      	str	r3, [r2, #0]
}
 8006464:	bf00      	nop
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40007000 	.word	0x40007000

08006474 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800647c:	2300      	movs	r3, #0
 800647e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e29b      	b.n	80069c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 8087 	beq.w	80065a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006498:	4b96      	ldr	r3, [pc, #600]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f003 030c 	and.w	r3, r3, #12
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d00c      	beq.n	80064be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064a4:	4b93      	ldr	r3, [pc, #588]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 030c 	and.w	r3, r3, #12
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	d112      	bne.n	80064d6 <HAL_RCC_OscConfig+0x62>
 80064b0:	4b90      	ldr	r3, [pc, #576]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064bc:	d10b      	bne.n	80064d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064be:	4b8d      	ldr	r3, [pc, #564]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d06c      	beq.n	80065a4 <HAL_RCC_OscConfig+0x130>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d168      	bne.n	80065a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e275      	b.n	80069c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064de:	d106      	bne.n	80064ee <HAL_RCC_OscConfig+0x7a>
 80064e0:	4b84      	ldr	r3, [pc, #528]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a83      	ldr	r2, [pc, #524]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80064e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ea:	6013      	str	r3, [r2, #0]
 80064ec:	e02e      	b.n	800654c <HAL_RCC_OscConfig+0xd8>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10c      	bne.n	8006510 <HAL_RCC_OscConfig+0x9c>
 80064f6:	4b7f      	ldr	r3, [pc, #508]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a7e      	ldr	r2, [pc, #504]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80064fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006500:	6013      	str	r3, [r2, #0]
 8006502:	4b7c      	ldr	r3, [pc, #496]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a7b      	ldr	r2, [pc, #492]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006508:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	e01d      	b.n	800654c <HAL_RCC_OscConfig+0xd8>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006518:	d10c      	bne.n	8006534 <HAL_RCC_OscConfig+0xc0>
 800651a:	4b76      	ldr	r3, [pc, #472]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a75      	ldr	r2, [pc, #468]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	4b73      	ldr	r3, [pc, #460]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a72      	ldr	r2, [pc, #456]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800652c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	e00b      	b.n	800654c <HAL_RCC_OscConfig+0xd8>
 8006534:	4b6f      	ldr	r3, [pc, #444]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a6e      	ldr	r2, [pc, #440]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800653a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	4b6c      	ldr	r3, [pc, #432]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a6b      	ldr	r2, [pc, #428]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800654a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d013      	beq.n	800657c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006554:	f7ff f8ba 	bl	80056cc <HAL_GetTick>
 8006558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800655c:	f7ff f8b6 	bl	80056cc <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b64      	cmp	r3, #100	; 0x64
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e229      	b.n	80069c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800656e:	4b61      	ldr	r3, [pc, #388]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0f0      	beq.n	800655c <HAL_RCC_OscConfig+0xe8>
 800657a:	e014      	b.n	80065a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800657c:	f7ff f8a6 	bl	80056cc <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006584:	f7ff f8a2 	bl	80056cc <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b64      	cmp	r3, #100	; 0x64
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e215      	b.n	80069c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006596:	4b57      	ldr	r3, [pc, #348]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1f0      	bne.n	8006584 <HAL_RCC_OscConfig+0x110>
 80065a2:	e000      	b.n	80065a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d069      	beq.n	8006686 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065b2:	4b50      	ldr	r3, [pc, #320]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 030c 	and.w	r3, r3, #12
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00b      	beq.n	80065d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065be:	4b4d      	ldr	r3, [pc, #308]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 030c 	and.w	r3, r3, #12
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d11c      	bne.n	8006604 <HAL_RCC_OscConfig+0x190>
 80065ca:	4b4a      	ldr	r3, [pc, #296]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d116      	bne.n	8006604 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065d6:	4b47      	ldr	r3, [pc, #284]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d005      	beq.n	80065ee <HAL_RCC_OscConfig+0x17a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d001      	beq.n	80065ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e1e9      	b.n	80069c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ee:	4b41      	ldr	r3, [pc, #260]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	493d      	ldr	r1, [pc, #244]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006602:	e040      	b.n	8006686 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d023      	beq.n	8006654 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800660c:	4b39      	ldr	r3, [pc, #228]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a38      	ldr	r2, [pc, #224]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006612:	f043 0301 	orr.w	r3, r3, #1
 8006616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006618:	f7ff f858 	bl	80056cc <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006620:	f7ff f854 	bl	80056cc <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e1c7      	b.n	80069c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006632:	4b30      	ldr	r3, [pc, #192]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0f0      	beq.n	8006620 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800663e:	4b2d      	ldr	r3, [pc, #180]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	4929      	ldr	r1, [pc, #164]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800664e:	4313      	orrs	r3, r2
 8006650:	600b      	str	r3, [r1, #0]
 8006652:	e018      	b.n	8006686 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006654:	4b27      	ldr	r3, [pc, #156]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a26      	ldr	r2, [pc, #152]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800665a:	f023 0301 	bic.w	r3, r3, #1
 800665e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006660:	f7ff f834 	bl	80056cc <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006668:	f7ff f830 	bl	80056cc <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e1a3      	b.n	80069c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800667a:	4b1e      	ldr	r3, [pc, #120]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1f0      	bne.n	8006668 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0308 	and.w	r3, r3, #8
 800668e:	2b00      	cmp	r3, #0
 8006690:	d038      	beq.n	8006704 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d019      	beq.n	80066ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800669a:	4b16      	ldr	r3, [pc, #88]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800669c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800669e:	4a15      	ldr	r2, [pc, #84]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80066a0:	f043 0301 	orr.w	r3, r3, #1
 80066a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a6:	f7ff f811 	bl	80056cc <HAL_GetTick>
 80066aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ac:	e008      	b.n	80066c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ae:	f7ff f80d 	bl	80056cc <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e180      	b.n	80069c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066c0:	4b0c      	ldr	r3, [pc, #48]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80066c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d0f0      	beq.n	80066ae <HAL_RCC_OscConfig+0x23a>
 80066cc:	e01a      	b.n	8006704 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066ce:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80066d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066d2:	4a08      	ldr	r2, [pc, #32]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80066d4:	f023 0301 	bic.w	r3, r3, #1
 80066d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066da:	f7fe fff7 	bl	80056cc <HAL_GetTick>
 80066de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066e0:	e00a      	b.n	80066f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066e2:	f7fe fff3 	bl	80056cc <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d903      	bls.n	80066f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e166      	b.n	80069c2 <HAL_RCC_OscConfig+0x54e>
 80066f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066f8:	4b92      	ldr	r3, [pc, #584]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 80066fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1ee      	bne.n	80066e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 80a4 	beq.w	800685a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006712:	4b8c      	ldr	r3, [pc, #560]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10d      	bne.n	800673a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800671e:	4b89      	ldr	r3, [pc, #548]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	4a88      	ldr	r2, [pc, #544]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 8006724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006728:	6413      	str	r3, [r2, #64]	; 0x40
 800672a:	4b86      	ldr	r3, [pc, #536]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006732:	60bb      	str	r3, [r7, #8]
 8006734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006736:	2301      	movs	r3, #1
 8006738:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800673a:	4b83      	ldr	r3, [pc, #524]	; (8006948 <HAL_RCC_OscConfig+0x4d4>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006742:	2b00      	cmp	r3, #0
 8006744:	d118      	bne.n	8006778 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006746:	4b80      	ldr	r3, [pc, #512]	; (8006948 <HAL_RCC_OscConfig+0x4d4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a7f      	ldr	r2, [pc, #508]	; (8006948 <HAL_RCC_OscConfig+0x4d4>)
 800674c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006752:	f7fe ffbb 	bl	80056cc <HAL_GetTick>
 8006756:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006758:	e008      	b.n	800676c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800675a:	f7fe ffb7 	bl	80056cc <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b64      	cmp	r3, #100	; 0x64
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e12a      	b.n	80069c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800676c:	4b76      	ldr	r3, [pc, #472]	; (8006948 <HAL_RCC_OscConfig+0x4d4>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006774:	2b00      	cmp	r3, #0
 8006776:	d0f0      	beq.n	800675a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d106      	bne.n	800678e <HAL_RCC_OscConfig+0x31a>
 8006780:	4b70      	ldr	r3, [pc, #448]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 8006782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006784:	4a6f      	ldr	r2, [pc, #444]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 8006786:	f043 0301 	orr.w	r3, r3, #1
 800678a:	6713      	str	r3, [r2, #112]	; 0x70
 800678c:	e02d      	b.n	80067ea <HAL_RCC_OscConfig+0x376>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10c      	bne.n	80067b0 <HAL_RCC_OscConfig+0x33c>
 8006796:	4b6b      	ldr	r3, [pc, #428]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 8006798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679a:	4a6a      	ldr	r2, [pc, #424]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 800679c:	f023 0301 	bic.w	r3, r3, #1
 80067a0:	6713      	str	r3, [r2, #112]	; 0x70
 80067a2:	4b68      	ldr	r3, [pc, #416]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 80067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a6:	4a67      	ldr	r2, [pc, #412]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 80067a8:	f023 0304 	bic.w	r3, r3, #4
 80067ac:	6713      	str	r3, [r2, #112]	; 0x70
 80067ae:	e01c      	b.n	80067ea <HAL_RCC_OscConfig+0x376>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	2b05      	cmp	r3, #5
 80067b6:	d10c      	bne.n	80067d2 <HAL_RCC_OscConfig+0x35e>
 80067b8:	4b62      	ldr	r3, [pc, #392]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 80067ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067bc:	4a61      	ldr	r2, [pc, #388]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 80067be:	f043 0304 	orr.w	r3, r3, #4
 80067c2:	6713      	str	r3, [r2, #112]	; 0x70
 80067c4:	4b5f      	ldr	r3, [pc, #380]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 80067c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c8:	4a5e      	ldr	r2, [pc, #376]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 80067ca:	f043 0301 	orr.w	r3, r3, #1
 80067ce:	6713      	str	r3, [r2, #112]	; 0x70
 80067d0:	e00b      	b.n	80067ea <HAL_RCC_OscConfig+0x376>
 80067d2:	4b5c      	ldr	r3, [pc, #368]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 80067d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d6:	4a5b      	ldr	r2, [pc, #364]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 80067d8:	f023 0301 	bic.w	r3, r3, #1
 80067dc:	6713      	str	r3, [r2, #112]	; 0x70
 80067de:	4b59      	ldr	r3, [pc, #356]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	4a58      	ldr	r2, [pc, #352]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 80067e4:	f023 0304 	bic.w	r3, r3, #4
 80067e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d015      	beq.n	800681e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f2:	f7fe ff6b 	bl	80056cc <HAL_GetTick>
 80067f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067f8:	e00a      	b.n	8006810 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067fa:	f7fe ff67 	bl	80056cc <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	f241 3288 	movw	r2, #5000	; 0x1388
 8006808:	4293      	cmp	r3, r2
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e0d8      	b.n	80069c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006810:	4b4c      	ldr	r3, [pc, #304]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 8006812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0ee      	beq.n	80067fa <HAL_RCC_OscConfig+0x386>
 800681c:	e014      	b.n	8006848 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800681e:	f7fe ff55 	bl	80056cc <HAL_GetTick>
 8006822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006824:	e00a      	b.n	800683c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006826:	f7fe ff51 	bl	80056cc <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	f241 3288 	movw	r2, #5000	; 0x1388
 8006834:	4293      	cmp	r3, r2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e0c2      	b.n	80069c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800683c:	4b41      	ldr	r3, [pc, #260]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 800683e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1ee      	bne.n	8006826 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006848:	7dfb      	ldrb	r3, [r7, #23]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d105      	bne.n	800685a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800684e:	4b3d      	ldr	r3, [pc, #244]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	4a3c      	ldr	r2, [pc, #240]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 8006854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006858:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 80ae 	beq.w	80069c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006864:	4b37      	ldr	r3, [pc, #220]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 030c 	and.w	r3, r3, #12
 800686c:	2b08      	cmp	r3, #8
 800686e:	d06d      	beq.n	800694c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	2b02      	cmp	r3, #2
 8006876:	d14b      	bne.n	8006910 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006878:	4b32      	ldr	r3, [pc, #200]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a31      	ldr	r2, [pc, #196]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 800687e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006884:	f7fe ff22 	bl	80056cc <HAL_GetTick>
 8006888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800688a:	e008      	b.n	800689e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800688c:	f7fe ff1e 	bl	80056cc <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e091      	b.n	80069c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800689e:	4b29      	ldr	r3, [pc, #164]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1f0      	bne.n	800688c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69da      	ldr	r2, [r3, #28]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	019b      	lsls	r3, r3, #6
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c0:	085b      	lsrs	r3, r3, #1
 80068c2:	3b01      	subs	r3, #1
 80068c4:	041b      	lsls	r3, r3, #16
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	061b      	lsls	r3, r3, #24
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d4:	071b      	lsls	r3, r3, #28
 80068d6:	491b      	ldr	r1, [pc, #108]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068dc:	4b19      	ldr	r3, [pc, #100]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a18      	ldr	r2, [pc, #96]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 80068e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e8:	f7fe fef0 	bl	80056cc <HAL_GetTick>
 80068ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ee:	e008      	b.n	8006902 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068f0:	f7fe feec 	bl	80056cc <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e05f      	b.n	80069c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006902:	4b10      	ldr	r3, [pc, #64]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0f0      	beq.n	80068f0 <HAL_RCC_OscConfig+0x47c>
 800690e:	e057      	b.n	80069c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006910:	4b0c      	ldr	r3, [pc, #48]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a0b      	ldr	r2, [pc, #44]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 8006916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800691a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691c:	f7fe fed6 	bl	80056cc <HAL_GetTick>
 8006920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006924:	f7fe fed2 	bl	80056cc <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e045      	b.n	80069c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006936:	4b03      	ldr	r3, [pc, #12]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1f0      	bne.n	8006924 <HAL_RCC_OscConfig+0x4b0>
 8006942:	e03d      	b.n	80069c0 <HAL_RCC_OscConfig+0x54c>
 8006944:	40023800 	.word	0x40023800
 8006948:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800694c:	4b1f      	ldr	r3, [pc, #124]	; (80069cc <HAL_RCC_OscConfig+0x558>)
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d030      	beq.n	80069bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006964:	429a      	cmp	r2, r3
 8006966:	d129      	bne.n	80069bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006972:	429a      	cmp	r2, r3
 8006974:	d122      	bne.n	80069bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800697c:	4013      	ands	r3, r2
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006982:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006984:	4293      	cmp	r3, r2
 8006986:	d119      	bne.n	80069bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006992:	085b      	lsrs	r3, r3, #1
 8006994:	3b01      	subs	r3, #1
 8006996:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006998:	429a      	cmp	r2, r3
 800699a:	d10f      	bne.n	80069bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d107      	bne.n	80069bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d001      	beq.n	80069c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e000      	b.n	80069c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	40023800 	.word	0x40023800

080069d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e0d0      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069e8:	4b6a      	ldr	r3, [pc, #424]	; (8006b94 <HAL_RCC_ClockConfig+0x1c4>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 030f 	and.w	r3, r3, #15
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d910      	bls.n	8006a18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069f6:	4b67      	ldr	r3, [pc, #412]	; (8006b94 <HAL_RCC_ClockConfig+0x1c4>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f023 020f 	bic.w	r2, r3, #15
 80069fe:	4965      	ldr	r1, [pc, #404]	; (8006b94 <HAL_RCC_ClockConfig+0x1c4>)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a06:	4b63      	ldr	r3, [pc, #396]	; (8006b94 <HAL_RCC_ClockConfig+0x1c4>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 030f 	and.w	r3, r3, #15
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d001      	beq.n	8006a18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e0b8      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d020      	beq.n	8006a66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d005      	beq.n	8006a3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a30:	4b59      	ldr	r3, [pc, #356]	; (8006b98 <HAL_RCC_ClockConfig+0x1c8>)
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	4a58      	ldr	r2, [pc, #352]	; (8006b98 <HAL_RCC_ClockConfig+0x1c8>)
 8006a36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d005      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a48:	4b53      	ldr	r3, [pc, #332]	; (8006b98 <HAL_RCC_ClockConfig+0x1c8>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	4a52      	ldr	r2, [pc, #328]	; (8006b98 <HAL_RCC_ClockConfig+0x1c8>)
 8006a4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a54:	4b50      	ldr	r3, [pc, #320]	; (8006b98 <HAL_RCC_ClockConfig+0x1c8>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	494d      	ldr	r1, [pc, #308]	; (8006b98 <HAL_RCC_ClockConfig+0x1c8>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d040      	beq.n	8006af4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d107      	bne.n	8006a8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a7a:	4b47      	ldr	r3, [pc, #284]	; (8006b98 <HAL_RCC_ClockConfig+0x1c8>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d115      	bne.n	8006ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e07f      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d107      	bne.n	8006aa2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a92:	4b41      	ldr	r3, [pc, #260]	; (8006b98 <HAL_RCC_ClockConfig+0x1c8>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d109      	bne.n	8006ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e073      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aa2:	4b3d      	ldr	r3, [pc, #244]	; (8006b98 <HAL_RCC_ClockConfig+0x1c8>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e06b      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ab2:	4b39      	ldr	r3, [pc, #228]	; (8006b98 <HAL_RCC_ClockConfig+0x1c8>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f023 0203 	bic.w	r2, r3, #3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	4936      	ldr	r1, [pc, #216]	; (8006b98 <HAL_RCC_ClockConfig+0x1c8>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ac4:	f7fe fe02 	bl	80056cc <HAL_GetTick>
 8006ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aca:	e00a      	b.n	8006ae2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006acc:	f7fe fdfe 	bl	80056cc <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e053      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ae2:	4b2d      	ldr	r3, [pc, #180]	; (8006b98 <HAL_RCC_ClockConfig+0x1c8>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f003 020c 	and.w	r2, r3, #12
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d1eb      	bne.n	8006acc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006af4:	4b27      	ldr	r3, [pc, #156]	; (8006b94 <HAL_RCC_ClockConfig+0x1c4>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 030f 	and.w	r3, r3, #15
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d210      	bcs.n	8006b24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b02:	4b24      	ldr	r3, [pc, #144]	; (8006b94 <HAL_RCC_ClockConfig+0x1c4>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f023 020f 	bic.w	r2, r3, #15
 8006b0a:	4922      	ldr	r1, [pc, #136]	; (8006b94 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b12:	4b20      	ldr	r3, [pc, #128]	; (8006b94 <HAL_RCC_ClockConfig+0x1c4>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 030f 	and.w	r3, r3, #15
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d001      	beq.n	8006b24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e032      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d008      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b30:	4b19      	ldr	r3, [pc, #100]	; (8006b98 <HAL_RCC_ClockConfig+0x1c8>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	4916      	ldr	r1, [pc, #88]	; (8006b98 <HAL_RCC_ClockConfig+0x1c8>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0308 	and.w	r3, r3, #8
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d009      	beq.n	8006b62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b4e:	4b12      	ldr	r3, [pc, #72]	; (8006b98 <HAL_RCC_ClockConfig+0x1c8>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	00db      	lsls	r3, r3, #3
 8006b5c:	490e      	ldr	r1, [pc, #56]	; (8006b98 <HAL_RCC_ClockConfig+0x1c8>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b62:	f000 f821 	bl	8006ba8 <HAL_RCC_GetSysClockFreq>
 8006b66:	4601      	mov	r1, r0
 8006b68:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <HAL_RCC_ClockConfig+0x1c8>)
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	091b      	lsrs	r3, r3, #4
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	4a0a      	ldr	r2, [pc, #40]	; (8006b9c <HAL_RCC_ClockConfig+0x1cc>)
 8006b74:	5cd3      	ldrb	r3, [r2, r3]
 8006b76:	fa21 f303 	lsr.w	r3, r1, r3
 8006b7a:	4a09      	ldr	r2, [pc, #36]	; (8006ba0 <HAL_RCC_ClockConfig+0x1d0>)
 8006b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b7e:	4b09      	ldr	r3, [pc, #36]	; (8006ba4 <HAL_RCC_ClockConfig+0x1d4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe fd5e 	bl	8005644 <HAL_InitTick>

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	40023c00 	.word	0x40023c00
 8006b98:	40023800 	.word	0x40023800
 8006b9c:	08008c14 	.word	0x08008c14
 8006ba0:	20000028 	.word	0x20000028
 8006ba4:	20000030 	.word	0x20000030

08006ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	607b      	str	r3, [r7, #4]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60fb      	str	r3, [r7, #12]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bbe:	4b63      	ldr	r3, [pc, #396]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 030c 	and.w	r3, r3, #12
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d007      	beq.n	8006bda <HAL_RCC_GetSysClockFreq+0x32>
 8006bca:	2b08      	cmp	r3, #8
 8006bcc:	d008      	beq.n	8006be0 <HAL_RCC_GetSysClockFreq+0x38>
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f040 80b4 	bne.w	8006d3c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bd4:	4b5e      	ldr	r3, [pc, #376]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006bd6:	60bb      	str	r3, [r7, #8]
      break;
 8006bd8:	e0b3      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bda:	4b5e      	ldr	r3, [pc, #376]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006bdc:	60bb      	str	r3, [r7, #8]
      break;
 8006bde:	e0b0      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006be0:	4b5a      	ldr	r3, [pc, #360]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006be8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006bea:	4b58      	ldr	r3, [pc, #352]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d04a      	beq.n	8006c8c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bf6:	4b55      	ldr	r3, [pc, #340]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	099b      	lsrs	r3, r3, #6
 8006bfc:	f04f 0400 	mov.w	r4, #0
 8006c00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c04:	f04f 0200 	mov.w	r2, #0
 8006c08:	ea03 0501 	and.w	r5, r3, r1
 8006c0c:	ea04 0602 	and.w	r6, r4, r2
 8006c10:	4629      	mov	r1, r5
 8006c12:	4632      	mov	r2, r6
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	f04f 0400 	mov.w	r4, #0
 8006c1c:	0154      	lsls	r4, r2, #5
 8006c1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c22:	014b      	lsls	r3, r1, #5
 8006c24:	4619      	mov	r1, r3
 8006c26:	4622      	mov	r2, r4
 8006c28:	1b49      	subs	r1, r1, r5
 8006c2a:	eb62 0206 	sbc.w	r2, r2, r6
 8006c2e:	f04f 0300 	mov.w	r3, #0
 8006c32:	f04f 0400 	mov.w	r4, #0
 8006c36:	0194      	lsls	r4, r2, #6
 8006c38:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006c3c:	018b      	lsls	r3, r1, #6
 8006c3e:	1a5b      	subs	r3, r3, r1
 8006c40:	eb64 0402 	sbc.w	r4, r4, r2
 8006c44:	f04f 0100 	mov.w	r1, #0
 8006c48:	f04f 0200 	mov.w	r2, #0
 8006c4c:	00e2      	lsls	r2, r4, #3
 8006c4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006c52:	00d9      	lsls	r1, r3, #3
 8006c54:	460b      	mov	r3, r1
 8006c56:	4614      	mov	r4, r2
 8006c58:	195b      	adds	r3, r3, r5
 8006c5a:	eb44 0406 	adc.w	r4, r4, r6
 8006c5e:	f04f 0100 	mov.w	r1, #0
 8006c62:	f04f 0200 	mov.w	r2, #0
 8006c66:	0262      	lsls	r2, r4, #9
 8006c68:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006c6c:	0259      	lsls	r1, r3, #9
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4614      	mov	r4, r2
 8006c72:	4618      	mov	r0, r3
 8006c74:	4621      	mov	r1, r4
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f04f 0400 	mov.w	r4, #0
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4623      	mov	r3, r4
 8006c80:	f7f9 fada 	bl	8000238 <__aeabi_uldivmod>
 8006c84:	4603      	mov	r3, r0
 8006c86:	460c      	mov	r4, r1
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e049      	b.n	8006d20 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c8c:	4b2f      	ldr	r3, [pc, #188]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	099b      	lsrs	r3, r3, #6
 8006c92:	f04f 0400 	mov.w	r4, #0
 8006c96:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c9a:	f04f 0200 	mov.w	r2, #0
 8006c9e:	ea03 0501 	and.w	r5, r3, r1
 8006ca2:	ea04 0602 	and.w	r6, r4, r2
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4632      	mov	r2, r6
 8006caa:	f04f 0300 	mov.w	r3, #0
 8006cae:	f04f 0400 	mov.w	r4, #0
 8006cb2:	0154      	lsls	r4, r2, #5
 8006cb4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006cb8:	014b      	lsls	r3, r1, #5
 8006cba:	4619      	mov	r1, r3
 8006cbc:	4622      	mov	r2, r4
 8006cbe:	1b49      	subs	r1, r1, r5
 8006cc0:	eb62 0206 	sbc.w	r2, r2, r6
 8006cc4:	f04f 0300 	mov.w	r3, #0
 8006cc8:	f04f 0400 	mov.w	r4, #0
 8006ccc:	0194      	lsls	r4, r2, #6
 8006cce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006cd2:	018b      	lsls	r3, r1, #6
 8006cd4:	1a5b      	subs	r3, r3, r1
 8006cd6:	eb64 0402 	sbc.w	r4, r4, r2
 8006cda:	f04f 0100 	mov.w	r1, #0
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	00e2      	lsls	r2, r4, #3
 8006ce4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006ce8:	00d9      	lsls	r1, r3, #3
 8006cea:	460b      	mov	r3, r1
 8006cec:	4614      	mov	r4, r2
 8006cee:	195b      	adds	r3, r3, r5
 8006cf0:	eb44 0406 	adc.w	r4, r4, r6
 8006cf4:	f04f 0100 	mov.w	r1, #0
 8006cf8:	f04f 0200 	mov.w	r2, #0
 8006cfc:	02a2      	lsls	r2, r4, #10
 8006cfe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006d02:	0299      	lsls	r1, r3, #10
 8006d04:	460b      	mov	r3, r1
 8006d06:	4614      	mov	r4, r2
 8006d08:	4618      	mov	r0, r3
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f04f 0400 	mov.w	r4, #0
 8006d12:	461a      	mov	r2, r3
 8006d14:	4623      	mov	r3, r4
 8006d16:	f7f9 fa8f 	bl	8000238 <__aeabi_uldivmod>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006d20:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	0c1b      	lsrs	r3, r3, #16
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d38:	60bb      	str	r3, [r7, #8]
      break;
 8006d3a:	e002      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d3c:	4b04      	ldr	r3, [pc, #16]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006d3e:	60bb      	str	r3, [r7, #8]
      break;
 8006d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d42:	68bb      	ldr	r3, [r7, #8]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	00f42400 	.word	0x00f42400
 8006d54:	007a1200 	.word	0x007a1200

08006d58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d5c:	4b03      	ldr	r3, [pc, #12]	; (8006d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	20000028 	.word	0x20000028

08006d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d74:	f7ff fff0 	bl	8006d58 <HAL_RCC_GetHCLKFreq>
 8006d78:	4601      	mov	r1, r0
 8006d7a:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	0a9b      	lsrs	r3, r3, #10
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	4a03      	ldr	r2, [pc, #12]	; (8006d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d86:	5cd3      	ldrb	r3, [r2, r3]
 8006d88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	40023800 	.word	0x40023800
 8006d94:	08008c24 	.word	0x08008c24

08006d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d9c:	f7ff ffdc 	bl	8006d58 <HAL_RCC_GetHCLKFreq>
 8006da0:	4601      	mov	r1, r0
 8006da2:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	0b5b      	lsrs	r3, r3, #13
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	4a03      	ldr	r2, [pc, #12]	; (8006dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dae:	5cd3      	ldrb	r3, [r2, r3]
 8006db0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	08008c24 	.word	0x08008c24

08006dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d012      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006de8:	4b69      	ldr	r3, [pc, #420]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	4a68      	ldr	r2, [pc, #416]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006df2:	6093      	str	r3, [r2, #8]
 8006df4:	4b66      	ldr	r3, [pc, #408]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfc:	4964      	ldr	r1, [pc, #400]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d017      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e1a:	4b5d      	ldr	r3, [pc, #372]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e28:	4959      	ldr	r1, [pc, #356]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e38:	d101      	bne.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006e46:	2301      	movs	r3, #1
 8006e48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d017      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e56:	4b4e      	ldr	r3, [pc, #312]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e64:	494a      	ldr	r1, [pc, #296]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e74:	d101      	bne.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006e76:	2301      	movs	r3, #1
 8006e78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006e82:	2301      	movs	r3, #1
 8006e84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006e92:	2301      	movs	r3, #1
 8006e94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0320 	and.w	r3, r3, #32
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 808b 	beq.w	8006fba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ea4:	4b3a      	ldr	r3, [pc, #232]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea8:	4a39      	ldr	r2, [pc, #228]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eae:	6413      	str	r3, [r2, #64]	; 0x40
 8006eb0:	4b37      	ldr	r3, [pc, #220]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eb8:	60bb      	str	r3, [r7, #8]
 8006eba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ebc:	4b35      	ldr	r3, [pc, #212]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a34      	ldr	r2, [pc, #208]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ec6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ec8:	f7fe fc00 	bl	80056cc <HAL_GetTick>
 8006ecc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ed0:	f7fe fbfc 	bl	80056cc <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b64      	cmp	r3, #100	; 0x64
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e38d      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ee2:	4b2c      	ldr	r3, [pc, #176]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0f0      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006eee:	4b28      	ldr	r3, [pc, #160]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d035      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d02e      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f0c:	4b20      	ldr	r3, [pc, #128]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f16:	4b1e      	ldr	r3, [pc, #120]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1a:	4a1d      	ldr	r2, [pc, #116]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f20:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f22:	4b1b      	ldr	r3, [pc, #108]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f26:	4a1a      	ldr	r2, [pc, #104]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006f2e:	4a18      	ldr	r2, [pc, #96]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f34:	4b16      	ldr	r3, [pc, #88]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d114      	bne.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f40:	f7fe fbc4 	bl	80056cc <HAL_GetTick>
 8006f44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f46:	e00a      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f48:	f7fe fbc0 	bl	80056cc <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e34f      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f5e:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0ee      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f76:	d111      	bne.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006f78:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f84:	4b04      	ldr	r3, [pc, #16]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006f86:	400b      	ands	r3, r1
 8006f88:	4901      	ldr	r1, [pc, #4]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	608b      	str	r3, [r1, #8]
 8006f8e:	e00b      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006f90:	40023800 	.word	0x40023800
 8006f94:	40007000 	.word	0x40007000
 8006f98:	0ffffcff 	.word	0x0ffffcff
 8006f9c:	4bb3      	ldr	r3, [pc, #716]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	4ab2      	ldr	r2, [pc, #712]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fa2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006fa6:	6093      	str	r3, [r2, #8]
 8006fa8:	4bb0      	ldr	r3, [pc, #704]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006faa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fb4:	49ad      	ldr	r1, [pc, #692]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0310 	and.w	r3, r3, #16
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d010      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fc6:	4ba9      	ldr	r3, [pc, #676]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fcc:	4aa7      	ldr	r2, [pc, #668]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006fd6:	4ba5      	ldr	r3, [pc, #660]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe0:	49a2      	ldr	r1, [pc, #648]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00a      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ff4:	4b9d      	ldr	r3, [pc, #628]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007002:	499a      	ldr	r1, [pc, #616]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007004:	4313      	orrs	r3, r2
 8007006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007016:	4b95      	ldr	r3, [pc, #596]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007024:	4991      	ldr	r1, [pc, #580]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007026:	4313      	orrs	r3, r2
 8007028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00a      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007038:	4b8c      	ldr	r3, [pc, #560]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800703a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007046:	4989      	ldr	r1, [pc, #548]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007048:	4313      	orrs	r3, r2
 800704a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800705a:	4b84      	ldr	r3, [pc, #528]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800705c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007060:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007068:	4980      	ldr	r1, [pc, #512]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800706a:	4313      	orrs	r3, r2
 800706c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00a      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800707c:	4b7b      	ldr	r3, [pc, #492]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800707e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007082:	f023 0203 	bic.w	r2, r3, #3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708a:	4978      	ldr	r1, [pc, #480]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800708c:	4313      	orrs	r3, r2
 800708e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800709e:	4b73      	ldr	r3, [pc, #460]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a4:	f023 020c 	bic.w	r2, r3, #12
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ac:	496f      	ldr	r1, [pc, #444]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00a      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070c0:	4b6a      	ldr	r3, [pc, #424]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ce:	4967      	ldr	r1, [pc, #412]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070e2:	4b62      	ldr	r3, [pc, #392]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f0:	495e      	ldr	r1, [pc, #376]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00a      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007104:	4b59      	ldr	r3, [pc, #356]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007112:	4956      	ldr	r1, [pc, #344]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007114:	4313      	orrs	r3, r2
 8007116:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00a      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007126:	4b51      	ldr	r3, [pc, #324]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007134:	494d      	ldr	r1, [pc, #308]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007136:	4313      	orrs	r3, r2
 8007138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00a      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007148:	4b48      	ldr	r3, [pc, #288]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800714a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007156:	4945      	ldr	r1, [pc, #276]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007158:	4313      	orrs	r3, r2
 800715a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800716a:	4b40      	ldr	r3, [pc, #256]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800716c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007170:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007178:	493c      	ldr	r1, [pc, #240]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800717a:	4313      	orrs	r3, r2
 800717c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800718c:	4b37      	ldr	r3, [pc, #220]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800718e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007192:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800719a:	4934      	ldr	r1, [pc, #208]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800719c:	4313      	orrs	r3, r2
 800719e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d011      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80071ae:	4b2f      	ldr	r3, [pc, #188]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071bc:	492b      	ldr	r1, [pc, #172]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071cc:	d101      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80071ce:	2301      	movs	r3, #1
 80071d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0308 	and.w	r3, r3, #8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d001      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80071de:	2301      	movs	r3, #1
 80071e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00a      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071ee:	4b1f      	ldr	r3, [pc, #124]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071fc:	491b      	ldr	r1, [pc, #108]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00b      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007210:	4b16      	ldr	r3, [pc, #88]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007216:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007220:	4912      	ldr	r1, [pc, #72]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007222:	4313      	orrs	r3, r2
 8007224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00b      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007234:	4b0d      	ldr	r3, [pc, #52]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007244:	4909      	ldr	r1, [pc, #36]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007246:	4313      	orrs	r3, r2
 8007248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00f      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007258:	4b04      	ldr	r3, [pc, #16]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800725a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800725e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007268:	e002      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800726a:	bf00      	nop
 800726c:	40023800 	.word	0x40023800
 8007270:	4985      	ldr	r1, [pc, #532]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007272:	4313      	orrs	r3, r2
 8007274:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00b      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007284:	4b80      	ldr	r3, [pc, #512]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800728a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007294:	497c      	ldr	r1, [pc, #496]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007296:	4313      	orrs	r3, r2
 8007298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d005      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072aa:	f040 80d6 	bne.w	800745a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80072ae:	4b76      	ldr	r3, [pc, #472]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a75      	ldr	r2, [pc, #468]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ba:	f7fe fa07 	bl	80056cc <HAL_GetTick>
 80072be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072c0:	e008      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80072c2:	f7fe fa03 	bl	80056cc <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	2b64      	cmp	r3, #100	; 0x64
 80072ce:	d901      	bls.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e194      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072d4:	4b6c      	ldr	r3, [pc, #432]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1f0      	bne.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d021      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d11d      	bne.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80072f4:	4b64      	ldr	r3, [pc, #400]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072fa:	0c1b      	lsrs	r3, r3, #16
 80072fc:	f003 0303 	and.w	r3, r3, #3
 8007300:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007302:	4b61      	ldr	r3, [pc, #388]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007308:	0e1b      	lsrs	r3, r3, #24
 800730a:	f003 030f 	and.w	r3, r3, #15
 800730e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	019a      	lsls	r2, r3, #6
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	041b      	lsls	r3, r3, #16
 800731a:	431a      	orrs	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	061b      	lsls	r3, r3, #24
 8007320:	431a      	orrs	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	071b      	lsls	r3, r3, #28
 8007328:	4957      	ldr	r1, [pc, #348]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800732a:	4313      	orrs	r3, r2
 800732c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d004      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007344:	d00a      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800734e:	2b00      	cmp	r3, #0
 8007350:	d02e      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800735a:	d129      	bne.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800735c:	4b4a      	ldr	r3, [pc, #296]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800735e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007362:	0c1b      	lsrs	r3, r3, #16
 8007364:	f003 0303 	and.w	r3, r3, #3
 8007368:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800736a:	4b47      	ldr	r3, [pc, #284]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800736c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007370:	0f1b      	lsrs	r3, r3, #28
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	019a      	lsls	r2, r3, #6
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	041b      	lsls	r3, r3, #16
 8007382:	431a      	orrs	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	061b      	lsls	r3, r3, #24
 800738a:	431a      	orrs	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	071b      	lsls	r3, r3, #28
 8007390:	493d      	ldr	r1, [pc, #244]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007392:	4313      	orrs	r3, r2
 8007394:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007398:	4b3b      	ldr	r3, [pc, #236]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800739a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800739e:	f023 021f 	bic.w	r2, r3, #31
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	3b01      	subs	r3, #1
 80073a8:	4937      	ldr	r1, [pc, #220]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d01d      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073bc:	4b32      	ldr	r3, [pc, #200]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073c2:	0e1b      	lsrs	r3, r3, #24
 80073c4:	f003 030f 	and.w	r3, r3, #15
 80073c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073ca:	4b2f      	ldr	r3, [pc, #188]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073d0:	0f1b      	lsrs	r3, r3, #28
 80073d2:	f003 0307 	and.w	r3, r3, #7
 80073d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	019a      	lsls	r2, r3, #6
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	041b      	lsls	r3, r3, #16
 80073e4:	431a      	orrs	r2, r3
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	061b      	lsls	r3, r3, #24
 80073ea:	431a      	orrs	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	071b      	lsls	r3, r3, #28
 80073f0:	4925      	ldr	r1, [pc, #148]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d011      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	019a      	lsls	r2, r3, #6
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	041b      	lsls	r3, r3, #16
 8007410:	431a      	orrs	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	061b      	lsls	r3, r3, #24
 8007418:	431a      	orrs	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	071b      	lsls	r3, r3, #28
 8007420:	4919      	ldr	r1, [pc, #100]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007428:	4b17      	ldr	r3, [pc, #92]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a16      	ldr	r2, [pc, #88]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800742e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007432:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007434:	f7fe f94a 	bl	80056cc <HAL_GetTick>
 8007438:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800743a:	e008      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800743c:	f7fe f946 	bl	80056cc <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b64      	cmp	r3, #100	; 0x64
 8007448:	d901      	bls.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e0d7      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800744e:	4b0e      	ldr	r3, [pc, #56]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0f0      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	2b01      	cmp	r3, #1
 800745e:	f040 80cd 	bne.w	80075fc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007462:	4b09      	ldr	r3, [pc, #36]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a08      	ldr	r2, [pc, #32]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800746c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800746e:	f7fe f92d 	bl	80056cc <HAL_GetTick>
 8007472:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007474:	e00a      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007476:	f7fe f929 	bl	80056cc <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	2b64      	cmp	r3, #100	; 0x64
 8007482:	d903      	bls.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e0ba      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007488:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800748c:	4b5e      	ldr	r3, [pc, #376]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007498:	d0ed      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d009      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d02e      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d12a      	bne.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80074c2:	4b51      	ldr	r3, [pc, #324]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c8:	0c1b      	lsrs	r3, r3, #16
 80074ca:	f003 0303 	and.w	r3, r3, #3
 80074ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074d0:	4b4d      	ldr	r3, [pc, #308]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d6:	0f1b      	lsrs	r3, r3, #28
 80074d8:	f003 0307 	and.w	r3, r3, #7
 80074dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	019a      	lsls	r2, r3, #6
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	041b      	lsls	r3, r3, #16
 80074e8:	431a      	orrs	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	061b      	lsls	r3, r3, #24
 80074f0:	431a      	orrs	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	071b      	lsls	r3, r3, #28
 80074f6:	4944      	ldr	r1, [pc, #272]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80074fe:	4b42      	ldr	r3, [pc, #264]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007504:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750c:	3b01      	subs	r3, #1
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	493d      	ldr	r1, [pc, #244]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007512:	4313      	orrs	r3, r2
 8007514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d022      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800752c:	d11d      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800752e:	4b36      	ldr	r3, [pc, #216]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007534:	0e1b      	lsrs	r3, r3, #24
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800753c:	4b32      	ldr	r3, [pc, #200]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800753e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007542:	0f1b      	lsrs	r3, r3, #28
 8007544:	f003 0307 	and.w	r3, r3, #7
 8007548:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	019a      	lsls	r2, r3, #6
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	041b      	lsls	r3, r3, #16
 8007556:	431a      	orrs	r2, r3
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	061b      	lsls	r3, r3, #24
 800755c:	431a      	orrs	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	071b      	lsls	r3, r3, #28
 8007562:	4929      	ldr	r1, [pc, #164]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007564:	4313      	orrs	r3, r2
 8007566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0308 	and.w	r3, r3, #8
 8007572:	2b00      	cmp	r3, #0
 8007574:	d028      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007576:	4b24      	ldr	r3, [pc, #144]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800757c:	0e1b      	lsrs	r3, r3, #24
 800757e:	f003 030f 	and.w	r3, r3, #15
 8007582:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007584:	4b20      	ldr	r3, [pc, #128]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800758a:	0c1b      	lsrs	r3, r3, #16
 800758c:	f003 0303 	and.w	r3, r3, #3
 8007590:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	019a      	lsls	r2, r3, #6
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	041b      	lsls	r3, r3, #16
 800759c:	431a      	orrs	r2, r3
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	061b      	lsls	r3, r3, #24
 80075a2:	431a      	orrs	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	071b      	lsls	r3, r3, #28
 80075aa:	4917      	ldr	r1, [pc, #92]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80075b2:	4b15      	ldr	r3, [pc, #84]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c0:	4911      	ldr	r1, [pc, #68]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80075c8:	4b0f      	ldr	r3, [pc, #60]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a0e      	ldr	r2, [pc, #56]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075d4:	f7fe f87a 	bl	80056cc <HAL_GetTick>
 80075d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075da:	e008      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075dc:	f7fe f876 	bl	80056cc <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	2b64      	cmp	r3, #100	; 0x64
 80075e8:	d901      	bls.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e007      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075ee:	4b06      	ldr	r3, [pc, #24]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075fa:	d1ef      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3720      	adds	r7, #32
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	40023800 	.word	0x40023800

0800760c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e01d      	b.n	800765a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7f9 fc90 	bl	8000f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	3304      	adds	r3, #4
 8007648:	4619      	mov	r1, r3
 800764a:	4610      	mov	r0, r2
 800764c:	f000 fa8c 	bl	8007b68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
	...

08007664 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689a      	ldr	r2, [r3, #8]
 800767a:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <HAL_TIM_Base_Start+0x50>)
 800767c:	4013      	ands	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2b06      	cmp	r3, #6
 8007684:	d00b      	beq.n	800769e <HAL_TIM_Base_Start+0x3a>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800768c:	d007      	beq.n	800769e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f042 0201 	orr.w	r2, r2, #1
 800769c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	00010007 	.word	0x00010007

080076b8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2202      	movs	r2, #2
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6a1a      	ldr	r2, [r3, #32]
 80076ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80076d2:	4013      	ands	r3, r2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10f      	bne.n	80076f8 <HAL_TIM_Base_Stop+0x40>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6a1a      	ldr	r2, [r3, #32]
 80076de:	f240 4344 	movw	r3, #1092	; 0x444
 80076e2:	4013      	ands	r3, r2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d107      	bne.n	80076f8 <HAL_TIM_Base_Stop+0x40>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0201 	bic.w	r2, r2, #1
 80076f6:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
	...

08007710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68da      	ldr	r2, [r3, #12]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 0201 	orr.w	r2, r2, #1
 8007726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689a      	ldr	r2, [r3, #8]
 800772e:	4b0c      	ldr	r3, [pc, #48]	; (8007760 <HAL_TIM_Base_Start_IT+0x50>)
 8007730:	4013      	ands	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b06      	cmp	r3, #6
 8007738:	d00b      	beq.n	8007752 <HAL_TIM_Base_Start_IT+0x42>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007740:	d007      	beq.n	8007752 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f042 0201 	orr.w	r2, r2, #1
 8007750:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	00010007 	.word	0x00010007

08007764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b02      	cmp	r3, #2
 8007778:	d122      	bne.n	80077c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f003 0302 	and.w	r3, r3, #2
 8007784:	2b02      	cmp	r3, #2
 8007786:	d11b      	bne.n	80077c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f06f 0202 	mvn.w	r2, #2
 8007790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	f003 0303 	and.w	r3, r3, #3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f9c0 	bl	8007b2c <HAL_TIM_IC_CaptureCallback>
 80077ac:	e005      	b.n	80077ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f9b2 	bl	8007b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f9c3 	bl	8007b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	f003 0304 	and.w	r3, r3, #4
 80077ca:	2b04      	cmp	r3, #4
 80077cc:	d122      	bne.n	8007814 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f003 0304 	and.w	r3, r3, #4
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d11b      	bne.n	8007814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f06f 0204 	mvn.w	r2, #4
 80077e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2202      	movs	r2, #2
 80077ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f996 	bl	8007b2c <HAL_TIM_IC_CaptureCallback>
 8007800:	e005      	b.n	800780e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f988 	bl	8007b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f999 	bl	8007b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f003 0308 	and.w	r3, r3, #8
 800781e:	2b08      	cmp	r3, #8
 8007820:	d122      	bne.n	8007868 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f003 0308 	and.w	r3, r3, #8
 800782c:	2b08      	cmp	r3, #8
 800782e:	d11b      	bne.n	8007868 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f06f 0208 	mvn.w	r2, #8
 8007838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2204      	movs	r2, #4
 800783e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	f003 0303 	and.w	r3, r3, #3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f96c 	bl	8007b2c <HAL_TIM_IC_CaptureCallback>
 8007854:	e005      	b.n	8007862 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f95e 	bl	8007b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f96f 	bl	8007b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f003 0310 	and.w	r3, r3, #16
 8007872:	2b10      	cmp	r3, #16
 8007874:	d122      	bne.n	80078bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f003 0310 	and.w	r3, r3, #16
 8007880:	2b10      	cmp	r3, #16
 8007882:	d11b      	bne.n	80078bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0210 	mvn.w	r2, #16
 800788c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2208      	movs	r2, #8
 8007892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f942 	bl	8007b2c <HAL_TIM_IC_CaptureCallback>
 80078a8:	e005      	b.n	80078b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f934 	bl	8007b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f945 	bl	8007b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d10e      	bne.n	80078e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d107      	bne.n	80078e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f06f 0201 	mvn.w	r2, #1
 80078e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7f9 fa7e 	bl	8000de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f2:	2b80      	cmp	r3, #128	; 0x80
 80078f4:	d10e      	bne.n	8007914 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007900:	2b80      	cmp	r3, #128	; 0x80
 8007902:	d107      	bne.n	8007914 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800790c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fafc 	bl	8007f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800791e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007922:	d10e      	bne.n	8007942 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792e:	2b80      	cmp	r3, #128	; 0x80
 8007930:	d107      	bne.n	8007942 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800793a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 faef 	bl	8007f20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794c:	2b40      	cmp	r3, #64	; 0x40
 800794e:	d10e      	bne.n	800796e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795a:	2b40      	cmp	r3, #64	; 0x40
 800795c:	d107      	bne.n	800796e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f8f3 	bl	8007b54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	f003 0320 	and.w	r3, r3, #32
 8007978:	2b20      	cmp	r3, #32
 800797a:	d10e      	bne.n	800799a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b20      	cmp	r3, #32
 8007988:	d107      	bne.n	800799a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f06f 0220 	mvn.w	r2, #32
 8007992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 faaf 	bl	8007ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800799a:	bf00      	nop
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d101      	bne.n	80079bc <HAL_TIM_ConfigClockSource+0x18>
 80079b8:	2302      	movs	r3, #2
 80079ba:	e0a6      	b.n	8007b0a <HAL_TIM_ConfigClockSource+0x166>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2202      	movs	r2, #2
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	4b4f      	ldr	r3, [pc, #316]	; (8007b14 <HAL_TIM_ConfigClockSource+0x170>)
 80079d8:	4013      	ands	r3, r2
 80079da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b40      	cmp	r3, #64	; 0x40
 80079f2:	d067      	beq.n	8007ac4 <HAL_TIM_ConfigClockSource+0x120>
 80079f4:	2b40      	cmp	r3, #64	; 0x40
 80079f6:	d80b      	bhi.n	8007a10 <HAL_TIM_ConfigClockSource+0x6c>
 80079f8:	2b10      	cmp	r3, #16
 80079fa:	d073      	beq.n	8007ae4 <HAL_TIM_ConfigClockSource+0x140>
 80079fc:	2b10      	cmp	r3, #16
 80079fe:	d802      	bhi.n	8007a06 <HAL_TIM_ConfigClockSource+0x62>
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d06f      	beq.n	8007ae4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007a04:	e078      	b.n	8007af8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	d06c      	beq.n	8007ae4 <HAL_TIM_ConfigClockSource+0x140>
 8007a0a:	2b30      	cmp	r3, #48	; 0x30
 8007a0c:	d06a      	beq.n	8007ae4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007a0e:	e073      	b.n	8007af8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007a10:	2b70      	cmp	r3, #112	; 0x70
 8007a12:	d00d      	beq.n	8007a30 <HAL_TIM_ConfigClockSource+0x8c>
 8007a14:	2b70      	cmp	r3, #112	; 0x70
 8007a16:	d804      	bhi.n	8007a22 <HAL_TIM_ConfigClockSource+0x7e>
 8007a18:	2b50      	cmp	r3, #80	; 0x50
 8007a1a:	d033      	beq.n	8007a84 <HAL_TIM_ConfigClockSource+0xe0>
 8007a1c:	2b60      	cmp	r3, #96	; 0x60
 8007a1e:	d041      	beq.n	8007aa4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007a20:	e06a      	b.n	8007af8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a26:	d066      	beq.n	8007af6 <HAL_TIM_ConfigClockSource+0x152>
 8007a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a2c:	d017      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007a2e:	e063      	b.n	8007af8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6818      	ldr	r0, [r3, #0]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	6899      	ldr	r1, [r3, #8]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f000 f9ac 	bl	8007d9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a52:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	609a      	str	r2, [r3, #8]
      break;
 8007a5c:	e04c      	b.n	8007af8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6818      	ldr	r0, [r3, #0]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	6899      	ldr	r1, [r3, #8]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	685a      	ldr	r2, [r3, #4]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f000 f995 	bl	8007d9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a80:	609a      	str	r2, [r3, #8]
      break;
 8007a82:	e039      	b.n	8007af8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6818      	ldr	r0, [r3, #0]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	6859      	ldr	r1, [r3, #4]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	461a      	mov	r2, r3
 8007a92:	f000 f909 	bl	8007ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2150      	movs	r1, #80	; 0x50
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 f962 	bl	8007d66 <TIM_ITRx_SetConfig>
      break;
 8007aa2:	e029      	b.n	8007af8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6818      	ldr	r0, [r3, #0]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	6859      	ldr	r1, [r3, #4]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	f000 f928 	bl	8007d06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2160      	movs	r1, #96	; 0x60
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 f952 	bl	8007d66 <TIM_ITRx_SetConfig>
      break;
 8007ac2:	e019      	b.n	8007af8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6818      	ldr	r0, [r3, #0]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	6859      	ldr	r1, [r3, #4]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	f000 f8e9 	bl	8007ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2140      	movs	r1, #64	; 0x40
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 f942 	bl	8007d66 <TIM_ITRx_SetConfig>
      break;
 8007ae2:	e009      	b.n	8007af8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4619      	mov	r1, r3
 8007aee:	4610      	mov	r0, r2
 8007af0:	f000 f939 	bl	8007d66 <TIM_ITRx_SetConfig>
      break;
 8007af4:	e000      	b.n	8007af8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007af6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	fffeff88 	.word	0xfffeff88

08007b18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a40      	ldr	r2, [pc, #256]	; (8007c7c <TIM_Base_SetConfig+0x114>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d013      	beq.n	8007ba8 <TIM_Base_SetConfig+0x40>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b86:	d00f      	beq.n	8007ba8 <TIM_Base_SetConfig+0x40>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a3d      	ldr	r2, [pc, #244]	; (8007c80 <TIM_Base_SetConfig+0x118>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d00b      	beq.n	8007ba8 <TIM_Base_SetConfig+0x40>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a3c      	ldr	r2, [pc, #240]	; (8007c84 <TIM_Base_SetConfig+0x11c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d007      	beq.n	8007ba8 <TIM_Base_SetConfig+0x40>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a3b      	ldr	r2, [pc, #236]	; (8007c88 <TIM_Base_SetConfig+0x120>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d003      	beq.n	8007ba8 <TIM_Base_SetConfig+0x40>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a3a      	ldr	r2, [pc, #232]	; (8007c8c <TIM_Base_SetConfig+0x124>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d108      	bne.n	8007bba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a2f      	ldr	r2, [pc, #188]	; (8007c7c <TIM_Base_SetConfig+0x114>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d02b      	beq.n	8007c1a <TIM_Base_SetConfig+0xb2>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc8:	d027      	beq.n	8007c1a <TIM_Base_SetConfig+0xb2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a2c      	ldr	r2, [pc, #176]	; (8007c80 <TIM_Base_SetConfig+0x118>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d023      	beq.n	8007c1a <TIM_Base_SetConfig+0xb2>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a2b      	ldr	r2, [pc, #172]	; (8007c84 <TIM_Base_SetConfig+0x11c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d01f      	beq.n	8007c1a <TIM_Base_SetConfig+0xb2>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a2a      	ldr	r2, [pc, #168]	; (8007c88 <TIM_Base_SetConfig+0x120>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d01b      	beq.n	8007c1a <TIM_Base_SetConfig+0xb2>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a29      	ldr	r2, [pc, #164]	; (8007c8c <TIM_Base_SetConfig+0x124>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d017      	beq.n	8007c1a <TIM_Base_SetConfig+0xb2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a28      	ldr	r2, [pc, #160]	; (8007c90 <TIM_Base_SetConfig+0x128>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d013      	beq.n	8007c1a <TIM_Base_SetConfig+0xb2>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a27      	ldr	r2, [pc, #156]	; (8007c94 <TIM_Base_SetConfig+0x12c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d00f      	beq.n	8007c1a <TIM_Base_SetConfig+0xb2>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a26      	ldr	r2, [pc, #152]	; (8007c98 <TIM_Base_SetConfig+0x130>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d00b      	beq.n	8007c1a <TIM_Base_SetConfig+0xb2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a25      	ldr	r2, [pc, #148]	; (8007c9c <TIM_Base_SetConfig+0x134>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d007      	beq.n	8007c1a <TIM_Base_SetConfig+0xb2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a24      	ldr	r2, [pc, #144]	; (8007ca0 <TIM_Base_SetConfig+0x138>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d003      	beq.n	8007c1a <TIM_Base_SetConfig+0xb2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a23      	ldr	r2, [pc, #140]	; (8007ca4 <TIM_Base_SetConfig+0x13c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d108      	bne.n	8007c2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a0a      	ldr	r2, [pc, #40]	; (8007c7c <TIM_Base_SetConfig+0x114>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d003      	beq.n	8007c60 <TIM_Base_SetConfig+0xf8>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a0c      	ldr	r2, [pc, #48]	; (8007c8c <TIM_Base_SetConfig+0x124>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d103      	bne.n	8007c68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	691a      	ldr	r2, [r3, #16]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	615a      	str	r2, [r3, #20]
}
 8007c6e:	bf00      	nop
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	40010000 	.word	0x40010000
 8007c80:	40000400 	.word	0x40000400
 8007c84:	40000800 	.word	0x40000800
 8007c88:	40000c00 	.word	0x40000c00
 8007c8c:	40010400 	.word	0x40010400
 8007c90:	40014000 	.word	0x40014000
 8007c94:	40014400 	.word	0x40014400
 8007c98:	40014800 	.word	0x40014800
 8007c9c:	40001800 	.word	0x40001800
 8007ca0:	40001c00 	.word	0x40001c00
 8007ca4:	40002000 	.word	0x40002000

08007ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	f023 0201 	bic.w	r2, r3, #1
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f023 030a 	bic.w	r3, r3, #10
 8007ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	621a      	str	r2, [r3, #32]
}
 8007cfa:	bf00      	nop
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b087      	sub	sp, #28
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	f023 0210 	bic.w	r2, r3, #16
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	031b      	lsls	r3, r3, #12
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	011b      	lsls	r3, r3, #4
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	621a      	str	r2, [r3, #32]
}
 8007d5a:	bf00      	nop
 8007d5c:	371c      	adds	r7, #28
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b085      	sub	sp, #20
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	f043 0307 	orr.w	r3, r3, #7
 8007d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	609a      	str	r2, [r3, #8]
}
 8007d90:	bf00      	nop
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
 8007da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	021a      	lsls	r2, r3, #8
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	609a      	str	r2, [r3, #8]
}
 8007dd0:	bf00      	nop
 8007dd2:	371c      	adds	r7, #28
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d101      	bne.n	8007df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007df0:	2302      	movs	r3, #2
 8007df2:	e06d      	b.n	8007ed0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a30      	ldr	r2, [pc, #192]	; (8007edc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d004      	beq.n	8007e28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a2f      	ldr	r2, [pc, #188]	; (8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d108      	bne.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007e2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a20      	ldr	r2, [pc, #128]	; (8007edc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d022      	beq.n	8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e66:	d01d      	beq.n	8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d018      	beq.n	8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a1c      	ldr	r2, [pc, #112]	; (8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d013      	beq.n	8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a1a      	ldr	r2, [pc, #104]	; (8007eec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d00e      	beq.n	8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a15      	ldr	r2, [pc, #84]	; (8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d009      	beq.n	8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a16      	ldr	r2, [pc, #88]	; (8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d004      	beq.n	8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a15      	ldr	r2, [pc, #84]	; (8007ef4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d10c      	bne.n	8007ebe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	40010000 	.word	0x40010000
 8007ee0:	40010400 	.word	0x40010400
 8007ee4:	40000400 	.word	0x40000400
 8007ee8:	40000800 	.word	0x40000800
 8007eec:	40000c00 	.word	0x40000c00
 8007ef0:	40014000 	.word	0x40014000
 8007ef4:	40001800 	.word	0x40001800

08007ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d101      	bne.n	8007f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e040      	b.n	8007fc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d106      	bne.n	8007f5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7f9 f84a 	bl	8000ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2224      	movs	r2, #36	; 0x24
 8007f60:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f022 0201 	bic.w	r2, r2, #1
 8007f70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f956 	bl	8008224 <UART_SetConfig>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d101      	bne.n	8007f82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e022      	b.n	8007fc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fbf4 	bl	8008778 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689a      	ldr	r2, [r3, #8]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f042 0201 	orr.w	r2, r2, #1
 8007fbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fc7b 	bl	80088bc <UART_CheckIdleState>
 8007fc6:	4603      	mov	r3, r0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08a      	sub	sp, #40	; 0x28
 8007fd4:	af02      	add	r7, sp, #8
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	603b      	str	r3, [r7, #0]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fe4:	2b20      	cmp	r3, #32
 8007fe6:	d17f      	bne.n	80080e8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d002      	beq.n	8007ff4 <HAL_UART_Transmit+0x24>
 8007fee:	88fb      	ldrh	r3, [r7, #6]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e078      	b.n	80080ea <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d101      	bne.n	8008006 <HAL_UART_Transmit+0x36>
 8008002:	2302      	movs	r3, #2
 8008004:	e071      	b.n	80080ea <HAL_UART_Transmit+0x11a>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2221      	movs	r2, #33	; 0x21
 8008018:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800801a:	f7fd fb57 	bl	80056cc <HAL_GetTick>
 800801e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	88fa      	ldrh	r2, [r7, #6]
 8008024:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	88fa      	ldrh	r2, [r7, #6]
 800802c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008038:	d108      	bne.n	800804c <HAL_UART_Transmit+0x7c>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d104      	bne.n	800804c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8008042:	2300      	movs	r3, #0
 8008044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	61bb      	str	r3, [r7, #24]
 800804a:	e003      	b.n	8008054 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008050:	2300      	movs	r3, #0
 8008052:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800805c:	e02c      	b.n	80080b8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	2200      	movs	r2, #0
 8008066:	2180      	movs	r1, #128	; 0x80
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 fc6c 	bl	8008946 <UART_WaitOnFlagUntilTimeout>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e038      	b.n	80080ea <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10b      	bne.n	8008096 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	881b      	ldrh	r3, [r3, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800808c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	3302      	adds	r3, #2
 8008092:	61bb      	str	r3, [r7, #24]
 8008094:	e007      	b.n	80080a6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	781a      	ldrb	r2, [r3, #0]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	3301      	adds	r3, #1
 80080a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	3b01      	subs	r3, #1
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080be:	b29b      	uxth	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1cc      	bne.n	800805e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2200      	movs	r2, #0
 80080cc:	2140      	movs	r1, #64	; 0x40
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 fc39 	bl	8008946 <UART_WaitOnFlagUntilTimeout>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e005      	b.n	80080ea <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2220      	movs	r2, #32
 80080e2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	e000      	b.n	80080ea <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80080e8:	2302      	movs	r3, #2
  }
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3720      	adds	r7, #32
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
	...

080080f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	4613      	mov	r3, r2
 8008100:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008106:	2b20      	cmp	r3, #32
 8008108:	d16c      	bne.n	80081e4 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d002      	beq.n	8008116 <HAL_UART_Receive_DMA+0x22>
 8008110:	88fb      	ldrh	r3, [r7, #6]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e065      	b.n	80081e6 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008120:	2b01      	cmp	r3, #1
 8008122:	d101      	bne.n	8008128 <HAL_UART_Receive_DMA+0x34>
 8008124:	2302      	movs	r3, #2
 8008126:	e05e      	b.n	80081e6 <HAL_UART_Receive_DMA+0xf2>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	88fa      	ldrh	r2, [r7, #6]
 800813a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2222      	movs	r2, #34	; 0x22
 8008148:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800814e:	2b00      	cmp	r3, #0
 8008150:	d02a      	beq.n	80081a8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008156:	4a26      	ldr	r2, [pc, #152]	; (80081f0 <HAL_UART_Receive_DMA+0xfc>)
 8008158:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800815e:	4a25      	ldr	r2, [pc, #148]	; (80081f4 <HAL_UART_Receive_DMA+0x100>)
 8008160:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008166:	4a24      	ldr	r2, [pc, #144]	; (80081f8 <HAL_UART_Receive_DMA+0x104>)
 8008168:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800816e:	2200      	movs	r2, #0
 8008170:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3324      	adds	r3, #36	; 0x24
 800817c:	4619      	mov	r1, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008182:	461a      	mov	r2, r3
 8008184:	88fb      	ldrh	r3, [r7, #6]
 8008186:	f7fd fc8f 	bl	8005aa8 <HAL_DMA_Start_IT>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2210      	movs	r2, #16
 8008194:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2220      	movs	r2, #32
 80081a2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e01e      	b.n	80081e6 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081be:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	689a      	ldr	r2, [r3, #8]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0201 	orr.w	r2, r2, #1
 80081ce:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689a      	ldr	r2, [r3, #8]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081de:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	e000      	b.n	80081e6 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80081e4:	2302      	movs	r3, #2
  }
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	08008aa7 	.word	0x08008aa7
 80081f4:	08008b0b 	.word	0x08008b0b
 80081f8:	08008b27 	.word	0x08008b27

080081fc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800822c:	2300      	movs	r3, #0
 800822e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	689a      	ldr	r2, [r3, #8]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	431a      	orrs	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	431a      	orrs	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	4313      	orrs	r3, r2
 800824a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	4bb1      	ldr	r3, [pc, #708]	; (8008518 <UART_SetConfig+0x2f4>)
 8008254:	4013      	ands	r3, r2
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	6812      	ldr	r2, [r2, #0]
 800825a:	6939      	ldr	r1, [r7, #16]
 800825c:	430b      	orrs	r3, r1
 800825e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	4313      	orrs	r3, r2
 8008284:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	430a      	orrs	r2, r1
 8008298:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a9f      	ldr	r2, [pc, #636]	; (800851c <UART_SetConfig+0x2f8>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d121      	bne.n	80082e8 <UART_SetConfig+0xc4>
 80082a4:	4b9e      	ldr	r3, [pc, #632]	; (8008520 <UART_SetConfig+0x2fc>)
 80082a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082aa:	f003 0303 	and.w	r3, r3, #3
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d816      	bhi.n	80082e0 <UART_SetConfig+0xbc>
 80082b2:	a201      	add	r2, pc, #4	; (adr r2, 80082b8 <UART_SetConfig+0x94>)
 80082b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b8:	080082c9 	.word	0x080082c9
 80082bc:	080082d5 	.word	0x080082d5
 80082c0:	080082cf 	.word	0x080082cf
 80082c4:	080082db 	.word	0x080082db
 80082c8:	2301      	movs	r3, #1
 80082ca:	77fb      	strb	r3, [r7, #31]
 80082cc:	e151      	b.n	8008572 <UART_SetConfig+0x34e>
 80082ce:	2302      	movs	r3, #2
 80082d0:	77fb      	strb	r3, [r7, #31]
 80082d2:	e14e      	b.n	8008572 <UART_SetConfig+0x34e>
 80082d4:	2304      	movs	r3, #4
 80082d6:	77fb      	strb	r3, [r7, #31]
 80082d8:	e14b      	b.n	8008572 <UART_SetConfig+0x34e>
 80082da:	2308      	movs	r3, #8
 80082dc:	77fb      	strb	r3, [r7, #31]
 80082de:	e148      	b.n	8008572 <UART_SetConfig+0x34e>
 80082e0:	2310      	movs	r3, #16
 80082e2:	77fb      	strb	r3, [r7, #31]
 80082e4:	bf00      	nop
 80082e6:	e144      	b.n	8008572 <UART_SetConfig+0x34e>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a8d      	ldr	r2, [pc, #564]	; (8008524 <UART_SetConfig+0x300>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d134      	bne.n	800835c <UART_SetConfig+0x138>
 80082f2:	4b8b      	ldr	r3, [pc, #556]	; (8008520 <UART_SetConfig+0x2fc>)
 80082f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082f8:	f003 030c 	and.w	r3, r3, #12
 80082fc:	2b0c      	cmp	r3, #12
 80082fe:	d829      	bhi.n	8008354 <UART_SetConfig+0x130>
 8008300:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <UART_SetConfig+0xe4>)
 8008302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008306:	bf00      	nop
 8008308:	0800833d 	.word	0x0800833d
 800830c:	08008355 	.word	0x08008355
 8008310:	08008355 	.word	0x08008355
 8008314:	08008355 	.word	0x08008355
 8008318:	08008349 	.word	0x08008349
 800831c:	08008355 	.word	0x08008355
 8008320:	08008355 	.word	0x08008355
 8008324:	08008355 	.word	0x08008355
 8008328:	08008343 	.word	0x08008343
 800832c:	08008355 	.word	0x08008355
 8008330:	08008355 	.word	0x08008355
 8008334:	08008355 	.word	0x08008355
 8008338:	0800834f 	.word	0x0800834f
 800833c:	2300      	movs	r3, #0
 800833e:	77fb      	strb	r3, [r7, #31]
 8008340:	e117      	b.n	8008572 <UART_SetConfig+0x34e>
 8008342:	2302      	movs	r3, #2
 8008344:	77fb      	strb	r3, [r7, #31]
 8008346:	e114      	b.n	8008572 <UART_SetConfig+0x34e>
 8008348:	2304      	movs	r3, #4
 800834a:	77fb      	strb	r3, [r7, #31]
 800834c:	e111      	b.n	8008572 <UART_SetConfig+0x34e>
 800834e:	2308      	movs	r3, #8
 8008350:	77fb      	strb	r3, [r7, #31]
 8008352:	e10e      	b.n	8008572 <UART_SetConfig+0x34e>
 8008354:	2310      	movs	r3, #16
 8008356:	77fb      	strb	r3, [r7, #31]
 8008358:	bf00      	nop
 800835a:	e10a      	b.n	8008572 <UART_SetConfig+0x34e>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a71      	ldr	r2, [pc, #452]	; (8008528 <UART_SetConfig+0x304>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d120      	bne.n	80083a8 <UART_SetConfig+0x184>
 8008366:	4b6e      	ldr	r3, [pc, #440]	; (8008520 <UART_SetConfig+0x2fc>)
 8008368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800836c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008370:	2b10      	cmp	r3, #16
 8008372:	d00f      	beq.n	8008394 <UART_SetConfig+0x170>
 8008374:	2b10      	cmp	r3, #16
 8008376:	d802      	bhi.n	800837e <UART_SetConfig+0x15a>
 8008378:	2b00      	cmp	r3, #0
 800837a:	d005      	beq.n	8008388 <UART_SetConfig+0x164>
 800837c:	e010      	b.n	80083a0 <UART_SetConfig+0x17c>
 800837e:	2b20      	cmp	r3, #32
 8008380:	d005      	beq.n	800838e <UART_SetConfig+0x16a>
 8008382:	2b30      	cmp	r3, #48	; 0x30
 8008384:	d009      	beq.n	800839a <UART_SetConfig+0x176>
 8008386:	e00b      	b.n	80083a0 <UART_SetConfig+0x17c>
 8008388:	2300      	movs	r3, #0
 800838a:	77fb      	strb	r3, [r7, #31]
 800838c:	e0f1      	b.n	8008572 <UART_SetConfig+0x34e>
 800838e:	2302      	movs	r3, #2
 8008390:	77fb      	strb	r3, [r7, #31]
 8008392:	e0ee      	b.n	8008572 <UART_SetConfig+0x34e>
 8008394:	2304      	movs	r3, #4
 8008396:	77fb      	strb	r3, [r7, #31]
 8008398:	e0eb      	b.n	8008572 <UART_SetConfig+0x34e>
 800839a:	2308      	movs	r3, #8
 800839c:	77fb      	strb	r3, [r7, #31]
 800839e:	e0e8      	b.n	8008572 <UART_SetConfig+0x34e>
 80083a0:	2310      	movs	r3, #16
 80083a2:	77fb      	strb	r3, [r7, #31]
 80083a4:	bf00      	nop
 80083a6:	e0e4      	b.n	8008572 <UART_SetConfig+0x34e>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a5f      	ldr	r2, [pc, #380]	; (800852c <UART_SetConfig+0x308>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d120      	bne.n	80083f4 <UART_SetConfig+0x1d0>
 80083b2:	4b5b      	ldr	r3, [pc, #364]	; (8008520 <UART_SetConfig+0x2fc>)
 80083b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80083bc:	2b40      	cmp	r3, #64	; 0x40
 80083be:	d00f      	beq.n	80083e0 <UART_SetConfig+0x1bc>
 80083c0:	2b40      	cmp	r3, #64	; 0x40
 80083c2:	d802      	bhi.n	80083ca <UART_SetConfig+0x1a6>
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d005      	beq.n	80083d4 <UART_SetConfig+0x1b0>
 80083c8:	e010      	b.n	80083ec <UART_SetConfig+0x1c8>
 80083ca:	2b80      	cmp	r3, #128	; 0x80
 80083cc:	d005      	beq.n	80083da <UART_SetConfig+0x1b6>
 80083ce:	2bc0      	cmp	r3, #192	; 0xc0
 80083d0:	d009      	beq.n	80083e6 <UART_SetConfig+0x1c2>
 80083d2:	e00b      	b.n	80083ec <UART_SetConfig+0x1c8>
 80083d4:	2300      	movs	r3, #0
 80083d6:	77fb      	strb	r3, [r7, #31]
 80083d8:	e0cb      	b.n	8008572 <UART_SetConfig+0x34e>
 80083da:	2302      	movs	r3, #2
 80083dc:	77fb      	strb	r3, [r7, #31]
 80083de:	e0c8      	b.n	8008572 <UART_SetConfig+0x34e>
 80083e0:	2304      	movs	r3, #4
 80083e2:	77fb      	strb	r3, [r7, #31]
 80083e4:	e0c5      	b.n	8008572 <UART_SetConfig+0x34e>
 80083e6:	2308      	movs	r3, #8
 80083e8:	77fb      	strb	r3, [r7, #31]
 80083ea:	e0c2      	b.n	8008572 <UART_SetConfig+0x34e>
 80083ec:	2310      	movs	r3, #16
 80083ee:	77fb      	strb	r3, [r7, #31]
 80083f0:	bf00      	nop
 80083f2:	e0be      	b.n	8008572 <UART_SetConfig+0x34e>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a4d      	ldr	r2, [pc, #308]	; (8008530 <UART_SetConfig+0x30c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d124      	bne.n	8008448 <UART_SetConfig+0x224>
 80083fe:	4b48      	ldr	r3, [pc, #288]	; (8008520 <UART_SetConfig+0x2fc>)
 8008400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800840c:	d012      	beq.n	8008434 <UART_SetConfig+0x210>
 800840e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008412:	d802      	bhi.n	800841a <UART_SetConfig+0x1f6>
 8008414:	2b00      	cmp	r3, #0
 8008416:	d007      	beq.n	8008428 <UART_SetConfig+0x204>
 8008418:	e012      	b.n	8008440 <UART_SetConfig+0x21c>
 800841a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800841e:	d006      	beq.n	800842e <UART_SetConfig+0x20a>
 8008420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008424:	d009      	beq.n	800843a <UART_SetConfig+0x216>
 8008426:	e00b      	b.n	8008440 <UART_SetConfig+0x21c>
 8008428:	2300      	movs	r3, #0
 800842a:	77fb      	strb	r3, [r7, #31]
 800842c:	e0a1      	b.n	8008572 <UART_SetConfig+0x34e>
 800842e:	2302      	movs	r3, #2
 8008430:	77fb      	strb	r3, [r7, #31]
 8008432:	e09e      	b.n	8008572 <UART_SetConfig+0x34e>
 8008434:	2304      	movs	r3, #4
 8008436:	77fb      	strb	r3, [r7, #31]
 8008438:	e09b      	b.n	8008572 <UART_SetConfig+0x34e>
 800843a:	2308      	movs	r3, #8
 800843c:	77fb      	strb	r3, [r7, #31]
 800843e:	e098      	b.n	8008572 <UART_SetConfig+0x34e>
 8008440:	2310      	movs	r3, #16
 8008442:	77fb      	strb	r3, [r7, #31]
 8008444:	bf00      	nop
 8008446:	e094      	b.n	8008572 <UART_SetConfig+0x34e>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a39      	ldr	r2, [pc, #228]	; (8008534 <UART_SetConfig+0x310>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d124      	bne.n	800849c <UART_SetConfig+0x278>
 8008452:	4b33      	ldr	r3, [pc, #204]	; (8008520 <UART_SetConfig+0x2fc>)
 8008454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008458:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800845c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008460:	d012      	beq.n	8008488 <UART_SetConfig+0x264>
 8008462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008466:	d802      	bhi.n	800846e <UART_SetConfig+0x24a>
 8008468:	2b00      	cmp	r3, #0
 800846a:	d007      	beq.n	800847c <UART_SetConfig+0x258>
 800846c:	e012      	b.n	8008494 <UART_SetConfig+0x270>
 800846e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008472:	d006      	beq.n	8008482 <UART_SetConfig+0x25e>
 8008474:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008478:	d009      	beq.n	800848e <UART_SetConfig+0x26a>
 800847a:	e00b      	b.n	8008494 <UART_SetConfig+0x270>
 800847c:	2301      	movs	r3, #1
 800847e:	77fb      	strb	r3, [r7, #31]
 8008480:	e077      	b.n	8008572 <UART_SetConfig+0x34e>
 8008482:	2302      	movs	r3, #2
 8008484:	77fb      	strb	r3, [r7, #31]
 8008486:	e074      	b.n	8008572 <UART_SetConfig+0x34e>
 8008488:	2304      	movs	r3, #4
 800848a:	77fb      	strb	r3, [r7, #31]
 800848c:	e071      	b.n	8008572 <UART_SetConfig+0x34e>
 800848e:	2308      	movs	r3, #8
 8008490:	77fb      	strb	r3, [r7, #31]
 8008492:	e06e      	b.n	8008572 <UART_SetConfig+0x34e>
 8008494:	2310      	movs	r3, #16
 8008496:	77fb      	strb	r3, [r7, #31]
 8008498:	bf00      	nop
 800849a:	e06a      	b.n	8008572 <UART_SetConfig+0x34e>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a25      	ldr	r2, [pc, #148]	; (8008538 <UART_SetConfig+0x314>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d124      	bne.n	80084f0 <UART_SetConfig+0x2cc>
 80084a6:	4b1e      	ldr	r3, [pc, #120]	; (8008520 <UART_SetConfig+0x2fc>)
 80084a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ac:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80084b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b4:	d012      	beq.n	80084dc <UART_SetConfig+0x2b8>
 80084b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ba:	d802      	bhi.n	80084c2 <UART_SetConfig+0x29e>
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d007      	beq.n	80084d0 <UART_SetConfig+0x2ac>
 80084c0:	e012      	b.n	80084e8 <UART_SetConfig+0x2c4>
 80084c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084c6:	d006      	beq.n	80084d6 <UART_SetConfig+0x2b2>
 80084c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084cc:	d009      	beq.n	80084e2 <UART_SetConfig+0x2be>
 80084ce:	e00b      	b.n	80084e8 <UART_SetConfig+0x2c4>
 80084d0:	2300      	movs	r3, #0
 80084d2:	77fb      	strb	r3, [r7, #31]
 80084d4:	e04d      	b.n	8008572 <UART_SetConfig+0x34e>
 80084d6:	2302      	movs	r3, #2
 80084d8:	77fb      	strb	r3, [r7, #31]
 80084da:	e04a      	b.n	8008572 <UART_SetConfig+0x34e>
 80084dc:	2304      	movs	r3, #4
 80084de:	77fb      	strb	r3, [r7, #31]
 80084e0:	e047      	b.n	8008572 <UART_SetConfig+0x34e>
 80084e2:	2308      	movs	r3, #8
 80084e4:	77fb      	strb	r3, [r7, #31]
 80084e6:	e044      	b.n	8008572 <UART_SetConfig+0x34e>
 80084e8:	2310      	movs	r3, #16
 80084ea:	77fb      	strb	r3, [r7, #31]
 80084ec:	bf00      	nop
 80084ee:	e040      	b.n	8008572 <UART_SetConfig+0x34e>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a11      	ldr	r2, [pc, #68]	; (800853c <UART_SetConfig+0x318>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d139      	bne.n	800856e <UART_SetConfig+0x34a>
 80084fa:	4b09      	ldr	r3, [pc, #36]	; (8008520 <UART_SetConfig+0x2fc>)
 80084fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008500:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008508:	d027      	beq.n	800855a <UART_SetConfig+0x336>
 800850a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800850e:	d817      	bhi.n	8008540 <UART_SetConfig+0x31c>
 8008510:	2b00      	cmp	r3, #0
 8008512:	d01c      	beq.n	800854e <UART_SetConfig+0x32a>
 8008514:	e027      	b.n	8008566 <UART_SetConfig+0x342>
 8008516:	bf00      	nop
 8008518:	efff69f3 	.word	0xefff69f3
 800851c:	40011000 	.word	0x40011000
 8008520:	40023800 	.word	0x40023800
 8008524:	40004400 	.word	0x40004400
 8008528:	40004800 	.word	0x40004800
 800852c:	40004c00 	.word	0x40004c00
 8008530:	40005000 	.word	0x40005000
 8008534:	40011400 	.word	0x40011400
 8008538:	40007800 	.word	0x40007800
 800853c:	40007c00 	.word	0x40007c00
 8008540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008544:	d006      	beq.n	8008554 <UART_SetConfig+0x330>
 8008546:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800854a:	d009      	beq.n	8008560 <UART_SetConfig+0x33c>
 800854c:	e00b      	b.n	8008566 <UART_SetConfig+0x342>
 800854e:	2300      	movs	r3, #0
 8008550:	77fb      	strb	r3, [r7, #31]
 8008552:	e00e      	b.n	8008572 <UART_SetConfig+0x34e>
 8008554:	2302      	movs	r3, #2
 8008556:	77fb      	strb	r3, [r7, #31]
 8008558:	e00b      	b.n	8008572 <UART_SetConfig+0x34e>
 800855a:	2304      	movs	r3, #4
 800855c:	77fb      	strb	r3, [r7, #31]
 800855e:	e008      	b.n	8008572 <UART_SetConfig+0x34e>
 8008560:	2308      	movs	r3, #8
 8008562:	77fb      	strb	r3, [r7, #31]
 8008564:	e005      	b.n	8008572 <UART_SetConfig+0x34e>
 8008566:	2310      	movs	r3, #16
 8008568:	77fb      	strb	r3, [r7, #31]
 800856a:	bf00      	nop
 800856c:	e001      	b.n	8008572 <UART_SetConfig+0x34e>
 800856e:	2310      	movs	r3, #16
 8008570:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800857a:	d17f      	bne.n	800867c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800857c:	7ffb      	ldrb	r3, [r7, #31]
 800857e:	2b08      	cmp	r3, #8
 8008580:	d85c      	bhi.n	800863c <UART_SetConfig+0x418>
 8008582:	a201      	add	r2, pc, #4	; (adr r2, 8008588 <UART_SetConfig+0x364>)
 8008584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008588:	080085ad 	.word	0x080085ad
 800858c:	080085cd 	.word	0x080085cd
 8008590:	080085ed 	.word	0x080085ed
 8008594:	0800863d 	.word	0x0800863d
 8008598:	08008605 	.word	0x08008605
 800859c:	0800863d 	.word	0x0800863d
 80085a0:	0800863d 	.word	0x0800863d
 80085a4:	0800863d 	.word	0x0800863d
 80085a8:	08008625 	.word	0x08008625
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085ac:	f7fe fbe0 	bl	8006d70 <HAL_RCC_GetPCLK1Freq>
 80085b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	005a      	lsls	r2, r3, #1
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	085b      	lsrs	r3, r3, #1
 80085bc:	441a      	add	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	61bb      	str	r3, [r7, #24]
        break;
 80085ca:	e03a      	b.n	8008642 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085cc:	f7fe fbe4 	bl	8006d98 <HAL_RCC_GetPCLK2Freq>
 80085d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	005a      	lsls	r2, r3, #1
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	085b      	lsrs	r3, r3, #1
 80085dc:	441a      	add	r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	61bb      	str	r3, [r7, #24]
        break;
 80085ea:	e02a      	b.n	8008642 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	085a      	lsrs	r2, r3, #1
 80085f2:	4b5f      	ldr	r3, [pc, #380]	; (8008770 <UART_SetConfig+0x54c>)
 80085f4:	4413      	add	r3, r2
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	6852      	ldr	r2, [r2, #4]
 80085fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80085fe:	b29b      	uxth	r3, r3
 8008600:	61bb      	str	r3, [r7, #24]
        break;
 8008602:	e01e      	b.n	8008642 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008604:	f7fe fad0 	bl	8006ba8 <HAL_RCC_GetSysClockFreq>
 8008608:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	005a      	lsls	r2, r3, #1
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	085b      	lsrs	r3, r3, #1
 8008614:	441a      	add	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	fbb2 f3f3 	udiv	r3, r2, r3
 800861e:	b29b      	uxth	r3, r3
 8008620:	61bb      	str	r3, [r7, #24]
        break;
 8008622:	e00e      	b.n	8008642 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	085b      	lsrs	r3, r3, #1
 800862a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	fbb2 f3f3 	udiv	r3, r2, r3
 8008636:	b29b      	uxth	r3, r3
 8008638:	61bb      	str	r3, [r7, #24]
        break;
 800863a:	e002      	b.n	8008642 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	75fb      	strb	r3, [r7, #23]
        break;
 8008640:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	2b0f      	cmp	r3, #15
 8008646:	d916      	bls.n	8008676 <UART_SetConfig+0x452>
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800864e:	d212      	bcs.n	8008676 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	b29b      	uxth	r3, r3
 8008654:	f023 030f 	bic.w	r3, r3, #15
 8008658:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	085b      	lsrs	r3, r3, #1
 800865e:	b29b      	uxth	r3, r3
 8008660:	f003 0307 	and.w	r3, r3, #7
 8008664:	b29a      	uxth	r2, r3
 8008666:	897b      	ldrh	r3, [r7, #10]
 8008668:	4313      	orrs	r3, r2
 800866a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	897a      	ldrh	r2, [r7, #10]
 8008672:	60da      	str	r2, [r3, #12]
 8008674:	e070      	b.n	8008758 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	75fb      	strb	r3, [r7, #23]
 800867a:	e06d      	b.n	8008758 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800867c:	7ffb      	ldrb	r3, [r7, #31]
 800867e:	2b08      	cmp	r3, #8
 8008680:	d859      	bhi.n	8008736 <UART_SetConfig+0x512>
 8008682:	a201      	add	r2, pc, #4	; (adr r2, 8008688 <UART_SetConfig+0x464>)
 8008684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008688:	080086ad 	.word	0x080086ad
 800868c:	080086cb 	.word	0x080086cb
 8008690:	080086e9 	.word	0x080086e9
 8008694:	08008737 	.word	0x08008737
 8008698:	08008701 	.word	0x08008701
 800869c:	08008737 	.word	0x08008737
 80086a0:	08008737 	.word	0x08008737
 80086a4:	08008737 	.word	0x08008737
 80086a8:	0800871f 	.word	0x0800871f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086ac:	f7fe fb60 	bl	8006d70 <HAL_RCC_GetPCLK1Freq>
 80086b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	085a      	lsrs	r2, r3, #1
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	441a      	add	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	61bb      	str	r3, [r7, #24]
        break;
 80086c8:	e038      	b.n	800873c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086ca:	f7fe fb65 	bl	8006d98 <HAL_RCC_GetPCLK2Freq>
 80086ce:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	085a      	lsrs	r2, r3, #1
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	441a      	add	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	fbb2 f3f3 	udiv	r3, r2, r3
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	61bb      	str	r3, [r7, #24]
        break;
 80086e6:	e029      	b.n	800873c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	085a      	lsrs	r2, r3, #1
 80086ee:	4b21      	ldr	r3, [pc, #132]	; (8008774 <UART_SetConfig+0x550>)
 80086f0:	4413      	add	r3, r2
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	6852      	ldr	r2, [r2, #4]
 80086f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	61bb      	str	r3, [r7, #24]
        break;
 80086fe:	e01d      	b.n	800873c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008700:	f7fe fa52 	bl	8006ba8 <HAL_RCC_GetSysClockFreq>
 8008704:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	085a      	lsrs	r2, r3, #1
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	441a      	add	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	fbb2 f3f3 	udiv	r3, r2, r3
 8008718:	b29b      	uxth	r3, r3
 800871a:	61bb      	str	r3, [r7, #24]
        break;
 800871c:	e00e      	b.n	800873c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	085b      	lsrs	r3, r3, #1
 8008724:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008730:	b29b      	uxth	r3, r3
 8008732:	61bb      	str	r3, [r7, #24]
        break;
 8008734:	e002      	b.n	800873c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	75fb      	strb	r3, [r7, #23]
        break;
 800873a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	2b0f      	cmp	r3, #15
 8008740:	d908      	bls.n	8008754 <UART_SetConfig+0x530>
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008748:	d204      	bcs.n	8008754 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	60da      	str	r2, [r3, #12]
 8008752:	e001      	b.n	8008758 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008764:	7dfb      	ldrb	r3, [r7, #23]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3720      	adds	r7, #32
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	01e84800 	.word	0x01e84800
 8008774:	00f42400 	.word	0x00f42400

08008778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00a      	beq.n	80087a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	430a      	orrs	r2, r1
 80087a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00a      	beq.n	80087c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	430a      	orrs	r2, r1
 80087c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	f003 0304 	and.w	r3, r3, #4
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00a      	beq.n	80087e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	430a      	orrs	r2, r1
 80087e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ea:	f003 0308 	and.w	r3, r3, #8
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00a      	beq.n	8008808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	430a      	orrs	r2, r1
 8008806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880c:	f003 0310 	and.w	r3, r3, #16
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00a      	beq.n	800882a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	430a      	orrs	r2, r1
 8008828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00a      	beq.n	800884c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008854:	2b00      	cmp	r3, #0
 8008856:	d01a      	beq.n	800888e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	430a      	orrs	r2, r1
 800886c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008876:	d10a      	bne.n	800888e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	605a      	str	r2, [r3, #4]
  }
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af02      	add	r7, sp, #8
 80088c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80088ca:	f7fc feff 	bl	80056cc <HAL_GetTick>
 80088ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0308 	and.w	r3, r3, #8
 80088da:	2b08      	cmp	r3, #8
 80088dc:	d10e      	bne.n	80088fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f82a 	bl	8008946 <UART_WaitOnFlagUntilTimeout>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d001      	beq.n	80088fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e020      	b.n	800893e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 0304 	and.w	r3, r3, #4
 8008906:	2b04      	cmp	r3, #4
 8008908:	d10e      	bne.n	8008928 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800890a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 f814 	bl	8008946 <UART_WaitOnFlagUntilTimeout>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e00a      	b.n	800893e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2220      	movs	r2, #32
 800892c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2220      	movs	r2, #32
 8008932:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	60b9      	str	r1, [r7, #8]
 8008950:	603b      	str	r3, [r7, #0]
 8008952:	4613      	mov	r3, r2
 8008954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008956:	e05d      	b.n	8008a14 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895e:	d059      	beq.n	8008a14 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008960:	f7fc feb4 	bl	80056cc <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	429a      	cmp	r2, r3
 800896e:	d302      	bcc.n	8008976 <UART_WaitOnFlagUntilTimeout+0x30>
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d11b      	bne.n	80089ae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008984:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0201 	bic.w	r2, r2, #1
 8008994:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2220      	movs	r2, #32
 800899a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2220      	movs	r2, #32
 80089a0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e042      	b.n	8008a34 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d02b      	beq.n	8008a14 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ca:	d123      	bne.n	8008a14 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089d4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80089e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	689a      	ldr	r2, [r3, #8]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f022 0201 	bic.w	r2, r2, #1
 80089f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2220      	movs	r2, #32
 80089fa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2220      	movs	r2, #32
 8008a00:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2220      	movs	r2, #32
 8008a06:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e00f      	b.n	8008a34 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	69da      	ldr	r2, [r3, #28]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	bf0c      	ite	eq
 8008a24:	2301      	moveq	r3, #1
 8008a26:	2300      	movne	r3, #0
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d092      	beq.n	8008958 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008a52:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2220      	movs	r2, #32
 8008a58:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008a5a:	bf00      	nop
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b083      	sub	sp, #12
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a7c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 0201 	bic.w	r2, r2, #1
 8008a8c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2220      	movs	r2, #32
 8008a92:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008a9a:	bf00      	nop
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008abc:	d01e      	beq.n	8008afc <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ad4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	689a      	ldr	r2, [r3, #8]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f022 0201 	bic.w	r2, r2, #1
 8008ae4:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689a      	ldr	r2, [r3, #8]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008af4:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2220      	movs	r2, #32
 8008afa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f7f8 f9c3 	bl	8000e88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b02:	bf00      	nop
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b16:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f7ff fb6f 	bl	80081fc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b1e:	bf00      	nop
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b086      	sub	sp, #24
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b32:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b38:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b3e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b4a:	2b80      	cmp	r3, #128	; 0x80
 8008b4c:	d109      	bne.n	8008b62 <UART_DMAError+0x3c>
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	2b21      	cmp	r3, #33	; 0x21
 8008b52:	d106      	bne.n	8008b62 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008b5c:	6978      	ldr	r0, [r7, #20]
 8008b5e:	f7ff ff6d 	bl	8008a3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b6c:	2b40      	cmp	r3, #64	; 0x40
 8008b6e:	d109      	bne.n	8008b84 <UART_DMAError+0x5e>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b22      	cmp	r3, #34	; 0x22
 8008b74:	d106      	bne.n	8008b84 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008b7e:	6978      	ldr	r0, [r7, #20]
 8008b80:	f7ff ff71 	bl	8008a66 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b88:	f043 0210 	orr.w	r2, r3, #16
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b90:	6978      	ldr	r0, [r7, #20]
 8008b92:	f7ff fb3d 	bl	8008210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b96:	bf00      	nop
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
	...

08008ba0 <__libc_init_array>:
 8008ba0:	b570      	push	{r4, r5, r6, lr}
 8008ba2:	4e0d      	ldr	r6, [pc, #52]	; (8008bd8 <__libc_init_array+0x38>)
 8008ba4:	4c0d      	ldr	r4, [pc, #52]	; (8008bdc <__libc_init_array+0x3c>)
 8008ba6:	1ba4      	subs	r4, r4, r6
 8008ba8:	10a4      	asrs	r4, r4, #2
 8008baa:	2500      	movs	r5, #0
 8008bac:	42a5      	cmp	r5, r4
 8008bae:	d109      	bne.n	8008bc4 <__libc_init_array+0x24>
 8008bb0:	4e0b      	ldr	r6, [pc, #44]	; (8008be0 <__libc_init_array+0x40>)
 8008bb2:	4c0c      	ldr	r4, [pc, #48]	; (8008be4 <__libc_init_array+0x44>)
 8008bb4:	f000 f820 	bl	8008bf8 <_init>
 8008bb8:	1ba4      	subs	r4, r4, r6
 8008bba:	10a4      	asrs	r4, r4, #2
 8008bbc:	2500      	movs	r5, #0
 8008bbe:	42a5      	cmp	r5, r4
 8008bc0:	d105      	bne.n	8008bce <__libc_init_array+0x2e>
 8008bc2:	bd70      	pop	{r4, r5, r6, pc}
 8008bc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008bc8:	4798      	blx	r3
 8008bca:	3501      	adds	r5, #1
 8008bcc:	e7ee      	b.n	8008bac <__libc_init_array+0xc>
 8008bce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008bd2:	4798      	blx	r3
 8008bd4:	3501      	adds	r5, #1
 8008bd6:	e7f2      	b.n	8008bbe <__libc_init_array+0x1e>
 8008bd8:	080091b0 	.word	0x080091b0
 8008bdc:	080091b0 	.word	0x080091b0
 8008be0:	080091b0 	.word	0x080091b0
 8008be4:	080091b4 	.word	0x080091b4

08008be8 <memset>:
 8008be8:	4402      	add	r2, r0
 8008bea:	4603      	mov	r3, r0
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d100      	bne.n	8008bf2 <memset+0xa>
 8008bf0:	4770      	bx	lr
 8008bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8008bf6:	e7f9      	b.n	8008bec <memset+0x4>

08008bf8 <_init>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	bf00      	nop
 8008bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfe:	bc08      	pop	{r3}
 8008c00:	469e      	mov	lr, r3
 8008c02:	4770      	bx	lr

08008c04 <_fini>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	bf00      	nop
 8008c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0a:	bc08      	pop	{r3}
 8008c0c:	469e      	mov	lr, r3
 8008c0e:	4770      	bx	lr
