
EmbSynth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074c8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f58  080076c0  080076c0  000176c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008618  08008618  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08008618  08008618  00018618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008620  08008620  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008620  08008620  00018620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008624  08008624  00018624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08008628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000018  08008640  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08008640  00020224  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010161  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e21  00000000  00000000  000301a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f68  00000000  00000000  00031fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00027736  00000000  00000000  00032f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000ae77  00000000  00000000  0005a666  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000fa698  00000000  00000000  000654dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0015fb75  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000e80  00000000  00000000  0015fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00004150  00000000  00000000  00160a70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000018 	.word	0x20000018
 8000214:	00000000 	.word	0x00000000
 8000218:	080076a8 	.word	0x080076a8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000001c 	.word	0x2000001c
 8000234:	080076a8 	.word	0x080076a8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f004 fb1f 	bl	8004b7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f880 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 fa34 	bl	80009b0 <MX_GPIO_Init>
  MX_UART4_Init();
 8000548:	f000 f9d2 	bl	80008f0 <MX_UART4_Init>
  MX_USART3_UART_Init();
 800054c:	f000 fa00 	bl	8000950 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000550:	f000 f95c 	bl	800080c <MX_TIM2_Init>
  MX_TIM14_Init();
 8000554:	f000 f9a8 	bl	80008a8 <MX_TIM14_Init>
  MX_TIM1_Init();
 8000558:	f000 f904 	bl	8000764 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800055c:	4831      	ldr	r0, [pc, #196]	; (8000624 <main+0xec>)
 800055e:	f005 ffb5 	bl	80064cc <HAL_TIM_Base_Start>
  ID = readID();
 8000562:	f002 f96d 	bl	8002840 <readID>
 8000566:	4603      	mov	r3, r0
 8000568:	461a      	mov	r2, r3
 800056a:	4b2f      	ldr	r3, [pc, #188]	; (8000628 <main+0xf0>)
 800056c:	801a      	strh	r2, [r3, #0]
  HAL_Delay(100);
 800056e:	2064      	movs	r0, #100	; 0x64
 8000570:	f004 fb62 	bl	8004c38 <HAL_Delay>
  tft_init(ID);
 8000574:	4b2c      	ldr	r3, [pc, #176]	; (8000628 <main+0xf0>)
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f001 fe43 	bl	8002204 <tft_init>
  setRotation(0);
 800057e:	2000      	movs	r0, #0
 8000580:	f003 f87c 	bl	800367c <setRotation>
  setFont(&mono12x7bold);
 8000584:	4829      	ldr	r0, [pc, #164]	; (800062c <main+0xf4>)
 8000586:	f004 fa6d 	bl	8004a64 <setFont>
  setTextSize(1);
 800058a:	2001      	movs	r0, #1
 800058c:	f004 faa4 	bl	8004ad8 <setTextSize>
  setTextColor(BLACK);
 8000590:	2000      	movs	r0, #0
 8000592:	f004 fa91 	bl	8004ab8 <setTextColor>
  setCursor(80, 20);
 8000596:	2114      	movs	r1, #20
 8000598:	2050      	movs	r0, #80	; 0x50
 800059a:	f004 faad 	bl	8004af8 <setCursor>
  testFilledCircles(10, WHITE);
 800059e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005a2:	200a      	movs	r0, #10
 80005a4:	f004 fa24 	bl	80049f0 <testFilledCircles>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		  if(!EXT_BTN_1_state){
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <main+0xf8>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	f083 0301 	eor.w	r3, r3, #1
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d006      	beq.n	80005c6 <main+0x8e>
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80005b8:	2101      	movs	r1, #1
 80005ba:	481e      	ldr	r0, [pc, #120]	; (8000634 <main+0xfc>)
 80005bc:	f004 fe4b 	bl	8005256 <HAL_GPIO_TogglePin>
			  EXT_BTN_1_state = true;
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <main+0xf8>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_2_state){
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <main+0x100>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f083 0301 	eor.w	r3, r3, #1
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d006      	beq.n	80005e4 <main+0xac>
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80005d6:	2101      	movs	r1, #1
 80005d8:	4816      	ldr	r0, [pc, #88]	; (8000634 <main+0xfc>)
 80005da:	f004 fe3c 	bl	8005256 <HAL_GPIO_TogglePin>
			  EXT_BTN_2_state = true;
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <main+0x100>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_3_state){
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <main+0x104>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	f083 0301 	eor.w	r3, r3, #1
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d006      	beq.n	8000602 <main+0xca>
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80005f4:	2101      	movs	r1, #1
 80005f6:	480f      	ldr	r0, [pc, #60]	; (8000634 <main+0xfc>)
 80005f8:	f004 fe2d 	bl	8005256 <HAL_GPIO_TogglePin>
			  EXT_BTN_3_state = true;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <main+0x104>)
 80005fe:	2201      	movs	r2, #1
 8000600:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_4_state){
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <main+0x108>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	f083 0301 	eor.w	r3, r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0ca      	beq.n	80005a8 <main+0x70>
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000612:	2101      	movs	r1, #1
 8000614:	4807      	ldr	r0, [pc, #28]	; (8000634 <main+0xfc>)
 8000616:	f004 fe1e 	bl	8005256 <HAL_GPIO_TogglePin>
			  EXT_BTN_4_state = true;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <main+0x108>)
 800061c:	2201      	movs	r2, #1
 800061e:	701a      	strb	r2, [r3, #0]
		  if(!EXT_BTN_1_state){
 8000620:	e7c2      	b.n	80005a8 <main+0x70>
 8000622:	bf00      	nop
 8000624:	200000c4 	.word	0x200000c4
 8000628:	20000034 	.word	0x20000034
 800062c:	08008080 	.word	0x08008080
 8000630:	20000000 	.word	0x20000000
 8000634:	40020400 	.word	0x40020400
 8000638:	20000001 	.word	0x20000001
 800063c:	20000002 	.word	0x20000002
 8000640:	20000003 	.word	0x20000003

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b0b8      	sub	sp, #224	; 0xe0
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800064e:	2234      	movs	r2, #52	; 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f007 f820 	bl	8007698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2290      	movs	r2, #144	; 0x90
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f007 f811 	bl	8007698 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000676:	f004 fe21 	bl	80052bc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b38      	ldr	r3, [pc, #224]	; (800075c <SystemClock_Config+0x118>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	4a37      	ldr	r2, [pc, #220]	; (800075c <SystemClock_Config+0x118>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	6413      	str	r3, [r2, #64]	; 0x40
 8000686:	4b35      	ldr	r3, [pc, #212]	; (800075c <SystemClock_Config+0x118>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000692:	4b33      	ldr	r3, [pc, #204]	; (8000760 <SystemClock_Config+0x11c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800069a:	4a31      	ldr	r2, [pc, #196]	; (8000760 <SystemClock_Config+0x11c>)
 800069c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	4b2f      	ldr	r3, [pc, #188]	; (8000760 <SystemClock_Config+0x11c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ae:	2302      	movs	r3, #2
 80006b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	2310      	movs	r3, #16
 80006bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c6:	2300      	movs	r3, #0
 80006c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006d2:	2390      	movs	r3, #144	; 0x90
 80006d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006de:	2304      	movs	r3, #4
 80006e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006e8:	4618      	mov	r0, r3
 80006ea:	f004 fdf7 	bl	80052dc <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006f4:	f000 fb58 	bl	8000da8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800070a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800070e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000712:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000716:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800071a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800071e:	2104      	movs	r1, #4
 8000720:	4618      	mov	r0, r3
 8000722:	f005 f889 	bl	8005838 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xec>
  {
    Error_Handler();
 800072c:	f000 fb3c 	bl	8000da8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4;
 8000730:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000734:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000736:	2300      	movs	r3, #0
 8000738:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800073a:	2300      	movs	r3, #0
 800073c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	4618      	mov	r0, r3
 8000744:	f005 fa70 	bl	8005c28 <HAL_RCCEx_PeriphCLKConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800074e:	f000 fb2b 	bl	8000da8 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	37e0      	adds	r7, #224	; 0xe0
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_TIM1_Init+0xa0>)
 8000784:	4a20      	ldr	r2, [pc, #128]	; (8000808 <MX_TIM1_Init+0xa4>)
 8000786:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_TIM1_Init+0xa0>)
 800078a:	2247      	movs	r2, #71	; 0x47
 800078c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_TIM1_Init+0xa0>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_TIM1_Init+0xa0>)
 8000796:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800079a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_TIM1_Init+0xa0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_TIM1_Init+0xa0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_TIM1_Init+0xa0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007ae:	4815      	ldr	r0, [pc, #84]	; (8000804 <MX_TIM1_Init+0xa0>)
 80007b0:	f005 fe60 	bl	8006474 <HAL_TIM_Base_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80007ba:	f000 faf5 	bl	8000da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	480e      	ldr	r0, [pc, #56]	; (8000804 <MX_TIM1_Init+0xa0>)
 80007cc:	f006 f81e 	bl	800680c <HAL_TIM_ConfigClockSource>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80007d6:	f000 fae7 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_TIM1_Init+0xa0>)
 80007ec:	f006 fa2a 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007f6:	f000 fad7 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3720      	adds	r7, #32
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000c4 	.word	0x200000c4
 8000808:	40010000 	.word	0x40010000

0800080c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800082a:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_TIM2_Init+0x98>)
 800082c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000830:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000-1;
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_TIM2_Init+0x98>)
 8000834:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000838:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083a:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_TIM2_Init+0x98>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20-1;
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_TIM2_Init+0x98>)
 8000842:	2213      	movs	r2, #19
 8000844:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_TIM2_Init+0x98>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_TIM2_Init+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000852:	4814      	ldr	r0, [pc, #80]	; (80008a4 <MX_TIM2_Init+0x98>)
 8000854:	f005 fe0e 	bl	8006474 <HAL_TIM_Base_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800085e:	f000 faa3 	bl	8000da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000866:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4619      	mov	r1, r3
 800086e:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_TIM2_Init+0x98>)
 8000870:	f005 ffcc 	bl	800680c <HAL_TIM_ConfigClockSource>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800087a:	f000 fa95 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <MX_TIM2_Init+0x98>)
 800088c:	f006 f9da 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000896:	f000 fa87 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	3720      	adds	r7, #32
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000184 	.word	0x20000184

080008a8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_TIM14_Init+0x40>)
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <MX_TIM14_Init+0x44>)
 80008b0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <MX_TIM14_Init+0x40>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_TIM14_Init+0x40>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_TIM14_Init+0x40>)
 80008c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_TIM14_Init+0x40>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_TIM14_Init+0x40>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_TIM14_Init+0x40>)
 80008d4:	f005 fdce 	bl	8006474 <HAL_TIM_Base_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80008de:	f000 fa63 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200001c4 	.word	0x200001c4
 80008ec:	40002000 	.word	0x40002000

080008f0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_UART4_Init+0x58>)
 80008f6:	4a15      	ldr	r2, [pc, #84]	; (800094c <MX_UART4_Init+0x5c>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_UART4_Init+0x58>)
 80008fc:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000900:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_UART4_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_UART4_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_UART4_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_UART4_Init+0x58>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_UART4_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_UART4_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_UART4_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_UART4_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_UART4_Init+0x58>)
 8000934:	f006 fa32 	bl	8006d9c <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800093e:	f000 fa33 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000104 	.word	0x20000104
 800094c:	40004c00 	.word	0x40004c00

08000950 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_USART3_UART_Init+0x58>)
 8000956:	4a15      	ldr	r2, [pc, #84]	; (80009ac <MX_USART3_UART_Init+0x5c>)
 8000958:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_USART3_UART_Init+0x58>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART3_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_USART3_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART3_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART3_UART_Init+0x58>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART3_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART3_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART3_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART3_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART3_UART_Init+0x58>)
 8000994:	f006 fa02 	bl	8006d9c <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 fa03 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000044 	.word	0x20000044
 80009ac:	40004800 	.word	0x40004800

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	; 0x38
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c6:	4bb3      	ldr	r3, [pc, #716]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4ab2      	ldr	r2, [pc, #712]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 80009cc:	f043 0310 	orr.w	r3, r3, #16
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4bb0      	ldr	r3, [pc, #704]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0310 	and.w	r3, r3, #16
 80009da:	623b      	str	r3, [r7, #32]
 80009dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4bad      	ldr	r3, [pc, #692]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4aac      	ldr	r2, [pc, #688]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4baa      	ldr	r3, [pc, #680]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	61fb      	str	r3, [r7, #28]
 80009f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009f6:	4ba7      	ldr	r3, [pc, #668]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4aa6      	ldr	r2, [pc, #664]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 80009fc:	f043 0320 	orr.w	r3, r3, #32
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4ba4      	ldr	r3, [pc, #656]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0320 	and.w	r3, r3, #32
 8000a0a:	61bb      	str	r3, [r7, #24]
 8000a0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0e:	4ba1      	ldr	r3, [pc, #644]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4aa0      	ldr	r2, [pc, #640]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b9e      	ldr	r3, [pc, #632]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b9b      	ldr	r3, [pc, #620]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a9a      	ldr	r2, [pc, #616]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b98      	ldr	r3, [pc, #608]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	4b95      	ldr	r3, [pc, #596]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a94      	ldr	r2, [pc, #592]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b92      	ldr	r3, [pc, #584]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a56:	4b8f      	ldr	r3, [pc, #572]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a8e      	ldr	r2, [pc, #568]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 8000a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b8c      	ldr	r3, [pc, #560]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6e:	4b89      	ldr	r3, [pc, #548]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a88      	ldr	r2, [pc, #544]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b86      	ldr	r3, [pc, #536]	; (8000c94 <MX_GPIO_Init+0x2e4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000a86:	2200      	movs	r2, #0
 8000a88:	f24c 0178 	movw	r1, #49272	; 0xc078
 8000a8c:	4882      	ldr	r0, [pc, #520]	; (8000c98 <MX_GPIO_Init+0x2e8>)
 8000a8e:	f004 fbc9 	bl	8005224 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000a98:	4880      	ldr	r0, [pc, #512]	; (8000c9c <MX_GPIO_Init+0x2ec>)
 8000a9a:	f004 fbc3 	bl	8005224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f644 0181 	movw	r1, #18561	; 0x4881
 8000aa4:	487e      	ldr	r0, [pc, #504]	; (8000ca0 <MX_GPIO_Init+0x2f0>)
 8000aa6:	f004 fbbd 	bl	8005224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2142      	movs	r1, #66	; 0x42
 8000aae:	487d      	ldr	r0, [pc, #500]	; (8000ca4 <MX_GPIO_Init+0x2f4>)
 8000ab0:	f004 fbb8 	bl	8005224 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000ab4:	f24c 0378 	movw	r3, #49272	; 0xc078
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aca:	4619      	mov	r1, r3
 8000acc:	4872      	ldr	r0, [pc, #456]	; (8000c98 <MX_GPIO_Init+0x2e8>)
 8000ace:	f004 f9e7 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000ad2:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	486c      	ldr	r0, [pc, #432]	; (8000c9c <MX_GPIO_Init+0x2ec>)
 8000aec:	f004 f9d8 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000af0:	2332      	movs	r3, #50	; 0x32
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b00:	230b      	movs	r3, #11
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4867      	ldr	r0, [pc, #412]	; (8000ca8 <MX_GPIO_Init+0x2f8>)
 8000b0c:	f004 f9c8 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b10:	2386      	movs	r3, #134	; 0x86
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b20:	230b      	movs	r3, #11
 8000b22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4860      	ldr	r0, [pc, #384]	; (8000cac <MX_GPIO_Init+0x2fc>)
 8000b2c:	f004 f9b8 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB11 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin;
 8000b30:	f644 0381 	movw	r3, #18561	; 0x4881
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4855      	ldr	r0, [pc, #340]	; (8000ca0 <MX_GPIO_Init+0x2f0>)
 8000b4a:	f004 f9a9 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_BTN_1_Pin EXT_BTN_4_Pin */
  GPIO_InitStruct.Pin = EXT_BTN_1_Pin|EXT_BTN_4_Pin;
 8000b4e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b54:	4b56      	ldr	r3, [pc, #344]	; (8000cb0 <MX_GPIO_Init+0x300>)
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	484e      	ldr	r0, [pc, #312]	; (8000c9c <MX_GPIO_Init+0x2ec>)
 8000b64:	f004 f99c 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|USB_PowerSwitchOn_Pin;
 8000b68:	2342      	movs	r3, #66	; 0x42
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4849      	ldr	r0, [pc, #292]	; (8000ca4 <MX_GPIO_Init+0x2f4>)
 8000b80:	f004 f98e 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_BTN_2_Pin EXT_BTN_3_Pin */
  GPIO_InitStruct.Pin = EXT_BTN_2_Pin|EXT_BTN_3_Pin;
 8000b84:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b8a:	4b49      	ldr	r3, [pc, #292]	; (8000cb0 <MX_GPIO_Init+0x300>)
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	483f      	ldr	r0, [pc, #252]	; (8000c98 <MX_GPIO_Init+0x2e8>)
 8000b9a:	f004 f981 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4839      	ldr	r0, [pc, #228]	; (8000c98 <MX_GPIO_Init+0x2e8>)
 8000bb4:	f004 f974 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4834      	ldr	r0, [pc, #208]	; (8000ca0 <MX_GPIO_Init+0x2f0>)
 8000bce:	f004 f967 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be4:	230b      	movs	r3, #11
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	482c      	ldr	r0, [pc, #176]	; (8000ca0 <MX_GPIO_Init+0x2f0>)
 8000bf0:	f004 f956 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	4827      	ldr	r0, [pc, #156]	; (8000ca4 <MX_GPIO_Init+0x2f4>)
 8000c08:	f004 f94a 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c0c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c1e:	230a      	movs	r3, #10
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4820      	ldr	r0, [pc, #128]	; (8000cac <MX_GPIO_Init+0x2fc>)
 8000c2a:	f004 f939 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	481a      	ldr	r0, [pc, #104]	; (8000cac <MX_GPIO_Init+0x2fc>)
 8000c44:	f004 f92c 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c5a:	230b      	movs	r3, #11
 8000c5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	480f      	ldr	r0, [pc, #60]	; (8000ca4 <MX_GPIO_Init+0x2f4>)
 8000c66:	f004 f91b 	bl	8004ea0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2017      	movs	r0, #23
 8000c70:	f004 f8df 	bl	8004e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c74:	2017      	movs	r0, #23
 8000c76:	f004 f8f8 	bl	8004e6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2028      	movs	r0, #40	; 0x28
 8000c80:	f004 f8d7 	bl	8004e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c84:	2028      	movs	r0, #40	; 0x28
 8000c86:	f004 f8f0 	bl	8004e6a <HAL_NVIC_EnableIRQ>

}
 8000c8a:	bf00      	nop
 8000c8c:	3738      	adds	r7, #56	; 0x38
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40021400 	.word	0x40021400
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40021800 	.word	0x40021800
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	10210000 	.word	0x10210000

08000cb4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// Callback para GPIOs
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXT_BTN_1_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cc4:	d102      	bne.n	8000ccc <HAL_GPIO_EXTI_Callback+0x18>
 8000cc6:	480e      	ldr	r0, [pc, #56]	; (8000d00 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000cc8:	f005 fc56 	bl	8006578 <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_2_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cd2:	d102      	bne.n	8000cda <HAL_GPIO_EXTI_Callback+0x26>
 8000cd4:	480a      	ldr	r0, [pc, #40]	; (8000d00 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000cd6:	f005 fc4f 	bl	8006578 <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_3_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ce0:	d102      	bne.n	8000ce8 <HAL_GPIO_EXTI_Callback+0x34>
 8000ce2:	4807      	ldr	r0, [pc, #28]	; (8000d00 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000ce4:	f005 fc48 	bl	8006578 <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_4_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cee:	d102      	bne.n	8000cf6 <HAL_GPIO_EXTI_Callback+0x42>
 8000cf0:	4803      	ldr	r0, [pc, #12]	; (8000d00 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000cf2:	f005 fc41 	bl	8006578 <HAL_TIM_Base_Start_IT>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000184 	.word	0x20000184

08000d04 <HAL_TIM_PeriodElapsedCallback>:
// Callback para Timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  if(htim == &htim2){
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a1f      	ldr	r2, [pc, #124]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d137      	bne.n	8000d84 <HAL_TIM_PeriodElapsedCallback+0x80>
	  // Ya pasaron 20ms y sigue en 0, es real esto.
	  if(!HAL_GPIO_ReadPin(EXT_BTN_1_GPIO_Port, EXT_BTN_1_Pin)){
 8000d14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d18:	481d      	ldr	r0, [pc, #116]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000d1a:	f004 fa6b 	bl	80051f4 <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d105      	bne.n	8000d30 <HAL_TIM_PeriodElapsedCallback+0x2c>
		  EXT_BTN_1_state = false;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 8000d2a:	4818      	ldr	r0, [pc, #96]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d2c:	f005 fbf8 	bl	8006520 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_2_GPIO_Port, EXT_BTN_2_Pin)){
 8000d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d34:	4818      	ldr	r0, [pc, #96]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d36:	f004 fa5d 	bl	80051f4 <HAL_GPIO_ReadPin>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d105      	bne.n	8000d4c <HAL_TIM_PeriodElapsedCallback+0x48>
		  EXT_BTN_2_state = false;
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 8000d46:	4811      	ldr	r0, [pc, #68]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d48:	f005 fbea 	bl	8006520 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_3_GPIO_Port, EXT_BTN_3_Pin)){
 8000d4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d50:	4811      	ldr	r0, [pc, #68]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d52:	f004 fa4f 	bl	80051f4 <HAL_GPIO_ReadPin>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d105      	bne.n	8000d68 <HAL_TIM_PeriodElapsedCallback+0x64>
		  EXT_BTN_3_state = false;
 8000d5c:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 8000d62:	480a      	ldr	r0, [pc, #40]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d64:	f005 fbdc 	bl	8006520 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_4_GPIO_Port, EXT_BTN_4_Pin)){
 8000d68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d6c:	4808      	ldr	r0, [pc, #32]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000d6e:	f004 fa41 	bl	80051f4 <HAL_GPIO_ReadPin>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d105      	bne.n	8000d84 <HAL_TIM_PeriodElapsedCallback+0x80>
		  EXT_BTN_4_state = false;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 8000d7e:	4803      	ldr	r0, [pc, #12]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d80:	f005 fbce 	bl	8006520 <HAL_TIM_Base_Stop>
	  }
  }


}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000184 	.word	0x20000184
 8000d90:	40021400 	.word	0x40021400
 8000d94:	20000000 	.word	0x20000000
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	20000001 	.word	0x20000001
 8000da0:	20000002 	.word	0x20000002
 8000da4:	20000003 	.word	0x20000003

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <HAL_MspInit+0x44>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <HAL_MspInit+0x44>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_MspInit+0x44>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <HAL_MspInit+0x44>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <HAL_MspInit+0x44>)
 8000ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de0:	6453      	str	r3, [r2, #68]	; 0x44
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_MspInit+0x44>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800

08000e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a1f      	ldr	r2, [pc, #124]	; (8000e8c <HAL_TIM_Base_MspInit+0x8c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d10c      	bne.n	8000e2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <HAL_TIM_Base_MspInit+0x90>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <HAL_TIM_Base_MspInit+0x90>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <HAL_TIM_Base_MspInit+0x90>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000e2a:	e02a      	b.n	8000e82 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e34:	d114      	bne.n	8000e60 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_TIM_Base_MspInit+0x90>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	4a15      	ldr	r2, [pc, #84]	; (8000e90 <HAL_TIM_Base_MspInit+0x90>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6413      	str	r3, [r2, #64]	; 0x40
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_TIM_Base_MspInit+0x90>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	201c      	movs	r0, #28
 8000e54:	f003 ffed 	bl	8004e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e58:	201c      	movs	r0, #28
 8000e5a:	f004 f806 	bl	8004e6a <HAL_NVIC_EnableIRQ>
}
 8000e5e:	e010      	b.n	8000e82 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM14)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <HAL_TIM_Base_MspInit+0x94>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10b      	bne.n	8000e82 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_TIM_Base_MspInit+0x90>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <HAL_TIM_Base_MspInit+0x90>)
 8000e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_TIM_Base_MspInit+0x90>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40010000 	.word	0x40010000
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40002000 	.word	0x40002000

08000e98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	; 0x30
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a3d      	ldr	r2, [pc, #244]	; (8000fac <HAL_UART_MspInit+0x114>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d145      	bne.n	8000f46 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000eba:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <HAL_UART_MspInit+0x118>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a3c      	ldr	r2, [pc, #240]	; (8000fb0 <HAL_UART_MspInit+0x118>)
 8000ec0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec6:	4b3a      	ldr	r3, [pc, #232]	; (8000fb0 <HAL_UART_MspInit+0x118>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ece:	61bb      	str	r3, [r7, #24]
 8000ed0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b37      	ldr	r3, [pc, #220]	; (8000fb0 <HAL_UART_MspInit+0x118>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a36      	ldr	r2, [pc, #216]	; (8000fb0 <HAL_UART_MspInit+0x118>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <HAL_UART_MspInit+0x118>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <HAL_UART_MspInit+0x118>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a30      	ldr	r2, [pc, #192]	; (8000fb0 <HAL_UART_MspInit+0x118>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <HAL_UART_MspInit+0x118>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f02:	2301      	movs	r3, #1
 8000f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f12:	2308      	movs	r3, #8
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4825      	ldr	r0, [pc, #148]	; (8000fb4 <HAL_UART_MspInit+0x11c>)
 8000f1e:	f003 ffbf 	bl	8004ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f34:	2308      	movs	r3, #8
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	481e      	ldr	r0, [pc, #120]	; (8000fb8 <HAL_UART_MspInit+0x120>)
 8000f40:	f003 ffae 	bl	8004ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f44:	e02d      	b.n	8000fa2 <HAL_UART_MspInit+0x10a>
  else if(huart->Instance==USART3)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a1c      	ldr	r2, [pc, #112]	; (8000fbc <HAL_UART_MspInit+0x124>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d128      	bne.n	8000fa2 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_UART_MspInit+0x118>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a16      	ldr	r2, [pc, #88]	; (8000fb0 <HAL_UART_MspInit+0x118>)
 8000f56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_UART_MspInit+0x118>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_UART_MspInit+0x118>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <HAL_UART_MspInit+0x118>)
 8000f6e:	f043 0308 	orr.w	r3, r3, #8
 8000f72:	6313      	str	r3, [r2, #48]	; 0x30
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_UART_MspInit+0x118>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f92:	2307      	movs	r3, #7
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <HAL_UART_MspInit+0x128>)
 8000f9e:	f003 ff7f 	bl	8004ea0 <HAL_GPIO_Init>
}
 8000fa2:	bf00      	nop
 8000fa4:	3730      	adds	r7, #48	; 0x30
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40004c00 	.word	0x40004c00
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	40020800 	.word	0x40020800
 8000fbc:	40004800 	.word	0x40004800
 8000fc0:	40020c00 	.word	0x40020c00

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <MemManage_Handler+0x4>

08000fde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001018:	f003 fdee 	bl	8004bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001024:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001028:	f004 f930 	bl	800528c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <TIM2_IRQHandler+0x10>)
 8001036:	f005 fac9 	bl	80065cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000184 	.word	0x20000184

08001044 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001048:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800104c:	f004 f91e 	bl	800528c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001050:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001054:	f004 f91a 	bl	800528c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001058:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800105c:	f004 f916 	bl	800528c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <SystemInit+0x28>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106e:	4a07      	ldr	r2, [pc, #28]	; (800108c <SystemInit+0x28>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <SystemInit+0x28>)
 800107a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800107e:	609a      	str	r2, [r3, #8]
#endif
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <delay+0x2c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 80010a0:	bf00      	nop
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <delay+0x2c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d8f9      	bhi.n	80010a2 <delay+0x12>
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	200000c4 	.word	0x200000c4

080010c0 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f004 f8a6 	bl	8005224 <HAL_GPIO_WritePin>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80010ec:	887b      	ldrh	r3, [r7, #2]
 80010ee:	2201      	movs	r2, #1
 80010f0:	4619      	mov	r1, r3
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f004 f896 	bl	8005224 <HAL_GPIO_WritePin>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001114:	2301      	movs	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4619      	mov	r1, r3
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f003 febe 	bl	8004ea0 <HAL_GPIO_Init>
}
 8001124:	bf00      	nop
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001138:	887b      	ldrh	r3, [r7, #2]
 800113a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001144:	2302      	movs	r3, #2
 8001146:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	4619      	mov	r1, r3
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f003 fea6 	bl	8004ea0 <HAL_GPIO_Init>
}
 8001154:	bf00      	nop
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <width+0x14>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008

08001174 <height>:

uint16_t height(void)
{ return _height; }
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <height+0x14>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	2000000a 	.word	0x2000000a

0800118c <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8001196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800119a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800119e:	b21a      	sxth	r2, r3
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b21b      	sxth	r3, r3
 80011be:	b29b      	uxth	r3, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 80011d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011de:	b21a      	sxth	r2, r3
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	115b      	asrs	r3, r3, #5
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	f003 0320 	and.w	r3, r3, #32
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	105b      	asrs	r3, r3, #1
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	f003 031f 	and.w	r3, r3, #31
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b21b      	sxth	r3, r3
 8001200:	b29b      	uxth	r3, r3
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	121b      	asrs	r3, r3, #8
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f023 0307 	bic.w	r3, r3, #7
 8001222:	b2db      	uxtb	r3, r3
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	10db      	asrs	r3, r3, #3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f023 0303 	bic.w	r3, r3, #3
 8001244:	b2db      	uxtb	r3, r3
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	b2db      	uxtb	r3, r3
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	460b      	mov	r3, r1
 800127c:	71bb      	strb	r3, [r7, #6]
 800127e:	4613      	mov	r3, r2
 8001280:	717b      	strb	r3, [r7, #5]
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <color565+0x48>)
 800128a:	4013      	ands	r3, r2
 800128c:	b21a      	sxth	r2, r3
 800128e:	79bb      	ldrb	r3, [r7, #6]
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	b21b      	sxth	r3, r3
 8001294:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001298:	b21b      	sxth	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b21a      	sxth	r2, r3
 800129e:	797b      	ldrb	r3, [r7, #5]
 80012a0:	08db      	lsrs	r3, r3, #3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	fffff800 	.word	0xfffff800

080012bc <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af02      	add	r7, sp, #8
 80012c2:	4603      	mov	r3, r0
 80012c4:	460a      	mov	r2, r1
 80012c6:	80fb      	strh	r3, [r7, #6]
 80012c8:	4613      	mov	r3, r2
 80012ca:	80bb      	strh	r3, [r7, #4]
 80012cc:	f107 020e 	add.w	r2, r7, #14
 80012d0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80012d4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80012d8:	2301      	movs	r3, #1
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2301      	movs	r3, #1
 80012de:	f001 fbef 	bl	8002ac0 <readGRAM>
 80012e2:	89fb      	ldrh	r3, [r7, #14]
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	460a      	mov	r2, r1
 80012f6:	80fb      	strh	r3, [r7, #6]
 80012f8:	4613      	mov	r3, r2
 80012fa:	80bb      	strh	r3, [r7, #4]
 80012fc:	88ba      	ldrh	r2, [r7, #4]
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f964 	bl	80015d0 <writecmddata>
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	80fb      	strh	r3, [r7, #6]
 800131c:	4613      	mov	r3, r2
 800131e:	717b      	strb	r3, [r7, #5]
 8001320:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fa9d 	bl	8001868 <WriteCmdParamN>
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <setReadDir>:


//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 800133c:	2102      	movs	r1, #2
 800133e:	4811      	ldr	r0, [pc, #68]	; (8001384 <setReadDir+0x4c>)
 8001340:	f7ff fede 	bl	8001100 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8001344:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001348:	480f      	ldr	r0, [pc, #60]	; (8001388 <setReadDir+0x50>)
 800134a:	f7ff fed9 	bl	8001100 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 800134e:	2180      	movs	r1, #128	; 0x80
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <setReadDir+0x50>)
 8001352:	f7ff fed5 	bl	8001100 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8001356:	f44f 7180 	mov.w	r1, #256	; 0x100
 800135a:	480b      	ldr	r0, [pc, #44]	; (8001388 <setReadDir+0x50>)
 800135c:	f7ff fed0 	bl	8001100 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8001360:	2108      	movs	r1, #8
 8001362:	480a      	ldr	r0, [pc, #40]	; (800138c <setReadDir+0x54>)
 8001364:	f7ff fecc 	bl	8001100 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8001368:	2140      	movs	r1, #64	; 0x40
 800136a:	4808      	ldr	r0, [pc, #32]	; (800138c <setReadDir+0x54>)
 800136c:	f7ff fec8 	bl	8001100 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8001370:	2120      	movs	r1, #32
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <setReadDir+0x54>)
 8001374:	f7ff fec4 	bl	8001100 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8001378:	2110      	movs	r1, #16
 800137a:	4804      	ldr	r0, [pc, #16]	; (800138c <setReadDir+0x54>)
 800137c:	f7ff fec0 	bl	8001100 <PIN_INPUT>
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40021800 	.word	0x40021800
 8001388:	40021400 	.word	0x40021400
 800138c:	40021000 	.word	0x40021000

08001390 <setWriteDir>:

void setWriteDir (void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8001394:	2102      	movs	r1, #2
 8001396:	4811      	ldr	r0, [pc, #68]	; (80013dc <setWriteDir+0x4c>)
 8001398:	f7ff fec8 	bl	800112c <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 800139c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a0:	480f      	ldr	r0, [pc, #60]	; (80013e0 <setWriteDir+0x50>)
 80013a2:	f7ff fec3 	bl	800112c <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <setWriteDir+0x50>)
 80013aa:	f7ff febf 	bl	800112c <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 80013ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <setWriteDir+0x50>)
 80013b4:	f7ff feba 	bl	800112c <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 80013b8:	2108      	movs	r1, #8
 80013ba:	480a      	ldr	r0, [pc, #40]	; (80013e4 <setWriteDir+0x54>)
 80013bc:	f7ff feb6 	bl	800112c <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 80013c0:	2140      	movs	r1, #64	; 0x40
 80013c2:	4808      	ldr	r0, [pc, #32]	; (80013e4 <setWriteDir+0x54>)
 80013c4:	f7ff feb2 	bl	800112c <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 80013c8:	2120      	movs	r1, #32
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <setWriteDir+0x54>)
 80013cc:	f7ff feae 	bl	800112c <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 80013d0:	2110      	movs	r1, #16
 80013d2:	4804      	ldr	r0, [pc, #16]	; (80013e4 <setWriteDir+0x54>)
 80013d4:	f7ff feaa 	bl	800112c <PIN_OUTPUT>
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40021800 	.word	0x40021800
 80013e0:	40021400 	.word	0x40021400
 80013e4:	40021000 	.word	0x40021000

080013e8 <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff0a 	bl	800120e <color565_to_r>
 80013fa:	4603      	mov	r3, r0
 80013fc:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff15 	bl	8001230 <color565_to_g>
 8001406:	4603      	mov	r3, r0
 8001408:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff20 	bl	8001252 <color565_to_b>
 8001412:	4603      	mov	r3, r0
 8001414:	737b      	strb	r3, [r7, #13]
    write8(r);
 8001416:	4b6b      	ldr	r3, [pc, #428]	; (80015c4 <write24+0x1dc>)
 8001418:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800141c:	619a      	str	r2, [r3, #24]
 800141e:	4b6a      	ldr	r3, [pc, #424]	; (80015c8 <write24+0x1e0>)
 8001420:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8001424:	619a      	str	r2, [r3, #24]
 8001426:	4b69      	ldr	r3, [pc, #420]	; (80015cc <write24+0x1e4>)
 8001428:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800142c:	619a      	str	r2, [r3, #24]
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4a66      	ldr	r2, [pc, #408]	; (80015cc <write24+0x1e4>)
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	6193      	str	r3, [r2, #24]
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	015b      	lsls	r3, r3, #5
 8001446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144a:	431a      	orrs	r2, r3
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	015b      	lsls	r3, r3, #5
 8001450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001454:	431a      	orrs	r2, r3
 8001456:	4b5c      	ldr	r3, [pc, #368]	; (80015c8 <write24+0x1e0>)
 8001458:	619a      	str	r2, [r3, #24]
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	105b      	asrs	r3, r3, #1
 800145e:	f003 0208 	and.w	r2, r3, #8
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800146a:	431a      	orrs	r2, r3
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	105b      	asrs	r3, r3, #1
 8001470:	f003 0320 	and.w	r3, r3, #32
 8001474:	431a      	orrs	r2, r3
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	10db      	asrs	r3, r3, #3
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	431a      	orrs	r2, r3
 8001480:	4b50      	ldr	r3, [pc, #320]	; (80015c4 <write24+0x1dc>)
 8001482:	619a      	str	r2, [r3, #24]
 8001484:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001488:	484e      	ldr	r0, [pc, #312]	; (80015c4 <write24+0x1dc>)
 800148a:	f7ff fe19 	bl	80010c0 <PIN_LOW>
 800148e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001492:	484c      	ldr	r0, [pc, #304]	; (80015c4 <write24+0x1dc>)
 8001494:	f7ff fe24 	bl	80010e0 <PIN_HIGH>
 8001498:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800149c:	4849      	ldr	r0, [pc, #292]	; (80015c4 <write24+0x1dc>)
 800149e:	f7ff fe1f 	bl	80010e0 <PIN_HIGH>
    write8(g);
 80014a2:	4b48      	ldr	r3, [pc, #288]	; (80015c4 <write24+0x1dc>)
 80014a4:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80014a8:	619a      	str	r2, [r3, #24]
 80014aa:	4b47      	ldr	r3, [pc, #284]	; (80015c8 <write24+0x1e0>)
 80014ac:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80014b0:	619a      	str	r2, [r3, #24]
 80014b2:	4b46      	ldr	r3, [pc, #280]	; (80015cc <write24+0x1e4>)
 80014b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014b8:	619a      	str	r2, [r3, #24]
 80014ba:	7bbb      	ldrb	r3, [r7, #14]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4a43      	ldr	r2, [pc, #268]	; (80015cc <write24+0x1e4>)
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	6193      	str	r3, [r2, #24]
 80014c6:	7bbb      	ldrb	r3, [r7, #14]
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80014ce:	7bbb      	ldrb	r3, [r7, #14]
 80014d0:	015b      	lsls	r3, r3, #5
 80014d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d6:	431a      	orrs	r2, r3
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	015b      	lsls	r3, r3, #5
 80014dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e0:	431a      	orrs	r2, r3
 80014e2:	4b39      	ldr	r3, [pc, #228]	; (80015c8 <write24+0x1e0>)
 80014e4:	619a      	str	r2, [r3, #24]
 80014e6:	7bbb      	ldrb	r3, [r7, #14]
 80014e8:	105b      	asrs	r3, r3, #1
 80014ea:	f003 0208 	and.w	r2, r3, #8
 80014ee:	7bbb      	ldrb	r3, [r7, #14]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f6:	431a      	orrs	r2, r3
 80014f8:	7bbb      	ldrb	r3, [r7, #14]
 80014fa:	105b      	asrs	r3, r3, #1
 80014fc:	f003 0320 	and.w	r3, r3, #32
 8001500:	431a      	orrs	r2, r3
 8001502:	7bbb      	ldrb	r3, [r7, #14]
 8001504:	10db      	asrs	r3, r3, #3
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	431a      	orrs	r2, r3
 800150c:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <write24+0x1dc>)
 800150e:	619a      	str	r2, [r3, #24]
 8001510:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001514:	482b      	ldr	r0, [pc, #172]	; (80015c4 <write24+0x1dc>)
 8001516:	f7ff fdd3 	bl	80010c0 <PIN_LOW>
 800151a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800151e:	4829      	ldr	r0, [pc, #164]	; (80015c4 <write24+0x1dc>)
 8001520:	f7ff fdde 	bl	80010e0 <PIN_HIGH>
 8001524:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001528:	4826      	ldr	r0, [pc, #152]	; (80015c4 <write24+0x1dc>)
 800152a:	f7ff fdd9 	bl	80010e0 <PIN_HIGH>
    write8(b);
 800152e:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <write24+0x1dc>)
 8001530:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001534:	619a      	str	r2, [r3, #24]
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <write24+0x1e0>)
 8001538:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800153c:	619a      	str	r2, [r3, #24]
 800153e:	4b23      	ldr	r3, [pc, #140]	; (80015cc <write24+0x1e4>)
 8001540:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001544:	619a      	str	r2, [r3, #24]
 8001546:	7b7b      	ldrb	r3, [r7, #13]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4a20      	ldr	r2, [pc, #128]	; (80015cc <write24+0x1e4>)
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	6193      	str	r3, [r2, #24]
 8001552:	7b7b      	ldrb	r3, [r7, #13]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800155a:	7b7b      	ldrb	r3, [r7, #13]
 800155c:	015b      	lsls	r3, r3, #5
 800155e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001562:	431a      	orrs	r2, r3
 8001564:	7b7b      	ldrb	r3, [r7, #13]
 8001566:	015b      	lsls	r3, r3, #5
 8001568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156c:	431a      	orrs	r2, r3
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <write24+0x1e0>)
 8001570:	619a      	str	r2, [r3, #24]
 8001572:	7b7b      	ldrb	r3, [r7, #13]
 8001574:	105b      	asrs	r3, r3, #1
 8001576:	f003 0208 	and.w	r2, r3, #8
 800157a:	7b7b      	ldrb	r3, [r7, #13]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001582:	431a      	orrs	r2, r3
 8001584:	7b7b      	ldrb	r3, [r7, #13]
 8001586:	105b      	asrs	r3, r3, #1
 8001588:	f003 0320 	and.w	r3, r3, #32
 800158c:	431a      	orrs	r2, r3
 800158e:	7b7b      	ldrb	r3, [r7, #13]
 8001590:	10db      	asrs	r3, r3, #3
 8001592:	f003 0310 	and.w	r3, r3, #16
 8001596:	431a      	orrs	r2, r3
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <write24+0x1dc>)
 800159a:	619a      	str	r2, [r3, #24]
 800159c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a0:	4808      	ldr	r0, [pc, #32]	; (80015c4 <write24+0x1dc>)
 80015a2:	f7ff fd8d 	bl	80010c0 <PIN_LOW>
 80015a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015aa:	4806      	ldr	r0, [pc, #24]	; (80015c4 <write24+0x1dc>)
 80015ac:	f7ff fd98 	bl	80010e0 <PIN_HIGH>
 80015b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b4:	4803      	ldr	r0, [pc, #12]	; (80015c4 <write24+0x1dc>)
 80015b6:	f7ff fd93 	bl	80010e0 <PIN_HIGH>
}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40021400 	.word	0x40021400
 80015cc:	40021800 	.word	0x40021800

080015d0 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	460a      	mov	r2, r1
 80015da:	80fb      	strh	r3, [r7, #6]
 80015dc:	4613      	mov	r3, r2
 80015de:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 80015e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015e4:	489c      	ldr	r0, [pc, #624]	; (8001858 <writecmddata+0x288>)
 80015e6:	f7ff fd6b 	bl	80010c0 <PIN_LOW>
    WriteCmd(cmd);
 80015ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ee:	489b      	ldr	r0, [pc, #620]	; (800185c <writecmddata+0x28c>)
 80015f0:	f7ff fd66 	bl	80010c0 <PIN_LOW>
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	73bb      	strb	r3, [r7, #14]
 8001600:	4b96      	ldr	r3, [pc, #600]	; (800185c <writecmddata+0x28c>)
 8001602:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001606:	619a      	str	r2, [r3, #24]
 8001608:	4b95      	ldr	r3, [pc, #596]	; (8001860 <writecmddata+0x290>)
 800160a:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800160e:	619a      	str	r2, [r3, #24]
 8001610:	4b94      	ldr	r3, [pc, #592]	; (8001864 <writecmddata+0x294>)
 8001612:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001616:	619a      	str	r2, [r3, #24]
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4a91      	ldr	r2, [pc, #580]	; (8001864 <writecmddata+0x294>)
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	015b      	lsls	r3, r3, #5
 8001630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001634:	431a      	orrs	r2, r3
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	015b      	lsls	r3, r3, #5
 800163a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163e:	431a      	orrs	r2, r3
 8001640:	4b87      	ldr	r3, [pc, #540]	; (8001860 <writecmddata+0x290>)
 8001642:	619a      	str	r2, [r3, #24]
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	105b      	asrs	r3, r3, #1
 8001648:	f003 0208 	and.w	r2, r3, #8
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001654:	431a      	orrs	r2, r3
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	105b      	asrs	r3, r3, #1
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	431a      	orrs	r2, r3
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	10db      	asrs	r3, r3, #3
 8001664:	f003 0310 	and.w	r3, r3, #16
 8001668:	431a      	orrs	r2, r3
 800166a:	4b7c      	ldr	r3, [pc, #496]	; (800185c <writecmddata+0x28c>)
 800166c:	619a      	str	r2, [r3, #24]
 800166e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001672:	487a      	ldr	r0, [pc, #488]	; (800185c <writecmddata+0x28c>)
 8001674:	f7ff fd24 	bl	80010c0 <PIN_LOW>
 8001678:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800167c:	4877      	ldr	r0, [pc, #476]	; (800185c <writecmddata+0x28c>)
 800167e:	f7ff fd2f 	bl	80010e0 <PIN_HIGH>
 8001682:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001686:	4875      	ldr	r0, [pc, #468]	; (800185c <writecmddata+0x28c>)
 8001688:	f7ff fd2a 	bl	80010e0 <PIN_HIGH>
 800168c:	4b73      	ldr	r3, [pc, #460]	; (800185c <writecmddata+0x28c>)
 800168e:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001692:	619a      	str	r2, [r3, #24]
 8001694:	4b72      	ldr	r3, [pc, #456]	; (8001860 <writecmddata+0x290>)
 8001696:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800169a:	619a      	str	r2, [r3, #24]
 800169c:	4b71      	ldr	r3, [pc, #452]	; (8001864 <writecmddata+0x294>)
 800169e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016a2:	619a      	str	r2, [r3, #24]
 80016a4:	7bbb      	ldrb	r3, [r7, #14]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4a6e      	ldr	r2, [pc, #440]	; (8001864 <writecmddata+0x294>)
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	7bbb      	ldrb	r3, [r7, #14]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80016b8:	7bbb      	ldrb	r3, [r7, #14]
 80016ba:	015b      	lsls	r3, r3, #5
 80016bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c0:	431a      	orrs	r2, r3
 80016c2:	7bbb      	ldrb	r3, [r7, #14]
 80016c4:	015b      	lsls	r3, r3, #5
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	431a      	orrs	r2, r3
 80016cc:	4b64      	ldr	r3, [pc, #400]	; (8001860 <writecmddata+0x290>)
 80016ce:	619a      	str	r2, [r3, #24]
 80016d0:	7bbb      	ldrb	r3, [r7, #14]
 80016d2:	105b      	asrs	r3, r3, #1
 80016d4:	f003 0208 	and.w	r2, r3, #8
 80016d8:	7bbb      	ldrb	r3, [r7, #14]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e0:	431a      	orrs	r2, r3
 80016e2:	7bbb      	ldrb	r3, [r7, #14]
 80016e4:	105b      	asrs	r3, r3, #1
 80016e6:	f003 0320 	and.w	r3, r3, #32
 80016ea:	431a      	orrs	r2, r3
 80016ec:	7bbb      	ldrb	r3, [r7, #14]
 80016ee:	10db      	asrs	r3, r3, #3
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	431a      	orrs	r2, r3
 80016f6:	4b59      	ldr	r3, [pc, #356]	; (800185c <writecmddata+0x28c>)
 80016f8:	619a      	str	r2, [r3, #24]
 80016fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016fe:	4857      	ldr	r0, [pc, #348]	; (800185c <writecmddata+0x28c>)
 8001700:	f7ff fcde 	bl	80010c0 <PIN_LOW>
 8001704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001708:	4854      	ldr	r0, [pc, #336]	; (800185c <writecmddata+0x28c>)
 800170a:	f7ff fce9 	bl	80010e0 <PIN_HIGH>
 800170e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001712:	4852      	ldr	r0, [pc, #328]	; (800185c <writecmddata+0x28c>)
 8001714:	f7ff fce4 	bl	80010e0 <PIN_HIGH>
 8001718:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800171c:	484f      	ldr	r0, [pc, #316]	; (800185c <writecmddata+0x28c>)
 800171e:	f7ff fcdf 	bl	80010e0 <PIN_HIGH>
    WriteData(dat);
 8001722:	88bb      	ldrh	r3, [r7, #4]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	b29b      	uxth	r3, r3
 8001728:	737b      	strb	r3, [r7, #13]
 800172a:	88bb      	ldrh	r3, [r7, #4]
 800172c:	733b      	strb	r3, [r7, #12]
 800172e:	4b4b      	ldr	r3, [pc, #300]	; (800185c <writecmddata+0x28c>)
 8001730:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001734:	619a      	str	r2, [r3, #24]
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <writecmddata+0x290>)
 8001738:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800173c:	619a      	str	r2, [r3, #24]
 800173e:	4b49      	ldr	r3, [pc, #292]	; (8001864 <writecmddata+0x294>)
 8001740:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001744:	619a      	str	r2, [r3, #24]
 8001746:	7b7b      	ldrb	r3, [r7, #13]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4a46      	ldr	r2, [pc, #280]	; (8001864 <writecmddata+0x294>)
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	6193      	str	r3, [r2, #24]
 8001752:	7b7b      	ldrb	r3, [r7, #13]
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800175a:	7b7b      	ldrb	r3, [r7, #13]
 800175c:	015b      	lsls	r3, r3, #5
 800175e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001762:	431a      	orrs	r2, r3
 8001764:	7b7b      	ldrb	r3, [r7, #13]
 8001766:	015b      	lsls	r3, r3, #5
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	431a      	orrs	r2, r3
 800176e:	4b3c      	ldr	r3, [pc, #240]	; (8001860 <writecmddata+0x290>)
 8001770:	619a      	str	r2, [r3, #24]
 8001772:	7b7b      	ldrb	r3, [r7, #13]
 8001774:	105b      	asrs	r3, r3, #1
 8001776:	f003 0208 	and.w	r2, r3, #8
 800177a:	7b7b      	ldrb	r3, [r7, #13]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001782:	431a      	orrs	r2, r3
 8001784:	7b7b      	ldrb	r3, [r7, #13]
 8001786:	105b      	asrs	r3, r3, #1
 8001788:	f003 0320 	and.w	r3, r3, #32
 800178c:	431a      	orrs	r2, r3
 800178e:	7b7b      	ldrb	r3, [r7, #13]
 8001790:	10db      	asrs	r3, r3, #3
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	431a      	orrs	r2, r3
 8001798:	4b30      	ldr	r3, [pc, #192]	; (800185c <writecmddata+0x28c>)
 800179a:	619a      	str	r2, [r3, #24]
 800179c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a0:	482e      	ldr	r0, [pc, #184]	; (800185c <writecmddata+0x28c>)
 80017a2:	f7ff fc8d 	bl	80010c0 <PIN_LOW>
 80017a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017aa:	482c      	ldr	r0, [pc, #176]	; (800185c <writecmddata+0x28c>)
 80017ac:	f7ff fc98 	bl	80010e0 <PIN_HIGH>
 80017b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017b4:	4829      	ldr	r0, [pc, #164]	; (800185c <writecmddata+0x28c>)
 80017b6:	f7ff fc93 	bl	80010e0 <PIN_HIGH>
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <writecmddata+0x28c>)
 80017bc:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80017c0:	619a      	str	r2, [r3, #24]
 80017c2:	4b27      	ldr	r3, [pc, #156]	; (8001860 <writecmddata+0x290>)
 80017c4:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80017c8:	619a      	str	r2, [r3, #24]
 80017ca:	4b26      	ldr	r3, [pc, #152]	; (8001864 <writecmddata+0x294>)
 80017cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017d0:	619a      	str	r2, [r3, #24]
 80017d2:	7b3b      	ldrb	r3, [r7, #12]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4a23      	ldr	r2, [pc, #140]	; (8001864 <writecmddata+0x294>)
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	6193      	str	r3, [r2, #24]
 80017de:	7b3b      	ldrb	r3, [r7, #12]
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80017e6:	7b3b      	ldrb	r3, [r7, #12]
 80017e8:	015b      	lsls	r3, r3, #5
 80017ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ee:	431a      	orrs	r2, r3
 80017f0:	7b3b      	ldrb	r3, [r7, #12]
 80017f2:	015b      	lsls	r3, r3, #5
 80017f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f8:	431a      	orrs	r2, r3
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <writecmddata+0x290>)
 80017fc:	619a      	str	r2, [r3, #24]
 80017fe:	7b3b      	ldrb	r3, [r7, #12]
 8001800:	105b      	asrs	r3, r3, #1
 8001802:	f003 0208 	and.w	r2, r3, #8
 8001806:	7b3b      	ldrb	r3, [r7, #12]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180e:	431a      	orrs	r2, r3
 8001810:	7b3b      	ldrb	r3, [r7, #12]
 8001812:	105b      	asrs	r3, r3, #1
 8001814:	f003 0320 	and.w	r3, r3, #32
 8001818:	431a      	orrs	r2, r3
 800181a:	7b3b      	ldrb	r3, [r7, #12]
 800181c:	10db      	asrs	r3, r3, #3
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	431a      	orrs	r2, r3
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <writecmddata+0x28c>)
 8001826:	619a      	str	r2, [r3, #24]
 8001828:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800182c:	480b      	ldr	r0, [pc, #44]	; (800185c <writecmddata+0x28c>)
 800182e:	f7ff fc47 	bl	80010c0 <PIN_LOW>
 8001832:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001836:	4809      	ldr	r0, [pc, #36]	; (800185c <writecmddata+0x28c>)
 8001838:	f7ff fc52 	bl	80010e0 <PIN_HIGH>
 800183c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001840:	4806      	ldr	r0, [pc, #24]	; (800185c <writecmddata+0x28c>)
 8001842:	f7ff fc4d 	bl	80010e0 <PIN_HIGH>
    CS_IDLE;
 8001846:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800184a:	4803      	ldr	r0, [pc, #12]	; (8001858 <writecmddata+0x288>)
 800184c:	f7ff fc48 	bl	80010e0 <PIN_HIGH>
}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40020400 	.word	0x40020400
 800185c:	40021000 	.word	0x40021000
 8001860:	40021400 	.word	0x40021400
 8001864:	40021800 	.word	0x40021800

08001868 <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	603a      	str	r2, [r7, #0]
 8001872:	80fb      	strh	r3, [r7, #6]
 8001874:	460b      	mov	r3, r1
 8001876:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8001878:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800187c:	484f      	ldr	r0, [pc, #316]	; (80019bc <WriteCmdParamN+0x154>)
 800187e:	f7ff fc1f 	bl	80010c0 <PIN_LOW>
    WriteCmd(cmd);
 8001882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001886:	484e      	ldr	r0, [pc, #312]	; (80019c0 <WriteCmdParamN+0x158>)
 8001888:	f7ff fc1a 	bl	80010c0 <PIN_LOW>
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	0a1b      	lsrs	r3, r3, #8
 8001890:	b29b      	uxth	r3, r3
 8001892:	73fb      	strb	r3, [r7, #15]
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	73bb      	strb	r3, [r7, #14]
 8001898:	4b49      	ldr	r3, [pc, #292]	; (80019c0 <WriteCmdParamN+0x158>)
 800189a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800189e:	619a      	str	r2, [r3, #24]
 80018a0:	4b48      	ldr	r3, [pc, #288]	; (80019c4 <WriteCmdParamN+0x15c>)
 80018a2:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80018a6:	619a      	str	r2, [r3, #24]
 80018a8:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <WriteCmdParamN+0x160>)
 80018aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ae:	619a      	str	r2, [r3, #24]
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4a44      	ldr	r2, [pc, #272]	; (80019c8 <WriteCmdParamN+0x160>)
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	015b      	lsls	r3, r3, #5
 80018c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018cc:	431a      	orrs	r2, r3
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	015b      	lsls	r3, r3, #5
 80018d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d6:	431a      	orrs	r2, r3
 80018d8:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <WriteCmdParamN+0x15c>)
 80018da:	619a      	str	r2, [r3, #24]
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	105b      	asrs	r3, r3, #1
 80018e0:	f003 0208 	and.w	r2, r3, #8
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ec:	431a      	orrs	r2, r3
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	105b      	asrs	r3, r3, #1
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	431a      	orrs	r2, r3
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	10db      	asrs	r3, r3, #3
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	431a      	orrs	r2, r3
 8001902:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <WriteCmdParamN+0x158>)
 8001904:	619a      	str	r2, [r3, #24]
 8001906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800190a:	482d      	ldr	r0, [pc, #180]	; (80019c0 <WriteCmdParamN+0x158>)
 800190c:	f7ff fbd8 	bl	80010c0 <PIN_LOW>
 8001910:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001914:	482a      	ldr	r0, [pc, #168]	; (80019c0 <WriteCmdParamN+0x158>)
 8001916:	f7ff fbe3 	bl	80010e0 <PIN_HIGH>
 800191a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800191e:	4828      	ldr	r0, [pc, #160]	; (80019c0 <WriteCmdParamN+0x158>)
 8001920:	f7ff fbde 	bl	80010e0 <PIN_HIGH>
 8001924:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <WriteCmdParamN+0x158>)
 8001926:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800192a:	619a      	str	r2, [r3, #24]
 800192c:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <WriteCmdParamN+0x15c>)
 800192e:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8001932:	619a      	str	r2, [r3, #24]
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <WriteCmdParamN+0x160>)
 8001936:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800193a:	619a      	str	r2, [r3, #24]
 800193c:	7bbb      	ldrb	r3, [r7, #14]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <WriteCmdParamN+0x160>)
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	6193      	str	r3, [r2, #24]
 8001948:	7bbb      	ldrb	r3, [r7, #14]
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001950:	7bbb      	ldrb	r3, [r7, #14]
 8001952:	015b      	lsls	r3, r3, #5
 8001954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001958:	431a      	orrs	r2, r3
 800195a:	7bbb      	ldrb	r3, [r7, #14]
 800195c:	015b      	lsls	r3, r3, #5
 800195e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001962:	431a      	orrs	r2, r3
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <WriteCmdParamN+0x15c>)
 8001966:	619a      	str	r2, [r3, #24]
 8001968:	7bbb      	ldrb	r3, [r7, #14]
 800196a:	105b      	asrs	r3, r3, #1
 800196c:	f003 0208 	and.w	r2, r3, #8
 8001970:	7bbb      	ldrb	r3, [r7, #14]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001978:	431a      	orrs	r2, r3
 800197a:	7bbb      	ldrb	r3, [r7, #14]
 800197c:	105b      	asrs	r3, r3, #1
 800197e:	f003 0320 	and.w	r3, r3, #32
 8001982:	431a      	orrs	r2, r3
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	10db      	asrs	r3, r3, #3
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	431a      	orrs	r2, r3
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <WriteCmdParamN+0x158>)
 8001990:	619a      	str	r2, [r3, #24]
 8001992:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001996:	480a      	ldr	r0, [pc, #40]	; (80019c0 <WriteCmdParamN+0x158>)
 8001998:	f7ff fb92 	bl	80010c0 <PIN_LOW>
 800199c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019a0:	4807      	ldr	r0, [pc, #28]	; (80019c0 <WriteCmdParamN+0x158>)
 80019a2:	f7ff fb9d 	bl	80010e0 <PIN_HIGH>
 80019a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019aa:	4805      	ldr	r0, [pc, #20]	; (80019c0 <WriteCmdParamN+0x158>)
 80019ac:	f7ff fb98 	bl	80010e0 <PIN_HIGH>
 80019b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <WriteCmdParamN+0x158>)
 80019b6:	f7ff fb93 	bl	80010e0 <PIN_HIGH>
    while (N-- > 0) {
 80019ba:	e0fb      	b.n	8001bb4 <WriteCmdParamN+0x34c>
 80019bc:	40020400 	.word	0x40020400
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40021400 	.word	0x40021400
 80019c8:	40021800 	.word	0x40021800
        uint8_t u8 = *block++;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	603a      	str	r2, [r7, #0]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	737b      	strb	r3, [r7, #13]
        write8(u8);
 80019d6:	4b80      	ldr	r3, [pc, #512]	; (8001bd8 <WriteCmdParamN+0x370>)
 80019d8:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80019dc:	619a      	str	r2, [r3, #24]
 80019de:	4b7f      	ldr	r3, [pc, #508]	; (8001bdc <WriteCmdParamN+0x374>)
 80019e0:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80019e4:	619a      	str	r2, [r3, #24]
 80019e6:	4b7e      	ldr	r3, [pc, #504]	; (8001be0 <WriteCmdParamN+0x378>)
 80019e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ec:	619a      	str	r2, [r3, #24]
 80019ee:	7b7b      	ldrb	r3, [r7, #13]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4a7b      	ldr	r2, [pc, #492]	; (8001be0 <WriteCmdParamN+0x378>)
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	6193      	str	r3, [r2, #24]
 80019fa:	7b7b      	ldrb	r3, [r7, #13]
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001a02:	7b7b      	ldrb	r3, [r7, #13]
 8001a04:	015b      	lsls	r3, r3, #5
 8001a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	7b7b      	ldrb	r3, [r7, #13]
 8001a0e:	015b      	lsls	r3, r3, #5
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	431a      	orrs	r2, r3
 8001a16:	4b71      	ldr	r3, [pc, #452]	; (8001bdc <WriteCmdParamN+0x374>)
 8001a18:	619a      	str	r2, [r3, #24]
 8001a1a:	7b7b      	ldrb	r3, [r7, #13]
 8001a1c:	105b      	asrs	r3, r3, #1
 8001a1e:	f003 0208 	and.w	r2, r3, #8
 8001a22:	7b7b      	ldrb	r3, [r7, #13]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	7b7b      	ldrb	r3, [r7, #13]
 8001a2e:	105b      	asrs	r3, r3, #1
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	431a      	orrs	r2, r3
 8001a36:	7b7b      	ldrb	r3, [r7, #13]
 8001a38:	10db      	asrs	r3, r3, #3
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	4b65      	ldr	r3, [pc, #404]	; (8001bd8 <WriteCmdParamN+0x370>)
 8001a42:	619a      	str	r2, [r3, #24]
 8001a44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a48:	4863      	ldr	r0, [pc, #396]	; (8001bd8 <WriteCmdParamN+0x370>)
 8001a4a:	f7ff fb39 	bl	80010c0 <PIN_LOW>
 8001a4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a52:	4861      	ldr	r0, [pc, #388]	; (8001bd8 <WriteCmdParamN+0x370>)
 8001a54:	f7ff fb44 	bl	80010e0 <PIN_HIGH>
 8001a58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a5c:	485e      	ldr	r0, [pc, #376]	; (8001bd8 <WriteCmdParamN+0x370>)
 8001a5e:	f7ff fb3f 	bl	80010e0 <PIN_HIGH>
        if (N && is8347) {
 8001a62:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 80a4 	beq.w	8001bb4 <WriteCmdParamN+0x34c>
 8001a6c:	4b5d      	ldr	r3, [pc, #372]	; (8001be4 <WriteCmdParamN+0x37c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 809f 	beq.w	8001bb4 <WriteCmdParamN+0x34c>
            cmd++;
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8001a7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a80:	4855      	ldr	r0, [pc, #340]	; (8001bd8 <WriteCmdParamN+0x370>)
 8001a82:	f7ff fb1d 	bl	80010c0 <PIN_LOW>
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	733b      	strb	r3, [r7, #12]
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	72fb      	strb	r3, [r7, #11]
 8001a92:	4b51      	ldr	r3, [pc, #324]	; (8001bd8 <WriteCmdParamN+0x370>)
 8001a94:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001a98:	619a      	str	r2, [r3, #24]
 8001a9a:	4b50      	ldr	r3, [pc, #320]	; (8001bdc <WriteCmdParamN+0x374>)
 8001a9c:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8001aa0:	619a      	str	r2, [r3, #24]
 8001aa2:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <WriteCmdParamN+0x378>)
 8001aa4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aa8:	619a      	str	r2, [r3, #24]
 8001aaa:	7b3b      	ldrb	r3, [r7, #12]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4a4c      	ldr	r2, [pc, #304]	; (8001be0 <WriteCmdParamN+0x378>)
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	6193      	str	r3, [r2, #24]
 8001ab6:	7b3b      	ldrb	r3, [r7, #12]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001abe:	7b3b      	ldrb	r3, [r7, #12]
 8001ac0:	015b      	lsls	r3, r3, #5
 8001ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	7b3b      	ldrb	r3, [r7, #12]
 8001aca:	015b      	lsls	r3, r3, #5
 8001acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	4b42      	ldr	r3, [pc, #264]	; (8001bdc <WriteCmdParamN+0x374>)
 8001ad4:	619a      	str	r2, [r3, #24]
 8001ad6:	7b3b      	ldrb	r3, [r7, #12]
 8001ad8:	105b      	asrs	r3, r3, #1
 8001ada:	f003 0208 	and.w	r2, r3, #8
 8001ade:	7b3b      	ldrb	r3, [r7, #12]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	7b3b      	ldrb	r3, [r7, #12]
 8001aea:	105b      	asrs	r3, r3, #1
 8001aec:	f003 0320 	and.w	r3, r3, #32
 8001af0:	431a      	orrs	r2, r3
 8001af2:	7b3b      	ldrb	r3, [r7, #12]
 8001af4:	10db      	asrs	r3, r3, #3
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	431a      	orrs	r2, r3
 8001afc:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <WriteCmdParamN+0x370>)
 8001afe:	619a      	str	r2, [r3, #24]
 8001b00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b04:	4834      	ldr	r0, [pc, #208]	; (8001bd8 <WriteCmdParamN+0x370>)
 8001b06:	f7ff fadb 	bl	80010c0 <PIN_LOW>
 8001b0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b0e:	4832      	ldr	r0, [pc, #200]	; (8001bd8 <WriteCmdParamN+0x370>)
 8001b10:	f7ff fae6 	bl	80010e0 <PIN_HIGH>
 8001b14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b18:	482f      	ldr	r0, [pc, #188]	; (8001bd8 <WriteCmdParamN+0x370>)
 8001b1a:	f7ff fae1 	bl	80010e0 <PIN_HIGH>
 8001b1e:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <WriteCmdParamN+0x370>)
 8001b20:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001b24:	619a      	str	r2, [r3, #24]
 8001b26:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <WriteCmdParamN+0x374>)
 8001b28:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8001b2c:	619a      	str	r2, [r3, #24]
 8001b2e:	4b2c      	ldr	r3, [pc, #176]	; (8001be0 <WriteCmdParamN+0x378>)
 8001b30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b34:	619a      	str	r2, [r3, #24]
 8001b36:	7afb      	ldrb	r3, [r7, #11]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4a29      	ldr	r2, [pc, #164]	; (8001be0 <WriteCmdParamN+0x378>)
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	6193      	str	r3, [r2, #24]
 8001b42:	7afb      	ldrb	r3, [r7, #11]
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001b4a:	7afb      	ldrb	r3, [r7, #11]
 8001b4c:	015b      	lsls	r3, r3, #5
 8001b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b52:	431a      	orrs	r2, r3
 8001b54:	7afb      	ldrb	r3, [r7, #11]
 8001b56:	015b      	lsls	r3, r3, #5
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <WriteCmdParamN+0x374>)
 8001b60:	619a      	str	r2, [r3, #24]
 8001b62:	7afb      	ldrb	r3, [r7, #11]
 8001b64:	105b      	asrs	r3, r3, #1
 8001b66:	f003 0208 	and.w	r2, r3, #8
 8001b6a:	7afb      	ldrb	r3, [r7, #11]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b72:	431a      	orrs	r2, r3
 8001b74:	7afb      	ldrb	r3, [r7, #11]
 8001b76:	105b      	asrs	r3, r3, #1
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	7afb      	ldrb	r3, [r7, #11]
 8001b80:	10db      	asrs	r3, r3, #3
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	431a      	orrs	r2, r3
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <WriteCmdParamN+0x370>)
 8001b8a:	619a      	str	r2, [r3, #24]
 8001b8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b90:	4811      	ldr	r0, [pc, #68]	; (8001bd8 <WriteCmdParamN+0x370>)
 8001b92:	f7ff fa95 	bl	80010c0 <PIN_LOW>
 8001b96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b9a:	480f      	ldr	r0, [pc, #60]	; (8001bd8 <WriteCmdParamN+0x370>)
 8001b9c:	f7ff faa0 	bl	80010e0 <PIN_HIGH>
 8001ba0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ba4:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <WriteCmdParamN+0x370>)
 8001ba6:	f7ff fa9b 	bl	80010e0 <PIN_HIGH>
 8001baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bae:	480a      	ldr	r0, [pc, #40]	; (8001bd8 <WriteCmdParamN+0x370>)
 8001bb0:	f7ff fa96 	bl	80010e0 <PIN_HIGH>
    while (N-- > 0) {
 8001bb4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	3a01      	subs	r2, #1
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	717a      	strb	r2, [r7, #5]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f73f af03 	bgt.w	80019cc <WriteCmdParamN+0x164>
        }
    }
    CS_IDLE;
 8001bc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bca:	4807      	ldr	r0, [pc, #28]	; (8001be8 <WriteCmdParamN+0x380>)
 8001bcc:	f7ff fa88 	bl	80010e0 <PIN_HIGH>
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40021400 	.word	0x40021400
 8001be0:	40021800 	.word	0x40021800
 8001be4:	20000037 	.word	0x20000037
 8001be8:	40020400 	.word	0x40020400

08001bec <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	4608      	mov	r0, r1
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	71fb      	strb	r3, [r7, #7]
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71bb      	strb	r3, [r7, #6]
 8001c02:	460b      	mov	r3, r1
 8001c04:	717b      	strb	r3, [r7, #5]
 8001c06:	4613      	mov	r3, r2
 8001c08:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8001c0a:	79bb      	ldrb	r3, [r7, #6]
 8001c0c:	733b      	strb	r3, [r7, #12]
 8001c0e:	797b      	ldrb	r3, [r7, #5]
 8001c10:	737b      	strb	r3, [r7, #13]
 8001c12:	793b      	ldrb	r3, [r7, #4]
 8001c14:	73bb      	strb	r3, [r7, #14]
 8001c16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c1a:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	f107 020c 	add.w	r2, r7, #12
 8001c24:	2104      	movs	r1, #4
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fe1e 	bl	8001868 <WriteCmdParamN>
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd90      	pop	{r4, r7, pc}

08001c34 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 8001c44:	e046      	b.n	8001cd4 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	627a      	str	r2, [r7, #36]	; 0x24
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	627a      	str	r2, [r7, #36]	; 0x24
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 8001c5e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001c62:	2b7f      	cmp	r3, #127	; 0x7f
 8001c64:	d108      	bne.n	8001c78 <init_table+0x44>
        {
            delay(len);
 8001c66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fa10 	bl	8001090 <delay>
            len = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001c76:	e024      	b.n	8001cc2 <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001c7e:	e010      	b.n	8001ca2 <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	627a      	str	r2, [r7, #36]	; 0x24
 8001c86:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001c8a:	7819      	ldrb	r1, [r3, #0]
 8001c8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c90:	4413      	add	r3, r2
 8001c92:	460a      	mov	r2, r1
 8001c94:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 8001c98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001ca2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001ca6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d3e8      	bcc.n	8001c80 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 8001cae:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8001cb8:	f107 0208 	add.w	r2, r7, #8
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fdd3 	bl	8001868 <WriteCmdParamN>
        }
        size -= len + 2;
 8001cc2:	887a      	ldrh	r2, [r7, #2]
 8001cc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3b02      	subs	r3, #2
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 8001cd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	dcb4      	bgt.n	8001c46 <init_table+0x12>
    }
}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	; 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 8001cf4:	e01d      	b.n	8001d32 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1c9a      	adds	r2, r3, #2
 8001cfa:	60fa      	str	r2, [r7, #12]
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1c9a      	adds	r2, r3, #2
 8001d04:	60fa      	str	r2, [r7, #12]
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8001d0a:	897b      	ldrh	r3, [r7, #10]
 8001d0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d104      	bne.n	8001d1e <init_table16+0x3a>
            delay(d);
 8001d14:	893b      	ldrh	r3, [r7, #8]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f9ba 	bl	8001090 <delay>
 8001d1c:	e005      	b.n	8001d2a <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 8001d1e:	893a      	ldrh	r2, [r7, #8]
 8001d20:	897b      	ldrh	r3, [r7, #10]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fc53 	bl	80015d0 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8001d2a:	887b      	ldrh	r3, [r7, #2]
 8001d2c:	3b04      	subs	r3, #4
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 8001d32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	dcdd      	bgt.n	8001cf6 <init_table16+0x12>
    }
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <reset>:



void reset(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
    done_reset = 1;
 8001d48:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <reset+0x9c>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8001d4e:	f7ff fb1f 	bl	8001390 <setWriteDir>
    CTL_INIT();
 8001d52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d56:	4823      	ldr	r0, [pc, #140]	; (8001de4 <reset+0xa0>)
 8001d58:	f7ff f9e8 	bl	800112c <PIN_OUTPUT>
 8001d5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d60:	4820      	ldr	r0, [pc, #128]	; (8001de4 <reset+0xa0>)
 8001d62:	f7ff f9e3 	bl	800112c <PIN_OUTPUT>
 8001d66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d6a:	481e      	ldr	r0, [pc, #120]	; (8001de4 <reset+0xa0>)
 8001d6c:	f7ff f9de 	bl	800112c <PIN_OUTPUT>
 8001d70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d74:	481c      	ldr	r0, [pc, #112]	; (8001de8 <reset+0xa4>)
 8001d76:	f7ff f9d9 	bl	800112c <PIN_OUTPUT>
 8001d7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d7e:	481a      	ldr	r0, [pc, #104]	; (8001de8 <reset+0xa4>)
 8001d80:	f7ff f9d4 	bl	800112c <PIN_OUTPUT>
    CS_IDLE;
 8001d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d88:	4817      	ldr	r0, [pc, #92]	; (8001de8 <reset+0xa4>)
 8001d8a:	f7ff f9a9 	bl	80010e0 <PIN_HIGH>
    RD_IDLE;
 8001d8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d92:	4814      	ldr	r0, [pc, #80]	; (8001de4 <reset+0xa0>)
 8001d94:	f7ff f9a4 	bl	80010e0 <PIN_HIGH>
    WR_IDLE;
 8001d98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d9c:	4811      	ldr	r0, [pc, #68]	; (8001de4 <reset+0xa0>)
 8001d9e:	f7ff f99f 	bl	80010e0 <PIN_HIGH>
    RESET_IDLE;
 8001da2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001da6:	4810      	ldr	r0, [pc, #64]	; (8001de8 <reset+0xa4>)
 8001da8:	f7ff f99a 	bl	80010e0 <PIN_HIGH>
    delay(50);
 8001dac:	2032      	movs	r0, #50	; 0x32
 8001dae:	f7ff f96f 	bl	8001090 <delay>
    RESET_ACTIVE;
 8001db2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001db6:	480c      	ldr	r0, [pc, #48]	; (8001de8 <reset+0xa4>)
 8001db8:	f7ff f982 	bl	80010c0 <PIN_LOW>
    delay(100);
 8001dbc:	2064      	movs	r0, #100	; 0x64
 8001dbe:	f7ff f967 	bl	8001090 <delay>
    RESET_IDLE;
 8001dc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dc6:	4808      	ldr	r0, [pc, #32]	; (8001de8 <reset+0xa4>)
 8001dc8:	f7ff f98a 	bl	80010e0 <PIN_HIGH>
    delay(100);
 8001dcc:	2064      	movs	r0, #100	; 0x64
 8001dce:	f7ff f95f 	bl	8001090 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	20b0      	movs	r0, #176	; 0xb0
 8001dd6:	f7ff fa89 	bl	80012ec <WriteCmdData>
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000036 	.word	0x20000036
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40020400 	.word	0x40020400

08001dec <read16bits>:

static uint16_t read16bits(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8001df2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001df6:	4871      	ldr	r0, [pc, #452]	; (8001fbc <read16bits+0x1d0>)
 8001df8:	f7ff f972 	bl	80010e0 <PIN_HIGH>
 8001dfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e00:	486e      	ldr	r0, [pc, #440]	; (8001fbc <read16bits+0x1d0>)
 8001e02:	f7ff f95d 	bl	80010c0 <PIN_LOW>
 8001e06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e0a:	486c      	ldr	r0, [pc, #432]	; (8001fbc <read16bits+0x1d0>)
 8001e0c:	f7ff f958 	bl	80010c0 <PIN_LOW>
 8001e10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e14:	4869      	ldr	r0, [pc, #420]	; (8001fbc <read16bits+0x1d0>)
 8001e16:	f7ff f953 	bl	80010c0 <PIN_LOW>
 8001e1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e1e:	4867      	ldr	r0, [pc, #412]	; (8001fbc <read16bits+0x1d0>)
 8001e20:	f7ff f94e 	bl	80010c0 <PIN_LOW>
 8001e24:	4b66      	ldr	r3, [pc, #408]	; (8001fc0 <read16bits+0x1d4>)
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	085b      	lsrs	r3, r3, #1
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	4b64      	ldr	r3, [pc, #400]	; (8001fc4 <read16bits+0x1d8>)
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	4313      	orrs	r3, r2
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b5f      	ldr	r3, [pc, #380]	; (8001fc4 <read16bits+0x1d8>)
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	095b      	lsrs	r3, r3, #5
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	4313      	orrs	r3, r2
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	4b5b      	ldr	r3, [pc, #364]	; (8001fc4 <read16bits+0x1d8>)
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4313      	orrs	r3, r2
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	4b54      	ldr	r3, [pc, #336]	; (8001fbc <read16bits+0x1d0>)
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b4f      	ldr	r3, [pc, #316]	; (8001fbc <read16bits+0x1d0>)
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	085b      	lsrs	r3, r3, #1
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	4b4b      	ldr	r3, [pc, #300]	; (8001fbc <read16bits+0x1d0>)
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	4b46      	ldr	r3, [pc, #280]	; (8001fbc <read16bits+0x1d0>)
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	80fb      	strh	r3, [r7, #6]
 8001eb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eba:	4840      	ldr	r0, [pc, #256]	; (8001fbc <read16bits+0x1d0>)
 8001ebc:	f7ff f910 	bl	80010e0 <PIN_HIGH>
 8001ec0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ec4:	483d      	ldr	r0, [pc, #244]	; (8001fbc <read16bits+0x1d0>)
 8001ec6:	f7ff f90b 	bl	80010e0 <PIN_HIGH>
    READ_8(lo);
 8001eca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ece:	483b      	ldr	r0, [pc, #236]	; (8001fbc <read16bits+0x1d0>)
 8001ed0:	f7ff f906 	bl	80010e0 <PIN_HIGH>
 8001ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed8:	4838      	ldr	r0, [pc, #224]	; (8001fbc <read16bits+0x1d0>)
 8001eda:	f7ff f8f1 	bl	80010c0 <PIN_LOW>
 8001ede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee2:	4836      	ldr	r0, [pc, #216]	; (8001fbc <read16bits+0x1d0>)
 8001ee4:	f7ff f8ec 	bl	80010c0 <PIN_LOW>
 8001ee8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eec:	4833      	ldr	r0, [pc, #204]	; (8001fbc <read16bits+0x1d0>)
 8001eee:	f7ff f8e7 	bl	80010c0 <PIN_LOW>
 8001ef2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ef6:	4831      	ldr	r0, [pc, #196]	; (8001fbc <read16bits+0x1d0>)
 8001ef8:	f7ff f8e2 	bl	80010c0 <PIN_LOW>
 8001efc:	4b30      	ldr	r3, [pc, #192]	; (8001fc0 <read16bits+0x1d4>)
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	085b      	lsrs	r3, r3, #1
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4b2e      	ldr	r3, [pc, #184]	; (8001fc4 <read16bits+0x1d8>)
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	0a1b      	lsrs	r3, r3, #8
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <read16bits+0x1d8>)
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	095b      	lsrs	r3, r3, #5
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <read16bits+0x1d8>)
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <read16bits+0x1d0>)
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <read16bits+0x1d0>)
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	085b      	lsrs	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f003 0320 	and.w	r3, r3, #32
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	4313      	orrs	r3, r2
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <read16bits+0x1d0>)
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <read16bits+0x1d0>)
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	717b      	strb	r3, [r7, #5]
 8001f8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f92:	480a      	ldr	r0, [pc, #40]	; (8001fbc <read16bits+0x1d0>)
 8001f94:	f7ff f8a4 	bl	80010e0 <PIN_HIGH>
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4807      	ldr	r0, [pc, #28]	; (8001fbc <read16bits+0x1d0>)
 8001f9e:	f7ff f89f 	bl	80010e0 <PIN_HIGH>
    return (ret << 8) | lo;
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	797b      	ldrb	r3, [r7, #5]
 8001faa:	b21b      	sxth	r3, r3
 8001fac:	4313      	orrs	r3, r2
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	b29b      	uxth	r3, r3
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40021800 	.word	0x40021800
 8001fc4:	40021400 	.word	0x40021400

08001fc8 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	460a      	mov	r2, r1
 8001fd2:	80fb      	strh	r3, [r7, #6]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8001fd8:	4b64      	ldr	r3, [pc, #400]	; (800216c <readReg+0x1a4>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <readReg+0x1c>
        reset();
 8001fe0:	f7ff feb0 	bl	8001d44 <reset>
    CS_ACTIVE;
 8001fe4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fe8:	4861      	ldr	r0, [pc, #388]	; (8002170 <readReg+0x1a8>)
 8001fea:	f7ff f869 	bl	80010c0 <PIN_LOW>
    WriteCmd(reg);
 8001fee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ff2:	4860      	ldr	r0, [pc, #384]	; (8002174 <readReg+0x1ac>)
 8001ff4:	f7ff f864 	bl	80010c0 <PIN_LOW>
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	73bb      	strb	r3, [r7, #14]
 8002004:	4b5b      	ldr	r3, [pc, #364]	; (8002174 <readReg+0x1ac>)
 8002006:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800200a:	619a      	str	r2, [r3, #24]
 800200c:	4b5a      	ldr	r3, [pc, #360]	; (8002178 <readReg+0x1b0>)
 800200e:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002012:	619a      	str	r2, [r3, #24]
 8002014:	4b59      	ldr	r3, [pc, #356]	; (800217c <readReg+0x1b4>)
 8002016:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800201a:	619a      	str	r2, [r3, #24]
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4a56      	ldr	r2, [pc, #344]	; (800217c <readReg+0x1b4>)
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	015b      	lsls	r3, r3, #5
 8002034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002038:	431a      	orrs	r2, r3
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	015b      	lsls	r3, r3, #5
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	431a      	orrs	r2, r3
 8002044:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <readReg+0x1b0>)
 8002046:	619a      	str	r2, [r3, #24]
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	105b      	asrs	r3, r3, #1
 800204c:	f003 0208 	and.w	r2, r3, #8
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002058:	431a      	orrs	r2, r3
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	105b      	asrs	r3, r3, #1
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	431a      	orrs	r2, r3
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	10db      	asrs	r3, r3, #3
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	431a      	orrs	r2, r3
 800206e:	4b41      	ldr	r3, [pc, #260]	; (8002174 <readReg+0x1ac>)
 8002070:	619a      	str	r2, [r3, #24]
 8002072:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002076:	483f      	ldr	r0, [pc, #252]	; (8002174 <readReg+0x1ac>)
 8002078:	f7ff f822 	bl	80010c0 <PIN_LOW>
 800207c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002080:	483c      	ldr	r0, [pc, #240]	; (8002174 <readReg+0x1ac>)
 8002082:	f7ff f82d 	bl	80010e0 <PIN_HIGH>
 8002086:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800208a:	483a      	ldr	r0, [pc, #232]	; (8002174 <readReg+0x1ac>)
 800208c:	f7ff f828 	bl	80010e0 <PIN_HIGH>
 8002090:	4b38      	ldr	r3, [pc, #224]	; (8002174 <readReg+0x1ac>)
 8002092:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002096:	619a      	str	r2, [r3, #24]
 8002098:	4b37      	ldr	r3, [pc, #220]	; (8002178 <readReg+0x1b0>)
 800209a:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800209e:	619a      	str	r2, [r3, #24]
 80020a0:	4b36      	ldr	r3, [pc, #216]	; (800217c <readReg+0x1b4>)
 80020a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020a6:	619a      	str	r2, [r3, #24]
 80020a8:	7bbb      	ldrb	r3, [r7, #14]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4a33      	ldr	r2, [pc, #204]	; (800217c <readReg+0x1b4>)
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	7bbb      	ldrb	r3, [r7, #14]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80020bc:	7bbb      	ldrb	r3, [r7, #14]
 80020be:	015b      	lsls	r3, r3, #5
 80020c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c4:	431a      	orrs	r2, r3
 80020c6:	7bbb      	ldrb	r3, [r7, #14]
 80020c8:	015b      	lsls	r3, r3, #5
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	431a      	orrs	r2, r3
 80020d0:	4b29      	ldr	r3, [pc, #164]	; (8002178 <readReg+0x1b0>)
 80020d2:	619a      	str	r2, [r3, #24]
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	105b      	asrs	r3, r3, #1
 80020d8:	f003 0208 	and.w	r2, r3, #8
 80020dc:	7bbb      	ldrb	r3, [r7, #14]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e4:	431a      	orrs	r2, r3
 80020e6:	7bbb      	ldrb	r3, [r7, #14]
 80020e8:	105b      	asrs	r3, r3, #1
 80020ea:	f003 0320 	and.w	r3, r3, #32
 80020ee:	431a      	orrs	r2, r3
 80020f0:	7bbb      	ldrb	r3, [r7, #14]
 80020f2:	10db      	asrs	r3, r3, #3
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	431a      	orrs	r2, r3
 80020fa:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <readReg+0x1ac>)
 80020fc:	619a      	str	r2, [r3, #24]
 80020fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002102:	481c      	ldr	r0, [pc, #112]	; (8002174 <readReg+0x1ac>)
 8002104:	f7fe ffdc 	bl	80010c0 <PIN_LOW>
 8002108:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800210c:	4819      	ldr	r0, [pc, #100]	; (8002174 <readReg+0x1ac>)
 800210e:	f7fe ffe7 	bl	80010e0 <PIN_HIGH>
 8002112:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002116:	4817      	ldr	r0, [pc, #92]	; (8002174 <readReg+0x1ac>)
 8002118:	f7fe ffe2 	bl	80010e0 <PIN_HIGH>
 800211c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002120:	4814      	ldr	r0, [pc, #80]	; (8002174 <readReg+0x1ac>)
 8002122:	f7fe ffdd 	bl	80010e0 <PIN_HIGH>
    setReadDir();
 8002126:	f7ff f907 	bl	8001338 <setReadDir>
    delay(1);    //1us should be adequate
 800212a:	2001      	movs	r0, #1
 800212c:	f7fe ffb0 	bl	8001090 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8002130:	f7ff fe5c 	bl	8001dec <read16bits>
 8002134:	4603      	mov	r3, r0
 8002136:	81bb      	strh	r3, [r7, #12]
 8002138:	797b      	ldrb	r3, [r7, #5]
 800213a:	3b01      	subs	r3, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	717b      	strb	r3, [r7, #5]
 8002140:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002144:	2b00      	cmp	r3, #0
 8002146:	daf3      	bge.n	8002130 <readReg+0x168>
    RD_IDLE;
 8002148:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800214c:	4809      	ldr	r0, [pc, #36]	; (8002174 <readReg+0x1ac>)
 800214e:	f7fe ffc7 	bl	80010e0 <PIN_HIGH>
    CS_IDLE;
 8002152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002156:	4806      	ldr	r0, [pc, #24]	; (8002170 <readReg+0x1a8>)
 8002158:	f7fe ffc2 	bl	80010e0 <PIN_HIGH>
    setWriteDir();
 800215c:	f7ff f918 	bl	8001390 <setWriteDir>
    return ret;
 8002160:	89bb      	ldrh	r3, [r7, #12]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000036 	.word	0x20000036
 8002170:	40020400 	.word	0x40020400
 8002174:	40021000 	.word	0x40021000
 8002178:	40021400 	.word	0x40021400
 800217c:	40021800 	.word	0x40021800

08002180 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff1a 	bl	8001fc8 <readReg>
 8002194:	4603      	mov	r3, r0
 8002196:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	2101      	movs	r1, #1
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff13 	bl	8001fc8 <readReg>
 80021a2:	4603      	mov	r3, r0
 80021a4:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 80021a6:	89fb      	ldrh	r3, [r7, #14]
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff feff 	bl	8001fc8 <readReg>
 80021ca:	4603      	mov	r3, r0
 80021cc:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	2101      	movs	r1, #1
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fef8 	bl	8001fc8 <readReg>
 80021d8:	4603      	mov	r3, r0
 80021da:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	2102      	movs	r1, #2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fef1 	bl	8001fc8 <readReg>
 80021e6:	4603      	mov	r3, r0
 80021e8:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 80021ea:	89fb      	ldrh	r3, [r7, #14]
 80021ec:	061b      	lsls	r3, r3, #24
 80021ee:	89ba      	ldrh	r2, [r7, #12]
 80021f0:	0212      	lsls	r2, r2, #8
 80021f2:	4313      	orrs	r3, r2
 80021f4:	897a      	ldrh	r2, [r7, #10]
 80021f6:	0a12      	lsrs	r2, r2, #8
 80021f8:	b292      	uxth	r2, r2
 80021fa:	4313      	orrs	r3, r2
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <tft_init>:


void tft_init(uint16_t ID)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 8002216:	4bc4      	ldr	r3, [pc, #784]	; (8002528 <tft_init+0x324>)
 8002218:	2200      	movs	r2, #0
 800221a:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 800221c:	4ac3      	ldr	r2, [pc, #780]	; (800252c <tft_init+0x328>)
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	8013      	strh	r3, [r2, #0]
 8002222:	4bc2      	ldr	r3, [pc, #776]	; (800252c <tft_init+0x328>)
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	f249 0290 	movw	r2, #37008	; 0x9090
 800222a:	4293      	cmp	r3, r2
 800222c:	f000 8164 	beq.w	80024f8 <tft_init+0x2f4>
 8002230:	f249 0290 	movw	r2, #37008	; 0x9090
 8002234:	4293      	cmp	r3, r2
 8002236:	dc7f      	bgt.n	8002338 <tft_init+0x134>
 8002238:	f244 7247 	movw	r2, #18247	; 0x4747
 800223c:	4293      	cmp	r3, r2
 800223e:	f000 8145 	beq.w	80024cc <tft_init+0x2c8>
 8002242:	f244 7247 	movw	r2, #18247	; 0x4747
 8002246:	4293      	cmp	r3, r2
 8002248:	dc34      	bgt.n	80022b4 <tft_init+0xb0>
 800224a:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 800224e:	f000 8104 	beq.w	800245a <tft_init+0x256>
 8002252:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8002256:	dc13      	bgt.n	8002280 <tft_init+0x7c>
 8002258:	2b99      	cmp	r3, #153	; 0x99
 800225a:	f000 8181 	beq.w	8002560 <tft_init+0x35c>
 800225e:	2b99      	cmp	r3, #153	; 0x99
 8002260:	dc03      	bgt.n	800226a <tft_init+0x66>
 8002262:	2b01      	cmp	r3, #1
 8002264:	f000 8191 	beq.w	800258a <tft_init+0x386>
 8002268:	e268      	b.n	800273c <tft_init+0x538>
 800226a:	f241 5205 	movw	r2, #5381	; 0x1505
 800226e:	4293      	cmp	r3, r2
 8002270:	f000 8195 	beq.w	800259e <tft_init+0x39a>
 8002274:	f241 5211 	movw	r2, #5393	; 0x1511
 8002278:	4293      	cmp	r3, r2
 800227a:	f000 80da 	beq.w	8002432 <tft_init+0x22e>
 800227e:	e25d      	b.n	800273c <tft_init+0x538>
 8002280:	f241 5281 	movw	r2, #5505	; 0x1581
 8002284:	4293      	cmp	r3, r2
 8002286:	f000 81f4 	beq.w	8002672 <tft_init+0x46e>
 800228a:	f241 5281 	movw	r2, #5505	; 0x1581
 800228e:	4293      	cmp	r3, r2
 8002290:	dc05      	bgt.n	800229e <tft_init+0x9a>
 8002292:	f241 5226 	movw	r2, #5414	; 0x1526
 8002296:	4293      	cmp	r3, r2
 8002298:	f000 80e8 	beq.w	800246c <tft_init+0x268>
 800229c:	e24e      	b.n	800273c <tft_init+0x538>
 800229e:	f241 6202 	movw	r2, #5634	; 0x1602
 80022a2:	4293      	cmp	r3, r2
 80022a4:	f000 81af 	beq.w	8002606 <tft_init+0x402>
 80022a8:	f242 0253 	movw	r2, #8275	; 0x2053
 80022ac:	4293      	cmp	r3, r2
 80022ae:	f000 81b3 	beq.w	8002618 <tft_init+0x414>
 80022b2:	e243      	b.n	800273c <tft_init+0x538>
 80022b4:	f247 5275 	movw	r2, #30069	; 0x7575
 80022b8:	4293      	cmp	r3, r2
 80022ba:	f000 810c 	beq.w	80024d6 <tft_init+0x2d2>
 80022be:	f247 5275 	movw	r2, #30069	; 0x7575
 80022c2:	4293      	cmp	r3, r2
 80022c4:	dc19      	bgt.n	80022fa <tft_init+0xf6>
 80022c6:	f245 4208 	movw	r2, #21512	; 0x5408
 80022ca:	4293      	cmp	r3, r2
 80022cc:	f000 8162 	beq.w	8002594 <tft_init+0x390>
 80022d0:	f245 4208 	movw	r2, #21512	; 0x5408
 80022d4:	4293      	cmp	r3, r2
 80022d6:	dc05      	bgt.n	80022e4 <tft_init+0xe0>
 80022d8:	f245 3210 	movw	r2, #21264	; 0x5310
 80022dc:	4293      	cmp	r3, r2
 80022de:	f000 80ce 	beq.w	800247e <tft_init+0x27a>
 80022e2:	e22b      	b.n	800273c <tft_init+0x538>
 80022e4:	f246 7267 	movw	r2, #26471	; 0x6767
 80022e8:	4293      	cmp	r3, r2
 80022ea:	f000 80f4 	beq.w	80024d6 <tft_init+0x2d2>
 80022ee:	f646 0209 	movw	r2, #26633	; 0x6809
 80022f2:	4293      	cmp	r3, r2
 80022f4:	f000 815e 	beq.w	80025b4 <tft_init+0x3b0>
 80022f8:	e220      	b.n	800273c <tft_init+0x538>
 80022fa:	f247 7296 	movw	r2, #30614	; 0x7796
 80022fe:	4293      	cmp	r3, r2
 8002300:	f000 81e8 	beq.w	80026d4 <tft_init+0x4d0>
 8002304:	f247 7296 	movw	r2, #30614	; 0x7796
 8002308:	4293      	cmp	r3, r2
 800230a:	dc0a      	bgt.n	8002322 <tft_init+0x11e>
 800230c:	f247 7289 	movw	r2, #30601	; 0x7789
 8002310:	4293      	cmp	r3, r2
 8002312:	f000 80c9 	beq.w	80024a8 <tft_init+0x2a4>
 8002316:	f247 7293 	movw	r2, #30611	; 0x7793
 800231a:	4293      	cmp	r3, r2
 800231c:	f000 81ff 	beq.w	800271e <tft_init+0x51a>
 8002320:	e20c      	b.n	800273c <tft_init+0x538>
 8002322:	f248 0231 	movw	r2, #32817	; 0x8031
 8002326:	4293      	cmp	r3, r2
 8002328:	f000 80c7 	beq.w	80024ba <tft_init+0x2b6>
 800232c:	f248 3257 	movw	r2, #33623	; 0x8357
 8002330:	4293      	cmp	r3, r2
 8002332:	f000 80dc 	beq.w	80024ee <tft_init+0x2ea>
 8002336:	e201      	b.n	800273c <tft_init+0x538>
 8002338:	f249 3240 	movw	r2, #37696	; 0x9340
 800233c:	4293      	cmp	r3, r2
 800233e:	f000 818a 	beq.w	8002656 <tft_init+0x452>
 8002342:	f249 3240 	movw	r2, #37696	; 0x9340
 8002346:	4293      	cmp	r3, r2
 8002348:	dc3c      	bgt.n	80023c4 <tft_init+0x1c0>
 800234a:	f249 3228 	movw	r2, #37672	; 0x9328
 800234e:	4293      	cmp	r3, r2
 8002350:	f000 8135 	beq.w	80025be <tft_init+0x3ba>
 8002354:	f249 3228 	movw	r2, #37672	; 0x9328
 8002358:	4293      	cmp	r3, r2
 800235a:	dc19      	bgt.n	8002390 <tft_init+0x18c>
 800235c:	f249 3220 	movw	r2, #37664	; 0x9320
 8002360:	4293      	cmp	r3, r2
 8002362:	f000 811c 	beq.w	800259e <tft_init+0x39a>
 8002366:	f249 3220 	movw	r2, #37664	; 0x9320
 800236a:	4293      	cmp	r3, r2
 800236c:	dc05      	bgt.n	800237a <tft_init+0x176>
 800236e:	f249 3202 	movw	r2, #37634	; 0x9302
 8002372:	4293      	cmp	r3, r2
 8002374:	f000 815a 	beq.w	800262c <tft_init+0x428>
 8002378:	e1e0      	b.n	800273c <tft_init+0x538>
 800237a:	f249 3225 	movw	r2, #37669	; 0x9325
 800237e:	4293      	cmp	r3, r2
 8002380:	f000 811d 	beq.w	80025be <tft_init+0x3ba>
 8002384:	f249 3227 	movw	r2, #37671	; 0x9327
 8002388:	4293      	cmp	r3, r2
 800238a:	f000 8128 	beq.w	80025de <tft_init+0x3da>
 800238e:	e1d5      	b.n	800273c <tft_init+0x538>
 8002390:	f249 3231 	movw	r2, #37681	; 0x9331
 8002394:	4293      	cmp	r3, r2
 8002396:	f000 8117 	beq.w	80025c8 <tft_init+0x3c4>
 800239a:	f249 3231 	movw	r2, #37681	; 0x9331
 800239e:	4293      	cmp	r3, r2
 80023a0:	dc05      	bgt.n	80023ae <tft_init+0x1aa>
 80023a2:	f249 3229 	movw	r2, #37673	; 0x9329
 80023a6:	4293      	cmp	r3, r2
 80023a8:	f000 814a 	beq.w	8002640 <tft_init+0x43c>
 80023ac:	e1c6      	b.n	800273c <tft_init+0x538>
 80023ae:	f249 3235 	movw	r2, #37685	; 0x9335
 80023b2:	4293      	cmp	r3, r2
 80023b4:	f000 8108 	beq.w	80025c8 <tft_init+0x3c4>
 80023b8:	f249 3238 	movw	r2, #37688	; 0x9338
 80023bc:	4293      	cmp	r3, r2
 80023be:	f000 813a 	beq.w	8002636 <tft_init+0x432>
 80023c2:	e1bb      	b.n	800273c <tft_init+0x538>
 80023c4:	f249 4288 	movw	r2, #38024	; 0x9488
 80023c8:	4293      	cmp	r3, r2
 80023ca:	dc14      	bgt.n	80023f6 <tft_init+0x1f2>
 80023cc:	f249 4287 	movw	r2, #38023	; 0x9487
 80023d0:	4293      	cmp	r3, r2
 80023d2:	f280 8184 	bge.w	80026de <tft_init+0x4da>
 80023d6:	f249 4281 	movw	r2, #38017	; 0x9481
 80023da:	4293      	cmp	r3, r2
 80023dc:	f000 814e 	beq.w	800267c <tft_init+0x478>
 80023e0:	f249 4286 	movw	r2, #38022	; 0x9486
 80023e4:	4293      	cmp	r3, r2
 80023e6:	f000 8160 	beq.w	80026aa <tft_init+0x4a6>
 80023ea:	f249 3241 	movw	r2, #37697	; 0x9341
 80023ee:	4293      	cmp	r3, r2
 80023f0:	f000 8136 	beq.w	8002660 <tft_init+0x45c>
 80023f4:	e1a2      	b.n	800273c <tft_init+0x538>
 80023f6:	f24b 5205 	movw	r2, #46341	; 0xb505
 80023fa:	4293      	cmp	r3, r2
 80023fc:	f000 8186 	beq.w	800270c <tft_init+0x508>
 8002400:	f24b 5205 	movw	r2, #46341	; 0xb505
 8002404:	4293      	cmp	r3, r2
 8002406:	dc09      	bgt.n	800241c <tft_init+0x218>
 8002408:	f249 5295 	movw	r2, #38293	; 0x9595
 800240c:	4293      	cmp	r3, r2
 800240e:	d062      	beq.n	80024d6 <tft_init+0x2d2>
 8002410:	f64a 4211 	movw	r2, #44049	; 0xac11
 8002414:	4293      	cmp	r3, r2
 8002416:	f000 8104 	beq.w	8002622 <tft_init+0x41e>
 800241a:	e18f      	b.n	800273c <tft_init+0x538>
 800241c:	f24b 5209 	movw	r2, #46345	; 0xb509
 8002420:	4293      	cmp	r3, r2
 8002422:	f000 817c 	beq.w	800271e <tft_init+0x51a>
 8002426:	f24c 5205 	movw	r2, #50437	; 0xc505
 800242a:	4293      	cmp	r3, r2
 800242c:	f000 816e 	beq.w	800270c <tft_init+0x508>
 8002430:	e184      	b.n	800273c <tft_init+0x538>
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8002432:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <tft_init+0x32c>)
 8002434:	2203      	movs	r2, #3
 8002436:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 8002438:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <tft_init+0x330>)
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	2303      	movs	r3, #3
 800243e:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002440:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <tft_init+0x334>)
 8002442:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800244a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800244c:	4b3b      	ldr	r3, [pc, #236]	; (800253c <tft_init+0x338>)
 800244e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002456:	801a      	strh	r2, [r3, #0]
        break;
 8002458:	e176      	b.n	8002748 <tft_init+0x544>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800245a:	4b35      	ldr	r3, [pc, #212]	; (8002530 <tft_init+0x32c>)
 800245c:	f240 4213 	movw	r2, #1043	; 0x413
 8002460:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 8002462:	4b37      	ldr	r3, [pc, #220]	; (8002540 <tft_init+0x33c>)
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	2306      	movs	r3, #6
 8002468:	837b      	strh	r3, [r7, #26]
        break;
 800246a:	e16d      	b.n	8002748 <tft_init+0x544>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800246c:	4b30      	ldr	r3, [pc, #192]	; (8002530 <tft_init+0x32c>)
 800246e:	f240 4213 	movw	r2, #1043	; 0x413
 8002472:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 8002474:	4b33      	ldr	r3, [pc, #204]	; (8002544 <tft_init+0x340>)
 8002476:	61fb      	str	r3, [r7, #28]
 8002478:	230c      	movs	r3, #12
 800247a:	837b      	strh	r3, [r7, #26]
        break;
 800247c:	e164      	b.n	8002748 <tft_init+0x544>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 800247e:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <tft_init+0x32c>)
 8002480:	f640 6213 	movw	r2, #3603	; 0xe13
 8002484:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 8002486:	4b30      	ldr	r3, [pc, #192]	; (8002548 <tft_init+0x344>)
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	2302      	movs	r3, #2
 800248c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800248e:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <tft_init+0x334>)
 8002490:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002498:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800249a:	4b28      	ldr	r3, [pc, #160]	; (800253c <tft_init+0x338>)
 800249c:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024a4:	801a      	strh	r2, [r3, #0]
        break;
 80024a6:	e14f      	b.n	8002748 <tft_init+0x544>
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80024a8:	4b21      	ldr	r3, [pc, #132]	; (8002530 <tft_init+0x32c>)
 80024aa:	f240 4213 	movw	r2, #1043	; 0x413
 80024ae:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 80024b0:	4b26      	ldr	r3, [pc, #152]	; (800254c <tft_init+0x348>)
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	2341      	movs	r3, #65	; 0x41
 80024b6:	837b      	strh	r3, [r7, #26]
        break;
 80024b8:	e146      	b.n	8002748 <tft_init+0x544>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <tft_init+0x32c>)
 80024bc:	f241 4213 	movw	r2, #5139	; 0x1413
 80024c0:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 80024c2:	4b23      	ldr	r3, [pc, #140]	; (8002550 <tft_init+0x34c>)
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	2312      	movs	r3, #18
 80024c8:	837b      	strh	r3, [r7, #26]
        break;
 80024ca:	e13d      	b.n	8002748 <tft_init+0x544>

#ifdef SUPPORT_8347D
    case 0x4747:       //HX8347-D
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | AUTO_READINC | READ_24BITS;
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <tft_init+0x32c>)
 80024ce:	f241 6213 	movw	r2, #5651	; 0x1613
 80024d2:	801a      	strh	r2, [r3, #0]
		goto common_8347DGI;
 80024d4:	e003      	b.n	80024de <tft_init+0x2da>
    case 0x6767:       //HX8367-A
	case 0x7575:       //HX8347-G
	case 0x9595:       //HX8347-I
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS;
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <tft_init+0x32c>)
 80024d8:	f241 4201 	movw	r2, #5121	; 0x1401
 80024dc:	801a      	strh	r2, [r3, #0]
      common_8347DGI:
		is8347 = 1;
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <tft_init+0x350>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
            TFTLCD_DELAY8, 40,
            0x28, 1, 0x3F,      //GON=1, DTE=1, D=1100

            0x16, 1, 0x18,
        };
        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
 80024e4:	2170      	movs	r1, #112	; 0x70
 80024e6:	481c      	ldr	r0, [pc, #112]	; (8002558 <tft_init+0x354>)
 80024e8:	f7ff fba4 	bl	8001c34 <init_table>
        break;
 80024ec:	e12c      	b.n	8002748 <tft_init+0x544>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <tft_init+0x32c>)
 80024f0:	f241 4203 	movw	r2, #5123	; 0x1403
 80024f4:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 80024f6:	e003      	b.n	8002500 <tft_init+0x2fc>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80024f8:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <tft_init+0x32c>)
 80024fa:	f241 4213 	movw	r2, #5139	; 0x1413
 80024fe:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 8002500:	2301      	movs	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <tft_init+0x358>)
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	2302      	movs	r3, #2
 800250a:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <tft_init+0x334>)
 800250e:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002516:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <tft_init+0x338>)
 800251a:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002522:	801a      	strh	r2, [r3, #0]
        break;
 8002524:	e110      	b.n	8002748 <tft_init+0x544>
 8002526:	bf00      	nop
 8002528:	20000218 	.word	0x20000218
 800252c:	20000216 	.word	0x20000216
 8002530:	20000208 	.word	0x20000208
 8002534:	080080a4 	.word	0x080080a4
 8002538:	08001175 	.word	0x08001175
 800253c:	0800115d 	.word	0x0800115d
 8002540:	080080a8 	.word	0x080080a8
 8002544:	080080b0 	.word	0x080080b0
 8002548:	080080bc 	.word	0x080080bc
 800254c:	080080c0 	.word	0x080080c0
 8002550:	08008104 	.word	0x08008104
 8002554:	20000037 	.word	0x20000037
 8002558:	08008118 	.word	0x08008118
 800255c:	08008188 	.word	0x08008188

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8002560:	4ba3      	ldr	r3, [pc, #652]	; (80027f0 <tft_init+0x5ec>)
 8002562:	f241 4213 	movw	r2, #5139	; 0x1413
 8002566:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 8002568:	4ba2      	ldr	r3, [pc, #648]	; (80027f4 <tft_init+0x5f0>)
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	231d      	movs	r3, #29
 800256e:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002570:	4ba1      	ldr	r3, [pc, #644]	; (80027f8 <tft_init+0x5f4>)
 8002572:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800257a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800257c:	4b9f      	ldr	r3, [pc, #636]	; (80027fc <tft_init+0x5f8>)
 800257e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002586:	801a      	strh	r2, [r3, #0]
        break;
 8002588:	e0de      	b.n	8002748 <tft_init+0x544>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 800258a:	4b99      	ldr	r3, [pc, #612]	; (80027f0 <tft_init+0x5ec>)
 800258c:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8002590:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 8002592:	e008      	b.n	80025a6 <tft_init+0x3a2>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 8002594:	4b96      	ldr	r3, [pc, #600]	; (80027f0 <tft_init+0x5ec>)
 8002596:	f241 0204 	movw	r2, #4100	; 0x1004
 800259a:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 800259c:	e003      	b.n	80025a6 <tft_init+0x3a2>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 800259e:	4b94      	ldr	r3, [pc, #592]	; (80027f0 <tft_init+0x5ec>)
 80025a0:	f241 0204 	movw	r2, #4100	; 0x1004
 80025a4:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 80025a6:	2301      	movs	r3, #1
 80025a8:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 80025aa:	21d8      	movs	r1, #216	; 0xd8
 80025ac:	4894      	ldr	r0, [pc, #592]	; (8002800 <tft_init+0x5fc>)
 80025ae:	f7ff fb99 	bl	8001ce4 <init_table16>
        break;
 80025b2:	e0c9      	b.n	8002748 <tft_init+0x544>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 80025b4:	4b8e      	ldr	r3, [pc, #568]	; (80027f0 <tft_init+0x5ec>)
 80025b6:	f241 1202 	movw	r2, #4354	; 0x1102
 80025ba:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 80025bc:	e008      	b.n	80025d0 <tft_init+0x3cc>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 80025be:	4b8c      	ldr	r3, [pc, #560]	; (80027f0 <tft_init+0x5ec>)
 80025c0:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 80025c4:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 80025c6:	e003      	b.n	80025d0 <tft_init+0x3cc>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 80025c8:	4b89      	ldr	r3, [pc, #548]	; (80027f0 <tft_init+0x5ec>)
 80025ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025ce:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 80025d0:	2301      	movs	r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 80025d4:	21cc      	movs	r1, #204	; 0xcc
 80025d6:	488b      	ldr	r0, [pc, #556]	; (8002804 <tft_init+0x600>)
 80025d8:	f7ff fb84 	bl	8001ce4 <init_table16>
        break;
 80025dc:	e0b4      	b.n	8002748 <tft_init+0x544>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80025de:	4b84      	ldr	r3, [pc, #528]	; (80027f0 <tft_init+0x5ec>)
 80025e0:	f240 4203 	movw	r2, #1027	; 0x403
 80025e4:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 80025e6:	4b88      	ldr	r3, [pc, #544]	; (8002808 <tft_init+0x604>)
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	231e      	movs	r3, #30
 80025ec:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80025ee:	4b82      	ldr	r3, [pc, #520]	; (80027f8 <tft_init+0x5f4>)
 80025f0:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80025f8:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80025fa:	4b80      	ldr	r3, [pc, #512]	; (80027fc <tft_init+0x5f8>)
 80025fc:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	22f0      	movs	r2, #240	; 0xf0
 8002602:	801a      	strh	r2, [r3, #0]
        break;
 8002604:	e0a0      	b.n	8002748 <tft_init+0x544>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 8002606:	4b7a      	ldr	r3, [pc, #488]	; (80027f0 <tft_init+0x5ec>)
 8002608:	f240 4203 	movw	r2, #1027	; 0x403
 800260c:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 800260e:	4b7f      	ldr	r3, [pc, #508]	; (800280c <tft_init+0x608>)
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	2306      	movs	r3, #6
 8002614:	837b      	strh	r3, [r7, #26]
        break;
 8002616:	e097      	b.n	8002748 <tft_init+0x544>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 8002618:	4b75      	ldr	r3, [pc, #468]	; (80027f0 <tft_init+0x5ec>)
 800261a:	f241 4217 	movw	r2, #5143	; 0x1417
 800261e:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8002620:	e012      	b.n	8002648 <tft_init+0x444>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 8002622:	4b73      	ldr	r3, [pc, #460]	; (80027f0 <tft_init+0x5ec>)
 8002624:	f241 4213 	movw	r2, #5139	; 0x1413
 8002628:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800262a:	e00d      	b.n	8002648 <tft_init+0x444>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 800262c:	4b70      	ldr	r3, [pc, #448]	; (80027f0 <tft_init+0x5ec>)
 800262e:	f240 4203 	movw	r2, #1027	; 0x403
 8002632:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8002634:	e008      	b.n	8002648 <tft_init+0x444>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002636:	4b6e      	ldr	r3, [pc, #440]	; (80027f0 <tft_init+0x5ec>)
 8002638:	f240 4213 	movw	r2, #1043	; 0x413
 800263c:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800263e:	e003      	b.n	8002648 <tft_init+0x444>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 8002640:	4b6b      	ldr	r3, [pc, #428]	; (80027f0 <tft_init+0x5ec>)
 8002642:	f241 6203 	movw	r2, #5635	; 0x1603
 8002646:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 8002648:	2301      	movs	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 800264c:	4b70      	ldr	r3, [pc, #448]	; (8002810 <tft_init+0x60c>)
 800264e:	61fb      	str	r3, [r7, #28]
 8002650:	2303      	movs	r3, #3
 8002652:	837b      	strh	r3, [r7, #26]
        break;
 8002654:	e078      	b.n	8002748 <tft_init+0x544>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8002656:	4b66      	ldr	r3, [pc, #408]	; (80027f0 <tft_init+0x5ec>)
 8002658:	f241 4213 	movw	r2, #5139	; 0x1413
 800265c:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 800265e:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002660:	4b63      	ldr	r3, [pc, #396]	; (80027f0 <tft_init+0x5ec>)
 8002662:	f240 4213 	movw	r2, #1043	; 0x413
 8002666:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 8002668:	4b6a      	ldr	r3, [pc, #424]	; (8002814 <tft_init+0x610>)
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	2365      	movs	r3, #101	; 0x65
 800266e:	837b      	strh	r3, [r7, #26]
        break;
 8002670:	e06a      	b.n	8002748 <tft_init+0x544>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 8002672:	4b5f      	ldr	r3, [pc, #380]	; (80027f0 <tft_init+0x5ec>)
 8002674:	f240 4213 	movw	r2, #1043	; 0x413
 8002678:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 800267a:	e003      	b.n	8002684 <tft_init+0x480>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 800267c:	4b5c      	ldr	r3, [pc, #368]	; (80027f0 <tft_init+0x5ec>)
 800267e:	f240 4207 	movw	r2, #1031	; 0x407
 8002682:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 8002684:	2301      	movs	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 8002688:	4b63      	ldr	r3, [pc, #396]	; (8002818 <tft_init+0x614>)
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	2345      	movs	r3, #69	; 0x45
 800268e:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 8002690:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <tft_init+0x5f4>)
 8002692:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800269a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800269c:	4b57      	ldr	r3, [pc, #348]	; (80027fc <tft_init+0x5f8>)
 800269e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026a6:	801a      	strh	r2, [r3, #0]
        break;
 80026a8:	e04e      	b.n	8002748 <tft_init+0x544>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 80026aa:	4b51      	ldr	r3, [pc, #324]	; (80027f0 <tft_init+0x5ec>)
 80026ac:	f240 4203 	movw	r2, #1027	; 0x403
 80026b0:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 80026b2:	4b5a      	ldr	r3, [pc, #360]	; (800281c <tft_init+0x618>)
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	233b      	movs	r3, #59	; 0x3b
 80026b8:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80026ba:	4b4f      	ldr	r3, [pc, #316]	; (80027f8 <tft_init+0x5f4>)
 80026bc:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80026c4:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80026c6:	4b4d      	ldr	r3, [pc, #308]	; (80027fc <tft_init+0x5f8>)
 80026c8:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026d0:	801a      	strh	r2, [r3, #0]
        break;
 80026d2:	e039      	b.n	8002748 <tft_init+0x544>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 80026d4:	4b46      	ldr	r3, [pc, #280]	; (80027f0 <tft_init+0x5ec>)
 80026d6:	f240 4203 	movw	r2, #1027	; 0x403
 80026da:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 80026dc:	e003      	b.n	80026e6 <tft_init+0x4e2>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80026de:	4b44      	ldr	r3, [pc, #272]	; (80027f0 <tft_init+0x5ec>)
 80026e0:	f240 4213 	movw	r2, #1043	; 0x413
 80026e4:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 80026e6:	2301      	movs	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 80026ea:	4b4d      	ldr	r3, [pc, #308]	; (8002820 <tft_init+0x61c>)
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	232b      	movs	r3, #43	; 0x2b
 80026f0:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80026f2:	4b41      	ldr	r3, [pc, #260]	; (80027f8 <tft_init+0x5f4>)
 80026f4:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80026fc:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80026fe:	4b3f      	ldr	r3, [pc, #252]	; (80027fc <tft_init+0x5f8>)
 8002700:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002708:	801a      	strh	r2, [r3, #0]
        break;
 800270a:	e01d      	b.n	8002748 <tft_init+0x544>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 800270c:	4b38      	ldr	r3, [pc, #224]	; (80027f0 <tft_init+0x5ec>)
 800270e:	f241 0208 	movw	r2, #4104	; 0x1008
 8002712:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8002714:	21b0      	movs	r1, #176	; 0xb0
 8002716:	4843      	ldr	r0, [pc, #268]	; (8002824 <tft_init+0x620>)
 8002718:	f7ff fae4 	bl	8001ce4 <init_table16>
        break;
 800271c:	e014      	b.n	8002748 <tft_init+0x544>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 800271e:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <tft_init+0x5ec>)
 8002720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002724:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 8002726:	21c0      	movs	r1, #192	; 0xc0
 8002728:	483f      	ldr	r0, [pc, #252]	; (8002828 <tft_init+0x624>)
 800272a:	f7ff fadb 	bl	8001ce4 <init_table16>
        p16 = (int16_t *) & height;
 800272e:	4b32      	ldr	r3, [pc, #200]	; (80027f8 <tft_init+0x5f4>)
 8002730:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002738:	801a      	strh	r2, [r3, #0]
        break;
 800273a:	e005      	b.n	8002748 <tft_init+0x544>
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 800273c:	4b2f      	ldr	r3, [pc, #188]	; (80027fc <tft_init+0x5f8>)
 800273e:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2200      	movs	r2, #0
 8002744:	801a      	strh	r2, [r3, #0]
        break;
 8002746:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8002748:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <tft_init+0x5ec>)
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	b29a      	uxth	r2, r3
 800275c:	4b33      	ldr	r3, [pc, #204]	; (800282c <tft_init+0x628>)
 800275e:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00d      	beq.n	8002782 <tft_init+0x57e>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 8002766:	2109      	movs	r1, #9
 8002768:	4831      	ldr	r0, [pc, #196]	; (8002830 <tft_init+0x62c>)
 800276a:	f7ff fa63 	bl	8001c34 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 800276e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002772:	4619      	mov	r1, r3
 8002774:	69f8      	ldr	r0, [r7, #28]
 8002776:	f7ff fa5d 	bl	8001c34 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 800277a:	2106      	movs	r1, #6
 800277c:	482d      	ldr	r0, [pc, #180]	; (8002834 <tft_init+0x630>)
 800277e:	f7ff fa59 	bl	8001c34 <init_table>
    }
    setRotation(0);             //PORTRAIT
 8002782:	2000      	movs	r0, #0
 8002784:	f000 ff7a 	bl	800367c <setRotation>
    invertDisplay(false);
 8002788:	2000      	movs	r0, #0
 800278a:	f001 fd5f 	bl	800424c <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 800278e:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <tft_init+0x634>)
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	f249 4288 	movw	r2, #38024	; 0x9488
 8002796:	4293      	cmp	r3, r2
 8002798:	d125      	bne.n	80027e6 <tft_init+0x5e2>
		is555 = 0;
 800279a:	4b28      	ldr	r3, [pc, #160]	; (800283c <tft_init+0x638>)
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 80027a0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80027a4:	2100      	movs	r1, #0
 80027a6:	2000      	movs	r0, #0
 80027a8:	f001 f9e8 	bl	8003b7c <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 80027ac:	2100      	movs	r1, #0
 80027ae:	2000      	movs	r0, #0
 80027b0:	f7fe fd84 	bl	80012bc <readPixel>
 80027b4:	4603      	mov	r3, r0
 80027b6:	461a      	mov	r2, r3
 80027b8:	f64f 731f 	movw	r3, #65311	; 0xff1f
 80027bc:	429a      	cmp	r2, r3
 80027be:	d112      	bne.n	80027e6 <tft_init+0x5e2>
			uint8_t pixfmt = 0x06;
 80027c0:	2306      	movs	r3, #6
 80027c2:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 80027c4:	f107 030f 	add.w	r3, r7, #15
 80027c8:	2201      	movs	r2, #1
 80027ca:	4619      	mov	r1, r3
 80027cc:	203a      	movs	r0, #58	; 0x3a
 80027ce:	f7fe fd9f 	bl	8001310 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <tft_init+0x5ec>)
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	f023 0310 	bic.w	r3, r3, #16
 80027da:	b29a      	uxth	r2, r3
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <tft_init+0x5ec>)
 80027de:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 80027e0:	4b16      	ldr	r3, [pc, #88]	; (800283c <tft_init+0x638>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 80027e6:	bf00      	nop
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000208 	.word	0x20000208
 80027f4:	0800818c 	.word	0x0800818c
 80027f8:	08001175 	.word	0x08001175
 80027fc:	0800115d 	.word	0x0800115d
 8002800:	080081ac 	.word	0x080081ac
 8002804:	08008284 	.word	0x08008284
 8002808:	08008350 	.word	0x08008350
 800280c:	08008370 	.word	0x08008370
 8002810:	08008378 	.word	0x08008378
 8002814:	0800837c 	.word	0x0800837c
 8002818:	080083e4 	.word	0x080083e4
 800281c:	0800842c 	.word	0x0800842c
 8002820:	08008468 	.word	0x08008468
 8002824:	08008494 	.word	0x08008494
 8002828:	08008544 	.word	0x08008544
 800282c:	2000020c 	.word	0x2000020c
 8002830:	08008604 	.word	0x08008604
 8002834:	08008610 	.word	0x08008610
 8002838:	20000216 	.word	0x20000216
 800283c:	20000038 	.word	0x20000038

08002840 <readID>:




uint16_t readID(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 8002846:	2100      	movs	r1, #0
 8002848:	2000      	movs	r0, #0
 800284a:	f7ff fbbd 	bl	8001fc8 <readReg>
 800284e:	4603      	mov	r3, r0
 8002850:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 8002852:	89fb      	ldrh	r3, [r7, #14]
 8002854:	f245 4208 	movw	r2, #21512	; 0x5408
 8002858:	4293      	cmp	r3, r2
 800285a:	d102      	bne.n	8002862 <readID+0x22>
        return 0x5408;
 800285c:	f245 4308 	movw	r3, #21512	; 0x5408
 8002860:	e128      	b.n	8002ab4 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 8002862:	89fb      	ldrh	r3, [r7, #14]
 8002864:	f245 4220 	movw	r2, #21536	; 0x5420
 8002868:	4293      	cmp	r3, r2
 800286a:	d102      	bne.n	8002872 <readID+0x32>
        return 0x5420;
 800286c:	f245 4320 	movw	r3, #21536	; 0x5420
 8002870:	e120      	b.n	8002ab4 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 8002872:	89fb      	ldrh	r3, [r7, #14]
 8002874:	f648 1289 	movw	r2, #35209	; 0x8989
 8002878:	4293      	cmp	r3, r2
 800287a:	d102      	bne.n	8002882 <readID+0x42>
        return 0x1289;
 800287c:	f241 2389 	movw	r3, #4745	; 0x1289
 8002880:	e118      	b.n	8002ab4 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 8002882:	2100      	movs	r1, #0
 8002884:	2067      	movs	r0, #103	; 0x67
 8002886:	f7ff fb9f 	bl	8001fc8 <readReg>
 800288a:	4603      	mov	r3, r0
 800288c:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 800288e:	89fb      	ldrh	r3, [r7, #14]
 8002890:	f244 7247 	movw	r2, #18247	; 0x4747
 8002894:	4293      	cmp	r3, r2
 8002896:	d102      	bne.n	800289e <readID+0x5e>
        return 0x8347;
 8002898:	f248 3347 	movw	r3, #33607	; 0x8347
 800289c:	e10a      	b.n	8002ab4 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 800289e:	20a1      	movs	r0, #161	; 0xa1
 80028a0:	f7ff fc6e 	bl	8002180 <readReg32>
 80028a4:	4603      	mov	r3, r0
 80028a6:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 80028a8:	89fb      	ldrh	r3, [r7, #14]
 80028aa:	f246 1201 	movw	r2, #24833	; 0x6101
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d102      	bne.n	80028b8 <readID+0x78>
        return 0x1963;
 80028b2:	f641 1363 	movw	r3, #6499	; 0x1963
 80028b6:	e0fd      	b.n	8002ab4 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 80028b8:	89fb      	ldrh	r3, [r7, #14]
 80028ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028be:	4293      	cmp	r3, r2
 80028c0:	d102      	bne.n	80028c8 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 80028c2:	f241 5326 	movw	r3, #5414	; 0x1526
 80028c6:	e0f5      	b.n	8002ab4 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 80028c8:	20bf      	movs	r0, #191	; 0xbf
 80028ca:	f7ff fc74 	bl	80021b6 <readReg40>
 80028ce:	4603      	mov	r3, r0
 80028d0:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 80028d2:	89fb      	ldrh	r3, [r7, #14]
 80028d4:	f248 3257 	movw	r2, #33623	; 0x8357
 80028d8:	4293      	cmp	r3, r2
 80028da:	d102      	bne.n	80028e2 <readID+0xa2>
        return 0x8357;
 80028dc:	f248 3357 	movw	r3, #33623	; 0x8357
 80028e0:	e0e8      	b.n	8002ab4 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 80028e2:	89fb      	ldrh	r3, [r7, #14]
 80028e4:	f249 4281 	movw	r2, #38017	; 0x9481
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d102      	bne.n	80028f2 <readID+0xb2>
        return 0x9481;
 80028ec:	f249 4381 	movw	r3, #38017	; 0x9481
 80028f0:	e0e0      	b.n	8002ab4 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 80028f2:	89fb      	ldrh	r3, [r7, #14]
 80028f4:	f241 5211 	movw	r2, #5393	; 0x1511
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d102      	bne.n	8002902 <readID+0xc2>
        return 0x1511;
 80028fc:	f241 5311 	movw	r3, #5393	; 0x1511
 8002900:	e0d8      	b.n	8002ab4 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8002902:	89fb      	ldrh	r3, [r7, #14]
 8002904:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8002908:	d102      	bne.n	8002910 <readID+0xd0>
        return 0x1520;
 800290a:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 800290e:	e0d1      	b.n	8002ab4 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8002910:	89fb      	ldrh	r3, [r7, #14]
 8002912:	f241 5226 	movw	r2, #5414	; 0x1526
 8002916:	4293      	cmp	r3, r2
 8002918:	d102      	bne.n	8002920 <readID+0xe0>
        return 0x1526;
 800291a:	f241 5326 	movw	r3, #5414	; 0x1526
 800291e:	e0c9      	b.n	8002ab4 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8002920:	89fb      	ldrh	r3, [r7, #14]
 8002922:	f241 5281 	movw	r2, #5505	; 0x1581
 8002926:	4293      	cmp	r3, r2
 8002928:	d102      	bne.n	8002930 <readID+0xf0>
        return 0x1581;
 800292a:	f241 5381 	movw	r3, #5505	; 0x1581
 800292e:	e0c1      	b.n	8002ab4 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8002930:	89fb      	ldrh	r3, [r7, #14]
 8002932:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002936:	d102      	bne.n	800293e <readID+0xfe>
        return 0x6814;
 8002938:	f646 0314 	movw	r3, #26644	; 0x6814
 800293c:	e0ba      	b.n	8002ab4 <readID+0x274>
    ret = readReg32(0xD4);
 800293e:	20d4      	movs	r0, #212	; 0xd4
 8002940:	f7ff fc1e 	bl	8002180 <readReg32>
 8002944:	4603      	mov	r3, r0
 8002946:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8002948:	89fb      	ldrh	r3, [r7, #14]
 800294a:	f245 3210 	movw	r2, #21264	; 0x5310
 800294e:	4293      	cmp	r3, r2
 8002950:	d102      	bne.n	8002958 <readID+0x118>
        return 0x5310;
 8002952:	f245 3310 	movw	r3, #21264	; 0x5310
 8002956:	e0ad      	b.n	8002ab4 <readID+0x274>
    ret = readReg32(0xD7);
 8002958:	20d7      	movs	r0, #215	; 0xd7
 800295a:	f7ff fc11 	bl	8002180 <readReg32>
 800295e:	4603      	mov	r3, r0
 8002960:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8002962:	89fb      	ldrh	r3, [r7, #14]
 8002964:	f248 0231 	movw	r2, #32817	; 0x8031
 8002968:	4293      	cmp	r3, r2
 800296a:	d102      	bne.n	8002972 <readID+0x132>
        return 0x8031;
 800296c:	f248 0331 	movw	r3, #32817	; 0x8031
 8002970:	e0a0      	b.n	8002ab4 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8002972:	20ef      	movs	r0, #239	; 0xef
 8002974:	f7ff fc1f 	bl	80021b6 <readReg40>
 8002978:	4603      	mov	r3, r0
 800297a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 800297c:	89fb      	ldrh	r3, [r7, #14]
 800297e:	f249 3227 	movw	r2, #37671	; 0x9327
 8002982:	4293      	cmp	r3, r2
 8002984:	d102      	bne.n	800298c <readID+0x14c>
        return 0x9327;
 8002986:	f249 3327 	movw	r3, #37671	; 0x9327
 800298a:	e093      	b.n	8002ab4 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 800298c:	20fe      	movs	r0, #254	; 0xfe
 800298e:	f7ff fbf7 	bl	8002180 <readReg32>
 8002992:	4603      	mov	r3, r0
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8002998:	89fb      	ldrh	r3, [r7, #14]
 800299a:	f242 0253 	movw	r2, #8275	; 0x2053
 800299e:	4293      	cmp	r3, r2
 80029a0:	d102      	bne.n	80029a8 <readID+0x168>
        return 0x2053;
 80029a2:	f242 0353 	movw	r3, #8275	; 0x2053
 80029a6:	e085      	b.n	8002ab4 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 80029a8:	2004      	movs	r0, #4
 80029aa:	f7ff fbe9 	bl	8002180 <readReg32>
 80029ae:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	0c1b      	lsrs	r3, r3, #16
 80029b4:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d122      	bne.n	8002a06 <readID+0x1c6>
 80029c0:	89fb      	ldrh	r3, [r7, #14]
 80029c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c6:	d11e      	bne.n	8002a06 <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 80029c8:	4a3c      	ldr	r2, [pc, #240]	; (8002abc <readID+0x27c>)
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	4611      	mov	r1, r2
 80029d0:	8019      	strh	r1, [r3, #0]
 80029d2:	3302      	adds	r3, #2
 80029d4:	0c12      	lsrs	r2, r2, #16
 80029d6:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	2203      	movs	r2, #3
 80029dc:	4619      	mov	r1, r3
 80029de:	20b9      	movs	r0, #185	; 0xb9
 80029e0:	f7fe fc96 	bl	8001310 <pushCommand>
        msb = readReg(0xD0,0);
 80029e4:	2100      	movs	r1, #0
 80029e6:	20d0      	movs	r0, #208	; 0xd0
 80029e8:	f7ff faee 	bl	8001fc8 <readReg>
 80029ec:	4603      	mov	r3, r0
 80029ee:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	2b99      	cmp	r3, #153	; 0x99
 80029f4:	d101      	bne.n	80029fa <readID+0x1ba>
 80029f6:	2399      	movs	r3, #153	; 0x99
 80029f8:	e05c      	b.n	8002ab4 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	2b90      	cmp	r3, #144	; 0x90
 80029fe:	d102      	bne.n	8002a06 <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8002a00:	f249 0390 	movw	r3, #37008	; 0x9090
 8002a04:	e056      	b.n	8002ab4 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8002a06:	89fb      	ldrh	r3, [r7, #14]
 8002a08:	f241 5226 	movw	r2, #5414	; 0x1526
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d102      	bne.n	8002a16 <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8002a10:	f241 5326 	movw	r3, #5414	; 0x1526
 8002a14:	e04e      	b.n	8002ab4 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8002a16:	89fb      	ldrh	r3, [r7, #14]
 8002a18:	f648 12f0 	movw	r2, #35312	; 0x89f0
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d102      	bne.n	8002a26 <readID+0x1e6>
        return 0x7735;
 8002a20:	f247 7335 	movw	r3, #30517	; 0x7735
 8002a24:	e046      	b.n	8002ab4 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8002a26:	89fb      	ldrh	r3, [r7, #14]
 8002a28:	f248 5252 	movw	r2, #34130	; 0x8552
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d102      	bne.n	8002a36 <readID+0x1f6>
        return 0x7789;
 8002a30:	f247 7389 	movw	r3, #30601	; 0x7789
 8002a34:	e03e      	b.n	8002ab4 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 8002a36:	89fb      	ldrh	r3, [r7, #14]
 8002a38:	f64a 4211 	movw	r2, #44049	; 0xac11
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d102      	bne.n	8002a46 <readID+0x206>
        return 0xAC11;
 8002a40:	f64a 4311 	movw	r3, #44049	; 0xac11
 8002a44:	e036      	b.n	8002ab4 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 8002a46:	20d3      	movs	r0, #211	; 0xd3
 8002a48:	f7ff fb9a 	bl	8002180 <readReg32>
 8002a4c:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 8002a54:	89fb      	ldrh	r3, [r7, #14]
 8002a56:	f249 1263 	movw	r2, #37219	; 0x9163
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d101      	bne.n	8002a62 <readID+0x222>
 8002a5e:	89fb      	ldrh	r3, [r7, #14]
 8002a60:	e028      	b.n	8002ab4 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8002a62:	20d3      	movs	r0, #211	; 0xd3
 8002a64:	f7ff fb8c 	bl	8002180 <readReg32>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8002a6c:	89fb      	ldrh	r3, [r7, #14]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	2b93      	cmp	r3, #147	; 0x93
 8002a78:	d00b      	beq.n	8002a92 <readID+0x252>
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	2b94      	cmp	r3, #148	; 0x94
 8002a7e:	d008      	beq.n	8002a92 <readID+0x252>
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	2b98      	cmp	r3, #152	; 0x98
 8002a84:	d005      	beq.n	8002a92 <readID+0x252>
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	2b77      	cmp	r3, #119	; 0x77
 8002a8a:	d002      	beq.n	8002a92 <readID+0x252>
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	2b16      	cmp	r3, #22
 8002a90:	d101      	bne.n	8002a96 <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8002a92:	89fb      	ldrh	r3, [r7, #14]
 8002a94:	e00e      	b.n	8002ab4 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 8002a96:	89fb      	ldrh	r3, [r7, #14]
 8002a98:	2bd3      	cmp	r3, #211	; 0xd3
 8002a9a:	d004      	beq.n	8002aa6 <readID+0x266>
 8002a9c:	89fb      	ldrh	r3, [r7, #14]
 8002a9e:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d101      	bne.n	8002aaa <readID+0x26a>
        return ret;             //16-bit write-only bus
 8002aa6:	89fb      	ldrh	r3, [r7, #14]
 8002aa8:	e004      	b.n	8002ab4 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 8002aaa:	2100      	movs	r1, #0
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7ff fa8b 	bl	8001fc8 <readReg>
 8002ab2:	4603      	mov	r3, r0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	080076c0 	.word	0x080076c0

08002ac0 <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b08b      	sub	sp, #44	; 0x2c
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60ba      	str	r2, [r7, #8]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	81fb      	strh	r3, [r7, #14]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	81bb      	strh	r3, [r7, #12]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 8002ad6:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <readGRAM+0x88>)
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 8002adc:	88fa      	ldrh	r2, [r7, #6]
 8002ade:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002ae0:	fb12 f303 	smulbb	r3, r2, r3
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ae8:	2300      	movs	r3, #0
 8002aea:	843b      	strh	r3, [r7, #32]
 8002aec:	2300      	movs	r3, #0
 8002aee:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8002af0:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <readGRAM+0x8c>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d107      	bne.n	8002b08 <readGRAM+0x48>
 8002af8:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <readGRAM+0x90>)
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <readGRAM+0x48>
        _MR = 0x2E;
 8002b04:	232e      	movs	r3, #46	; 0x2e
 8002b06:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <readGRAM+0x94>)
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	f241 6202 	movw	r2, #5634	; 0x1602
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d101      	bne.n	8002b18 <readGRAM+0x58>
 8002b14:	232e      	movs	r3, #46	; 0x2e
 8002b16:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8002b18:	89fa      	ldrh	r2, [r7, #14]
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	b21c      	sxth	r4, r3
 8002b26:	89ba      	ldrh	r2, [r7, #12]
 8002b28:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002b2a:	4413      	add	r3, r2
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	b21b      	sxth	r3, r3
 8002b34:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002b38:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002b3c:	4622      	mov	r2, r4
 8002b3e:	f001 f921 	bl	8003d84 <setAddrWindow>
    while (n > 0) {
 8002b42:	f000 bd74 	b.w	800362e <readGRAM+0xb6e>
 8002b46:	bf00      	nop
 8002b48:	20000206 	.word	0x20000206
 8002b4c:	20000037 	.word	0x20000037
 8002b50:	20000208 	.word	0x20000208
 8002b54:	20000216 	.word	0x20000216
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 8002b58:	4b9d      	ldr	r3, [pc, #628]	; (8002dd0 <readGRAM+0x310>)
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d111      	bne.n	8002b88 <readGRAM+0xc8>
            WriteCmdData(_MC, x + col);
 8002b64:	4b9b      	ldr	r3, [pc, #620]	; (8002dd4 <readGRAM+0x314>)
 8002b66:	8818      	ldrh	r0, [r3, #0]
 8002b68:	89fa      	ldrh	r2, [r7, #14]
 8002b6a:	8bfb      	ldrh	r3, [r7, #30]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	4619      	mov	r1, r3
 8002b72:	f7fe fbbb 	bl	80012ec <WriteCmdData>
            WriteCmdData(_MP, y + row);
 8002b76:	4b98      	ldr	r3, [pc, #608]	; (8002dd8 <readGRAM+0x318>)
 8002b78:	8818      	ldrh	r0, [r3, #0]
 8002b7a:	89ba      	ldrh	r2, [r7, #12]
 8002b7c:	8c3b      	ldrh	r3, [r7, #32]
 8002b7e:	4413      	add	r3, r2
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	4619      	mov	r1, r3
 8002b84:	f7fe fbb2 	bl	80012ec <WriteCmdData>
        }
        CS_ACTIVE;
 8002b88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b8c:	4893      	ldr	r0, [pc, #588]	; (8002ddc <readGRAM+0x31c>)
 8002b8e:	f7fe fa97 	bl	80010c0 <PIN_LOW>
        WriteCmd(_MR);
 8002b92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b96:	4892      	ldr	r0, [pc, #584]	; (8002de0 <readGRAM+0x320>)
 8002b98:	f7fe fa92 	bl	80010c0 <PIN_LOW>
 8002b9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	777b      	strb	r3, [r7, #29]
 8002ba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ba6:	773b      	strb	r3, [r7, #28]
 8002ba8:	4b8d      	ldr	r3, [pc, #564]	; (8002de0 <readGRAM+0x320>)
 8002baa:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002bae:	619a      	str	r2, [r3, #24]
 8002bb0:	4b8c      	ldr	r3, [pc, #560]	; (8002de4 <readGRAM+0x324>)
 8002bb2:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002bb6:	619a      	str	r2, [r3, #24]
 8002bb8:	4b8b      	ldr	r3, [pc, #556]	; (8002de8 <readGRAM+0x328>)
 8002bba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bbe:	619a      	str	r2, [r3, #24]
 8002bc0:	7f7b      	ldrb	r3, [r7, #29]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4a88      	ldr	r2, [pc, #544]	; (8002de8 <readGRAM+0x328>)
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	6193      	str	r3, [r2, #24]
 8002bcc:	7f7b      	ldrb	r3, [r7, #29]
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002bd4:	7f7b      	ldrb	r3, [r7, #29]
 8002bd6:	015b      	lsls	r3, r3, #5
 8002bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	7f7b      	ldrb	r3, [r7, #29]
 8002be0:	015b      	lsls	r3, r3, #5
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	431a      	orrs	r2, r3
 8002be8:	4b7e      	ldr	r3, [pc, #504]	; (8002de4 <readGRAM+0x324>)
 8002bea:	619a      	str	r2, [r3, #24]
 8002bec:	7f7b      	ldrb	r3, [r7, #29]
 8002bee:	105b      	asrs	r3, r3, #1
 8002bf0:	f003 0208 	and.w	r2, r3, #8
 8002bf4:	7f7b      	ldrb	r3, [r7, #29]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	7f7b      	ldrb	r3, [r7, #29]
 8002c00:	105b      	asrs	r3, r3, #1
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	431a      	orrs	r2, r3
 8002c08:	7f7b      	ldrb	r3, [r7, #29]
 8002c0a:	10db      	asrs	r3, r3, #3
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	431a      	orrs	r2, r3
 8002c12:	4b73      	ldr	r3, [pc, #460]	; (8002de0 <readGRAM+0x320>)
 8002c14:	619a      	str	r2, [r3, #24]
 8002c16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c1a:	4871      	ldr	r0, [pc, #452]	; (8002de0 <readGRAM+0x320>)
 8002c1c:	f7fe fa50 	bl	80010c0 <PIN_LOW>
 8002c20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c24:	486e      	ldr	r0, [pc, #440]	; (8002de0 <readGRAM+0x320>)
 8002c26:	f7fe fa5b 	bl	80010e0 <PIN_HIGH>
 8002c2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c2e:	486c      	ldr	r0, [pc, #432]	; (8002de0 <readGRAM+0x320>)
 8002c30:	f7fe fa56 	bl	80010e0 <PIN_HIGH>
 8002c34:	4b6a      	ldr	r3, [pc, #424]	; (8002de0 <readGRAM+0x320>)
 8002c36:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002c3a:	619a      	str	r2, [r3, #24]
 8002c3c:	4b69      	ldr	r3, [pc, #420]	; (8002de4 <readGRAM+0x324>)
 8002c3e:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002c42:	619a      	str	r2, [r3, #24]
 8002c44:	4b68      	ldr	r3, [pc, #416]	; (8002de8 <readGRAM+0x328>)
 8002c46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c4a:	619a      	str	r2, [r3, #24]
 8002c4c:	7f3b      	ldrb	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4a65      	ldr	r2, [pc, #404]	; (8002de8 <readGRAM+0x328>)
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	6193      	str	r3, [r2, #24]
 8002c58:	7f3b      	ldrb	r3, [r7, #28]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002c60:	7f3b      	ldrb	r3, [r7, #28]
 8002c62:	015b      	lsls	r3, r3, #5
 8002c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	7f3b      	ldrb	r3, [r7, #28]
 8002c6c:	015b      	lsls	r3, r3, #5
 8002c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c72:	431a      	orrs	r2, r3
 8002c74:	4b5b      	ldr	r3, [pc, #364]	; (8002de4 <readGRAM+0x324>)
 8002c76:	619a      	str	r2, [r3, #24]
 8002c78:	7f3b      	ldrb	r3, [r7, #28]
 8002c7a:	105b      	asrs	r3, r3, #1
 8002c7c:	f003 0208 	and.w	r2, r3, #8
 8002c80:	7f3b      	ldrb	r3, [r7, #28]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	7f3b      	ldrb	r3, [r7, #28]
 8002c8c:	105b      	asrs	r3, r3, #1
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	431a      	orrs	r2, r3
 8002c94:	7f3b      	ldrb	r3, [r7, #28]
 8002c96:	10db      	asrs	r3, r3, #3
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	4b50      	ldr	r3, [pc, #320]	; (8002de0 <readGRAM+0x320>)
 8002ca0:	619a      	str	r2, [r3, #24]
 8002ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ca6:	484e      	ldr	r0, [pc, #312]	; (8002de0 <readGRAM+0x320>)
 8002ca8:	f7fe fa0a 	bl	80010c0 <PIN_LOW>
 8002cac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cb0:	484b      	ldr	r0, [pc, #300]	; (8002de0 <readGRAM+0x320>)
 8002cb2:	f7fe fa15 	bl	80010e0 <PIN_HIGH>
 8002cb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cba:	4849      	ldr	r0, [pc, #292]	; (8002de0 <readGRAM+0x320>)
 8002cbc:	f7fe fa10 	bl	80010e0 <PIN_HIGH>
 8002cc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cc4:	4846      	ldr	r0, [pc, #280]	; (8002de0 <readGRAM+0x320>)
 8002cc6:	f7fe fa0b 	bl	80010e0 <PIN_HIGH>
        setReadDir();
 8002cca:	f7fe fb35 	bl	8001338 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 8002cce:	4b40      	ldr	r3, [pc, #256]	; (8002dd0 <readGRAM+0x310>)
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f040 816a 	bne.w	8002fb0 <readGRAM+0x4f0>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8002cdc:	4b3c      	ldr	r3, [pc, #240]	; (8002dd0 <readGRAM+0x310>)
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d105      	bne.n	8002cf4 <readGRAM+0x234>
 8002ce8:	4b40      	ldr	r3, [pc, #256]	; (8002dec <readGRAM+0x32c>)
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	f241 2289 	movw	r2, #4745	; 0x1289
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d17d      	bne.n	8002df0 <readGRAM+0x330>
            READ_8(r);
 8002cf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cf8:	4839      	ldr	r0, [pc, #228]	; (8002de0 <readGRAM+0x320>)
 8002cfa:	f7fe f9f1 	bl	80010e0 <PIN_HIGH>
 8002cfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d02:	4837      	ldr	r0, [pc, #220]	; (8002de0 <readGRAM+0x320>)
 8002d04:	f7fe f9dc 	bl	80010c0 <PIN_LOW>
 8002d08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d0c:	4834      	ldr	r0, [pc, #208]	; (8002de0 <readGRAM+0x320>)
 8002d0e:	f7fe f9d7 	bl	80010c0 <PIN_LOW>
 8002d12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d16:	4832      	ldr	r0, [pc, #200]	; (8002de0 <readGRAM+0x320>)
 8002d18:	f7fe f9d2 	bl	80010c0 <PIN_LOW>
 8002d1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d20:	482f      	ldr	r0, [pc, #188]	; (8002de0 <readGRAM+0x320>)
 8002d22:	f7fe f9cd 	bl	80010c0 <PIN_LOW>
 8002d26:	4b30      	ldr	r3, [pc, #192]	; (8002de8 <readGRAM+0x328>)
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	4b2b      	ldr	r3, [pc, #172]	; (8002de4 <readGRAM+0x324>)
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	0a1b      	lsrs	r3, r3, #8
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	4313      	orrs	r3, r2
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <readGRAM+0x324>)
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	4313      	orrs	r3, r2
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	4b22      	ldr	r3, [pc, #136]	; (8002de4 <readGRAM+0x324>)
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	095b      	lsrs	r3, r3, #5
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	4313      	orrs	r3, r2
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <readGRAM+0x320>)
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <readGRAM+0x320>)
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <readGRAM+0x320>)
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	4313      	orrs	r3, r2
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <readGRAM+0x320>)
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	4313      	orrs	r3, r2
 8002db6:	75fb      	strb	r3, [r7, #23]
 8002db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dbc:	4808      	ldr	r0, [pc, #32]	; (8002de0 <readGRAM+0x320>)
 8002dbe:	f7fe f98f 	bl	80010e0 <PIN_HIGH>
 8002dc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dc6:	4806      	ldr	r0, [pc, #24]	; (8002de0 <readGRAM+0x320>)
 8002dc8:	f7fe f98a 	bl	80010e0 <PIN_HIGH>
 8002dcc:	e0f0      	b.n	8002fb0 <readGRAM+0x4f0>
 8002dce:	bf00      	nop
 8002dd0:	20000208 	.word	0x20000208
 8002dd4:	20000210 	.word	0x20000210
 8002dd8:	2000020e 	.word	0x2000020e
 8002ddc:	40020400 	.word	0x40020400
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40021400 	.word	0x40021400
 8002de8:	40021800 	.word	0x40021800
 8002dec:	20000216 	.word	0x20000216
        } else {
            READ_16(dummy);
 8002df0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002df4:	48a8      	ldr	r0, [pc, #672]	; (8003098 <readGRAM+0x5d8>)
 8002df6:	f7fe f973 	bl	80010e0 <PIN_HIGH>
 8002dfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dfe:	48a6      	ldr	r0, [pc, #664]	; (8003098 <readGRAM+0x5d8>)
 8002e00:	f7fe f95e 	bl	80010c0 <PIN_LOW>
 8002e04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e08:	48a3      	ldr	r0, [pc, #652]	; (8003098 <readGRAM+0x5d8>)
 8002e0a:	f7fe f959 	bl	80010c0 <PIN_LOW>
 8002e0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e12:	48a1      	ldr	r0, [pc, #644]	; (8003098 <readGRAM+0x5d8>)
 8002e14:	f7fe f954 	bl	80010c0 <PIN_LOW>
 8002e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e1c:	489e      	ldr	r0, [pc, #632]	; (8003098 <readGRAM+0x5d8>)
 8002e1e:	f7fe f94f 	bl	80010c0 <PIN_LOW>
 8002e22:	4b9e      	ldr	r3, [pc, #632]	; (800309c <readGRAM+0x5dc>)
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	4b9b      	ldr	r3, [pc, #620]	; (80030a0 <readGRAM+0x5e0>)
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	4b97      	ldr	r3, [pc, #604]	; (80030a0 <readGRAM+0x5e0>)
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	4313      	orrs	r3, r2
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	4b92      	ldr	r3, [pc, #584]	; (80030a0 <readGRAM+0x5e0>)
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	4313      	orrs	r3, r2
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4b8c      	ldr	r3, [pc, #560]	; (8003098 <readGRAM+0x5d8>)
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	4313      	orrs	r3, r2
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	4b87      	ldr	r3, [pc, #540]	; (8003098 <readGRAM+0x5d8>)
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	085b      	lsrs	r3, r3, #1
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	4b82      	ldr	r3, [pc, #520]	; (8003098 <readGRAM+0x5d8>)
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	4b7d      	ldr	r3, [pc, #500]	; (8003098 <readGRAM+0x5d8>)
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	76fb      	strb	r3, [r7, #27]
 8002eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002eb8:	4877      	ldr	r0, [pc, #476]	; (8003098 <readGRAM+0x5d8>)
 8002eba:	f7fe f911 	bl	80010e0 <PIN_HIGH>
 8002ebe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ec2:	4875      	ldr	r0, [pc, #468]	; (8003098 <readGRAM+0x5d8>)
 8002ec4:	f7fe f90c 	bl	80010e0 <PIN_HIGH>
 8002ec8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ecc:	4872      	ldr	r0, [pc, #456]	; (8003098 <readGRAM+0x5d8>)
 8002ece:	f7fe f907 	bl	80010e0 <PIN_HIGH>
 8002ed2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ed6:	4870      	ldr	r0, [pc, #448]	; (8003098 <readGRAM+0x5d8>)
 8002ed8:	f7fe f8f2 	bl	80010c0 <PIN_LOW>
 8002edc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ee0:	486d      	ldr	r0, [pc, #436]	; (8003098 <readGRAM+0x5d8>)
 8002ee2:	f7fe f8ed 	bl	80010c0 <PIN_LOW>
 8002ee6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002eea:	486b      	ldr	r0, [pc, #428]	; (8003098 <readGRAM+0x5d8>)
 8002eec:	f7fe f8e8 	bl	80010c0 <PIN_LOW>
 8002ef0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ef4:	4868      	ldr	r0, [pc, #416]	; (8003098 <readGRAM+0x5d8>)
 8002ef6:	f7fe f8e3 	bl	80010c0 <PIN_LOW>
 8002efa:	4b68      	ldr	r3, [pc, #416]	; (800309c <readGRAM+0x5dc>)
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	085b      	lsrs	r3, r3, #1
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	4b65      	ldr	r3, [pc, #404]	; (80030a0 <readGRAM+0x5e0>)
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	0a1b      	lsrs	r3, r3, #8
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	4313      	orrs	r3, r2
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b61      	ldr	r3, [pc, #388]	; (80030a0 <readGRAM+0x5e0>)
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	4b5c      	ldr	r3, [pc, #368]	; (80030a0 <readGRAM+0x5e0>)
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	4b56      	ldr	r3, [pc, #344]	; (8003098 <readGRAM+0x5d8>)
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	4b51      	ldr	r3, [pc, #324]	; (8003098 <readGRAM+0x5d8>)
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	085b      	lsrs	r3, r3, #1
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	4313      	orrs	r3, r2
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b4c      	ldr	r3, [pc, #304]	; (8003098 <readGRAM+0x5d8>)
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	4313      	orrs	r3, r2
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	4b47      	ldr	r3, [pc, #284]	; (8003098 <readGRAM+0x5d8>)
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	833b      	strh	r3, [r7, #24]
 8002f8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f90:	4841      	ldr	r0, [pc, #260]	; (8003098 <readGRAM+0x5d8>)
 8002f92:	f7fe f8a5 	bl	80010e0 <PIN_HIGH>
 8002f96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f9a:	483f      	ldr	r0, [pc, #252]	; (8003098 <readGRAM+0x5d8>)
 8002f9c:	f7fe f8a0 	bl	80010e0 <PIN_HIGH>
 8002fa0:	7efb      	ldrb	r3, [r7, #27]
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	b21a      	sxth	r2, r3
 8002fa6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	b21b      	sxth	r3, r3
 8002fae:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8002fb0:	4b3c      	ldr	r3, [pc, #240]	; (80030a4 <readGRAM+0x5e4>)
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	f241 5211 	movw	r2, #5393	; 0x1511
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	f040 8302 	bne.w	80035c2 <readGRAM+0xb02>
 8002fbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fc2:	4835      	ldr	r0, [pc, #212]	; (8003098 <readGRAM+0x5d8>)
 8002fc4:	f7fe f88c 	bl	80010e0 <PIN_HIGH>
 8002fc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fcc:	4832      	ldr	r0, [pc, #200]	; (8003098 <readGRAM+0x5d8>)
 8002fce:	f7fe f877 	bl	80010c0 <PIN_LOW>
 8002fd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fd6:	4830      	ldr	r0, [pc, #192]	; (8003098 <readGRAM+0x5d8>)
 8002fd8:	f7fe f872 	bl	80010c0 <PIN_LOW>
 8002fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fe0:	482d      	ldr	r0, [pc, #180]	; (8003098 <readGRAM+0x5d8>)
 8002fe2:	f7fe f86d 	bl	80010c0 <PIN_LOW>
 8002fe6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fea:	482b      	ldr	r0, [pc, #172]	; (8003098 <readGRAM+0x5d8>)
 8002fec:	f7fe f868 	bl	80010c0 <PIN_LOW>
 8002ff0:	4b2a      	ldr	r3, [pc, #168]	; (800309c <readGRAM+0x5dc>)
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <readGRAM+0x5e0>)
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	0a1b      	lsrs	r3, r3, #8
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	b2db      	uxtb	r3, r3
 800300c:	4313      	orrs	r3, r2
 800300e:	b2da      	uxtb	r2, r3
 8003010:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <readGRAM+0x5e0>)
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	095b      	lsrs	r3, r3, #5
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	b2db      	uxtb	r3, r3
 800301e:	4313      	orrs	r3, r2
 8003020:	b2da      	uxtb	r2, r3
 8003022:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <readGRAM+0x5e0>)
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	b2db      	uxtb	r3, r3
 8003030:	4313      	orrs	r3, r2
 8003032:	b2da      	uxtb	r2, r3
 8003034:	4b18      	ldr	r3, [pc, #96]	; (8003098 <readGRAM+0x5d8>)
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	b2db      	uxtb	r3, r3
 8003044:	4313      	orrs	r3, r2
 8003046:	b2da      	uxtb	r2, r3
 8003048:	4b13      	ldr	r3, [pc, #76]	; (8003098 <readGRAM+0x5d8>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	085b      	lsrs	r3, r3, #1
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f003 0320 	and.w	r3, r3, #32
 8003054:	b2db      	uxtb	r3, r3
 8003056:	4313      	orrs	r3, r2
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <readGRAM+0x5d8>)
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003068:	b2db      	uxtb	r3, r3
 800306a:	4313      	orrs	r3, r2
 800306c:	b2da      	uxtb	r2, r3
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <readGRAM+0x5d8>)
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800307c:	b2db      	uxtb	r3, r3
 800307e:	4313      	orrs	r3, r2
 8003080:	75fb      	strb	r3, [r7, #23]
 8003082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003086:	4804      	ldr	r0, [pc, #16]	; (8003098 <readGRAM+0x5d8>)
 8003088:	f7fe f82a 	bl	80010e0 <PIN_HIGH>
 800308c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003090:	4801      	ldr	r0, [pc, #4]	; (8003098 <readGRAM+0x5d8>)
 8003092:	f7fe f825 	bl	80010e0 <PIN_HIGH>
        while (n)
 8003096:	e294      	b.n	80035c2 <readGRAM+0xb02>
 8003098:	40021000 	.word	0x40021000
 800309c:	40021800 	.word	0x40021800
 80030a0:	40021400 	.word	0x40021400
 80030a4:	20000216 	.word	0x20000216
        {
            if (_lcd_capable & READ_24BITS)
 80030a8:	4bac      	ldr	r3, [pc, #688]	; (800335c <readGRAM+0x89c>)
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8164 	beq.w	800337e <readGRAM+0x8be>
            {
                READ_8(r);
 80030b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030ba:	48a9      	ldr	r0, [pc, #676]	; (8003360 <readGRAM+0x8a0>)
 80030bc:	f7fe f810 	bl	80010e0 <PIN_HIGH>
 80030c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030c4:	48a6      	ldr	r0, [pc, #664]	; (8003360 <readGRAM+0x8a0>)
 80030c6:	f7fd fffb 	bl	80010c0 <PIN_LOW>
 80030ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030ce:	48a4      	ldr	r0, [pc, #656]	; (8003360 <readGRAM+0x8a0>)
 80030d0:	f7fd fff6 	bl	80010c0 <PIN_LOW>
 80030d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030d8:	48a1      	ldr	r0, [pc, #644]	; (8003360 <readGRAM+0x8a0>)
 80030da:	f7fd fff1 	bl	80010c0 <PIN_LOW>
 80030de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030e2:	489f      	ldr	r0, [pc, #636]	; (8003360 <readGRAM+0x8a0>)
 80030e4:	f7fd ffec 	bl	80010c0 <PIN_LOW>
 80030e8:	4b9e      	ldr	r3, [pc, #632]	; (8003364 <readGRAM+0x8a4>)
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	085b      	lsrs	r3, r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	4b9c      	ldr	r3, [pc, #624]	; (8003368 <readGRAM+0x8a8>)
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	b2db      	uxtb	r3, r3
 8003104:	4313      	orrs	r3, r2
 8003106:	b2da      	uxtb	r2, r3
 8003108:	4b97      	ldr	r3, [pc, #604]	; (8003368 <readGRAM+0x8a8>)
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	b2db      	uxtb	r3, r3
 8003116:	4313      	orrs	r3, r2
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4b93      	ldr	r3, [pc, #588]	; (8003368 <readGRAM+0x8a8>)
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	b2db      	uxtb	r3, r3
 8003128:	4313      	orrs	r3, r2
 800312a:	b2da      	uxtb	r2, r3
 800312c:	4b8c      	ldr	r3, [pc, #560]	; (8003360 <readGRAM+0x8a0>)
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	b2db      	uxtb	r3, r3
 800313c:	4313      	orrs	r3, r2
 800313e:	b2da      	uxtb	r2, r3
 8003140:	4b87      	ldr	r3, [pc, #540]	; (8003360 <readGRAM+0x8a0>)
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	085b      	lsrs	r3, r3, #1
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	b2db      	uxtb	r3, r3
 800314e:	4313      	orrs	r3, r2
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4b83      	ldr	r3, [pc, #524]	; (8003360 <readGRAM+0x8a0>)
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	b2db      	uxtb	r3, r3
 8003162:	4313      	orrs	r3, r2
 8003164:	b2da      	uxtb	r2, r3
 8003166:	4b7e      	ldr	r3, [pc, #504]	; (8003360 <readGRAM+0x8a0>)
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003174:	b2db      	uxtb	r3, r3
 8003176:	4313      	orrs	r3, r2
 8003178:	75fb      	strb	r3, [r7, #23]
 800317a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800317e:	4878      	ldr	r0, [pc, #480]	; (8003360 <readGRAM+0x8a0>)
 8003180:	f7fd ffae 	bl	80010e0 <PIN_HIGH>
 8003184:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003188:	4875      	ldr	r0, [pc, #468]	; (8003360 <readGRAM+0x8a0>)
 800318a:	f7fd ffa9 	bl	80010e0 <PIN_HIGH>
                READ_8(g);
 800318e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003192:	4873      	ldr	r0, [pc, #460]	; (8003360 <readGRAM+0x8a0>)
 8003194:	f7fd ffa4 	bl	80010e0 <PIN_HIGH>
 8003198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800319c:	4870      	ldr	r0, [pc, #448]	; (8003360 <readGRAM+0x8a0>)
 800319e:	f7fd ff8f 	bl	80010c0 <PIN_LOW>
 80031a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031a6:	486e      	ldr	r0, [pc, #440]	; (8003360 <readGRAM+0x8a0>)
 80031a8:	f7fd ff8a 	bl	80010c0 <PIN_LOW>
 80031ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031b0:	486b      	ldr	r0, [pc, #428]	; (8003360 <readGRAM+0x8a0>)
 80031b2:	f7fd ff85 	bl	80010c0 <PIN_LOW>
 80031b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031ba:	4869      	ldr	r0, [pc, #420]	; (8003360 <readGRAM+0x8a0>)
 80031bc:	f7fd ff80 	bl	80010c0 <PIN_LOW>
 80031c0:	4b68      	ldr	r3, [pc, #416]	; (8003364 <readGRAM+0x8a4>)
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	4b66      	ldr	r3, [pc, #408]	; (8003368 <readGRAM+0x8a8>)
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	0a1b      	lsrs	r3, r3, #8
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	4313      	orrs	r3, r2
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	4b61      	ldr	r3, [pc, #388]	; (8003368 <readGRAM+0x8a8>)
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	4313      	orrs	r3, r2
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	4b5d      	ldr	r3, [pc, #372]	; (8003368 <readGRAM+0x8a8>)
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	4313      	orrs	r3, r2
 8003202:	b2da      	uxtb	r2, r3
 8003204:	4b56      	ldr	r3, [pc, #344]	; (8003360 <readGRAM+0x8a0>)
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	b2db      	uxtb	r3, r3
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	b2db      	uxtb	r3, r3
 8003214:	4313      	orrs	r3, r2
 8003216:	b2da      	uxtb	r2, r3
 8003218:	4b51      	ldr	r3, [pc, #324]	; (8003360 <readGRAM+0x8a0>)
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	085b      	lsrs	r3, r3, #1
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	b2db      	uxtb	r3, r3
 8003226:	4313      	orrs	r3, r2
 8003228:	b2da      	uxtb	r2, r3
 800322a:	4b4d      	ldr	r3, [pc, #308]	; (8003360 <readGRAM+0x8a0>)
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	b2db      	uxtb	r3, r3
 8003234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003238:	b2db      	uxtb	r3, r3
 800323a:	4313      	orrs	r3, r2
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4b48      	ldr	r3, [pc, #288]	; (8003360 <readGRAM+0x8a0>)
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800324c:	b2db      	uxtb	r3, r3
 800324e:	4313      	orrs	r3, r2
 8003250:	757b      	strb	r3, [r7, #21]
 8003252:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003256:	4842      	ldr	r0, [pc, #264]	; (8003360 <readGRAM+0x8a0>)
 8003258:	f7fd ff42 	bl	80010e0 <PIN_HIGH>
 800325c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003260:	483f      	ldr	r0, [pc, #252]	; (8003360 <readGRAM+0x8a0>)
 8003262:	f7fd ff3d 	bl	80010e0 <PIN_HIGH>
                READ_8(b);
 8003266:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800326a:	483d      	ldr	r0, [pc, #244]	; (8003360 <readGRAM+0x8a0>)
 800326c:	f7fd ff38 	bl	80010e0 <PIN_HIGH>
 8003270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003274:	483a      	ldr	r0, [pc, #232]	; (8003360 <readGRAM+0x8a0>)
 8003276:	f7fd ff23 	bl	80010c0 <PIN_LOW>
 800327a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800327e:	4838      	ldr	r0, [pc, #224]	; (8003360 <readGRAM+0x8a0>)
 8003280:	f7fd ff1e 	bl	80010c0 <PIN_LOW>
 8003284:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003288:	4835      	ldr	r0, [pc, #212]	; (8003360 <readGRAM+0x8a0>)
 800328a:	f7fd ff19 	bl	80010c0 <PIN_LOW>
 800328e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003292:	4833      	ldr	r0, [pc, #204]	; (8003360 <readGRAM+0x8a0>)
 8003294:	f7fd ff14 	bl	80010c0 <PIN_LOW>
 8003298:	4b32      	ldr	r3, [pc, #200]	; (8003364 <readGRAM+0x8a4>)
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	085b      	lsrs	r3, r3, #1
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	4b30      	ldr	r3, [pc, #192]	; (8003368 <readGRAM+0x8a8>)
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	0a1b      	lsrs	r3, r3, #8
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	4313      	orrs	r3, r2
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	4b2b      	ldr	r3, [pc, #172]	; (8003368 <readGRAM+0x8a8>)
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	4313      	orrs	r3, r2
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4b27      	ldr	r3, [pc, #156]	; (8003368 <readGRAM+0x8a8>)
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	4313      	orrs	r3, r2
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	4b20      	ldr	r3, [pc, #128]	; (8003360 <readGRAM+0x8a0>)
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	4313      	orrs	r3, r2
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <readGRAM+0x8a0>)
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	4313      	orrs	r3, r2
 8003300:	b2da      	uxtb	r2, r3
 8003302:	4b17      	ldr	r3, [pc, #92]	; (8003360 <readGRAM+0x8a0>)
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	b2db      	uxtb	r3, r3
 8003312:	4313      	orrs	r3, r2
 8003314:	b2da      	uxtb	r2, r3
 8003316:	4b12      	ldr	r3, [pc, #72]	; (8003360 <readGRAM+0x8a0>)
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003324:	b2db      	uxtb	r3, r3
 8003326:	4313      	orrs	r3, r2
 8003328:	753b      	strb	r3, [r7, #20]
 800332a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800332e:	480c      	ldr	r0, [pc, #48]	; (8003360 <readGRAM+0x8a0>)
 8003330:	f7fd fed6 	bl	80010e0 <PIN_HIGH>
 8003334:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003338:	4809      	ldr	r0, [pc, #36]	; (8003360 <readGRAM+0x8a0>)
 800333a:	f7fd fed1 	bl	80010e0 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 800333e:	4b07      	ldr	r3, [pc, #28]	; (800335c <readGRAM+0x89c>)
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d010      	beq.n	800336c <readGRAM+0x8ac>
                    ret = color565(b, g, r);
 800334a:	7dfa      	ldrb	r2, [r7, #23]
 800334c:	7d79      	ldrb	r1, [r7, #21]
 800334e:	7d3b      	ldrb	r3, [r7, #20]
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd ff8d 	bl	8001270 <color565>
 8003356:	4603      	mov	r3, r0
 8003358:	84fb      	strh	r3, [r7, #38]	; 0x26
 800335a:	e117      	b.n	800358c <readGRAM+0xacc>
 800335c:	20000208 	.word	0x20000208
 8003360:	40021000 	.word	0x40021000
 8003364:	40021800 	.word	0x40021800
 8003368:	40021400 	.word	0x40021400
                else
                    ret = color565(r, g, b);
 800336c:	7d3a      	ldrb	r2, [r7, #20]
 800336e:	7d79      	ldrb	r1, [r7, #21]
 8003370:	7dfb      	ldrb	r3, [r7, #23]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd ff7c 	bl	8001270 <color565>
 8003378:	4603      	mov	r3, r0
 800337a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800337c:	e106      	b.n	800358c <readGRAM+0xacc>
            } else
            {
                READ_16(ret);
 800337e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003382:	4893      	ldr	r0, [pc, #588]	; (80035d0 <readGRAM+0xb10>)
 8003384:	f7fd feac 	bl	80010e0 <PIN_HIGH>
 8003388:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800338c:	4890      	ldr	r0, [pc, #576]	; (80035d0 <readGRAM+0xb10>)
 800338e:	f7fd fe97 	bl	80010c0 <PIN_LOW>
 8003392:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003396:	488e      	ldr	r0, [pc, #568]	; (80035d0 <readGRAM+0xb10>)
 8003398:	f7fd fe92 	bl	80010c0 <PIN_LOW>
 800339c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033a0:	488b      	ldr	r0, [pc, #556]	; (80035d0 <readGRAM+0xb10>)
 80033a2:	f7fd fe8d 	bl	80010c0 <PIN_LOW>
 80033a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033aa:	4889      	ldr	r0, [pc, #548]	; (80035d0 <readGRAM+0xb10>)
 80033ac:	f7fd fe88 	bl	80010c0 <PIN_LOW>
 80033b0:	4b88      	ldr	r3, [pc, #544]	; (80035d4 <readGRAM+0xb14>)
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	4b86      	ldr	r3, [pc, #536]	; (80035d8 <readGRAM+0xb18>)
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	4313      	orrs	r3, r2
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	4b81      	ldr	r3, [pc, #516]	; (80035d8 <readGRAM+0xb18>)
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	4313      	orrs	r3, r2
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4b7d      	ldr	r3, [pc, #500]	; (80035d8 <readGRAM+0xb18>)
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	4313      	orrs	r3, r2
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	4b76      	ldr	r3, [pc, #472]	; (80035d0 <readGRAM+0xb10>)
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	b2db      	uxtb	r3, r3
 8003404:	4313      	orrs	r3, r2
 8003406:	b2da      	uxtb	r2, r3
 8003408:	4b71      	ldr	r3, [pc, #452]	; (80035d0 <readGRAM+0xb10>)
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	b2db      	uxtb	r3, r3
 8003416:	4313      	orrs	r3, r2
 8003418:	b2da      	uxtb	r2, r3
 800341a:	4b6d      	ldr	r3, [pc, #436]	; (80035d0 <readGRAM+0xb10>)
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003428:	b2db      	uxtb	r3, r3
 800342a:	4313      	orrs	r3, r2
 800342c:	b2da      	uxtb	r2, r3
 800342e:	4b68      	ldr	r3, [pc, #416]	; (80035d0 <readGRAM+0xb10>)
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800343c:	b2db      	uxtb	r3, r3
 800343e:	4313      	orrs	r3, r2
 8003440:	75bb      	strb	r3, [r7, #22]
 8003442:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003446:	4862      	ldr	r0, [pc, #392]	; (80035d0 <readGRAM+0xb10>)
 8003448:	f7fd fe4a 	bl	80010e0 <PIN_HIGH>
 800344c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003450:	485f      	ldr	r0, [pc, #380]	; (80035d0 <readGRAM+0xb10>)
 8003452:	f7fd fe45 	bl	80010e0 <PIN_HIGH>
 8003456:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800345a:	485d      	ldr	r0, [pc, #372]	; (80035d0 <readGRAM+0xb10>)
 800345c:	f7fd fe40 	bl	80010e0 <PIN_HIGH>
 8003460:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003464:	485a      	ldr	r0, [pc, #360]	; (80035d0 <readGRAM+0xb10>)
 8003466:	f7fd fe2b 	bl	80010c0 <PIN_LOW>
 800346a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800346e:	4858      	ldr	r0, [pc, #352]	; (80035d0 <readGRAM+0xb10>)
 8003470:	f7fd fe26 	bl	80010c0 <PIN_LOW>
 8003474:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003478:	4855      	ldr	r0, [pc, #340]	; (80035d0 <readGRAM+0xb10>)
 800347a:	f7fd fe21 	bl	80010c0 <PIN_LOW>
 800347e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003482:	4853      	ldr	r0, [pc, #332]	; (80035d0 <readGRAM+0xb10>)
 8003484:	f7fd fe1c 	bl	80010c0 <PIN_LOW>
 8003488:	4b52      	ldr	r3, [pc, #328]	; (80035d4 <readGRAM+0xb14>)
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	b29b      	uxth	r3, r3
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	4b50      	ldr	r3, [pc, #320]	; (80035d8 <readGRAM+0xb18>)
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	0a1b      	lsrs	r3, r3, #8
 800349c:	b29b      	uxth	r3, r3
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	4313      	orrs	r3, r2
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	4b4b      	ldr	r3, [pc, #300]	; (80035d8 <readGRAM+0xb18>)
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	4313      	orrs	r3, r2
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	4b47      	ldr	r3, [pc, #284]	; (80035d8 <readGRAM+0xb18>)
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	4313      	orrs	r3, r2
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	4b40      	ldr	r3, [pc, #256]	; (80035d0 <readGRAM+0xb10>)
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	b29b      	uxth	r3, r3
 80034dc:	4313      	orrs	r3, r2
 80034de:	b29a      	uxth	r2, r3
 80034e0:	4b3b      	ldr	r3, [pc, #236]	; (80035d0 <readGRAM+0xb10>)
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	085b      	lsrs	r3, r3, #1
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	4313      	orrs	r3, r2
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	4b37      	ldr	r3, [pc, #220]	; (80035d0 <readGRAM+0xb10>)
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003500:	b29b      	uxth	r3, r3
 8003502:	4313      	orrs	r3, r2
 8003504:	b29a      	uxth	r2, r3
 8003506:	4b32      	ldr	r3, [pc, #200]	; (80035d0 <readGRAM+0xb10>)
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	b29b      	uxth	r3, r3
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	b29b      	uxth	r3, r3
 8003510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003514:	b29b      	uxth	r3, r3
 8003516:	4313      	orrs	r3, r2
 8003518:	84fb      	strh	r3, [r7, #38]	; 0x26
 800351a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800351e:	482c      	ldr	r0, [pc, #176]	; (80035d0 <readGRAM+0xb10>)
 8003520:	f7fd fdde 	bl	80010e0 <PIN_HIGH>
 8003524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003528:	4829      	ldr	r0, [pc, #164]	; (80035d0 <readGRAM+0xb10>)
 800352a:	f7fd fdd9 	bl	80010e0 <PIN_HIGH>
 800352e:	7dbb      	ldrb	r3, [r7, #22]
 8003530:	021b      	lsls	r3, r3, #8
 8003532:	b21a      	sxth	r2, r3
 8003534:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003538:	4313      	orrs	r3, r2
 800353a:	b21b      	sxth	r3, r3
 800353c:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 800353e:	4b27      	ldr	r3, [pc, #156]	; (80035dc <readGRAM+0xb1c>)
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d009      	beq.n	800355e <readGRAM+0xa9e>
                    ret = (ret >> 8) | (ret << 8);
 800354a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800354c:	0a1b      	lsrs	r3, r3, #8
 800354e:	b29b      	uxth	r3, r3
 8003550:	b21a      	sxth	r2, r3
 8003552:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	b21b      	sxth	r3, r3
 8003558:	4313      	orrs	r3, r2
 800355a:	b21b      	sxth	r3, r3
 800355c:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 800355e:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <readGRAM+0xb1c>)
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d010      	beq.n	800358c <readGRAM+0xacc>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 800356a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800356e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003572:	b21a      	sxth	r2, r3
 8003574:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003576:	0adb      	lsrs	r3, r3, #11
 8003578:	b29b      	uxth	r3, r3
 800357a:	b21b      	sxth	r3, r3
 800357c:	4313      	orrs	r3, r2
 800357e:	b21a      	sxth	r2, r3
 8003580:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003582:	02db      	lsls	r3, r3, #11
 8003584:	b21b      	sxth	r3, r3
 8003586:	4313      	orrs	r3, r2
 8003588:	b21b      	sxth	r3, r3
 800358a:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 800358c:	4b14      	ldr	r3, [pc, #80]	; (80035e0 <readGRAM+0xb20>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <readGRAM+0xae0>
 8003594:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd fe18 	bl	80011cc <color555_to_565>
 800359c:	4603      	mov	r3, r0
 800359e:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	1c9a      	adds	r2, r3, #2
 80035a4:	60ba      	str	r2, [r7, #8]
 80035a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80035a8:	801a      	strh	r2, [r3, #0]
            n--;
 80035aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <readGRAM+0xb1c>)
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d010      	beq.n	80035e4 <readGRAM+0xb24>
        while (n)
 80035c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f47f ad6e 	bne.w	80030a8 <readGRAM+0x5e8>
 80035cc:	e00b      	b.n	80035e6 <readGRAM+0xb26>
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40021800 	.word	0x40021800
 80035d8:	40021400 	.word	0x40021400
 80035dc:	20000208 	.word	0x20000208
 80035e0:	20000038 	.word	0x20000038
                break;
 80035e4:	bf00      	nop
        }
        if (++col >= w) {
 80035e6:	8bfb      	ldrh	r3, [r7, #30]
 80035e8:	3301      	adds	r3, #1
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	83fb      	strh	r3, [r7, #30]
 80035ee:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80035f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	db0d      	blt.n	8003616 <readGRAM+0xb56>
            col = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 80035fe:	8c3b      	ldrh	r3, [r7, #32]
 8003600:	3301      	adds	r3, #1
 8003602:	b29b      	uxth	r3, r3
 8003604:	843b      	strh	r3, [r7, #32]
 8003606:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800360a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800360e:	429a      	cmp	r2, r3
 8003610:	db01      	blt.n	8003616 <readGRAM+0xb56>
                row = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 8003616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800361a:	4815      	ldr	r0, [pc, #84]	; (8003670 <readGRAM+0xbb0>)
 800361c:	f7fd fd60 	bl	80010e0 <PIN_HIGH>
        CS_IDLE;
 8003620:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003624:	4813      	ldr	r0, [pc, #76]	; (8003674 <readGRAM+0xbb4>)
 8003626:	f7fd fd5b 	bl	80010e0 <PIN_HIGH>
        setWriteDir();
 800362a:	f7fd feb1 	bl	8001390 <setWriteDir>
    while (n > 0) {
 800362e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003632:	2b00      	cmp	r3, #0
 8003634:	f73f aa90 	bgt.w	8002b58 <readGRAM+0x98>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <readGRAM+0xbb8>)
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d110      	bne.n	8003666 <readGRAM+0xba6>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8003644:	f7fd fd8a 	bl	800115c <width>
 8003648:	4603      	mov	r3, r0
 800364a:	3b01      	subs	r3, #1
 800364c:	b29b      	uxth	r3, r3
 800364e:	b21c      	sxth	r4, r3
 8003650:	f7fd fd90 	bl	8001174 <height>
 8003654:	4603      	mov	r3, r0
 8003656:	3b01      	subs	r3, #1
 8003658:	b29b      	uxth	r3, r3
 800365a:	b21b      	sxth	r3, r3
 800365c:	4622      	mov	r2, r4
 800365e:	2100      	movs	r1, #0
 8003660:	2000      	movs	r0, #0
 8003662:	f000 fb8f 	bl	8003d84 <setAddrWindow>
    return 0;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	372c      	adds	r7, #44	; 0x2c
 800366c:	46bd      	mov	sp, r7
 800366e:	bd90      	pop	{r4, r7, pc}
 8003670:	40021000 	.word	0x40021000
 8003674:	40020400 	.word	0x40020400
 8003678:	20000208 	.word	0x20000208

0800367c <setRotation>:

void setRotation(uint8_t r)
{
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 8003686:	4bab      	ldr	r3, [pc, #684]	; (8003934 <setRotation+0x2b8>)
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	b2da      	uxtb	r2, r3
 8003694:	4ba8      	ldr	r3, [pc, #672]	; (8003938 <setRotation+0x2bc>)
 8003696:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 8003698:	4ba7      	ldr	r3, [pc, #668]	; (8003938 <setRotation+0x2bc>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <setRotation+0x2e>
 80036a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80036a8:	e000      	b.n	80036ac <setRotation+0x30>
 80036aa:	22f0      	movs	r2, #240	; 0xf0
 80036ac:	4ba3      	ldr	r3, [pc, #652]	; (800393c <setRotation+0x2c0>)
 80036ae:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 80036b0:	4ba1      	ldr	r3, [pc, #644]	; (8003938 <setRotation+0x2bc>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <setRotation+0x44>
 80036bc:	22f0      	movs	r2, #240	; 0xf0
 80036be:	e001      	b.n	80036c4 <setRotation+0x48>
 80036c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80036c4:	4b9e      	ldr	r3, [pc, #632]	; (8003940 <setRotation+0x2c4>)
 80036c6:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 80036c8:	4b9b      	ldr	r3, [pc, #620]	; (8003938 <setRotation+0x2bc>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d817      	bhi.n	8003700 <setRotation+0x84>
 80036d0:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <setRotation+0x5c>)
 80036d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d6:	bf00      	nop
 80036d8:	080036e9 	.word	0x080036e9
 80036dc:	080036ef 	.word	0x080036ef
 80036e0:	080036f5 	.word	0x080036f5
 80036e4:	080036fb 	.word	0x080036fb
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 80036e8:	2348      	movs	r3, #72	; 0x48
 80036ea:	72fb      	strb	r3, [r7, #11]
       break;
 80036ec:	e008      	b.n	8003700 <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 80036ee:	2328      	movs	r3, #40	; 0x28
 80036f0:	72fb      	strb	r3, [r7, #11]
       break;
 80036f2:	e005      	b.n	8003700 <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 80036f4:	2398      	movs	r3, #152	; 0x98
 80036f6:	72fb      	strb	r3, [r7, #11]
       break;
 80036f8:	e002      	b.n	8003700 <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 80036fa:	23f8      	movs	r3, #248	; 0xf8
 80036fc:	72fb      	strb	r3, [r7, #11]
       break;
 80036fe:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8003700:	4b90      	ldr	r3, [pc, #576]	; (8003944 <setRotation+0x2c8>)
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <setRotation+0x9c>
       val ^= 0x80;
 800370c:	7afa      	ldrb	r2, [r7, #11]
 800370e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8003712:	4053      	eors	r3, r2
 8003714:	b2db      	uxtb	r3, r3
 8003716:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 8003718:	4b8a      	ldr	r3, [pc, #552]	; (8003944 <setRotation+0x2c8>)
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003720:	2b00      	cmp	r3, #0
 8003722:	d004      	beq.n	800372e <setRotation+0xb2>
       val ^= 0x40;
 8003724:	7afb      	ldrb	r3, [r7, #11]
 8003726:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800372a:	b2db      	uxtb	r3, r3
 800372c:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 800372e:	4b85      	ldr	r3, [pc, #532]	; (8003944 <setRotation+0x2c8>)
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003736:	2b00      	cmp	r3, #0
 8003738:	d004      	beq.n	8003744 <setRotation+0xc8>
       val ^= 0x08;
 800373a:	7afb      	ldrb	r3, [r7, #11]
 800373c:	f083 0308 	eor.w	r3, r3, #8
 8003740:	b2db      	uxtb	r3, r3
 8003742:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8003744:	4b7f      	ldr	r3, [pc, #508]	; (8003944 <setRotation+0x2c8>)
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8119 	beq.w	8003984 <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 8003752:	4b7d      	ldr	r3, [pc, #500]	; (8003948 <setRotation+0x2cc>)
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	f646 0214 	movw	r2, #26644	; 0x6814
 800375a:	4293      	cmp	r3, r2
 800375c:	d128      	bne.n	80037b0 <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 800375e:	7afb      	ldrb	r3, [r7, #11]
 8003760:	b25b      	sxtb	r3, r3
 8003762:	105b      	asrs	r3, r3, #1
 8003764:	b25b      	sxtb	r3, r3
 8003766:	b29b      	uxth	r3, r3
 8003768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376c:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 800376e:	7afb      	ldrb	r3, [r7, #11]
 8003770:	105b      	asrs	r3, r3, #1
 8003772:	b29b      	uxth	r3, r3
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 800377a:	7afb      	ldrb	r3, [r7, #11]
 800377c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003780:	b2db      	uxtb	r3, r3
 8003782:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 8003788:	8a3b      	ldrh	r3, [r7, #16]
 800378a:	b2da      	uxtb	r2, r3
 800378c:	89fb      	ldrh	r3, [r7, #14]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	4313      	orrs	r3, r2
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f043 0302 	orr.w	r3, r3, #2
 8003798:	b2db      	uxtb	r3, r3
 800379a:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 800379c:	233b      	movs	r3, #59	; 0x3b
 800379e:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 80037a0:	f107 0308 	add.w	r3, r7, #8
 80037a4:	461a      	mov	r2, r3
 80037a6:	2103      	movs	r1, #3
 80037a8:	20b6      	movs	r0, #182	; 0xb6
 80037aa:	f7fe f85d 	bl	8001868 <WriteCmdParamN>
           goto common_MC;
 80037ae:	e0a4      	b.n	80038fa <setRotation+0x27e>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 80037b0:	4b65      	ldr	r3, [pc, #404]	; (8003948 <setRotation+0x2cc>)
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	f641 1263 	movw	r2, #6499	; 0x1963
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00b      	beq.n	80037d4 <setRotation+0x158>
 80037bc:	4b62      	ldr	r3, [pc, #392]	; (8003948 <setRotation+0x2cc>)
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	f249 4281 	movw	r2, #38017	; 0x9481
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d005      	beq.n	80037d4 <setRotation+0x158>
 80037c8:	4b5f      	ldr	r3, [pc, #380]	; (8003948 <setRotation+0x2cc>)
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	f241 5211 	movw	r2, #5393	; 0x1511
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d139      	bne.n	8003848 <setRotation+0x1cc>
           if (val & 0x80)
 80037d4:	7afb      	ldrb	r3, [r7, #11]
 80037d6:	b25b      	sxtb	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	da04      	bge.n	80037e6 <setRotation+0x16a>
               val |= 0x01;    //GS
 80037dc:	7afb      	ldrb	r3, [r7, #11]
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 80037e6:	7afb      	ldrb	r3, [r7, #11]
 80037e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d004      	beq.n	80037fa <setRotation+0x17e>
               val |= 0x02;    //SS
 80037f0:	7afb      	ldrb	r3, [r7, #11]
 80037f2:	f043 0302 	orr.w	r3, r3, #2
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 80037fa:	4b53      	ldr	r3, [pc, #332]	; (8003948 <setRotation+0x2cc>)
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	f641 1263 	movw	r2, #6499	; 0x1963
 8003802:	4293      	cmp	r3, r2
 8003804:	d104      	bne.n	8003810 <setRotation+0x194>
 8003806:	7afb      	ldrb	r3, [r7, #11]
 8003808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800380c:	b2db      	uxtb	r3, r3
 800380e:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8003810:	4b4d      	ldr	r3, [pc, #308]	; (8003948 <setRotation+0x2cc>)
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	f249 4281 	movw	r2, #38017	; 0x9481
 8003818:	4293      	cmp	r3, r2
 800381a:	d104      	bne.n	8003826 <setRotation+0x1aa>
 800381c:	7afb      	ldrb	r3, [r7, #11]
 800381e:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 8003822:	b2db      	uxtb	r3, r3
 8003824:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 8003826:	4b48      	ldr	r3, [pc, #288]	; (8003948 <setRotation+0x2cc>)
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	f241 5211 	movw	r2, #5393	; 0x1511
 800382e:	4293      	cmp	r3, r2
 8003830:	d160      	bne.n	80038f4 <setRotation+0x278>
               val &= ~0x10;   //remove ML
 8003832:	7afb      	ldrb	r3, [r7, #11]
 8003834:	f023 0310 	bic.w	r3, r3, #16
 8003838:	b2db      	uxtb	r3, r3
 800383a:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 800383c:	7afb      	ldrb	r3, [r7, #11]
 800383e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003842:	b2db      	uxtb	r3, r3
 8003844:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 8003846:	e055      	b.n	80038f4 <setRotation+0x278>
      }
       else if (is8347) {
 8003848:	4b40      	ldr	r3, [pc, #256]	; (800394c <setRotation+0x2d0>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d053      	beq.n	80038f8 <setRotation+0x27c>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8003850:	4b3f      	ldr	r3, [pc, #252]	; (8003950 <setRotation+0x2d4>)
 8003852:	2202      	movs	r2, #2
 8003854:	801a      	strh	r2, [r3, #0]
 8003856:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <setRotation+0x2d8>)
 8003858:	2206      	movs	r2, #6
 800385a:	801a      	strh	r2, [r3, #0]
 800385c:	4b3e      	ldr	r3, [pc, #248]	; (8003958 <setRotation+0x2dc>)
 800385e:	2222      	movs	r2, #34	; 0x22
 8003860:	801a      	strh	r2, [r3, #0]
 8003862:	4b3e      	ldr	r3, [pc, #248]	; (800395c <setRotation+0x2e0>)
 8003864:	2202      	movs	r2, #2
 8003866:	801a      	strh	r2, [r3, #0]
 8003868:	4b3d      	ldr	r3, [pc, #244]	; (8003960 <setRotation+0x2e4>)
 800386a:	2204      	movs	r2, #4
 800386c:	801a      	strh	r2, [r3, #0]
 800386e:	4b3d      	ldr	r3, [pc, #244]	; (8003964 <setRotation+0x2e8>)
 8003870:	2206      	movs	r2, #6
 8003872:	801a      	strh	r2, [r3, #0]
 8003874:	4b3c      	ldr	r3, [pc, #240]	; (8003968 <setRotation+0x2ec>)
 8003876:	2208      	movs	r2, #8
 8003878:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 800387a:	4b33      	ldr	r3, [pc, #204]	; (8003948 <setRotation+0x2cc>)
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	2b65      	cmp	r3, #101	; 0x65
 8003880:	d121      	bne.n	80038c6 <setRotation+0x24a>
               val |= 0x01;    //GS=1
 8003882:	7afb      	ldrb	r3, [r7, #11]
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	b2db      	uxtb	r3, r3
 800388a:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 800388c:	7afb      	ldrb	r3, [r7, #11]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <setRotation+0x226>
 8003896:	7afa      	ldrb	r2, [r7, #11]
 8003898:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 800389c:	4053      	eors	r3, r2
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d006      	beq.n	80038ba <setRotation+0x23e>
 80038ac:	4b28      	ldr	r3, [pc, #160]	; (8003950 <setRotation+0x2d4>)
 80038ae:	2282      	movs	r2, #130	; 0x82
 80038b0:	801a      	strh	r2, [r3, #0]
 80038b2:	4b28      	ldr	r3, [pc, #160]	; (8003954 <setRotation+0x2d8>)
 80038b4:	2280      	movs	r2, #128	; 0x80
 80038b6:	801a      	strh	r2, [r3, #0]
 80038b8:	e005      	b.n	80038c6 <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 80038ba:	4b25      	ldr	r3, [pc, #148]	; (8003950 <setRotation+0x2d4>)
 80038bc:	2280      	movs	r2, #128	; 0x80
 80038be:	801a      	strh	r2, [r3, #0]
 80038c0:	4b24      	ldr	r3, [pc, #144]	; (8003954 <setRotation+0x2d8>)
 80038c2:	2282      	movs	r2, #130	; 0x82
 80038c4:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 80038c6:	4b20      	ldr	r3, [pc, #128]	; (8003948 <setRotation+0x2cc>)
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	f245 2252 	movw	r2, #21074	; 0x5252
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d129      	bne.n	8003926 <setRotation+0x2aa>
               val |= 0x02;   //VERT_SCROLLON
 80038d2:	7afb      	ldrb	r3, [r7, #11]
 80038d4:	f043 0302 	orr.w	r3, r3, #2
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 80038dc:	7afb      	ldrb	r3, [r7, #11]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d01f      	beq.n	8003926 <setRotation+0x2aa>
 80038e6:	7afa      	ldrb	r2, [r7, #11]
 80038e8:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 80038ec:	4053      	eors	r3, r2
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 80038f2:	e018      	b.n	8003926 <setRotation+0x2aa>
           goto common_MC;
 80038f4:	bf00      	nop
 80038f6:	e000      	b.n	80038fa <setRotation+0x27e>
       }
     common_MC:
 80038f8:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <setRotation+0x2d4>)
 80038fc:	222a      	movs	r2, #42	; 0x2a
 80038fe:	801a      	strh	r2, [r3, #0]
 8003900:	4b14      	ldr	r3, [pc, #80]	; (8003954 <setRotation+0x2d8>)
 8003902:	222b      	movs	r2, #43	; 0x2b
 8003904:	801a      	strh	r2, [r3, #0]
 8003906:	4b14      	ldr	r3, [pc, #80]	; (8003958 <setRotation+0x2dc>)
 8003908:	222c      	movs	r2, #44	; 0x2c
 800390a:	801a      	strh	r2, [r3, #0]
 800390c:	4b13      	ldr	r3, [pc, #76]	; (800395c <setRotation+0x2e0>)
 800390e:	222a      	movs	r2, #42	; 0x2a
 8003910:	801a      	strh	r2, [r3, #0]
 8003912:	4b13      	ldr	r3, [pc, #76]	; (8003960 <setRotation+0x2e4>)
 8003914:	222a      	movs	r2, #42	; 0x2a
 8003916:	801a      	strh	r2, [r3, #0]
 8003918:	4b12      	ldr	r3, [pc, #72]	; (8003964 <setRotation+0x2e8>)
 800391a:	222b      	movs	r2, #43	; 0x2b
 800391c:	801a      	strh	r2, [r3, #0]
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <setRotation+0x2ec>)
 8003920:	222b      	movs	r2, #43	; 0x2b
 8003922:	801a      	strh	r2, [r3, #0]
 8003924:	e000      	b.n	8003928 <setRotation+0x2ac>
			goto common_BGR;
 8003926:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8003928:	4b08      	ldr	r3, [pc, #32]	; (800394c <setRotation+0x2d0>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01d      	beq.n	800396c <setRotation+0x2f0>
 8003930:	2316      	movs	r3, #22
 8003932:	e01c      	b.n	800396e <setRotation+0x2f2>
 8003934:	2000020c 	.word	0x2000020c
 8003938:	2000003c 	.word	0x2000003c
 800393c:	20000008 	.word	0x20000008
 8003940:	2000000a 	.word	0x2000000a
 8003944:	20000208 	.word	0x20000208
 8003948:	20000216 	.word	0x20000216
 800394c:	20000037 	.word	0x20000037
 8003950:	20000210 	.word	0x20000210
 8003954:	2000020e 	.word	0x2000020e
 8003958:	20000206 	.word	0x20000206
 800395c:	20000212 	.word	0x20000212
 8003960:	2000021a 	.word	0x2000021a
 8003964:	2000020a 	.word	0x2000020a
 8003968:	20000214 	.word	0x20000214
 800396c:	2336      	movs	r3, #54	; 0x36
 800396e:	f107 020b 	add.w	r2, r7, #11
 8003972:	2101      	movs	r1, #1
 8003974:	4618      	mov	r0, r3
 8003976:	f7fd ff77 	bl	8001868 <WriteCmdParamN>
       _lcd_madctl = val;
 800397a:	7afb      	ldrb	r3, [r7, #11]
 800397c:	b29a      	uxth	r2, r3
 800397e:	4b73      	ldr	r3, [pc, #460]	; (8003b4c <setRotation+0x4d0>)
 8003980:	801a      	strh	r2, [r3, #0]
 8003982:	e09e      	b.n	8003ac2 <setRotation+0x446>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8003984:	4b72      	ldr	r3, [pc, #456]	; (8003b50 <setRotation+0x4d4>)
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	f247 7293 	movw	r2, #30611	; 0x7793
 800398c:	4293      	cmp	r3, r2
 800398e:	d010      	beq.n	80039b2 <setRotation+0x336>
 8003990:	f247 7293 	movw	r2, #30611	; 0x7793
 8003994:	4293      	cmp	r3, r2
 8003996:	dc04      	bgt.n	80039a2 <setRotation+0x326>
 8003998:	f245 4220 	movw	r2, #21536	; 0x5420
 800399c:	4293      	cmp	r3, r2
 800399e:	d008      	beq.n	80039b2 <setRotation+0x336>
 80039a0:	e045      	b.n	8003a2e <setRotation+0x3b2>
 80039a2:	f249 3226 	movw	r2, #37670	; 0x9326
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d003      	beq.n	80039b2 <setRotation+0x336>
 80039aa:	f24b 5209 	movw	r2, #46345	; 0xb509
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d13d      	bne.n	8003a2e <setRotation+0x3b2>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 80039b2:	4b68      	ldr	r3, [pc, #416]	; (8003b54 <setRotation+0x4d8>)
 80039b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b8:	801a      	strh	r2, [r3, #0]
 80039ba:	4b67      	ldr	r3, [pc, #412]	; (8003b58 <setRotation+0x4dc>)
 80039bc:	f240 2201 	movw	r2, #513	; 0x201
 80039c0:	801a      	strh	r2, [r3, #0]
 80039c2:	4b66      	ldr	r3, [pc, #408]	; (8003b5c <setRotation+0x4e0>)
 80039c4:	f240 2202 	movw	r2, #514	; 0x202
 80039c8:	801a      	strh	r2, [r3, #0]
 80039ca:	4b65      	ldr	r3, [pc, #404]	; (8003b60 <setRotation+0x4e4>)
 80039cc:	f44f 7204 	mov.w	r2, #528	; 0x210
 80039d0:	801a      	strh	r2, [r3, #0]
 80039d2:	4b64      	ldr	r3, [pc, #400]	; (8003b64 <setRotation+0x4e8>)
 80039d4:	f240 2211 	movw	r2, #529	; 0x211
 80039d8:	801a      	strh	r2, [r3, #0]
 80039da:	4b63      	ldr	r3, [pc, #396]	; (8003b68 <setRotation+0x4ec>)
 80039dc:	f240 2212 	movw	r2, #530	; 0x212
 80039e0:	801a      	strh	r2, [r3, #0]
 80039e2:	4b62      	ldr	r3, [pc, #392]	; (8003b6c <setRotation+0x4f0>)
 80039e4:	f240 2213 	movw	r2, #531	; 0x213
 80039e8:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 80039ea:	7afb      	ldrb	r3, [r7, #11]
 80039ec:	b25b      	sxtb	r3, r3
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	4b5f      	ldr	r3, [pc, #380]	; (8003b70 <setRotation+0x4f4>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 80039f6:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80039fa:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 80039fc:	4b54      	ldr	r3, [pc, #336]	; (8003b50 <setRotation+0x4d4>)
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	f249 3226 	movw	r2, #37670	; 0x9326
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d005      	beq.n	8003a14 <setRotation+0x398>
 8003a08:	4b51      	ldr	r3, [pc, #324]	; (8003b50 <setRotation+0x4d4>)
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	f245 4220 	movw	r2, #21536	; 0x5420
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d102      	bne.n	8003a1a <setRotation+0x39e>
 8003a14:	8abb      	ldrh	r3, [r7, #20]
 8003a16:	085b      	lsrs	r3, r3, #1
 8003a18:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 8003a1a:	8a3a      	ldrh	r2, [r7, #16]
 8003a1c:	8abb      	ldrh	r3, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	4619      	mov	r1, r3
 8003a24:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003a28:	f7fd fc60 	bl	80012ec <WriteCmdData>
           goto common_SS;
 8003a2c:	e022      	b.n	8003a74 <setRotation+0x3f8>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8003a2e:	4b49      	ldr	r3, [pc, #292]	; (8003b54 <setRotation+0x4d8>)
 8003a30:	2220      	movs	r2, #32
 8003a32:	801a      	strh	r2, [r3, #0]
 8003a34:	4b48      	ldr	r3, [pc, #288]	; (8003b58 <setRotation+0x4dc>)
 8003a36:	2221      	movs	r2, #33	; 0x21
 8003a38:	801a      	strh	r2, [r3, #0]
 8003a3a:	4b48      	ldr	r3, [pc, #288]	; (8003b5c <setRotation+0x4e0>)
 8003a3c:	2222      	movs	r2, #34	; 0x22
 8003a3e:	801a      	strh	r2, [r3, #0]
 8003a40:	4b47      	ldr	r3, [pc, #284]	; (8003b60 <setRotation+0x4e4>)
 8003a42:	2250      	movs	r2, #80	; 0x50
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	4b47      	ldr	r3, [pc, #284]	; (8003b64 <setRotation+0x4e8>)
 8003a48:	2251      	movs	r2, #81	; 0x51
 8003a4a:	801a      	strh	r2, [r3, #0]
 8003a4c:	4b46      	ldr	r3, [pc, #280]	; (8003b68 <setRotation+0x4ec>)
 8003a4e:	2252      	movs	r2, #82	; 0x52
 8003a50:	801a      	strh	r2, [r3, #0]
 8003a52:	4b46      	ldr	r3, [pc, #280]	; (8003b6c <setRotation+0x4f0>)
 8003a54:	2253      	movs	r2, #83	; 0x53
 8003a56:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8003a58:	7afb      	ldrb	r3, [r7, #11]
 8003a5a:	b25b      	sxtb	r3, r3
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	4b44      	ldr	r3, [pc, #272]	; (8003b70 <setRotation+0x4f4>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8003a64:	8a3b      	ldrh	r3, [r7, #16]
 8003a66:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	2060      	movs	r0, #96	; 0x60
 8003a70:	f7fd fc3c 	bl	80012ec <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 8003a74:	7afb      	ldrb	r3, [r7, #11]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7e:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8003a80:	89fb      	ldrh	r3, [r7, #14]
 8003a82:	4619      	mov	r1, r3
 8003a84:	2001      	movs	r0, #1
 8003a86:	f7fd fc31 	bl	80012ec <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 8003a8a:	7afb      	ldrb	r3, [r7, #11]
 8003a8c:	109b      	asrs	r3, r3, #2
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 8003a96:	7afb      	ldrb	r3, [r7, #11]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <setRotation+0x42c>
               ORG |= 0x1000;  //BGR
 8003aa0:	8afb      	ldrh	r3, [r7, #22]
 8003aa2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003aa6:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 8003aa8:	8afb      	ldrh	r3, [r7, #22]
 8003aaa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	4b26      	ldr	r3, [pc, #152]	; (8003b4c <setRotation+0x4d0>)
 8003ab2:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8003ab4:	4b25      	ldr	r3, [pc, #148]	; (8003b4c <setRotation+0x4d0>)
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	4619      	mov	r1, r3
 8003aba:	2003      	movs	r0, #3
 8003abc:	f7fd fc16 	bl	80012ec <WriteCmdData>
           break;
 8003ac0:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8003ac2:	4b2c      	ldr	r3, [pc, #176]	; (8003b74 <setRotation+0x4f8>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d023      	beq.n	8003b16 <setRotation+0x49a>
 8003ace:	4b2a      	ldr	r3, [pc, #168]	; (8003b78 <setRotation+0x4fc>)
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d11d      	bne.n	8003b16 <setRotation+0x49a>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 8003ada:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <setRotation+0x4d8>)
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	81bb      	strh	r3, [r7, #12]
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <setRotation+0x4dc>)
 8003ae2:	881a      	ldrh	r2, [r3, #0]
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <setRotation+0x4d8>)
 8003ae6:	801a      	strh	r2, [r3, #0]
 8003ae8:	4a1b      	ldr	r2, [pc, #108]	; (8003b58 <setRotation+0x4dc>)
 8003aea:	89bb      	ldrh	r3, [r7, #12]
 8003aec:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8003aee:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <setRotation+0x4e4>)
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	81bb      	strh	r3, [r7, #12]
 8003af4:	4b1c      	ldr	r3, [pc, #112]	; (8003b68 <setRotation+0x4ec>)
 8003af6:	881a      	ldrh	r2, [r3, #0]
 8003af8:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <setRotation+0x4e4>)
 8003afa:	801a      	strh	r2, [r3, #0]
 8003afc:	4a1a      	ldr	r2, [pc, #104]	; (8003b68 <setRotation+0x4ec>)
 8003afe:	89bb      	ldrh	r3, [r7, #12]
 8003b00:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8003b02:	4b18      	ldr	r3, [pc, #96]	; (8003b64 <setRotation+0x4e8>)
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	81bb      	strh	r3, [r7, #12]
 8003b08:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <setRotation+0x4f0>)
 8003b0a:	881a      	ldrh	r2, [r3, #0]
 8003b0c:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <setRotation+0x4e8>)
 8003b0e:	801a      	strh	r2, [r3, #0]
 8003b10:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <setRotation+0x4f0>)
 8003b12:	89bb      	ldrh	r3, [r7, #12]
 8003b14:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8003b16:	f7fd fb21 	bl	800115c <width>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	b21c      	sxth	r4, r3
 8003b22:	f7fd fb27 	bl	8001174 <height>
 8003b26:	4603      	mov	r3, r0
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	b21b      	sxth	r3, r3
 8003b2e:	4622      	mov	r2, r4
 8003b30:	2100      	movs	r1, #0
 8003b32:	2000      	movs	r0, #0
 8003b34:	f000 f926 	bl	8003d84 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003b3e:	2000      	movs	r0, #0
 8003b40:	f000 fa44 	bl	8003fcc <vertScroll>
}
 8003b44:	bf00      	nop
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd90      	pop	{r4, r7, pc}
 8003b4c:	2000021c 	.word	0x2000021c
 8003b50:	20000216 	.word	0x20000216
 8003b54:	20000210 	.word	0x20000210
 8003b58:	2000020e 	.word	0x2000020e
 8003b5c:	20000206 	.word	0x20000206
 8003b60:	20000212 	.word	0x20000212
 8003b64:	2000021a 	.word	0x2000021a
 8003b68:	2000020a 	.word	0x2000020a
 8003b6c:	20000214 	.word	0x20000214
 8003b70:	ffff8000 	.word	0xffff8000
 8003b74:	2000003c 	.word	0x2000003c
 8003b78:	20000208 	.word	0x20000208

08003b7c <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	80fb      	strh	r3, [r7, #6]
 8003b86:	460b      	mov	r3, r1
 8003b88:	80bb      	strh	r3, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 8003b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f2c0 80e3 	blt.w	8003d5e <drawPixel+0x1e2>
 8003b98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f2c0 80de 	blt.w	8003d5e <drawPixel+0x1e2>
 8003ba2:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8003ba6:	f7fd fad9 	bl	800115c <width>
 8003baa:	4603      	mov	r3, r0
 8003bac:	429c      	cmp	r4, r3
 8003bae:	f280 80d6 	bge.w	8003d5e <drawPixel+0x1e2>
 8003bb2:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003bb6:	f7fd fadd 	bl	8001174 <height>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	429c      	cmp	r4, r3
 8003bbe:	f280 80ce 	bge.w	8003d5e <drawPixel+0x1e2>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 8003bc2:	4b69      	ldr	r3, [pc, #420]	; (8003d68 <drawPixel+0x1ec>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <drawPixel+0x5a>
 8003bca:	887b      	ldrh	r3, [r7, #2]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fd fadd 	bl	800118c <color565_to_555>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 8003bd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003bda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003bde:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003be2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003be6:	f000 f8cd 	bl	8003d84 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8003bea:	4b60      	ldr	r3, [pc, #384]	; (8003d6c <drawPixel+0x1f0>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80ad 	beq.w	8003d4e <drawPixel+0x1d2>
 8003bf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003bf8:	485d      	ldr	r0, [pc, #372]	; (8003d70 <drawPixel+0x1f4>)
 8003bfa:	f7fd fa61 	bl	80010c0 <PIN_LOW>
 8003bfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c02:	485c      	ldr	r0, [pc, #368]	; (8003d74 <drawPixel+0x1f8>)
 8003c04:	f7fd fa5c 	bl	80010c0 <PIN_LOW>
 8003c08:	4b5b      	ldr	r3, [pc, #364]	; (8003d78 <drawPixel+0x1fc>)
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	0a1b      	lsrs	r3, r3, #8
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	73fb      	strb	r3, [r7, #15]
 8003c12:	4b59      	ldr	r3, [pc, #356]	; (8003d78 <drawPixel+0x1fc>)
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	73bb      	strb	r3, [r7, #14]
 8003c18:	4b56      	ldr	r3, [pc, #344]	; (8003d74 <drawPixel+0x1f8>)
 8003c1a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8003c1e:	619a      	str	r2, [r3, #24]
 8003c20:	4b56      	ldr	r3, [pc, #344]	; (8003d7c <drawPixel+0x200>)
 8003c22:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8003c26:	619a      	str	r2, [r3, #24]
 8003c28:	4b55      	ldr	r3, [pc, #340]	; (8003d80 <drawPixel+0x204>)
 8003c2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c2e:	619a      	str	r2, [r3, #24]
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4a52      	ldr	r2, [pc, #328]	; (8003d80 <drawPixel+0x204>)
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	6193      	str	r3, [r2, #24]
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	015b      	lsls	r3, r3, #5
 8003c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	015b      	lsls	r3, r3, #5
 8003c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c56:	431a      	orrs	r2, r3
 8003c58:	4b48      	ldr	r3, [pc, #288]	; (8003d7c <drawPixel+0x200>)
 8003c5a:	619a      	str	r2, [r3, #24]
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	105b      	asrs	r3, r3, #1
 8003c60:	f003 0208 	and.w	r2, r3, #8
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	105b      	asrs	r3, r3, #1
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	431a      	orrs	r2, r3
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	10db      	asrs	r3, r3, #3
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	431a      	orrs	r2, r3
 8003c82:	4b3c      	ldr	r3, [pc, #240]	; (8003d74 <drawPixel+0x1f8>)
 8003c84:	619a      	str	r2, [r3, #24]
 8003c86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c8a:	483a      	ldr	r0, [pc, #232]	; (8003d74 <drawPixel+0x1f8>)
 8003c8c:	f7fd fa18 	bl	80010c0 <PIN_LOW>
 8003c90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c94:	4837      	ldr	r0, [pc, #220]	; (8003d74 <drawPixel+0x1f8>)
 8003c96:	f7fd fa23 	bl	80010e0 <PIN_HIGH>
 8003c9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c9e:	4835      	ldr	r0, [pc, #212]	; (8003d74 <drawPixel+0x1f8>)
 8003ca0:	f7fd fa1e 	bl	80010e0 <PIN_HIGH>
 8003ca4:	4b33      	ldr	r3, [pc, #204]	; (8003d74 <drawPixel+0x1f8>)
 8003ca6:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8003caa:	619a      	str	r2, [r3, #24]
 8003cac:	4b33      	ldr	r3, [pc, #204]	; (8003d7c <drawPixel+0x200>)
 8003cae:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8003cb2:	619a      	str	r2, [r3, #24]
 8003cb4:	4b32      	ldr	r3, [pc, #200]	; (8003d80 <drawPixel+0x204>)
 8003cb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cba:	619a      	str	r2, [r3, #24]
 8003cbc:	7bbb      	ldrb	r3, [r7, #14]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	4a2f      	ldr	r2, [pc, #188]	; (8003d80 <drawPixel+0x204>)
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	6193      	str	r3, [r2, #24]
 8003cc8:	7bbb      	ldrb	r3, [r7, #14]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8003cd0:	7bbb      	ldrb	r3, [r7, #14]
 8003cd2:	015b      	lsls	r3, r3, #5
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	7bbb      	ldrb	r3, [r7, #14]
 8003cdc:	015b      	lsls	r3, r3, #5
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <drawPixel+0x200>)
 8003ce6:	619a      	str	r2, [r3, #24]
 8003ce8:	7bbb      	ldrb	r3, [r7, #14]
 8003cea:	105b      	asrs	r3, r3, #1
 8003cec:	f003 0208 	and.w	r2, r3, #8
 8003cf0:	7bbb      	ldrb	r3, [r7, #14]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	7bbb      	ldrb	r3, [r7, #14]
 8003cfc:	105b      	asrs	r3, r3, #1
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	431a      	orrs	r2, r3
 8003d04:	7bbb      	ldrb	r3, [r7, #14]
 8003d06:	10db      	asrs	r3, r3, #3
 8003d08:	f003 0310 	and.w	r3, r3, #16
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	4b19      	ldr	r3, [pc, #100]	; (8003d74 <drawPixel+0x1f8>)
 8003d10:	619a      	str	r2, [r3, #24]
 8003d12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d16:	4817      	ldr	r0, [pc, #92]	; (8003d74 <drawPixel+0x1f8>)
 8003d18:	f7fd f9d2 	bl	80010c0 <PIN_LOW>
 8003d1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d20:	4814      	ldr	r0, [pc, #80]	; (8003d74 <drawPixel+0x1f8>)
 8003d22:	f7fd f9dd 	bl	80010e0 <PIN_HIGH>
 8003d26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d2a:	4812      	ldr	r0, [pc, #72]	; (8003d74 <drawPixel+0x1f8>)
 8003d2c:	f7fd f9d8 	bl	80010e0 <PIN_HIGH>
 8003d30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d34:	480f      	ldr	r0, [pc, #60]	; (8003d74 <drawPixel+0x1f8>)
 8003d36:	f7fd f9d3 	bl	80010e0 <PIN_HIGH>
 8003d3a:	887b      	ldrh	r3, [r7, #2]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fd fb53 	bl	80013e8 <write24>
 8003d42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d46:	480a      	ldr	r0, [pc, #40]	; (8003d70 <drawPixel+0x1f4>)
 8003d48:	f7fd f9ca 	bl	80010e0 <PIN_HIGH>
 8003d4c:	e008      	b.n	8003d60 <drawPixel+0x1e4>
   WriteCmdData(_MW, color);
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <drawPixel+0x1fc>)
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	887a      	ldrh	r2, [r7, #2]
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fd fac8 	bl	80012ec <WriteCmdData>
 8003d5c:	e000      	b.n	8003d60 <drawPixel+0x1e4>
       return;
 8003d5e:	bf00      	nop
}
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd90      	pop	{r4, r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000038 	.word	0x20000038
 8003d6c:	20000039 	.word	0x20000039
 8003d70:	40020400 	.word	0x40020400
 8003d74:	40021000 	.word	0x40021000
 8003d78:	20000206 	.word	0x20000206
 8003d7c:	40021400 	.word	0x40021400
 8003d80:	40021800 	.word	0x40021800

08003d84 <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	4608      	mov	r0, r1
 8003d8e:	4611      	mov	r1, r2
 8003d90:	461a      	mov	r2, r3
 8003d92:	4623      	mov	r3, r4
 8003d94:	80fb      	strh	r3, [r7, #6]
 8003d96:	4603      	mov	r3, r0
 8003d98:	80bb      	strh	r3, [r7, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	807b      	strh	r3, [r7, #2]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8003da2:	4b80      	ldr	r3, [pc, #512]	; (8003fa4 <setAddrWindow+0x220>)
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	f249 3227 	movw	r2, #37671	; 0x9327
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d117      	bne.n	8003dde <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 8003dae:	4b7e      	ldr	r3, [pc, #504]	; (8003fa8 <setAddrWindow+0x224>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d107      	bne.n	8003dc6 <setAddrWindow+0x42>
 8003db6:	88bb      	ldrh	r3, [r7, #4]
 8003db8:	3320      	adds	r3, #32
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	80bb      	strh	r3, [r7, #4]
 8003dbe:	883b      	ldrh	r3, [r7, #0]
 8003dc0:	3320      	adds	r3, #32
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8003dc6:	4b78      	ldr	r3, [pc, #480]	; (8003fa8 <setAddrWindow+0x224>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d107      	bne.n	8003dde <setAddrWindow+0x5a>
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	3320      	adds	r3, #32
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	80fb      	strh	r3, [r7, #6]
 8003dd6:	887b      	ldrh	r3, [r7, #2]
 8003dd8:	3320      	adds	r3, #32
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 8003dde:	4b71      	ldr	r3, [pc, #452]	; (8003fa4 <setAddrWindow+0x220>)
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	f241 5226 	movw	r2, #5414	; 0x1526
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d128      	bne.n	8003e3c <setAddrWindow+0xb8>
 8003dea:	4b6f      	ldr	r3, [pc, #444]	; (8003fa8 <setAddrWindow+0x224>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d022      	beq.n	8003e3c <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8003df6:	887a      	ldrh	r2, [r7, #2]
 8003df8:	88fb      	ldrh	r3, [r7, #6]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	81fb      	strh	r3, [r7, #14]
 8003e00:	883a      	ldrh	r2, [r7, #0]
 8003e02:	88bb      	ldrh	r3, [r7, #4]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8003e0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <setAddrWindow+0x9c>
 8003e12:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3301      	adds	r3, #1
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	803b      	strh	r3, [r7, #0]
 8003e1e:	e00d      	b.n	8003e3c <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8003e20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d109      	bne.n	8003e3c <setAddrWindow+0xb8>
 8003e28:	887a      	ldrh	r2, [r7, #2]
 8003e2a:	89bb      	ldrh	r3, [r7, #12]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	807b      	strh	r3, [r7, #2]
 8003e32:	883a      	ldrh	r2, [r7, #0]
 8003e34:	89bb      	ldrh	r3, [r7, #12]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8003e3c:	4b5b      	ldr	r3, [pc, #364]	; (8003fac <setAddrWindow+0x228>)
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d054      	beq.n	8003ef2 <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8003e48:	4b59      	ldr	r3, [pc, #356]	; (8003fb0 <setAddrWindow+0x22c>)
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	b2d8      	uxtb	r0, r3
 8003e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e52:	121b      	asrs	r3, r3, #8
 8003e54:	b21b      	sxth	r3, r3
 8003e56:	b2d9      	uxtb	r1, r3
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e60:	121b      	asrs	r3, r3, #8
 8003e62:	b21b      	sxth	r3, r3
 8003e64:	b2dc      	uxtb	r4, r3
 8003e66:	887b      	ldrh	r3, [r7, #2]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	4623      	mov	r3, r4
 8003e6e:	f7fd febd 	bl	8001bec <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8003e72:	4b50      	ldr	r3, [pc, #320]	; (8003fb4 <setAddrWindow+0x230>)
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	b2d8      	uxtb	r0, r3
 8003e78:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e7c:	121b      	asrs	r3, r3, #8
 8003e7e:	b21b      	sxth	r3, r3
 8003e80:	b2d9      	uxtb	r1, r3
 8003e82:	88bb      	ldrh	r3, [r7, #4]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003e8a:	121b      	asrs	r3, r3, #8
 8003e8c:	b21b      	sxth	r3, r3
 8003e8e:	b2dc      	uxtb	r4, r3
 8003e90:	883b      	ldrh	r3, [r7, #0]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	4623      	mov	r3, r4
 8003e98:	f7fd fea8 	bl	8001bec <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8003e9c:	4b46      	ldr	r3, [pc, #280]	; (8003fb8 <setAddrWindow+0x234>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d07b      	beq.n	8003f9c <setAddrWindow+0x218>
 8003ea4:	4b3f      	ldr	r3, [pc, #252]	; (8003fa4 <setAddrWindow+0x220>)
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	2b65      	cmp	r3, #101	; 0x65
 8003eaa:	d177      	bne.n	8003f9c <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8003eac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eb0:	121b      	asrs	r3, r3, #8
 8003eb2:	b21b      	sxth	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	723b      	strb	r3, [r7, #8]
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8003ebe:	4b3f      	ldr	r3, [pc, #252]	; (8003fbc <setAddrWindow+0x238>)
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	f107 0208 	add.w	r2, r7, #8
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fd fccd 	bl	8001868 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 8003ece:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ed2:	121b      	asrs	r3, r3, #8
 8003ed4:	b21b      	sxth	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	723b      	strb	r3, [r7, #8]
 8003eda:	88bb      	ldrh	r3, [r7, #4]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8003ee0:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <setAddrWindow+0x23c>)
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	f107 0208 	add.w	r2, r7, #8
 8003ee8:	2102      	movs	r1, #2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fd fcbc 	bl	8001868 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8003ef0:	e054      	b.n	8003f9c <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 8003ef2:	4b32      	ldr	r3, [pc, #200]	; (8003fbc <setAddrWindow+0x238>)
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	88fa      	ldrh	r2, [r7, #6]
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fd f9f6 	bl	80012ec <WriteCmdData>
       WriteCmdData(_MP, y);
 8003f00:	4b2f      	ldr	r3, [pc, #188]	; (8003fc0 <setAddrWindow+0x23c>)
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	88ba      	ldrh	r2, [r7, #4]
 8003f06:	4611      	mov	r1, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fd f9ef 	bl	80012ec <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8003f0e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003f12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d105      	bne.n	8003f26 <setAddrWindow+0x1a2>
 8003f1a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003f1e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d03a      	beq.n	8003f9c <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8003f26:	4b21      	ldr	r3, [pc, #132]	; (8003fac <setAddrWindow+0x228>)
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d018      	beq.n	8003f64 <setAddrWindow+0x1e0>
               if (rotation & 1)
 8003f32:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <setAddrWindow+0x224>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 8003f3e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003f42:	021b      	lsls	r3, r3, #8
 8003f44:	b21a      	sxth	r2, r3
 8003f46:	88bb      	ldrh	r3, [r7, #4]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	80bb      	strh	r3, [r7, #4]
 8003f4c:	88bb      	ldrh	r3, [r7, #4]
 8003f4e:	803b      	strh	r3, [r7, #0]
 8003f50:	e008      	b.n	8003f64 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 8003f52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	b21a      	sxth	r2, r3
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	80fb      	strh	r3, [r7, #6]
 8003f60:	88fb      	ldrh	r3, [r7, #6]
 8003f62:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8003f64:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <setAddrWindow+0x22c>)
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	88fa      	ldrh	r2, [r7, #6]
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fd f9bd 	bl	80012ec <WriteCmdData>
           WriteCmdData(_SP, y);
 8003f72:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <setAddrWindow+0x230>)
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	88ba      	ldrh	r2, [r7, #4]
 8003f78:	4611      	mov	r1, r2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fd f9b6 	bl	80012ec <WriteCmdData>
           WriteCmdData(_EC, x1);
 8003f80:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <setAddrWindow+0x240>)
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	887a      	ldrh	r2, [r7, #2]
 8003f86:	4611      	mov	r1, r2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fd f9af 	bl	80012ec <WriteCmdData>
           WriteCmdData(_EP, y1);
 8003f8e:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <setAddrWindow+0x244>)
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	883a      	ldrh	r2, [r7, #0]
 8003f94:	4611      	mov	r1, r2
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fd f9a8 	bl	80012ec <WriteCmdData>
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd90      	pop	{r4, r7, pc}
 8003fa4:	20000216 	.word	0x20000216
 8003fa8:	2000003c 	.word	0x2000003c
 8003fac:	20000208 	.word	0x20000208
 8003fb0:	20000212 	.word	0x20000212
 8003fb4:	2000020a 	.word	0x2000020a
 8003fb8:	20000037 	.word	0x20000037
 8003fbc:	20000210 	.word	0x20000210
 8003fc0:	2000020e 	.word	0x2000020e
 8003fc4:	2000021a 	.word	0x2000021a
 8003fc8:	20000214 	.word	0x20000214

08003fcc <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	80fb      	strh	r3, [r7, #6]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	80bb      	strh	r3, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8003fde:	4b89      	ldr	r3, [pc, #548]	; (8004204 <vertScroll+0x238>)
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	f249 3227 	movw	r2, #37671	; 0x9327
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d10b      	bne.n	8004002 <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8003fea:	4b87      	ldr	r3, [pc, #540]	; (8004208 <vertScroll+0x23c>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d003      	beq.n	8003ffa <vertScroll+0x2e>
 8003ff2:	4b85      	ldr	r3, [pc, #532]	; (8004208 <vertScroll+0x23c>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d103      	bne.n	8004002 <vertScroll+0x36>
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	3320      	adds	r3, #32
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	425b      	negs	r3, r3
 8004006:	b29a      	uxth	r2, r3
 8004008:	88bb      	ldrh	r3, [r7, #4]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	b29b      	uxth	r3, r3
 800400e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004012:	b29b      	uxth	r3, r3
 8004014:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 800401a:	4b7a      	ldr	r3, [pc, #488]	; (8004204 <vertScroll+0x238>)
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	f249 3227 	movw	r2, #37671	; 0x9327
 8004022:	4293      	cmp	r3, r2
 8004024:	d103      	bne.n	800402e <vertScroll+0x62>
 8004026:	8afb      	ldrh	r3, [r7, #22]
 8004028:	3320      	adds	r3, #32
 800402a:	b29b      	uxth	r3, r3
 800402c:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 800402e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004032:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004036:	425b      	negs	r3, r3
 8004038:	429a      	cmp	r2, r3
 800403a:	dd05      	ble.n	8004048 <vertScroll+0x7c>
 800403c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004040:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	db01      	blt.n	800404c <vertScroll+0x80>
 8004048:	2300      	movs	r3, #0
 800404a:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 800404c:	88fa      	ldrh	r2, [r7, #6]
 800404e:	887b      	ldrh	r3, [r7, #2]
 8004050:	4413      	add	r3, r2
 8004052:	b29b      	uxth	r3, r3
 8004054:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 8004056:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800405a:	2b00      	cmp	r3, #0
 800405c:	da04      	bge.n	8004068 <vertScroll+0x9c>
        vsp += scrollines;          //keep in unsigned range
 800405e:	8aba      	ldrh	r2, [r7, #20]
 8004060:	88bb      	ldrh	r3, [r7, #4]
 8004062:	4413      	add	r3, r2
 8004064:	b29b      	uxth	r3, r3
 8004066:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 8004068:	88fa      	ldrh	r2, [r7, #6]
 800406a:	88bb      	ldrh	r3, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29b      	uxth	r3, r3
 8004074:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8004076:	4b65      	ldr	r3, [pc, #404]	; (800420c <vertScroll+0x240>)
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d072      	beq.n	8004168 <vertScroll+0x19c>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8004082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004086:	121b      	asrs	r3, r3, #8
 8004088:	b21b      	sxth	r3, r3
 800408a:	b2db      	uxtb	r3, r3
 800408c:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 8004094:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004098:	121b      	asrs	r3, r3, #8
 800409a:	b21b      	sxth	r3, r3
 800409c:	b2db      	uxtb	r3, r3
 800409e:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 80040a0:	88bb      	ldrh	r3, [r7, #4]
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 80040a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040aa:	121b      	asrs	r3, r3, #8
 80040ac:	b21b      	sxth	r3, r3
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 80040b2:	8afb      	ldrh	r3, [r7, #22]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 80040b8:	4b55      	ldr	r3, [pc, #340]	; (8004210 <vertScroll+0x244>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <vertScroll+0xf8>
 80040c0:	230e      	movs	r3, #14
 80040c2:	e000      	b.n	80040c6 <vertScroll+0xfa>
 80040c4:	2333      	movs	r3, #51	; 0x33
 80040c6:	f107 020c 	add.w	r2, r7, #12
 80040ca:	2106      	movs	r1, #6
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fd fbcb 	bl	8001868 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 80040d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80040d6:	121b      	asrs	r3, r3, #8
 80040d8:	b21b      	sxth	r3, r3
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 80040de:	8abb      	ldrh	r3, [r7, #20]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 80040e4:	4b4a      	ldr	r3, [pc, #296]	; (8004210 <vertScroll+0x244>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <vertScroll+0x124>
 80040ec:	2314      	movs	r3, #20
 80040ee:	e000      	b.n	80040f2 <vertScroll+0x126>
 80040f0:	2337      	movs	r3, #55	; 0x37
 80040f2:	f107 020c 	add.w	r2, r7, #12
 80040f6:	2102      	movs	r1, #2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fd fbb5 	bl	8001868 <WriteCmdParamN>
		if (is8347) {
 80040fe:	4b44      	ldr	r3, [pc, #272]	; (8004210 <vertScroll+0x244>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d01f      	beq.n	8004146 <vertScroll+0x17a>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8004106:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d009      	beq.n	8004122 <vertScroll+0x156>
 800410e:	4b3d      	ldr	r3, [pc, #244]	; (8004204 <vertScroll+0x238>)
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	f248 3247 	movw	r2, #33607	; 0x8347
 8004116:	4293      	cmp	r3, r2
 8004118:	d101      	bne.n	800411e <vertScroll+0x152>
 800411a:	2302      	movs	r3, #2
 800411c:	e002      	b.n	8004124 <vertScroll+0x158>
 800411e:	2308      	movs	r3, #8
 8004120:	e000      	b.n	8004124 <vertScroll+0x158>
 8004122:	2300      	movs	r3, #0
 8004124:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8004126:	4b37      	ldr	r3, [pc, #220]	; (8004204 <vertScroll+0x238>)
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	f248 3247 	movw	r2, #33607	; 0x8347
 800412e:	4293      	cmp	r3, r2
 8004130:	d101      	bne.n	8004136 <vertScroll+0x16a>
 8004132:	2318      	movs	r3, #24
 8004134:	e000      	b.n	8004138 <vertScroll+0x16c>
 8004136:	2301      	movs	r3, #1
 8004138:	f107 020c 	add.w	r2, r7, #12
 800413c:	2101      	movs	r1, #1
 800413e:	4618      	mov	r0, r3
 8004140:	f7fd fb92 	bl	8001868 <WriteCmdParamN>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
		}
		return;
 8004144:	e059      	b.n	80041fa <vertScroll+0x22e>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8004146:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d155      	bne.n	80041fa <vertScroll+0x22e>
 800414e:	4b2f      	ldr	r3, [pc, #188]	; (800420c <vertScroll+0x240>)
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d04f      	beq.n	80041fa <vertScroll+0x22e>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 800415a:	2200      	movs	r2, #0
 800415c:	2100      	movs	r1, #0
 800415e:	2013      	movs	r0, #19
 8004160:	f7fd fb82 	bl	8001868 <WriteCmdParamN>
		return;
 8004164:	bf00      	nop
 8004166:	e048      	b.n	80041fa <vertScroll+0x22e>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8004168:	4b26      	ldr	r3, [pc, #152]	; (8004204 <vertScroll+0x238>)
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	f247 7293 	movw	r2, #30611	; 0x7793
 8004170:	4293      	cmp	r3, r2
 8004172:	d021      	beq.n	80041b8 <vertScroll+0x1ec>
 8004174:	f247 7293 	movw	r2, #30611	; 0x7793
 8004178:	4293      	cmp	r3, r2
 800417a:	dc08      	bgt.n	800418e <vertScroll+0x1c2>
 800417c:	f245 4220 	movw	r2, #21536	; 0x5420
 8004180:	4293      	cmp	r3, r2
 8004182:	d019      	beq.n	80041b8 <vertScroll+0x1ec>
 8004184:	f247 7283 	movw	r2, #30595	; 0x7783
 8004188:	4293      	cmp	r3, r2
 800418a:	d009      	beq.n	80041a0 <vertScroll+0x1d4>
 800418c:	e025      	b.n	80041da <vertScroll+0x20e>
 800418e:	f249 3226 	movw	r2, #37670	; 0x9326
 8004192:	4293      	cmp	r3, r2
 8004194:	d010      	beq.n	80041b8 <vertScroll+0x1ec>
 8004196:	f24b 5209 	movw	r2, #46345	; 0xb509
 800419a:	4293      	cmp	r3, r2
 800419c:	d00c      	beq.n	80041b8 <vertScroll+0x1ec>
 800419e:	e01c      	b.n	80041da <vertScroll+0x20e>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 80041a0:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <vertScroll+0x248>)
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	4619      	mov	r1, r3
 80041a6:	2061      	movs	r0, #97	; 0x61
 80041a8:	f7fd f8a0 	bl	80012ec <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 80041ac:	8abb      	ldrh	r3, [r7, #20]
 80041ae:	4619      	mov	r1, r3
 80041b0:	206a      	movs	r0, #106	; 0x6a
 80041b2:	f7fd f89b 	bl	80012ec <WriteCmdData>
        break;
 80041b6:	e021      	b.n	80041fc <vertScroll+0x230>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 80041b8:	4b16      	ldr	r3, [pc, #88]	; (8004214 <vertScroll+0x248>)
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	f043 0302 	orr.w	r3, r3, #2
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	4619      	mov	r1, r3
 80041c4:	f240 4001 	movw	r0, #1025	; 0x401
 80041c8:	f7fd f890 	bl	80012ec <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 80041cc:	8abb      	ldrh	r3, [r7, #20]
 80041ce:	4619      	mov	r1, r3
 80041d0:	f240 4004 	movw	r0, #1028	; 0x404
 80041d4:	f7fd f88a 	bl	80012ec <WriteCmdData>
        break;
 80041d8:	e010      	b.n	80041fc <vertScroll+0x230>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 80041da:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <vertScroll+0x248>)
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	f043 0302 	orr.w	r3, r3, #2
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	4619      	mov	r1, r3
 80041e6:	2061      	movs	r0, #97	; 0x61
 80041e8:	f7fd f880 	bl	80012ec <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 80041ec:	8abb      	ldrh	r3, [r7, #20]
 80041ee:	4619      	mov	r1, r3
 80041f0:	206a      	movs	r0, #106	; 0x6a
 80041f2:	f7fd f87b 	bl	80012ec <WriteCmdData>
        break;
 80041f6:	bf00      	nop
 80041f8:	e000      	b.n	80041fc <vertScroll+0x230>
		return;
 80041fa:	bf00      	nop
    }
}
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000216 	.word	0x20000216
 8004208:	2000003c 	.word	0x2000003c
 800420c:	20000208 	.word	0x20000208
 8004210:	20000037 	.word	0x20000037
 8004214:	2000020c 	.word	0x2000020c

08004218 <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af02      	add	r7, sp, #8
 800421e:	4603      	mov	r3, r0
 8004220:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8004222:	4b08      	ldr	r3, [pc, #32]	; (8004244 <fillScreen+0x2c>)
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b21a      	sxth	r2, r3
 8004228:	4b07      	ldr	r3, [pc, #28]	; (8004248 <fillScreen+0x30>)
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	b219      	sxth	r1, r3
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	460b      	mov	r3, r1
 8004234:	2100      	movs	r1, #0
 8004236:	2000      	movs	r0, #0
 8004238:	f000 f9c0 	bl	80045bc <fillRect>
}
 800423c:	bf00      	nop
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	20000008 	.word	0x20000008
 8004248:	2000000a 	.word	0x2000000a

0800424c <invertDisplay>:

void invertDisplay(uint8_t i)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8004256:	4b46      	ldr	r3, [pc, #280]	; (8004370 <invertDisplay+0x124>)
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800425e:	2b00      	cmp	r3, #0
 8004260:	bf14      	ite	ne
 8004262:	2301      	movne	r3, #1
 8004264:	2300      	moveq	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	b21a      	sxth	r2, r3
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	b21b      	sxth	r3, r3
 800426e:	4053      	eors	r3, r2
 8004270:	b21b      	sxth	r3, r3
 8004272:	b29a      	uxth	r2, r3
 8004274:	4b3f      	ldr	r3, [pc, #252]	; (8004374 <invertDisplay+0x128>)
 8004276:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8004278:	4b3d      	ldr	r3, [pc, #244]	; (8004370 <invertDisplay+0x124>)
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d035      	beq.n	80042f0 <invertDisplay+0xa4>
        if (is8347) {
 8004284:	4b3c      	ldr	r3, [pc, #240]	; (8004378 <invertDisplay+0x12c>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d024      	beq.n	80042d6 <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 800428c:	4b3b      	ldr	r3, [pc, #236]	; (800437c <invertDisplay+0x130>)
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	f248 3247 	movw	r2, #33607	; 0x8347
 8004294:	4293      	cmp	r3, r2
 8004296:	d005      	beq.n	80042a4 <invertDisplay+0x58>
 8004298:	4b38      	ldr	r3, [pc, #224]	; (800437c <invertDisplay+0x130>)
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	f245 2252 	movw	r2, #21074	; 0x5252
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d108      	bne.n	80042b6 <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 80042a4:	4b33      	ldr	r3, [pc, #204]	; (8004374 <invertDisplay+0x128>)
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <invertDisplay+0x64>
 80042ac:	2306      	movs	r3, #6
 80042ae:	e000      	b.n	80042b2 <invertDisplay+0x66>
 80042b0:	2302      	movs	r3, #2
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	e007      	b.n	80042c6 <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 80042b6:	4b2f      	ldr	r3, [pc, #188]	; (8004374 <invertDisplay+0x128>)
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <invertDisplay+0x76>
 80042be:	2308      	movs	r3, #8
 80042c0:	e000      	b.n	80042c4 <invertDisplay+0x78>
 80042c2:	230a      	movs	r3, #10
 80042c4:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 80042c6:	f107 030f 	add.w	r3, r7, #15
 80042ca:	461a      	mov	r2, r3
 80042cc:	2101      	movs	r1, #1
 80042ce:	2001      	movs	r0, #1
 80042d0:	f7fd faca 	bl	8001868 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 80042d4:	e049      	b.n	800436a <invertDisplay+0x11e>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 80042d6:	4b27      	ldr	r3, [pc, #156]	; (8004374 <invertDisplay+0x128>)
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <invertDisplay+0x96>
 80042de:	2321      	movs	r3, #33	; 0x21
 80042e0:	e000      	b.n	80042e4 <invertDisplay+0x98>
 80042e2:	2320      	movs	r3, #32
 80042e4:	2200      	movs	r2, #0
 80042e6:	2100      	movs	r1, #0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fd fabd 	bl	8001868 <WriteCmdParamN>
 80042ee:	e03c      	b.n	800436a <invertDisplay+0x11e>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 80042f0:	4b22      	ldr	r3, [pc, #136]	; (800437c <invertDisplay+0x130>)
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	f247 7293 	movw	r2, #30611	; 0x7793
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d024      	beq.n	8004346 <invertDisplay+0xfa>
 80042fc:	f247 7293 	movw	r2, #30611	; 0x7793
 8004300:	4293      	cmp	r3, r2
 8004302:	dc07      	bgt.n	8004314 <invertDisplay+0xc8>
 8004304:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004308:	d010      	beq.n	800432c <invertDisplay+0xe0>
 800430a:	f245 4220 	movw	r2, #21536	; 0x5420
 800430e:	4293      	cmp	r3, r2
 8004310:	d019      	beq.n	8004346 <invertDisplay+0xfa>
 8004312:	e023      	b.n	800435c <invertDisplay+0x110>
 8004314:	f249 3226 	movw	r2, #37670	; 0x9326
 8004318:	4293      	cmp	r3, r2
 800431a:	d014      	beq.n	8004346 <invertDisplay+0xfa>
 800431c:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004320:	4293      	cmp	r3, r2
 8004322:	d010      	beq.n	8004346 <invertDisplay+0xfa>
 8004324:	f249 2225 	movw	r2, #37413	; 0x9225
 8004328:	4293      	cmp	r3, r2
 800432a:	d117      	bne.n	800435c <invertDisplay+0x110>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 800432c:	4b11      	ldr	r3, [pc, #68]	; (8004374 <invertDisplay+0x128>)
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	b21b      	sxth	r3, r3
 8004334:	f043 0313 	orr.w	r3, r3, #19
 8004338:	b21b      	sxth	r3, r3
 800433a:	b29b      	uxth	r3, r3
 800433c:	4619      	mov	r1, r3
 800433e:	2007      	movs	r0, #7
 8004340:	f7fc ffd4 	bl	80012ec <WriteCmdData>
        break;
 8004344:	e011      	b.n	800436a <invertDisplay+0x11e>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 8004346:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <invertDisplay+0x128>)
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	f043 0302 	orr.w	r3, r3, #2
 800434e:	b29b      	uxth	r3, r3
 8004350:	4619      	mov	r1, r3
 8004352:	f240 4001 	movw	r0, #1025	; 0x401
 8004356:	f7fc ffc9 	bl	80012ec <WriteCmdData>
        break;
 800435a:	e006      	b.n	800436a <invertDisplay+0x11e>
    default:
        WriteCmdData(0x61, _lcd_rev);
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <invertDisplay+0x128>)
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	4619      	mov	r1, r3
 8004362:	2061      	movs	r0, #97	; 0x61
 8004364:	f7fc ffc2 	bl	80012ec <WriteCmdData>
        break;
 8004368:	bf00      	nop
    }
}
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000208 	.word	0x20000208
 8004374:	2000020c 	.word	0x2000020c
 8004378:	20000037 	.word	0x20000037
 800437c:	20000216 	.word	0x20000216

08004380 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b085      	sub	sp, #20
 8004384:	af02      	add	r7, sp, #8
 8004386:	4604      	mov	r4, r0
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	461a      	mov	r2, r3
 800438e:	4623      	mov	r3, r4
 8004390:	80fb      	strh	r3, [r7, #6]
 8004392:	4603      	mov	r3, r0
 8004394:	80bb      	strh	r3, [r7, #4]
 8004396:	460b      	mov	r3, r1
 8004398:	807b      	strh	r3, [r7, #2]
 800439a:	4613      	mov	r3, r2
 800439c:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, 1, h, color);
 800439e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80043a2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80043a6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80043aa:	883b      	ldrh	r3, [r7, #0]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	4613      	mov	r3, r2
 80043b0:	2201      	movs	r2, #1
 80043b2:	f000 f903 	bl	80045bc <fillRect>
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd90      	pop	{r4, r7, pc}

080043be <fillCircle>:
        }
    }
}

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80043be:	b590      	push	{r4, r7, lr}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af02      	add	r7, sp, #8
 80043c4:	4604      	mov	r4, r0
 80043c6:	4608      	mov	r0, r1
 80043c8:	4611      	mov	r1, r2
 80043ca:	461a      	mov	r2, r3
 80043cc:	4623      	mov	r3, r4
 80043ce:	80fb      	strh	r3, [r7, #6]
 80043d0:	4603      	mov	r3, r0
 80043d2:	80bb      	strh	r3, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	807b      	strh	r3, [r7, #2]
 80043d8:	4613      	mov	r3, r2
 80043da:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 80043dc:	88ba      	ldrh	r2, [r7, #4]
 80043de:	887b      	ldrh	r3, [r7, #2]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	b219      	sxth	r1, r3
 80043e6:	887b      	ldrh	r3, [r7, #2]
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3301      	adds	r3, #1
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	b21a      	sxth	r2, r3
 80043f2:	883b      	ldrh	r3, [r7, #0]
 80043f4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80043f8:	f7ff ffc2 	bl	8004380 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 80043fc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004400:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004404:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004408:	883b      	ldrh	r3, [r7, #0]
 800440a:	9301      	str	r3, [sp, #4]
 800440c:	2300      	movs	r3, #0
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	2303      	movs	r3, #3
 8004412:	f000 f804 	bl	800441e <fillCircleHelper>
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	bd90      	pop	{r4, r7, pc}

0800441e <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 800441e:	b590      	push	{r4, r7, lr}
 8004420:	b087      	sub	sp, #28
 8004422:	af00      	add	r7, sp, #0
 8004424:	4604      	mov	r4, r0
 8004426:	4608      	mov	r0, r1
 8004428:	4611      	mov	r1, r2
 800442a:	461a      	mov	r2, r3
 800442c:	4623      	mov	r3, r4
 800442e:	80fb      	strh	r3, [r7, #6]
 8004430:	4603      	mov	r3, r0
 8004432:	80bb      	strh	r3, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	807b      	strh	r3, [r7, #2]
 8004438:	4613      	mov	r3, r2
 800443a:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 800443c:	887b      	ldrh	r3, [r7, #2]
 800443e:	f1c3 0301 	rsb	r3, r3, #1
 8004442:	b29b      	uxth	r3, r3
 8004444:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8004446:	2301      	movs	r3, #1
 8004448:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800444a:	887b      	ldrh	r3, [r7, #2]
 800444c:	461a      	mov	r2, r3
 800444e:	03d2      	lsls	r2, r2, #15
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	b29b      	uxth	r3, r3
 8004456:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800445c:	887b      	ldrh	r3, [r7, #2]
 800445e:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8004460:	8a3b      	ldrh	r3, [r7, #16]
 8004462:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8004464:	89fb      	ldrh	r3, [r7, #14]
 8004466:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8004468:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800446c:	b29b      	uxth	r3, r3
 800446e:	3301      	adds	r3, #1
 8004470:	b29b      	uxth	r3, r3
 8004472:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 8004474:	e096      	b.n	80045a4 <fillCircleHelper+0x186>
        if (f >= 0) {
 8004476:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800447a:	2b00      	cmp	r3, #0
 800447c:	db0e      	blt.n	800449c <fillCircleHelper+0x7e>
            y--;
 800447e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29b      	uxth	r3, r3
 8004488:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800448a:	8a7b      	ldrh	r3, [r7, #18]
 800448c:	3302      	adds	r3, #2
 800448e:	b29b      	uxth	r3, r3
 8004490:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8004492:	8afa      	ldrh	r2, [r7, #22]
 8004494:	8a7b      	ldrh	r3, [r7, #18]
 8004496:	4413      	add	r3, r2
 8004498:	b29b      	uxth	r3, r3
 800449a:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800449c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3301      	adds	r3, #1
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80044a8:	8abb      	ldrh	r3, [r7, #20]
 80044aa:	3302      	adds	r3, #2
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 80044b0:	8afa      	ldrh	r2, [r7, #22]
 80044b2:	8abb      	ldrh	r3, [r7, #20]
 80044b4:	4413      	add	r3, r2
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 80044ba:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80044be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044c2:	3301      	adds	r3, #1
 80044c4:	429a      	cmp	r2, r3
 80044c6:	da31      	bge.n	800452c <fillCircleHelper+0x10e>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 80044c8:	787b      	ldrb	r3, [r7, #1]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d013      	beq.n	80044fa <fillCircleHelper+0xdc>
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	8a3b      	ldrh	r3, [r7, #16]
 80044d6:	4413      	add	r3, r2
 80044d8:	b29b      	uxth	r3, r3
 80044da:	b218      	sxth	r0, r3
 80044dc:	88ba      	ldrh	r2, [r7, #4]
 80044de:	89fb      	ldrh	r3, [r7, #14]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	b219      	sxth	r1, r3
 80044e6:	89fb      	ldrh	r3, [r7, #14]
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80044ee:	4413      	add	r3, r2
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	b21a      	sxth	r2, r3
 80044f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80044f6:	f7ff ff43 	bl	8004380 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 80044fa:	787b      	ldrb	r3, [r7, #1]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d013      	beq.n	800452c <fillCircleHelper+0x10e>
 8004504:	88fa      	ldrh	r2, [r7, #6]
 8004506:	8a3b      	ldrh	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	b29b      	uxth	r3, r3
 800450c:	b218      	sxth	r0, r3
 800450e:	88ba      	ldrh	r2, [r7, #4]
 8004510:	89fb      	ldrh	r3, [r7, #14]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	b29b      	uxth	r3, r3
 8004516:	b219      	sxth	r1, r3
 8004518:	89fb      	ldrh	r3, [r7, #14]
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004520:	4413      	add	r3, r2
 8004522:	b29b      	uxth	r3, r3
 8004524:	b21a      	sxth	r2, r3
 8004526:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004528:	f7ff ff2a 	bl	8004380 <drawFastVLine>
        }
        if(y != py) {
 800452c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004530:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004534:	429a      	cmp	r2, r3
 8004536:	d033      	beq.n	80045a0 <fillCircleHelper+0x182>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8004538:	787b      	ldrb	r3, [r7, #1]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d013      	beq.n	800456a <fillCircleHelper+0x14c>
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	897b      	ldrh	r3, [r7, #10]
 8004546:	4413      	add	r3, r2
 8004548:	b29b      	uxth	r3, r3
 800454a:	b218      	sxth	r0, r3
 800454c:	88ba      	ldrh	r2, [r7, #4]
 800454e:	89bb      	ldrh	r3, [r7, #12]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	b29b      	uxth	r3, r3
 8004554:	b219      	sxth	r1, r3
 8004556:	89bb      	ldrh	r3, [r7, #12]
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800455e:	4413      	add	r3, r2
 8004560:	b29b      	uxth	r3, r3
 8004562:	b21a      	sxth	r2, r3
 8004564:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004566:	f7ff ff0b 	bl	8004380 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 800456a:	787b      	ldrb	r3, [r7, #1]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d013      	beq.n	800459c <fillCircleHelper+0x17e>
 8004574:	88fa      	ldrh	r2, [r7, #6]
 8004576:	897b      	ldrh	r3, [r7, #10]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	b29b      	uxth	r3, r3
 800457c:	b218      	sxth	r0, r3
 800457e:	88ba      	ldrh	r2, [r7, #4]
 8004580:	89bb      	ldrh	r3, [r7, #12]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	b29b      	uxth	r3, r3
 8004586:	b219      	sxth	r1, r3
 8004588:	89bb      	ldrh	r3, [r7, #12]
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004590:	4413      	add	r3, r2
 8004592:	b29b      	uxth	r3, r3
 8004594:	b21a      	sxth	r2, r3
 8004596:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004598:	f7ff fef2 	bl	8004380 <drawFastVLine>
            py = y;
 800459c:	89fb      	ldrh	r3, [r7, #14]
 800459e:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 80045a0:	8a3b      	ldrh	r3, [r7, #16]
 80045a2:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 80045a4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80045a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	f6ff af62 	blt.w	8004476 <fillCircleHelper+0x58>
    }
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd90      	pop	{r4, r7, pc}
	...

080045bc <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80045bc:	b590      	push	{r4, r7, lr}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4604      	mov	r4, r0
 80045c4:	4608      	mov	r0, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	461a      	mov	r2, r3
 80045ca:	4623      	mov	r3, r4
 80045cc:	80fb      	strh	r3, [r7, #6]
 80045ce:	4603      	mov	r3, r0
 80045d0:	80bb      	strh	r3, [r7, #4]
 80045d2:	460b      	mov	r3, r1
 80045d4:	807b      	strh	r3, [r7, #2]
 80045d6:	4613      	mov	r3, r2
 80045d8:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 80045da:	4b92      	ldr	r3, [pc, #584]	; (8004824 <fillRect+0x268>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <fillRect+0x32>
 80045e2:	8c3b      	ldrh	r3, [r7, #32]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fc fdd1 	bl	800118c <color565_to_555>
 80045ea:	4603      	mov	r3, r0
 80045ec:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 80045ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	da08      	bge.n	8004608 <fillRect+0x4c>
        w = -w;
 80045f6:	887b      	ldrh	r3, [r7, #2]
 80045f8:	425b      	negs	r3, r3
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	807b      	strh	r3, [r7, #2]
        x -= w;
 80045fe:	88fa      	ldrh	r2, [r7, #6]
 8004600:	887b      	ldrh	r3, [r7, #2]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	b29b      	uxth	r3, r3
 8004606:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8004608:	88fa      	ldrh	r2, [r7, #6]
 800460a:	887b      	ldrh	r3, [r7, #2]
 800460c:	4413      	add	r3, r2
 800460e:	b29b      	uxth	r3, r3
 8004610:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8004612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004616:	2b00      	cmp	r3, #0
 8004618:	da01      	bge.n	800461e <fillRect+0x62>
        x = 0;
 800461a:	2300      	movs	r3, #0
 800461c:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 800461e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8004622:	f7fc fd9b 	bl	800115c <width>
 8004626:	4603      	mov	r3, r0
 8004628:	429c      	cmp	r4, r3
 800462a:	dd03      	ble.n	8004634 <fillRect+0x78>
        end = width();
 800462c:	f7fc fd96 	bl	800115c <width>
 8004630:	4603      	mov	r3, r0
 8004632:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 8004634:	89fa      	ldrh	r2, [r7, #14]
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	b29b      	uxth	r3, r3
 800463c:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 800463e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004642:	2b00      	cmp	r3, #0
 8004644:	da08      	bge.n	8004658 <fillRect+0x9c>
        h = -h;
 8004646:	883b      	ldrh	r3, [r7, #0]
 8004648:	425b      	negs	r3, r3
 800464a:	b29b      	uxth	r3, r3
 800464c:	803b      	strh	r3, [r7, #0]
        y -= h;
 800464e:	88ba      	ldrh	r2, [r7, #4]
 8004650:	883b      	ldrh	r3, [r7, #0]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	b29b      	uxth	r3, r3
 8004656:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8004658:	88ba      	ldrh	r2, [r7, #4]
 800465a:	883b      	ldrh	r3, [r7, #0]
 800465c:	4413      	add	r3, r2
 800465e:	b29b      	uxth	r3, r3
 8004660:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8004662:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	da01      	bge.n	800466e <fillRect+0xb2>
        y = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 800466e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8004672:	f7fc fd7f 	bl	8001174 <height>
 8004676:	4603      	mov	r3, r0
 8004678:	429c      	cmp	r4, r3
 800467a:	dd03      	ble.n	8004684 <fillRect+0xc8>
        end = height();
 800467c:	f7fc fd7a 	bl	8001174 <height>
 8004680:	4603      	mov	r3, r0
 8004682:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 8004684:	89fa      	ldrh	r2, [r7, #14]
 8004686:	88bb      	ldrh	r3, [r7, #4]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	b29b      	uxth	r3, r3
 800468c:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 800468e:	88fa      	ldrh	r2, [r7, #6]
 8004690:	887b      	ldrh	r3, [r7, #2]
 8004692:	4413      	add	r3, r2
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29b      	uxth	r3, r3
 800469a:	b21c      	sxth	r4, r3
 800469c:	88ba      	ldrh	r2, [r7, #4]
 800469e:	883b      	ldrh	r3, [r7, #0]
 80046a0:	4413      	add	r3, r2
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	b21b      	sxth	r3, r3
 80046aa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80046ae:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80046b2:	4622      	mov	r2, r4
 80046b4:	f7ff fb66 	bl	8003d84 <setAddrWindow>
    CS_ACTIVE;
 80046b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046bc:	485a      	ldr	r0, [pc, #360]	; (8004828 <fillRect+0x26c>)
 80046be:	f7fc fcff 	bl	80010c0 <PIN_LOW>
    WriteCmd(_MW);
 80046c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046c6:	4859      	ldr	r0, [pc, #356]	; (800482c <fillRect+0x270>)
 80046c8:	f7fc fcfa 	bl	80010c0 <PIN_LOW>
 80046cc:	4b58      	ldr	r3, [pc, #352]	; (8004830 <fillRect+0x274>)
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	0a1b      	lsrs	r3, r3, #8
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	737b      	strb	r3, [r7, #13]
 80046d6:	4b56      	ldr	r3, [pc, #344]	; (8004830 <fillRect+0x274>)
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	733b      	strb	r3, [r7, #12]
 80046dc:	4b53      	ldr	r3, [pc, #332]	; (800482c <fillRect+0x270>)
 80046de:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80046e2:	619a      	str	r2, [r3, #24]
 80046e4:	4b53      	ldr	r3, [pc, #332]	; (8004834 <fillRect+0x278>)
 80046e6:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80046ea:	619a      	str	r2, [r3, #24]
 80046ec:	4b52      	ldr	r3, [pc, #328]	; (8004838 <fillRect+0x27c>)
 80046ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046f2:	619a      	str	r2, [r3, #24]
 80046f4:	7b7b      	ldrb	r3, [r7, #13]
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	4a4f      	ldr	r2, [pc, #316]	; (8004838 <fillRect+0x27c>)
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	6193      	str	r3, [r2, #24]
 8004700:	7b7b      	ldrb	r3, [r7, #13]
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8004708:	7b7b      	ldrb	r3, [r7, #13]
 800470a:	015b      	lsls	r3, r3, #5
 800470c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004710:	431a      	orrs	r2, r3
 8004712:	7b7b      	ldrb	r3, [r7, #13]
 8004714:	015b      	lsls	r3, r3, #5
 8004716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471a:	431a      	orrs	r2, r3
 800471c:	4b45      	ldr	r3, [pc, #276]	; (8004834 <fillRect+0x278>)
 800471e:	619a      	str	r2, [r3, #24]
 8004720:	7b7b      	ldrb	r3, [r7, #13]
 8004722:	105b      	asrs	r3, r3, #1
 8004724:	f003 0208 	and.w	r2, r3, #8
 8004728:	7b7b      	ldrb	r3, [r7, #13]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004730:	431a      	orrs	r2, r3
 8004732:	7b7b      	ldrb	r3, [r7, #13]
 8004734:	105b      	asrs	r3, r3, #1
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	431a      	orrs	r2, r3
 800473c:	7b7b      	ldrb	r3, [r7, #13]
 800473e:	10db      	asrs	r3, r3, #3
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	431a      	orrs	r2, r3
 8004746:	4b39      	ldr	r3, [pc, #228]	; (800482c <fillRect+0x270>)
 8004748:	619a      	str	r2, [r3, #24]
 800474a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800474e:	4837      	ldr	r0, [pc, #220]	; (800482c <fillRect+0x270>)
 8004750:	f7fc fcb6 	bl	80010c0 <PIN_LOW>
 8004754:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004758:	4834      	ldr	r0, [pc, #208]	; (800482c <fillRect+0x270>)
 800475a:	f7fc fcc1 	bl	80010e0 <PIN_HIGH>
 800475e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004762:	4832      	ldr	r0, [pc, #200]	; (800482c <fillRect+0x270>)
 8004764:	f7fc fcbc 	bl	80010e0 <PIN_HIGH>
 8004768:	4b30      	ldr	r3, [pc, #192]	; (800482c <fillRect+0x270>)
 800476a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800476e:	619a      	str	r2, [r3, #24]
 8004770:	4b30      	ldr	r3, [pc, #192]	; (8004834 <fillRect+0x278>)
 8004772:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8004776:	619a      	str	r2, [r3, #24]
 8004778:	4b2f      	ldr	r3, [pc, #188]	; (8004838 <fillRect+0x27c>)
 800477a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800477e:	619a      	str	r2, [r3, #24]
 8004780:	7b3b      	ldrb	r3, [r7, #12]
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	4a2c      	ldr	r2, [pc, #176]	; (8004838 <fillRect+0x27c>)
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	6193      	str	r3, [r2, #24]
 800478c:	7b3b      	ldrb	r3, [r7, #12]
 800478e:	021b      	lsls	r3, r3, #8
 8004790:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8004794:	7b3b      	ldrb	r3, [r7, #12]
 8004796:	015b      	lsls	r3, r3, #5
 8004798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479c:	431a      	orrs	r2, r3
 800479e:	7b3b      	ldrb	r3, [r7, #12]
 80047a0:	015b      	lsls	r3, r3, #5
 80047a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a6:	431a      	orrs	r2, r3
 80047a8:	4b22      	ldr	r3, [pc, #136]	; (8004834 <fillRect+0x278>)
 80047aa:	619a      	str	r2, [r3, #24]
 80047ac:	7b3b      	ldrb	r3, [r7, #12]
 80047ae:	105b      	asrs	r3, r3, #1
 80047b0:	f003 0208 	and.w	r2, r3, #8
 80047b4:	7b3b      	ldrb	r3, [r7, #12]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047bc:	431a      	orrs	r2, r3
 80047be:	7b3b      	ldrb	r3, [r7, #12]
 80047c0:	105b      	asrs	r3, r3, #1
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	431a      	orrs	r2, r3
 80047c8:	7b3b      	ldrb	r3, [r7, #12]
 80047ca:	10db      	asrs	r3, r3, #3
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	431a      	orrs	r2, r3
 80047d2:	4b16      	ldr	r3, [pc, #88]	; (800482c <fillRect+0x270>)
 80047d4:	619a      	str	r2, [r3, #24]
 80047d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047da:	4814      	ldr	r0, [pc, #80]	; (800482c <fillRect+0x270>)
 80047dc:	f7fc fc70 	bl	80010c0 <PIN_LOW>
 80047e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047e4:	4811      	ldr	r0, [pc, #68]	; (800482c <fillRect+0x270>)
 80047e6:	f7fc fc7b 	bl	80010e0 <PIN_HIGH>
 80047ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047ee:	480f      	ldr	r0, [pc, #60]	; (800482c <fillRect+0x270>)
 80047f0:	f7fc fc76 	bl	80010e0 <PIN_HIGH>
 80047f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047f8:	480c      	ldr	r0, [pc, #48]	; (800482c <fillRect+0x270>)
 80047fa:	f7fc fc71 	bl	80010e0 <PIN_HIGH>
    if (h > w) {
 80047fe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004802:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004806:	429a      	cmp	r2, r3
 8004808:	dd05      	ble.n	8004816 <fillRect+0x25a>
        end = h;
 800480a:	883b      	ldrh	r3, [r7, #0]
 800480c:	81fb      	strh	r3, [r7, #14]
        h = w;
 800480e:	887b      	ldrh	r3, [r7, #2]
 8004810:	803b      	strh	r3, [r7, #0]
        w = end;
 8004812:	89fb      	ldrh	r3, [r7, #14]
 8004814:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8004816:	8c3b      	ldrh	r3, [r7, #32]
 8004818:	0a1b      	lsrs	r3, r3, #8
 800481a:	b29b      	uxth	r3, r3
 800481c:	72fb      	strb	r3, [r7, #11]
 800481e:	8c3b      	ldrh	r3, [r7, #32]
 8004820:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 8004822:	e0a2      	b.n	800496a <fillRect+0x3ae>
 8004824:	20000038 	.word	0x20000038
 8004828:	40020400 	.word	0x40020400
 800482c:	40021000 	.word	0x40021000
 8004830:	20000206 	.word	0x20000206
 8004834:	40021400 	.word	0x40021400
 8004838:	40021800 	.word	0x40021800
        end = w;
 800483c:	887b      	ldrh	r3, [r7, #2]
 800483e:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 8004840:	4b64      	ldr	r3, [pc, #400]	; (80049d4 <fillRect+0x418>)
 8004842:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8004846:	619a      	str	r2, [r3, #24]
 8004848:	4b63      	ldr	r3, [pc, #396]	; (80049d8 <fillRect+0x41c>)
 800484a:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800484e:	619a      	str	r2, [r3, #24]
 8004850:	4b62      	ldr	r3, [pc, #392]	; (80049dc <fillRect+0x420>)
 8004852:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004856:	619a      	str	r2, [r3, #24]
 8004858:	7afb      	ldrb	r3, [r7, #11]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	4a5f      	ldr	r2, [pc, #380]	; (80049dc <fillRect+0x420>)
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	6193      	str	r3, [r2, #24]
 8004864:	7afb      	ldrb	r3, [r7, #11]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800486c:	7afb      	ldrb	r3, [r7, #11]
 800486e:	015b      	lsls	r3, r3, #5
 8004870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004874:	431a      	orrs	r2, r3
 8004876:	7afb      	ldrb	r3, [r7, #11]
 8004878:	015b      	lsls	r3, r3, #5
 800487a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487e:	431a      	orrs	r2, r3
 8004880:	4b55      	ldr	r3, [pc, #340]	; (80049d8 <fillRect+0x41c>)
 8004882:	619a      	str	r2, [r3, #24]
 8004884:	7afb      	ldrb	r3, [r7, #11]
 8004886:	105b      	asrs	r3, r3, #1
 8004888:	f003 0208 	and.w	r2, r3, #8
 800488c:	7afb      	ldrb	r3, [r7, #11]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004894:	431a      	orrs	r2, r3
 8004896:	7afb      	ldrb	r3, [r7, #11]
 8004898:	105b      	asrs	r3, r3, #1
 800489a:	f003 0320 	and.w	r3, r3, #32
 800489e:	431a      	orrs	r2, r3
 80048a0:	7afb      	ldrb	r3, [r7, #11]
 80048a2:	10db      	asrs	r3, r3, #3
 80048a4:	f003 0310 	and.w	r3, r3, #16
 80048a8:	431a      	orrs	r2, r3
 80048aa:	4b4a      	ldr	r3, [pc, #296]	; (80049d4 <fillRect+0x418>)
 80048ac:	619a      	str	r2, [r3, #24]
 80048ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048b2:	4848      	ldr	r0, [pc, #288]	; (80049d4 <fillRect+0x418>)
 80048b4:	f7fc fc04 	bl	80010c0 <PIN_LOW>
 80048b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048bc:	4845      	ldr	r0, [pc, #276]	; (80049d4 <fillRect+0x418>)
 80048be:	f7fc fc0f 	bl	80010e0 <PIN_HIGH>
 80048c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048c6:	4843      	ldr	r0, [pc, #268]	; (80049d4 <fillRect+0x418>)
 80048c8:	f7fc fc0a 	bl	80010e0 <PIN_HIGH>
            write8(lo);
 80048cc:	4b41      	ldr	r3, [pc, #260]	; (80049d4 <fillRect+0x418>)
 80048ce:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80048d2:	619a      	str	r2, [r3, #24]
 80048d4:	4b40      	ldr	r3, [pc, #256]	; (80049d8 <fillRect+0x41c>)
 80048d6:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80048da:	619a      	str	r2, [r3, #24]
 80048dc:	4b3f      	ldr	r3, [pc, #252]	; (80049dc <fillRect+0x420>)
 80048de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048e2:	619a      	str	r2, [r3, #24]
 80048e4:	7abb      	ldrb	r3, [r7, #10]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	4a3c      	ldr	r2, [pc, #240]	; (80049dc <fillRect+0x420>)
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	6193      	str	r3, [r2, #24]
 80048f0:	7abb      	ldrb	r3, [r7, #10]
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80048f8:	7abb      	ldrb	r3, [r7, #10]
 80048fa:	015b      	lsls	r3, r3, #5
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	431a      	orrs	r2, r3
 8004902:	7abb      	ldrb	r3, [r7, #10]
 8004904:	015b      	lsls	r3, r3, #5
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	431a      	orrs	r2, r3
 800490c:	4b32      	ldr	r3, [pc, #200]	; (80049d8 <fillRect+0x41c>)
 800490e:	619a      	str	r2, [r3, #24]
 8004910:	7abb      	ldrb	r3, [r7, #10]
 8004912:	105b      	asrs	r3, r3, #1
 8004914:	f003 0208 	and.w	r2, r3, #8
 8004918:	7abb      	ldrb	r3, [r7, #10]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004920:	431a      	orrs	r2, r3
 8004922:	7abb      	ldrb	r3, [r7, #10]
 8004924:	105b      	asrs	r3, r3, #1
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	431a      	orrs	r2, r3
 800492c:	7abb      	ldrb	r3, [r7, #10]
 800492e:	10db      	asrs	r3, r3, #3
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	431a      	orrs	r2, r3
 8004936:	4b27      	ldr	r3, [pc, #156]	; (80049d4 <fillRect+0x418>)
 8004938:	619a      	str	r2, [r3, #24]
 800493a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800493e:	4825      	ldr	r0, [pc, #148]	; (80049d4 <fillRect+0x418>)
 8004940:	f7fc fbbe 	bl	80010c0 <PIN_LOW>
 8004944:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004948:	4822      	ldr	r0, [pc, #136]	; (80049d4 <fillRect+0x418>)
 800494a:	f7fc fbc9 	bl	80010e0 <PIN_HIGH>
 800494e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004952:	4820      	ldr	r0, [pc, #128]	; (80049d4 <fillRect+0x418>)
 8004954:	f7fc fbc4 	bl	80010e0 <PIN_HIGH>
        } while (--end != 0);
 8004958:	89fb      	ldrh	r3, [r7, #14]
 800495a:	3b01      	subs	r3, #1
 800495c:	b29b      	uxth	r3, r3
 800495e:	81fb      	strh	r3, [r7, #14]
 8004960:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004964:	2b00      	cmp	r3, #0
 8004966:	f47f af6b 	bne.w	8004840 <fillRect+0x284>
    while (h-- > 0) {
 800496a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800496e:	b29a      	uxth	r2, r3
 8004970:	3a01      	subs	r2, #1
 8004972:	b292      	uxth	r2, r2
 8004974:	803a      	strh	r2, [r7, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	f73f af60 	bgt.w	800483c <fillRect+0x280>
#endif
    }
    CS_IDLE;
 800497c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004980:	4817      	ldr	r0, [pc, #92]	; (80049e0 <fillRect+0x424>)
 8004982:	f7fc fbad 	bl	80010e0 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8004986:	4b17      	ldr	r3, [pc, #92]	; (80049e4 <fillRect+0x428>)
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <fillRect+0x3ee>
 8004992:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <fillRect+0x42c>)
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	f241 5226 	movw	r2, #5414	; 0x1526
 800499a:	4293      	cmp	r3, r2
 800499c:	d116      	bne.n	80049cc <fillRect+0x410>
 800499e:	4b13      	ldr	r3, [pc, #76]	; (80049ec <fillRect+0x430>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d010      	beq.n	80049cc <fillRect+0x410>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 80049aa:	f7fc fbd7 	bl	800115c <width>
 80049ae:	4603      	mov	r3, r0
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	b21c      	sxth	r4, r3
 80049b6:	f7fc fbdd 	bl	8001174 <height>
 80049ba:	4603      	mov	r3, r0
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29b      	uxth	r3, r3
 80049c0:	b21b      	sxth	r3, r3
 80049c2:	4622      	mov	r2, r4
 80049c4:	2100      	movs	r1, #0
 80049c6:	2000      	movs	r0, #0
 80049c8:	f7ff f9dc 	bl	8003d84 <setAddrWindow>
}
 80049cc:	bf00      	nop
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd90      	pop	{r4, r7, pc}
 80049d4:	40021000 	.word	0x40021000
 80049d8:	40021400 	.word	0x40021400
 80049dc:	40021800 	.word	0x40021800
 80049e0:	40020400 	.word	0x40020400
 80049e4:	20000208 	.word	0x20000208
 80049e8:	20000216 	.word	0x20000216
 80049ec:	2000003c 	.word	0x2000003c

080049f0 <testFilledCircles>:
        drawRect(cx - i2, cy - i2, i, i, color2);
    }
}

void testFilledCircles(uint8_t radius, uint16_t color)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	460a      	mov	r2, r1
 80049fa:	71fb      	strb	r3, [r7, #7]
 80049fc:	4613      	mov	r3, r2
 80049fe:	80bb      	strh	r3, [r7, #4]
    int x, y, w = width(), h = height(), r2 = radius * 2;
 8004a00:	f7fc fbac 	bl	800115c <width>
 8004a04:	4603      	mov	r3, r0
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	f7fc fbb4 	bl	8001174 <height>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 8004a16:	2000      	movs	r0, #0
 8004a18:	f7ff fbfe 	bl	8004218 <fillScreen>
    for (x = radius; x < w; x += r2) {
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	61fb      	str	r3, [r7, #28]
 8004a20:	e017      	b.n	8004a52 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	e00c      	b.n	8004a42 <testFilledCircles+0x52>
            fillCircle(x, y, radius, color);
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	b218      	sxth	r0, r3
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	b219      	sxth	r1, r3
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	b21a      	sxth	r2, r3
 8004a34:	88bb      	ldrh	r3, [r7, #4]
 8004a36:	f7ff fcc2 	bl	80043be <fillCircle>
        for (y = radius; y < h; y += r2) {
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	dbee      	blt.n	8004a28 <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	dbe3      	blt.n	8004a22 <testFilledCircles+0x32>
        }
    }

}
 8004a5a:	bf00      	nop
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void setFont(const GFXfont *f) {
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
    if(f) {            // Font struct pointer passed in?
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <setFont+0x24>
        if(!gfxFont) { // And no current font struct?
 8004a72:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <setFont+0x4c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d110      	bne.n	8004a9c <setFont+0x38>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 8004a7a:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <setFont+0x50>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	3306      	adds	r3, #6
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <setFont+0x50>)
 8004a84:	701a      	strb	r2, [r3, #0]
 8004a86:	e009      	b.n	8004a9c <setFont+0x38>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 8004a88:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <setFont+0x4c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <setFont+0x38>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 8004a90:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <setFont+0x50>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	3b06      	subs	r3, #6
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <setFont+0x50>)
 8004a9a:	701a      	strb	r2, [r3, #0]
    }
    gfxFont = (GFXfont *)f;
 8004a9c:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <setFont+0x4c>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6013      	str	r3, [r2, #0]
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	20000040 	.word	0x20000040
 8004ab4:	2000003a 	.word	0x2000003a

08004ab8 <setTextColor>:
}

void setTextWrap(uint8_t w) { wrap = w; }

void setTextColor (uint16_t color)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	80fb      	strh	r3, [r7, #6]
	textcolor = color;
 8004ac2:	4a04      	ldr	r2, [pc, #16]	; (8004ad4 <setTextColor+0x1c>)
 8004ac4:	88fb      	ldrh	r3, [r7, #6]
 8004ac6:	8013      	strh	r3, [r2, #0]
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	2000000e 	.word	0x2000000e

08004ad8 <setTextSize>:

void setTextSize (uint8_t size)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	71fb      	strb	r3, [r7, #7]
	textsize = size;
 8004ae2:	4a04      	ldr	r2, [pc, #16]	; (8004af4 <setTextSize+0x1c>)
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	7013      	strb	r3, [r2, #0]
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	2000000c 	.word	0x2000000c

08004af8 <setCursor>:

void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	460a      	mov	r2, r1
 8004b02:	80fb      	strh	r3, [r7, #6]
 8004b04:	4613      	mov	r3, r2
 8004b06:	80bb      	strh	r3, [r7, #4]
 8004b08:	88fb      	ldrh	r3, [r7, #6]
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <setCursor+0x2c>)
 8004b0e:	701a      	strb	r2, [r3, #0]
 8004b10:	88bb      	ldrh	r3, [r7, #4]
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <setCursor+0x30>)
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	2000003b 	.word	0x2000003b
 8004b28:	2000003a 	.word	0x2000003a

08004b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004b30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004b32:	e003      	b.n	8004b3c <LoopCopyDataInit>

08004b34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004b34:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004b36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004b38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004b3a:	3104      	adds	r1, #4

08004b3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004b3c:	480b      	ldr	r0, [pc, #44]	; (8004b6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004b3e:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004b40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004b42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004b44:	d3f6      	bcc.n	8004b34 <CopyDataInit>
  ldr  r2, =_sbss
 8004b46:	4a0b      	ldr	r2, [pc, #44]	; (8004b74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004b48:	e002      	b.n	8004b50 <LoopFillZerobss>

08004b4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004b4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004b4c:	f842 3b04 	str.w	r3, [r2], #4

08004b50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004b50:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004b52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004b54:	d3f9      	bcc.n	8004b4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b56:	f7fc fa85 	bl	8001064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b5a:	f002 fd79 	bl	8007650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b5e:	f7fb fceb 	bl	8000538 <main>
  bx  lr    
 8004b62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b64:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004b68:	08008628 	.word	0x08008628
  ldr  r0, =_sdata
 8004b6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004b70:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8004b74:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8004b78:	20000224 	.word	0x20000224

08004b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b7c:	e7fe      	b.n	8004b7c <ADC_IRQHandler>

08004b7e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b82:	2003      	movs	r0, #3
 8004b84:	f000 f94a 	bl	8004e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b88:	2000      	movs	r0, #0
 8004b8a:	f000 f805 	bl	8004b98 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004b8e:	f7fc f913 	bl	8000db8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <HAL_InitTick+0x54>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <HAL_InitTick+0x58>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 f965 	bl	8004e86 <HAL_SYSTICK_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e00e      	b.n	8004be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b0f      	cmp	r3, #15
 8004bca:	d80a      	bhi.n	8004be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bcc:	2200      	movs	r2, #0
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd4:	f000 f92d 	bl	8004e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bd8:	4a06      	ldr	r2, [pc, #24]	; (8004bf4 <HAL_InitTick+0x5c>)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	e000      	b.n	8004be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20000004 	.word	0x20000004
 8004bf0:	20000014 	.word	0x20000014
 8004bf4:	20000010 	.word	0x20000010

08004bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <HAL_IncTick+0x20>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <HAL_IncTick+0x24>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4413      	add	r3, r2
 8004c08:	4a04      	ldr	r2, [pc, #16]	; (8004c1c <HAL_IncTick+0x24>)
 8004c0a:	6013      	str	r3, [r2, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000014 	.word	0x20000014
 8004c1c:	20000220 	.word	0x20000220

08004c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  return uwTick;
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <HAL_GetTick+0x14>)
 8004c26:	681b      	ldr	r3, [r3, #0]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000220 	.word	0x20000220

08004c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c40:	f7ff ffee 	bl	8004c20 <HAL_GetTick>
 8004c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c50:	d005      	beq.n	8004c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c52:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <HAL_Delay+0x40>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c5e:	bf00      	nop
 8004c60:	f7ff ffde 	bl	8004c20 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d8f7      	bhi.n	8004c60 <HAL_Delay+0x28>
  {
  }
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20000014 	.word	0x20000014

08004c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	; (8004cbc <__NVIC_SetPriorityGrouping+0x40>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c98:	4013      	ands	r3, r2
 8004c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ca4:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004caa:	4a04      	ldr	r2, [pc, #16]	; (8004cbc <__NVIC_SetPriorityGrouping+0x40>)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	60d3      	str	r3, [r2, #12]
}
 8004cb0:	bf00      	nop
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	e000ed00 	.word	0xe000ed00
 8004cc0:	05fa0000 	.word	0x05fa0000

08004cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cc8:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <__NVIC_GetPriorityGrouping+0x18>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	0a1b      	lsrs	r3, r3, #8
 8004cce:	f003 0307 	and.w	r3, r3, #7
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	e000ed00 	.word	0xe000ed00

08004ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	db0b      	blt.n	8004d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	f003 021f 	and.w	r2, r3, #31
 8004cf8:	4907      	ldr	r1, [pc, #28]	; (8004d18 <__NVIC_EnableIRQ+0x38>)
 8004cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	2001      	movs	r0, #1
 8004d02:	fa00 f202 	lsl.w	r2, r0, r2
 8004d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	e000e100 	.word	0xe000e100

08004d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	6039      	str	r1, [r7, #0]
 8004d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	db0a      	blt.n	8004d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	490c      	ldr	r1, [pc, #48]	; (8004d68 <__NVIC_SetPriority+0x4c>)
 8004d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3a:	0112      	lsls	r2, r2, #4
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	440b      	add	r3, r1
 8004d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d44:	e00a      	b.n	8004d5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	4908      	ldr	r1, [pc, #32]	; (8004d6c <__NVIC_SetPriority+0x50>)
 8004d4c:	79fb      	ldrb	r3, [r7, #7]
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	3b04      	subs	r3, #4
 8004d54:	0112      	lsls	r2, r2, #4
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	440b      	add	r3, r1
 8004d5a:	761a      	strb	r2, [r3, #24]
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	e000e100 	.word	0xe000e100
 8004d6c:	e000ed00 	.word	0xe000ed00

08004d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b089      	sub	sp, #36	; 0x24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f1c3 0307 	rsb	r3, r3, #7
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	bf28      	it	cs
 8004d8e:	2304      	movcs	r3, #4
 8004d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	3304      	adds	r3, #4
 8004d96:	2b06      	cmp	r3, #6
 8004d98:	d902      	bls.n	8004da0 <NVIC_EncodePriority+0x30>
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	3b03      	subs	r3, #3
 8004d9e:	e000      	b.n	8004da2 <NVIC_EncodePriority+0x32>
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004da4:	f04f 32ff 	mov.w	r2, #4294967295
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43da      	mvns	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	401a      	ands	r2, r3
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004db8:	f04f 31ff 	mov.w	r1, #4294967295
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc2:	43d9      	mvns	r1, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dc8:	4313      	orrs	r3, r2
         );
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3724      	adds	r7, #36	; 0x24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004de8:	d301      	bcc.n	8004dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004dea:	2301      	movs	r3, #1
 8004dec:	e00f      	b.n	8004e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dee:	4a0a      	ldr	r2, [pc, #40]	; (8004e18 <SysTick_Config+0x40>)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004df6:	210f      	movs	r1, #15
 8004df8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dfc:	f7ff ff8e 	bl	8004d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <SysTick_Config+0x40>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e06:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <SysTick_Config+0x40>)
 8004e08:	2207      	movs	r2, #7
 8004e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	e000e010 	.word	0xe000e010

08004e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff ff29 	bl	8004c7c <__NVIC_SetPriorityGrouping>
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b086      	sub	sp, #24
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	4603      	mov	r3, r0
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	607a      	str	r2, [r7, #4]
 8004e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e44:	f7ff ff3e 	bl	8004cc4 <__NVIC_GetPriorityGrouping>
 8004e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	6978      	ldr	r0, [r7, #20]
 8004e50:	f7ff ff8e 	bl	8004d70 <NVIC_EncodePriority>
 8004e54:	4602      	mov	r2, r0
 8004e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff ff5d 	bl	8004d1c <__NVIC_SetPriority>
}
 8004e62:	bf00      	nop
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b082      	sub	sp, #8
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	4603      	mov	r3, r0
 8004e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff ff31 	bl	8004ce0 <__NVIC_EnableIRQ>
}
 8004e7e:	bf00      	nop
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff ffa2 	bl	8004dd8 <SysTick_Config>
 8004e94:	4603      	mov	r3, r0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b089      	sub	sp, #36	; 0x24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	e175      	b.n	80051ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	f040 8164 	bne.w	80051a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d00b      	beq.n	8004efe <HAL_GPIO_Init+0x5e>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d007      	beq.n	8004efe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ef2:	2b11      	cmp	r3, #17
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b12      	cmp	r3, #18
 8004efc:	d130      	bne.n	8004f60 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	2203      	movs	r2, #3
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4013      	ands	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f34:	2201      	movs	r2, #1
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4013      	ands	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	091b      	lsrs	r3, r3, #4
 8004f4a:	f003 0201 	and.w	r2, r3, #1
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	fa02 f303 	lsl.w	r3, r2, r3
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	43db      	mvns	r3, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4013      	ands	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d003      	beq.n	8004fa0 <HAL_GPIO_Init+0x100>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b12      	cmp	r3, #18
 8004f9e:	d123      	bne.n	8004fe8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	08da      	lsrs	r2, r3, #3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3208      	adds	r2, #8
 8004fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	220f      	movs	r2, #15
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	08da      	lsrs	r2, r3, #3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3208      	adds	r2, #8
 8004fe2:	69b9      	ldr	r1, [r7, #24]
 8004fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	2203      	movs	r2, #3
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f003 0203 	and.w	r2, r3, #3
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	4313      	orrs	r3, r2
 8005014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80be 	beq.w	80051a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800502a:	4b65      	ldr	r3, [pc, #404]	; (80051c0 <HAL_GPIO_Init+0x320>)
 800502c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502e:	4a64      	ldr	r2, [pc, #400]	; (80051c0 <HAL_GPIO_Init+0x320>)
 8005030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005034:	6453      	str	r3, [r2, #68]	; 0x44
 8005036:	4b62      	ldr	r3, [pc, #392]	; (80051c0 <HAL_GPIO_Init+0x320>)
 8005038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005042:	4a60      	ldr	r2, [pc, #384]	; (80051c4 <HAL_GPIO_Init+0x324>)
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	089b      	lsrs	r3, r3, #2
 8005048:	3302      	adds	r3, #2
 800504a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800504e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	220f      	movs	r2, #15
 800505a:	fa02 f303 	lsl.w	r3, r2, r3
 800505e:	43db      	mvns	r3, r3
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	4013      	ands	r3, r2
 8005064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a57      	ldr	r2, [pc, #348]	; (80051c8 <HAL_GPIO_Init+0x328>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d037      	beq.n	80050de <HAL_GPIO_Init+0x23e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a56      	ldr	r2, [pc, #344]	; (80051cc <HAL_GPIO_Init+0x32c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d031      	beq.n	80050da <HAL_GPIO_Init+0x23a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a55      	ldr	r2, [pc, #340]	; (80051d0 <HAL_GPIO_Init+0x330>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d02b      	beq.n	80050d6 <HAL_GPIO_Init+0x236>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a54      	ldr	r2, [pc, #336]	; (80051d4 <HAL_GPIO_Init+0x334>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d025      	beq.n	80050d2 <HAL_GPIO_Init+0x232>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a53      	ldr	r2, [pc, #332]	; (80051d8 <HAL_GPIO_Init+0x338>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d01f      	beq.n	80050ce <HAL_GPIO_Init+0x22e>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a52      	ldr	r2, [pc, #328]	; (80051dc <HAL_GPIO_Init+0x33c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d019      	beq.n	80050ca <HAL_GPIO_Init+0x22a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a51      	ldr	r2, [pc, #324]	; (80051e0 <HAL_GPIO_Init+0x340>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <HAL_GPIO_Init+0x226>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a50      	ldr	r2, [pc, #320]	; (80051e4 <HAL_GPIO_Init+0x344>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00d      	beq.n	80050c2 <HAL_GPIO_Init+0x222>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a4f      	ldr	r2, [pc, #316]	; (80051e8 <HAL_GPIO_Init+0x348>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d007      	beq.n	80050be <HAL_GPIO_Init+0x21e>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a4e      	ldr	r2, [pc, #312]	; (80051ec <HAL_GPIO_Init+0x34c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d101      	bne.n	80050ba <HAL_GPIO_Init+0x21a>
 80050b6:	2309      	movs	r3, #9
 80050b8:	e012      	b.n	80050e0 <HAL_GPIO_Init+0x240>
 80050ba:	230a      	movs	r3, #10
 80050bc:	e010      	b.n	80050e0 <HAL_GPIO_Init+0x240>
 80050be:	2308      	movs	r3, #8
 80050c0:	e00e      	b.n	80050e0 <HAL_GPIO_Init+0x240>
 80050c2:	2307      	movs	r3, #7
 80050c4:	e00c      	b.n	80050e0 <HAL_GPIO_Init+0x240>
 80050c6:	2306      	movs	r3, #6
 80050c8:	e00a      	b.n	80050e0 <HAL_GPIO_Init+0x240>
 80050ca:	2305      	movs	r3, #5
 80050cc:	e008      	b.n	80050e0 <HAL_GPIO_Init+0x240>
 80050ce:	2304      	movs	r3, #4
 80050d0:	e006      	b.n	80050e0 <HAL_GPIO_Init+0x240>
 80050d2:	2303      	movs	r3, #3
 80050d4:	e004      	b.n	80050e0 <HAL_GPIO_Init+0x240>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e002      	b.n	80050e0 <HAL_GPIO_Init+0x240>
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <HAL_GPIO_Init+0x240>
 80050de:	2300      	movs	r3, #0
 80050e0:	69fa      	ldr	r2, [r7, #28]
 80050e2:	f002 0203 	and.w	r2, r2, #3
 80050e6:	0092      	lsls	r2, r2, #2
 80050e8:	4093      	lsls	r3, r2
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80050f0:	4934      	ldr	r1, [pc, #208]	; (80051c4 <HAL_GPIO_Init+0x324>)
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	089b      	lsrs	r3, r3, #2
 80050f6:	3302      	adds	r3, #2
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050fe:	4b3c      	ldr	r3, [pc, #240]	; (80051f0 <HAL_GPIO_Init+0x350>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	43db      	mvns	r3, r3
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	4013      	ands	r3, r2
 800510c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005122:	4a33      	ldr	r2, [pc, #204]	; (80051f0 <HAL_GPIO_Init+0x350>)
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005128:	4b31      	ldr	r3, [pc, #196]	; (80051f0 <HAL_GPIO_Init+0x350>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	43db      	mvns	r3, r3
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	4013      	ands	r3, r2
 8005136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800514c:	4a28      	ldr	r2, [pc, #160]	; (80051f0 <HAL_GPIO_Init+0x350>)
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005152:	4b27      	ldr	r3, [pc, #156]	; (80051f0 <HAL_GPIO_Init+0x350>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	43db      	mvns	r3, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4013      	ands	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005176:	4a1e      	ldr	r2, [pc, #120]	; (80051f0 <HAL_GPIO_Init+0x350>)
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800517c:	4b1c      	ldr	r3, [pc, #112]	; (80051f0 <HAL_GPIO_Init+0x350>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	43db      	mvns	r3, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4013      	ands	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051a0:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <HAL_GPIO_Init+0x350>)
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	3301      	adds	r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	2b0f      	cmp	r3, #15
 80051b0:	f67f ae86 	bls.w	8004ec0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80051b4:	bf00      	nop
 80051b6:	3724      	adds	r7, #36	; 0x24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	40023800 	.word	0x40023800
 80051c4:	40013800 	.word	0x40013800
 80051c8:	40020000 	.word	0x40020000
 80051cc:	40020400 	.word	0x40020400
 80051d0:	40020800 	.word	0x40020800
 80051d4:	40020c00 	.word	0x40020c00
 80051d8:	40021000 	.word	0x40021000
 80051dc:	40021400 	.word	0x40021400
 80051e0:	40021800 	.word	0x40021800
 80051e4:	40021c00 	.word	0x40021c00
 80051e8:	40022000 	.word	0x40022000
 80051ec:	40022400 	.word	0x40022400
 80051f0:	40013c00 	.word	0x40013c00

080051f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	460b      	mov	r3, r1
 80051fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	887b      	ldrh	r3, [r7, #2]
 8005206:	4013      	ands	r3, r2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800520c:	2301      	movs	r3, #1
 800520e:	73fb      	strb	r3, [r7, #15]
 8005210:	e001      	b.n	8005216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005212:	2300      	movs	r3, #0
 8005214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005216:	7bfb      	ldrb	r3, [r7, #15]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	807b      	strh	r3, [r7, #2]
 8005230:	4613      	mov	r3, r2
 8005232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005234:	787b      	ldrb	r3, [r7, #1]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800523a:	887a      	ldrh	r2, [r7, #2]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005240:	e003      	b.n	800524a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005242:	887b      	ldrh	r3, [r7, #2]
 8005244:	041a      	lsls	r2, r3, #16
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	619a      	str	r2, [r3, #24]
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	460b      	mov	r3, r1
 8005260:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695a      	ldr	r2, [r3, #20]
 8005266:	887b      	ldrh	r3, [r7, #2]
 8005268:	4013      	ands	r3, r2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d004      	beq.n	8005278 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800526e:	887b      	ldrh	r3, [r7, #2]
 8005270:	041a      	lsls	r2, r3, #16
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005276:	e002      	b.n	800527e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005278:	887a      	ldrh	r2, [r7, #2]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	619a      	str	r2, [r3, #24]
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
	...

0800528c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005296:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	88fb      	ldrh	r3, [r7, #6]
 800529c:	4013      	ands	r3, r2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d006      	beq.n	80052b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052a2:	4a05      	ldr	r2, [pc, #20]	; (80052b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052a4:	88fb      	ldrh	r3, [r7, #6]
 80052a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052a8:	88fb      	ldrh	r3, [r7, #6]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fb fd02 	bl	8000cb4 <HAL_GPIO_EXTI_Callback>
  }
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40013c00 	.word	0x40013c00

080052bc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052c0:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a04      	ldr	r2, [pc, #16]	; (80052d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80052c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ca:	6013      	str	r3, [r2, #0]
}
 80052cc:	bf00      	nop
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	40007000 	.word	0x40007000

080052dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80052e4:	2300      	movs	r3, #0
 80052e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e29b      	b.n	800582a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 8087 	beq.w	800540e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005300:	4b96      	ldr	r3, [pc, #600]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 030c 	and.w	r3, r3, #12
 8005308:	2b04      	cmp	r3, #4
 800530a:	d00c      	beq.n	8005326 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800530c:	4b93      	ldr	r3, [pc, #588]	; (800555c <HAL_RCC_OscConfig+0x280>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 030c 	and.w	r3, r3, #12
 8005314:	2b08      	cmp	r3, #8
 8005316:	d112      	bne.n	800533e <HAL_RCC_OscConfig+0x62>
 8005318:	4b90      	ldr	r3, [pc, #576]	; (800555c <HAL_RCC_OscConfig+0x280>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005324:	d10b      	bne.n	800533e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005326:	4b8d      	ldr	r3, [pc, #564]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d06c      	beq.n	800540c <HAL_RCC_OscConfig+0x130>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d168      	bne.n	800540c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e275      	b.n	800582a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005346:	d106      	bne.n	8005356 <HAL_RCC_OscConfig+0x7a>
 8005348:	4b84      	ldr	r3, [pc, #528]	; (800555c <HAL_RCC_OscConfig+0x280>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a83      	ldr	r2, [pc, #524]	; (800555c <HAL_RCC_OscConfig+0x280>)
 800534e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	e02e      	b.n	80053b4 <HAL_RCC_OscConfig+0xd8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10c      	bne.n	8005378 <HAL_RCC_OscConfig+0x9c>
 800535e:	4b7f      	ldr	r3, [pc, #508]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a7e      	ldr	r2, [pc, #504]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	4b7c      	ldr	r3, [pc, #496]	; (800555c <HAL_RCC_OscConfig+0x280>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a7b      	ldr	r2, [pc, #492]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	e01d      	b.n	80053b4 <HAL_RCC_OscConfig+0xd8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005380:	d10c      	bne.n	800539c <HAL_RCC_OscConfig+0xc0>
 8005382:	4b76      	ldr	r3, [pc, #472]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a75      	ldr	r2, [pc, #468]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	4b73      	ldr	r3, [pc, #460]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a72      	ldr	r2, [pc, #456]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	e00b      	b.n	80053b4 <HAL_RCC_OscConfig+0xd8>
 800539c:	4b6f      	ldr	r3, [pc, #444]	; (800555c <HAL_RCC_OscConfig+0x280>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a6e      	ldr	r2, [pc, #440]	; (800555c <HAL_RCC_OscConfig+0x280>)
 80053a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	4b6c      	ldr	r3, [pc, #432]	; (800555c <HAL_RCC_OscConfig+0x280>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a6b      	ldr	r2, [pc, #428]	; (800555c <HAL_RCC_OscConfig+0x280>)
 80053ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d013      	beq.n	80053e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7ff fc30 	bl	8004c20 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053c4:	f7ff fc2c 	bl	8004c20 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b64      	cmp	r3, #100	; 0x64
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e229      	b.n	800582a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053d6:	4b61      	ldr	r3, [pc, #388]	; (800555c <HAL_RCC_OscConfig+0x280>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0f0      	beq.n	80053c4 <HAL_RCC_OscConfig+0xe8>
 80053e2:	e014      	b.n	800540e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e4:	f7ff fc1c 	bl	8004c20 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053ec:	f7ff fc18 	bl	8004c20 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b64      	cmp	r3, #100	; 0x64
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e215      	b.n	800582a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053fe:	4b57      	ldr	r3, [pc, #348]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f0      	bne.n	80053ec <HAL_RCC_OscConfig+0x110>
 800540a:	e000      	b.n	800540e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800540c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d069      	beq.n	80054ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800541a:	4b50      	ldr	r3, [pc, #320]	; (800555c <HAL_RCC_OscConfig+0x280>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 030c 	and.w	r3, r3, #12
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00b      	beq.n	800543e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005426:	4b4d      	ldr	r3, [pc, #308]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 030c 	and.w	r3, r3, #12
 800542e:	2b08      	cmp	r3, #8
 8005430:	d11c      	bne.n	800546c <HAL_RCC_OscConfig+0x190>
 8005432:	4b4a      	ldr	r3, [pc, #296]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d116      	bne.n	800546c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800543e:	4b47      	ldr	r3, [pc, #284]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d005      	beq.n	8005456 <HAL_RCC_OscConfig+0x17a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d001      	beq.n	8005456 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e1e9      	b.n	800582a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005456:	4b41      	ldr	r3, [pc, #260]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	493d      	ldr	r1, [pc, #244]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005466:	4313      	orrs	r3, r2
 8005468:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800546a:	e040      	b.n	80054ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d023      	beq.n	80054bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005474:	4b39      	ldr	r3, [pc, #228]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a38      	ldr	r2, [pc, #224]	; (800555c <HAL_RCC_OscConfig+0x280>)
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7ff fbce 	bl	8004c20 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005488:	f7ff fbca 	bl	8004c20 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e1c7      	b.n	800582a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800549a:	4b30      	ldr	r3, [pc, #192]	; (800555c <HAL_RCC_OscConfig+0x280>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a6:	4b2d      	ldr	r3, [pc, #180]	; (800555c <HAL_RCC_OscConfig+0x280>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	4929      	ldr	r1, [pc, #164]	; (800555c <HAL_RCC_OscConfig+0x280>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	600b      	str	r3, [r1, #0]
 80054ba:	e018      	b.n	80054ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054bc:	4b27      	ldr	r3, [pc, #156]	; (800555c <HAL_RCC_OscConfig+0x280>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a26      	ldr	r2, [pc, #152]	; (800555c <HAL_RCC_OscConfig+0x280>)
 80054c2:	f023 0301 	bic.w	r3, r3, #1
 80054c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c8:	f7ff fbaa 	bl	8004c20 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054d0:	f7ff fba6 	bl	8004c20 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e1a3      	b.n	800582a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054e2:	4b1e      	ldr	r3, [pc, #120]	; (800555c <HAL_RCC_OscConfig+0x280>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d038      	beq.n	800556c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d019      	beq.n	8005536 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005502:	4b16      	ldr	r3, [pc, #88]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005506:	4a15      	ldr	r2, [pc, #84]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800550e:	f7ff fb87 	bl	8004c20 <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005516:	f7ff fb83 	bl	8004c20 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e180      	b.n	800582a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005528:	4b0c      	ldr	r3, [pc, #48]	; (800555c <HAL_RCC_OscConfig+0x280>)
 800552a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0f0      	beq.n	8005516 <HAL_RCC_OscConfig+0x23a>
 8005534:	e01a      	b.n	800556c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005536:	4b09      	ldr	r3, [pc, #36]	; (800555c <HAL_RCC_OscConfig+0x280>)
 8005538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800553a:	4a08      	ldr	r2, [pc, #32]	; (800555c <HAL_RCC_OscConfig+0x280>)
 800553c:	f023 0301 	bic.w	r3, r3, #1
 8005540:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005542:	f7ff fb6d 	bl	8004c20 <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005548:	e00a      	b.n	8005560 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800554a:	f7ff fb69 	bl	8004c20 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d903      	bls.n	8005560 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e166      	b.n	800582a <HAL_RCC_OscConfig+0x54e>
 800555c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005560:	4b92      	ldr	r3, [pc, #584]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 8005562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1ee      	bne.n	800554a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80a4 	beq.w	80056c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800557a:	4b8c      	ldr	r3, [pc, #560]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10d      	bne.n	80055a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005586:	4b89      	ldr	r3, [pc, #548]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	4a88      	ldr	r2, [pc, #544]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 800558c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005590:	6413      	str	r3, [r2, #64]	; 0x40
 8005592:	4b86      	ldr	r3, [pc, #536]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559a:	60bb      	str	r3, [r7, #8]
 800559c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800559e:	2301      	movs	r3, #1
 80055a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055a2:	4b83      	ldr	r3, [pc, #524]	; (80057b0 <HAL_RCC_OscConfig+0x4d4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d118      	bne.n	80055e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80055ae:	4b80      	ldr	r3, [pc, #512]	; (80057b0 <HAL_RCC_OscConfig+0x4d4>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a7f      	ldr	r2, [pc, #508]	; (80057b0 <HAL_RCC_OscConfig+0x4d4>)
 80055b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ba:	f7ff fb31 	bl	8004c20 <HAL_GetTick>
 80055be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c2:	f7ff fb2d 	bl	8004c20 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b64      	cmp	r3, #100	; 0x64
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e12a      	b.n	800582a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055d4:	4b76      	ldr	r3, [pc, #472]	; (80057b0 <HAL_RCC_OscConfig+0x4d4>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0f0      	beq.n	80055c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d106      	bne.n	80055f6 <HAL_RCC_OscConfig+0x31a>
 80055e8:	4b70      	ldr	r3, [pc, #448]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	4a6f      	ldr	r2, [pc, #444]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	6713      	str	r3, [r2, #112]	; 0x70
 80055f4:	e02d      	b.n	8005652 <HAL_RCC_OscConfig+0x376>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10c      	bne.n	8005618 <HAL_RCC_OscConfig+0x33c>
 80055fe:	4b6b      	ldr	r3, [pc, #428]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005602:	4a6a      	ldr	r2, [pc, #424]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	6713      	str	r3, [r2, #112]	; 0x70
 800560a:	4b68      	ldr	r3, [pc, #416]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 800560c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560e:	4a67      	ldr	r2, [pc, #412]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 8005610:	f023 0304 	bic.w	r3, r3, #4
 8005614:	6713      	str	r3, [r2, #112]	; 0x70
 8005616:	e01c      	b.n	8005652 <HAL_RCC_OscConfig+0x376>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b05      	cmp	r3, #5
 800561e:	d10c      	bne.n	800563a <HAL_RCC_OscConfig+0x35e>
 8005620:	4b62      	ldr	r3, [pc, #392]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 8005622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005624:	4a61      	ldr	r2, [pc, #388]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 8005626:	f043 0304 	orr.w	r3, r3, #4
 800562a:	6713      	str	r3, [r2, #112]	; 0x70
 800562c:	4b5f      	ldr	r3, [pc, #380]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	4a5e      	ldr	r2, [pc, #376]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 8005632:	f043 0301 	orr.w	r3, r3, #1
 8005636:	6713      	str	r3, [r2, #112]	; 0x70
 8005638:	e00b      	b.n	8005652 <HAL_RCC_OscConfig+0x376>
 800563a:	4b5c      	ldr	r3, [pc, #368]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563e:	4a5b      	ldr	r2, [pc, #364]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 8005640:	f023 0301 	bic.w	r3, r3, #1
 8005644:	6713      	str	r3, [r2, #112]	; 0x70
 8005646:	4b59      	ldr	r3, [pc, #356]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564a:	4a58      	ldr	r2, [pc, #352]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 800564c:	f023 0304 	bic.w	r3, r3, #4
 8005650:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d015      	beq.n	8005686 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565a:	f7ff fae1 	bl	8004c20 <HAL_GetTick>
 800565e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005660:	e00a      	b.n	8005678 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005662:	f7ff fadd 	bl	8004c20 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005670:	4293      	cmp	r3, r2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e0d8      	b.n	800582a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005678:	4b4c      	ldr	r3, [pc, #304]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 800567a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0ee      	beq.n	8005662 <HAL_RCC_OscConfig+0x386>
 8005684:	e014      	b.n	80056b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005686:	f7ff facb 	bl	8004c20 <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800568c:	e00a      	b.n	80056a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800568e:	f7ff fac7 	bl	8004c20 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	f241 3288 	movw	r2, #5000	; 0x1388
 800569c:	4293      	cmp	r3, r2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e0c2      	b.n	800582a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056a4:	4b41      	ldr	r3, [pc, #260]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 80056a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1ee      	bne.n	800568e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d105      	bne.n	80056c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056b6:	4b3d      	ldr	r3, [pc, #244]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	4a3c      	ldr	r2, [pc, #240]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 80056bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 80ae 	beq.w	8005828 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056cc:	4b37      	ldr	r3, [pc, #220]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 030c 	and.w	r3, r3, #12
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d06d      	beq.n	80057b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d14b      	bne.n	8005778 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e0:	4b32      	ldr	r3, [pc, #200]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a31      	ldr	r2, [pc, #196]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 80056e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ec:	f7ff fa98 	bl	8004c20 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f4:	f7ff fa94 	bl	8004c20 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e091      	b.n	800582a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005706:	4b29      	ldr	r3, [pc, #164]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f0      	bne.n	80056f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69da      	ldr	r2, [r3, #28]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	019b      	lsls	r3, r3, #6
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	085b      	lsrs	r3, r3, #1
 800572a:	3b01      	subs	r3, #1
 800572c:	041b      	lsls	r3, r3, #16
 800572e:	431a      	orrs	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	061b      	lsls	r3, r3, #24
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	071b      	lsls	r3, r3, #28
 800573e:	491b      	ldr	r1, [pc, #108]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 8005740:	4313      	orrs	r3, r2
 8005742:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005744:	4b19      	ldr	r3, [pc, #100]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a18      	ldr	r2, [pc, #96]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 800574a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800574e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005750:	f7ff fa66 	bl	8004c20 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005758:	f7ff fa62 	bl	8004c20 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e05f      	b.n	800582a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800576a:	4b10      	ldr	r3, [pc, #64]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0f0      	beq.n	8005758 <HAL_RCC_OscConfig+0x47c>
 8005776:	e057      	b.n	8005828 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005778:	4b0c      	ldr	r3, [pc, #48]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a0b      	ldr	r2, [pc, #44]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 800577e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005784:	f7ff fa4c 	bl	8004c20 <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800578c:	f7ff fa48 	bl	8004c20 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e045      	b.n	800582a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800579e:	4b03      	ldr	r3, [pc, #12]	; (80057ac <HAL_RCC_OscConfig+0x4d0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f0      	bne.n	800578c <HAL_RCC_OscConfig+0x4b0>
 80057aa:	e03d      	b.n	8005828 <HAL_RCC_OscConfig+0x54c>
 80057ac:	40023800 	.word	0x40023800
 80057b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80057b4:	4b1f      	ldr	r3, [pc, #124]	; (8005834 <HAL_RCC_OscConfig+0x558>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d030      	beq.n	8005824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d129      	bne.n	8005824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057da:	429a      	cmp	r2, r3
 80057dc:	d122      	bne.n	8005824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057e4:	4013      	ands	r3, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d119      	bne.n	8005824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	085b      	lsrs	r3, r3, #1
 80057fc:	3b01      	subs	r3, #1
 80057fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005800:	429a      	cmp	r2, r3
 8005802:	d10f      	bne.n	8005824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005810:	429a      	cmp	r2, r3
 8005812:	d107      	bne.n	8005824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005820:	429a      	cmp	r2, r3
 8005822:	d001      	beq.n	8005828 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	40023800 	.word	0x40023800

08005838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e0d0      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005850:	4b6a      	ldr	r3, [pc, #424]	; (80059fc <HAL_RCC_ClockConfig+0x1c4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 030f 	and.w	r3, r3, #15
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d910      	bls.n	8005880 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800585e:	4b67      	ldr	r3, [pc, #412]	; (80059fc <HAL_RCC_ClockConfig+0x1c4>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f023 020f 	bic.w	r2, r3, #15
 8005866:	4965      	ldr	r1, [pc, #404]	; (80059fc <HAL_RCC_ClockConfig+0x1c4>)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	4313      	orrs	r3, r2
 800586c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800586e:	4b63      	ldr	r3, [pc, #396]	; (80059fc <HAL_RCC_ClockConfig+0x1c4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d001      	beq.n	8005880 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e0b8      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d020      	beq.n	80058ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005898:	4b59      	ldr	r3, [pc, #356]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	4a58      	ldr	r2, [pc, #352]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 800589e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058b0:	4b53      	ldr	r3, [pc, #332]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	4a52      	ldr	r2, [pc, #328]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 80058b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058bc:	4b50      	ldr	r3, [pc, #320]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	494d      	ldr	r1, [pc, #308]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d040      	beq.n	800595c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d107      	bne.n	80058f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e2:	4b47      	ldr	r3, [pc, #284]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d115      	bne.n	800591a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e07f      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d107      	bne.n	800590a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058fa:	4b41      	ldr	r3, [pc, #260]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d109      	bne.n	800591a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e073      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800590a:	4b3d      	ldr	r3, [pc, #244]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e06b      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800591a:	4b39      	ldr	r3, [pc, #228]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f023 0203 	bic.w	r2, r3, #3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	4936      	ldr	r1, [pc, #216]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 8005928:	4313      	orrs	r3, r2
 800592a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800592c:	f7ff f978 	bl	8004c20 <HAL_GetTick>
 8005930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005932:	e00a      	b.n	800594a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005934:	f7ff f974 	bl	8004c20 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e053      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594a:	4b2d      	ldr	r3, [pc, #180]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 020c 	and.w	r2, r3, #12
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	429a      	cmp	r2, r3
 800595a:	d1eb      	bne.n	8005934 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800595c:	4b27      	ldr	r3, [pc, #156]	; (80059fc <HAL_RCC_ClockConfig+0x1c4>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d210      	bcs.n	800598c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596a:	4b24      	ldr	r3, [pc, #144]	; (80059fc <HAL_RCC_ClockConfig+0x1c4>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f023 020f 	bic.w	r2, r3, #15
 8005972:	4922      	ldr	r1, [pc, #136]	; (80059fc <HAL_RCC_ClockConfig+0x1c4>)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	4313      	orrs	r3, r2
 8005978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800597a:	4b20      	ldr	r3, [pc, #128]	; (80059fc <HAL_RCC_ClockConfig+0x1c4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d001      	beq.n	800598c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e032      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005998:	4b19      	ldr	r3, [pc, #100]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	4916      	ldr	r1, [pc, #88]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059b6:	4b12      	ldr	r3, [pc, #72]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	490e      	ldr	r1, [pc, #56]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059ca:	f000 f821 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 80059ce:	4601      	mov	r1, r0
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <HAL_RCC_ClockConfig+0x1c8>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	091b      	lsrs	r3, r3, #4
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	4a0a      	ldr	r2, [pc, #40]	; (8005a04 <HAL_RCC_ClockConfig+0x1cc>)
 80059dc:	5cd3      	ldrb	r3, [r2, r3]
 80059de:	fa21 f303 	lsr.w	r3, r1, r3
 80059e2:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <HAL_RCC_ClockConfig+0x1d0>)
 80059e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059e6:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <HAL_RCC_ClockConfig+0x1d4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff f8d4 	bl	8004b98 <HAL_InitTick>

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40023c00 	.word	0x40023c00
 8005a00:	40023800 	.word	0x40023800
 8005a04:	0800808c 	.word	0x0800808c
 8005a08:	20000004 	.word	0x20000004
 8005a0c:	20000010 	.word	0x20000010

08005a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	607b      	str	r3, [r7, #4]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a26:	4b63      	ldr	r3, [pc, #396]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d007      	beq.n	8005a42 <HAL_RCC_GetSysClockFreq+0x32>
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d008      	beq.n	8005a48 <HAL_RCC_GetSysClockFreq+0x38>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f040 80b4 	bne.w	8005ba4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a3c:	4b5e      	ldr	r3, [pc, #376]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005a3e:	60bb      	str	r3, [r7, #8]
      break;
 8005a40:	e0b3      	b.n	8005baa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a42:	4b5e      	ldr	r3, [pc, #376]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005a44:	60bb      	str	r3, [r7, #8]
      break;
 8005a46:	e0b0      	b.n	8005baa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a48:	4b5a      	ldr	r3, [pc, #360]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a50:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005a52:	4b58      	ldr	r3, [pc, #352]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d04a      	beq.n	8005af4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a5e:	4b55      	ldr	r3, [pc, #340]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	099b      	lsrs	r3, r3, #6
 8005a64:	f04f 0400 	mov.w	r4, #0
 8005a68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	ea03 0501 	and.w	r5, r3, r1
 8005a74:	ea04 0602 	and.w	r6, r4, r2
 8005a78:	4629      	mov	r1, r5
 8005a7a:	4632      	mov	r2, r6
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	f04f 0400 	mov.w	r4, #0
 8005a84:	0154      	lsls	r4, r2, #5
 8005a86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a8a:	014b      	lsls	r3, r1, #5
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4622      	mov	r2, r4
 8005a90:	1b49      	subs	r1, r1, r5
 8005a92:	eb62 0206 	sbc.w	r2, r2, r6
 8005a96:	f04f 0300 	mov.w	r3, #0
 8005a9a:	f04f 0400 	mov.w	r4, #0
 8005a9e:	0194      	lsls	r4, r2, #6
 8005aa0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005aa4:	018b      	lsls	r3, r1, #6
 8005aa6:	1a5b      	subs	r3, r3, r1
 8005aa8:	eb64 0402 	sbc.w	r4, r4, r2
 8005aac:	f04f 0100 	mov.w	r1, #0
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	00e2      	lsls	r2, r4, #3
 8005ab6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005aba:	00d9      	lsls	r1, r3, #3
 8005abc:	460b      	mov	r3, r1
 8005abe:	4614      	mov	r4, r2
 8005ac0:	195b      	adds	r3, r3, r5
 8005ac2:	eb44 0406 	adc.w	r4, r4, r6
 8005ac6:	f04f 0100 	mov.w	r1, #0
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	0262      	lsls	r2, r4, #9
 8005ad0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005ad4:	0259      	lsls	r1, r3, #9
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4614      	mov	r4, r2
 8005ada:	4618      	mov	r0, r3
 8005adc:	4621      	mov	r1, r4
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f04f 0400 	mov.w	r4, #0
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	4623      	mov	r3, r4
 8005ae8:	f7fa fba6 	bl	8000238 <__aeabi_uldivmod>
 8005aec:	4603      	mov	r3, r0
 8005aee:	460c      	mov	r4, r1
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	e049      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005af4:	4b2f      	ldr	r3, [pc, #188]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	099b      	lsrs	r3, r3, #6
 8005afa:	f04f 0400 	mov.w	r4, #0
 8005afe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b02:	f04f 0200 	mov.w	r2, #0
 8005b06:	ea03 0501 	and.w	r5, r3, r1
 8005b0a:	ea04 0602 	and.w	r6, r4, r2
 8005b0e:	4629      	mov	r1, r5
 8005b10:	4632      	mov	r2, r6
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	f04f 0400 	mov.w	r4, #0
 8005b1a:	0154      	lsls	r4, r2, #5
 8005b1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b20:	014b      	lsls	r3, r1, #5
 8005b22:	4619      	mov	r1, r3
 8005b24:	4622      	mov	r2, r4
 8005b26:	1b49      	subs	r1, r1, r5
 8005b28:	eb62 0206 	sbc.w	r2, r2, r6
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	f04f 0400 	mov.w	r4, #0
 8005b34:	0194      	lsls	r4, r2, #6
 8005b36:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b3a:	018b      	lsls	r3, r1, #6
 8005b3c:	1a5b      	subs	r3, r3, r1
 8005b3e:	eb64 0402 	sbc.w	r4, r4, r2
 8005b42:	f04f 0100 	mov.w	r1, #0
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	00e2      	lsls	r2, r4, #3
 8005b4c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b50:	00d9      	lsls	r1, r3, #3
 8005b52:	460b      	mov	r3, r1
 8005b54:	4614      	mov	r4, r2
 8005b56:	195b      	adds	r3, r3, r5
 8005b58:	eb44 0406 	adc.w	r4, r4, r6
 8005b5c:	f04f 0100 	mov.w	r1, #0
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	02a2      	lsls	r2, r4, #10
 8005b66:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005b6a:	0299      	lsls	r1, r3, #10
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4614      	mov	r4, r2
 8005b70:	4618      	mov	r0, r3
 8005b72:	4621      	mov	r1, r4
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f04f 0400 	mov.w	r4, #0
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	4623      	mov	r3, r4
 8005b7e:	f7fa fb5b 	bl	8000238 <__aeabi_uldivmod>
 8005b82:	4603      	mov	r3, r0
 8005b84:	460c      	mov	r4, r1
 8005b86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005b88:	4b0a      	ldr	r3, [pc, #40]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	0c1b      	lsrs	r3, r3, #16
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	3301      	adds	r3, #1
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba0:	60bb      	str	r3, [r7, #8]
      break;
 8005ba2:	e002      	b.n	8005baa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ba4:	4b04      	ldr	r3, [pc, #16]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005ba6:	60bb      	str	r3, [r7, #8]
      break;
 8005ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005baa:	68bb      	ldr	r3, [r7, #8]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	00f42400 	.word	0x00f42400
 8005bbc:	007a1200 	.word	0x007a1200

08005bc0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bc4:	4b03      	ldr	r3, [pc, #12]	; (8005bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000004 	.word	0x20000004

08005bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005bdc:	f7ff fff0 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8005be0:	4601      	mov	r1, r0
 8005be2:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	0a9b      	lsrs	r3, r3, #10
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	4a03      	ldr	r2, [pc, #12]	; (8005bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bee:	5cd3      	ldrb	r3, [r2, r3]
 8005bf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	0800809c 	.word	0x0800809c

08005c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c04:	f7ff ffdc 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8005c08:	4601      	mov	r1, r0
 8005c0a:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	0b5b      	lsrs	r3, r3, #13
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	4a03      	ldr	r2, [pc, #12]	; (8005c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c16:	5cd3      	ldrb	r3, [r2, r3]
 8005c18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40023800 	.word	0x40023800
 8005c24:	0800809c 	.word	0x0800809c

08005c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d012      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c50:	4b69      	ldr	r3, [pc, #420]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	4a68      	ldr	r2, [pc, #416]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005c5a:	6093      	str	r3, [r2, #8]
 8005c5c:	4b66      	ldr	r3, [pc, #408]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c64:	4964      	ldr	r1, [pc, #400]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005c72:	2301      	movs	r3, #1
 8005c74:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d017      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c82:	4b5d      	ldr	r3, [pc, #372]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c90:	4959      	ldr	r1, [pc, #356]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ca0:	d101      	bne.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d017      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005cbe:	4b4e      	ldr	r3, [pc, #312]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	494a      	ldr	r1, [pc, #296]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cdc:	d101      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005cea:	2301      	movs	r3, #1
 8005cec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 808b 	beq.w	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d0c:	4b3a      	ldr	r3, [pc, #232]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	4a39      	ldr	r2, [pc, #228]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d16:	6413      	str	r3, [r2, #64]	; 0x40
 8005d18:	4b37      	ldr	r3, [pc, #220]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d20:	60bb      	str	r3, [r7, #8]
 8005d22:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d24:	4b35      	ldr	r3, [pc, #212]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a34      	ldr	r2, [pc, #208]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d30:	f7fe ff76 	bl	8004c20 <HAL_GetTick>
 8005d34:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d38:	f7fe ff72 	bl	8004c20 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b64      	cmp	r3, #100	; 0x64
 8005d44:	d901      	bls.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e38d      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005d4a:	4b2c      	ldr	r3, [pc, #176]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0f0      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d56:	4b28      	ldr	r3, [pc, #160]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d035      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d02e      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d74:	4b20      	ldr	r3, [pc, #128]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d7e:	4b1e      	ldr	r3, [pc, #120]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d82:	4a1d      	ldr	r2, [pc, #116]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d88:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8e:	4a1a      	ldr	r2, [pc, #104]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005d96:	4a18      	ldr	r2, [pc, #96]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d9c:	4b16      	ldr	r3, [pc, #88]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d114      	bne.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da8:	f7fe ff3a 	bl	8004c20 <HAL_GetTick>
 8005dac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dae:	e00a      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005db0:	f7fe ff36 	bl	8004c20 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e34f      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc6:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0ee      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dde:	d111      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005de0:	4b05      	ldr	r3, [pc, #20]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005dec:	4b04      	ldr	r3, [pc, #16]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005dee:	400b      	ands	r3, r1
 8005df0:	4901      	ldr	r1, [pc, #4]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
 8005df6:	e00b      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	40007000 	.word	0x40007000
 8005e00:	0ffffcff 	.word	0x0ffffcff
 8005e04:	4bb3      	ldr	r3, [pc, #716]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	4ab2      	ldr	r2, [pc, #712]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e0e:	6093      	str	r3, [r2, #8]
 8005e10:	4bb0      	ldr	r3, [pc, #704]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e1c:	49ad      	ldr	r1, [pc, #692]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0310 	and.w	r3, r3, #16
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d010      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e2e:	4ba9      	ldr	r3, [pc, #676]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e34:	4aa7      	ldr	r2, [pc, #668]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005e3e:	4ba5      	ldr	r3, [pc, #660]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e40:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	49a2      	ldr	r1, [pc, #648]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e5c:	4b9d      	ldr	r3, [pc, #628]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e6a:	499a      	ldr	r1, [pc, #616]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e7e:	4b95      	ldr	r3, [pc, #596]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e8c:	4991      	ldr	r1, [pc, #580]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00a      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ea0:	4b8c      	ldr	r3, [pc, #560]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eae:	4989      	ldr	r1, [pc, #548]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ec2:	4b84      	ldr	r3, [pc, #528]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed0:	4980      	ldr	r1, [pc, #512]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00a      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ee4:	4b7b      	ldr	r3, [pc, #492]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eea:	f023 0203 	bic.w	r2, r3, #3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef2:	4978      	ldr	r1, [pc, #480]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f06:	4b73      	ldr	r3, [pc, #460]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0c:	f023 020c 	bic.w	r2, r3, #12
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f14:	496f      	ldr	r1, [pc, #444]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f28:	4b6a      	ldr	r3, [pc, #424]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f36:	4967      	ldr	r1, [pc, #412]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f4a:	4b62      	ldr	r3, [pc, #392]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f50:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f58:	495e      	ldr	r1, [pc, #376]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f6c:	4b59      	ldr	r3, [pc, #356]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7a:	4956      	ldr	r1, [pc, #344]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005f8e:	4b51      	ldr	r3, [pc, #324]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9c:	494d      	ldr	r1, [pc, #308]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005fb0:	4b48      	ldr	r3, [pc, #288]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fbe:	4945      	ldr	r1, [pc, #276]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005fd2:	4b40      	ldr	r3, [pc, #256]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe0:	493c      	ldr	r1, [pc, #240]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ff4:	4b37      	ldr	r3, [pc, #220]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006002:	4934      	ldr	r1, [pc, #208]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d011      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006016:	4b2f      	ldr	r3, [pc, #188]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006024:	492b      	ldr	r1, [pc, #172]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006034:	d101      	bne.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006036:	2301      	movs	r3, #1
 8006038:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006046:	2301      	movs	r3, #1
 8006048:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006056:	4b1f      	ldr	r3, [pc, #124]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800605c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006064:	491b      	ldr	r1, [pc, #108]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00b      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006078:	4b16      	ldr	r3, [pc, #88]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800607a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006088:	4912      	ldr	r1, [pc, #72]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00b      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800609c:	4b0d      	ldr	r3, [pc, #52]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ac:	4909      	ldr	r1, [pc, #36]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00f      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060c0:	4b04      	ldr	r3, [pc, #16]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d0:	e002      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80060d2:	bf00      	nop
 80060d4:	40023800 	.word	0x40023800
 80060d8:	4985      	ldr	r1, [pc, #532]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80060ec:	4b80      	ldr	r3, [pc, #512]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060fc:	497c      	ldr	r1, [pc, #496]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d005      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006112:	f040 80d6 	bne.w	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006116:	4b76      	ldr	r3, [pc, #472]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a75      	ldr	r2, [pc, #468]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800611c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006122:	f7fe fd7d 	bl	8004c20 <HAL_GetTick>
 8006126:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006128:	e008      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800612a:	f7fe fd79 	bl	8004c20 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b64      	cmp	r3, #100	; 0x64
 8006136:	d901      	bls.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e194      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800613c:	4b6c      	ldr	r3, [pc, #432]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f0      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d021      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006158:	2b00      	cmp	r3, #0
 800615a:	d11d      	bne.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800615c:	4b64      	ldr	r3, [pc, #400]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800615e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006162:	0c1b      	lsrs	r3, r3, #16
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800616a:	4b61      	ldr	r3, [pc, #388]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800616c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006170:	0e1b      	lsrs	r3, r3, #24
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	019a      	lsls	r2, r3, #6
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	041b      	lsls	r3, r3, #16
 8006182:	431a      	orrs	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	061b      	lsls	r3, r3, #24
 8006188:	431a      	orrs	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	071b      	lsls	r3, r3, #28
 8006190:	4957      	ldr	r1, [pc, #348]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006192:	4313      	orrs	r3, r2
 8006194:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d004      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x586>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ac:	d00a      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d02e      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061c2:	d129      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80061c4:	4b4a      	ldr	r3, [pc, #296]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80061c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ca:	0c1b      	lsrs	r3, r3, #16
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80061d2:	4b47      	ldr	r3, [pc, #284]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80061d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061d8:	0f1b      	lsrs	r3, r3, #28
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	019a      	lsls	r2, r3, #6
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	041b      	lsls	r3, r3, #16
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	061b      	lsls	r3, r3, #24
 80061f2:	431a      	orrs	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	071b      	lsls	r3, r3, #28
 80061f8:	493d      	ldr	r1, [pc, #244]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006200:	4b3b      	ldr	r3, [pc, #236]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006206:	f023 021f 	bic.w	r2, r3, #31
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	3b01      	subs	r3, #1
 8006210:	4937      	ldr	r1, [pc, #220]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006212:	4313      	orrs	r3, r2
 8006214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d01d      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006224:	4b32      	ldr	r3, [pc, #200]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800622a:	0e1b      	lsrs	r3, r3, #24
 800622c:	f003 030f 	and.w	r3, r3, #15
 8006230:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006232:	4b2f      	ldr	r3, [pc, #188]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006238:	0f1b      	lsrs	r3, r3, #28
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	019a      	lsls	r2, r3, #6
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	041b      	lsls	r3, r3, #16
 800624c:	431a      	orrs	r2, r3
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	061b      	lsls	r3, r3, #24
 8006252:	431a      	orrs	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	071b      	lsls	r3, r3, #28
 8006258:	4925      	ldr	r1, [pc, #148]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d011      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	019a      	lsls	r2, r3, #6
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	041b      	lsls	r3, r3, #16
 8006278:	431a      	orrs	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	061b      	lsls	r3, r3, #24
 8006280:	431a      	orrs	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	071b      	lsls	r3, r3, #28
 8006288:	4919      	ldr	r1, [pc, #100]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800628a:	4313      	orrs	r3, r2
 800628c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006290:	4b17      	ldr	r3, [pc, #92]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a16      	ldr	r2, [pc, #88]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006296:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800629a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800629c:	f7fe fcc0 	bl	8004c20 <HAL_GetTick>
 80062a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062a2:	e008      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80062a4:	f7fe fcbc 	bl	8004c20 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b64      	cmp	r3, #100	; 0x64
 80062b0:	d901      	bls.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e0d7      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062b6:	4b0e      	ldr	r3, [pc, #56]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0f0      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	f040 80cd 	bne.w	8006464 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80062ca:	4b09      	ldr	r3, [pc, #36]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a08      	ldr	r2, [pc, #32]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80062d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062d6:	f7fe fca3 	bl	8004c20 <HAL_GetTick>
 80062da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062dc:	e00a      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062de:	f7fe fc9f 	bl	8004c20 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	2b64      	cmp	r3, #100	; 0x64
 80062ea:	d903      	bls.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e0ba      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80062f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062f4:	4b5e      	ldr	r3, [pc, #376]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006300:	d0ed      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d009      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800631e:	2b00      	cmp	r3, #0
 8006320:	d02e      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	2b00      	cmp	r3, #0
 8006328:	d12a      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800632a:	4b51      	ldr	r3, [pc, #324]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800632c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006330:	0c1b      	lsrs	r3, r3, #16
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006338:	4b4d      	ldr	r3, [pc, #308]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800633a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633e:	0f1b      	lsrs	r3, r3, #28
 8006340:	f003 0307 	and.w	r3, r3, #7
 8006344:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	019a      	lsls	r2, r3, #6
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	041b      	lsls	r3, r3, #16
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	061b      	lsls	r3, r3, #24
 8006358:	431a      	orrs	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	071b      	lsls	r3, r3, #28
 800635e:	4944      	ldr	r1, [pc, #272]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006360:	4313      	orrs	r3, r2
 8006362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006366:	4b42      	ldr	r3, [pc, #264]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800636c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006374:	3b01      	subs	r3, #1
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	493d      	ldr	r1, [pc, #244]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d022      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006394:	d11d      	bne.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006396:	4b36      	ldr	r3, [pc, #216]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639c:	0e1b      	lsrs	r3, r3, #24
 800639e:	f003 030f 	and.w	r3, r3, #15
 80063a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80063a4:	4b32      	ldr	r3, [pc, #200]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80063a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063aa:	0f1b      	lsrs	r3, r3, #28
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	019a      	lsls	r2, r3, #6
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	041b      	lsls	r3, r3, #16
 80063be:	431a      	orrs	r2, r3
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	061b      	lsls	r3, r3, #24
 80063c4:	431a      	orrs	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	071b      	lsls	r3, r3, #28
 80063ca:	4929      	ldr	r1, [pc, #164]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d028      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063de:	4b24      	ldr	r3, [pc, #144]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80063e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e4:	0e1b      	lsrs	r3, r3, #24
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80063ec:	4b20      	ldr	r3, [pc, #128]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80063ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f2:	0c1b      	lsrs	r3, r3, #16
 80063f4:	f003 0303 	and.w	r3, r3, #3
 80063f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	019a      	lsls	r2, r3, #6
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	041b      	lsls	r3, r3, #16
 8006404:	431a      	orrs	r2, r3
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	061b      	lsls	r3, r3, #24
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	071b      	lsls	r3, r3, #28
 8006412:	4917      	ldr	r1, [pc, #92]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006414:	4313      	orrs	r3, r2
 8006416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800641a:	4b15      	ldr	r3, [pc, #84]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800641c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006420:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	4911      	ldr	r1, [pc, #68]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006430:	4b0f      	ldr	r3, [pc, #60]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a0e      	ldr	r2, [pc, #56]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800643a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800643c:	f7fe fbf0 	bl	8004c20 <HAL_GetTick>
 8006440:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006442:	e008      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006444:	f7fe fbec 	bl	8004c20 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b64      	cmp	r3, #100	; 0x64
 8006450:	d901      	bls.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e007      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006456:	4b06      	ldr	r3, [pc, #24]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800645e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006462:	d1ef      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3720      	adds	r7, #32
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	40023800 	.word	0x40023800

08006474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e01d      	b.n	80064c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d106      	bne.n	80064a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fa fcb0 	bl	8000e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3304      	adds	r3, #4
 80064b0:	4619      	mov	r1, r3
 80064b2:	4610      	mov	r0, r2
 80064b4:	f000 fa8c 	bl	80069d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
	...

080064cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	4b0e      	ldr	r3, [pc, #56]	; (800651c <HAL_TIM_Base_Start+0x50>)
 80064e4:	4013      	ands	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b06      	cmp	r3, #6
 80064ec:	d00b      	beq.n	8006506 <HAL_TIM_Base_Start+0x3a>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f4:	d007      	beq.n	8006506 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f042 0201 	orr.w	r2, r2, #1
 8006504:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	00010007 	.word	0x00010007

08006520 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6a1a      	ldr	r2, [r3, #32]
 8006536:	f241 1311 	movw	r3, #4369	; 0x1111
 800653a:	4013      	ands	r3, r2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10f      	bne.n	8006560 <HAL_TIM_Base_Stop+0x40>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6a1a      	ldr	r2, [r3, #32]
 8006546:	f240 4344 	movw	r3, #1092	; 0x444
 800654a:	4013      	ands	r3, r2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d107      	bne.n	8006560 <HAL_TIM_Base_Stop+0x40>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0201 	bic.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
	...

08006578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f042 0201 	orr.w	r2, r2, #1
 800658e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	4b0c      	ldr	r3, [pc, #48]	; (80065c8 <HAL_TIM_Base_Start_IT+0x50>)
 8006598:	4013      	ands	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b06      	cmp	r3, #6
 80065a0:	d00b      	beq.n	80065ba <HAL_TIM_Base_Start_IT+0x42>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a8:	d007      	beq.n	80065ba <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f042 0201 	orr.w	r2, r2, #1
 80065b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	00010007 	.word	0x00010007

080065cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d122      	bne.n	8006628 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d11b      	bne.n	8006628 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0202 	mvn.w	r2, #2
 80065f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f9c0 	bl	8006994 <HAL_TIM_IC_CaptureCallback>
 8006614:	e005      	b.n	8006622 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f9b2 	bl	8006980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f9c3 	bl	80069a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b04      	cmp	r3, #4
 8006634:	d122      	bne.n	800667c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b04      	cmp	r3, #4
 8006642:	d11b      	bne.n	800667c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f06f 0204 	mvn.w	r2, #4
 800664c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2202      	movs	r2, #2
 8006652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f996 	bl	8006994 <HAL_TIM_IC_CaptureCallback>
 8006668:	e005      	b.n	8006676 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f988 	bl	8006980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f999 	bl	80069a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f003 0308 	and.w	r3, r3, #8
 8006686:	2b08      	cmp	r3, #8
 8006688:	d122      	bne.n	80066d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f003 0308 	and.w	r3, r3, #8
 8006694:	2b08      	cmp	r3, #8
 8006696:	d11b      	bne.n	80066d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f06f 0208 	mvn.w	r2, #8
 80066a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2204      	movs	r2, #4
 80066a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f96c 	bl	8006994 <HAL_TIM_IC_CaptureCallback>
 80066bc:	e005      	b.n	80066ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f95e 	bl	8006980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f96f 	bl	80069a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f003 0310 	and.w	r3, r3, #16
 80066da:	2b10      	cmp	r3, #16
 80066dc:	d122      	bne.n	8006724 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f003 0310 	and.w	r3, r3, #16
 80066e8:	2b10      	cmp	r3, #16
 80066ea:	d11b      	bne.n	8006724 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f06f 0210 	mvn.w	r2, #16
 80066f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2208      	movs	r2, #8
 80066fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f942 	bl	8006994 <HAL_TIM_IC_CaptureCallback>
 8006710:	e005      	b.n	800671e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f934 	bl	8006980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f945 	bl	80069a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b01      	cmp	r3, #1
 8006730:	d10e      	bne.n	8006750 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b01      	cmp	r3, #1
 800673e:	d107      	bne.n	8006750 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0201 	mvn.w	r2, #1
 8006748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fa fada 	bl	8000d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675a:	2b80      	cmp	r3, #128	; 0x80
 800675c:	d10e      	bne.n	800677c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006768:	2b80      	cmp	r3, #128	; 0x80
 800676a:	d107      	bne.n	800677c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fafc 	bl	8006d74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800678a:	d10e      	bne.n	80067aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006796:	2b80      	cmp	r3, #128	; 0x80
 8006798:	d107      	bne.n	80067aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 faef 	bl	8006d88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b4:	2b40      	cmp	r3, #64	; 0x40
 80067b6:	d10e      	bne.n	80067d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c2:	2b40      	cmp	r3, #64	; 0x40
 80067c4:	d107      	bne.n	80067d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f8f3 	bl	80069bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	f003 0320 	and.w	r3, r3, #32
 80067e0:	2b20      	cmp	r3, #32
 80067e2:	d10e      	bne.n	8006802 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	d107      	bne.n	8006802 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f06f 0220 	mvn.w	r2, #32
 80067fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 faaf 	bl	8006d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_TIM_ConfigClockSource+0x18>
 8006820:	2302      	movs	r3, #2
 8006822:	e0a6      	b.n	8006972 <HAL_TIM_ConfigClockSource+0x166>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4b4f      	ldr	r3, [pc, #316]	; (800697c <HAL_TIM_ConfigClockSource+0x170>)
 8006840:	4013      	ands	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800684a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b40      	cmp	r3, #64	; 0x40
 800685a:	d067      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x120>
 800685c:	2b40      	cmp	r3, #64	; 0x40
 800685e:	d80b      	bhi.n	8006878 <HAL_TIM_ConfigClockSource+0x6c>
 8006860:	2b10      	cmp	r3, #16
 8006862:	d073      	beq.n	800694c <HAL_TIM_ConfigClockSource+0x140>
 8006864:	2b10      	cmp	r3, #16
 8006866:	d802      	bhi.n	800686e <HAL_TIM_ConfigClockSource+0x62>
 8006868:	2b00      	cmp	r3, #0
 800686a:	d06f      	beq.n	800694c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800686c:	e078      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800686e:	2b20      	cmp	r3, #32
 8006870:	d06c      	beq.n	800694c <HAL_TIM_ConfigClockSource+0x140>
 8006872:	2b30      	cmp	r3, #48	; 0x30
 8006874:	d06a      	beq.n	800694c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006876:	e073      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006878:	2b70      	cmp	r3, #112	; 0x70
 800687a:	d00d      	beq.n	8006898 <HAL_TIM_ConfigClockSource+0x8c>
 800687c:	2b70      	cmp	r3, #112	; 0x70
 800687e:	d804      	bhi.n	800688a <HAL_TIM_ConfigClockSource+0x7e>
 8006880:	2b50      	cmp	r3, #80	; 0x50
 8006882:	d033      	beq.n	80068ec <HAL_TIM_ConfigClockSource+0xe0>
 8006884:	2b60      	cmp	r3, #96	; 0x60
 8006886:	d041      	beq.n	800690c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006888:	e06a      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800688a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800688e:	d066      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x152>
 8006890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006894:	d017      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006896:	e063      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	6899      	ldr	r1, [r3, #8]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f000 f9ac 	bl	8006c04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	609a      	str	r2, [r3, #8]
      break;
 80068c4:	e04c      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	6899      	ldr	r1, [r3, #8]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f000 f995 	bl	8006c04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068e8:	609a      	str	r2, [r3, #8]
      break;
 80068ea:	e039      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	6859      	ldr	r1, [r3, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	461a      	mov	r2, r3
 80068fa:	f000 f909 	bl	8006b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2150      	movs	r1, #80	; 0x50
 8006904:	4618      	mov	r0, r3
 8006906:	f000 f962 	bl	8006bce <TIM_ITRx_SetConfig>
      break;
 800690a:	e029      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6818      	ldr	r0, [r3, #0]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	6859      	ldr	r1, [r3, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	461a      	mov	r2, r3
 800691a:	f000 f928 	bl	8006b6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2160      	movs	r1, #96	; 0x60
 8006924:	4618      	mov	r0, r3
 8006926:	f000 f952 	bl	8006bce <TIM_ITRx_SetConfig>
      break;
 800692a:	e019      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	6859      	ldr	r1, [r3, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	461a      	mov	r2, r3
 800693a:	f000 f8e9 	bl	8006b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2140      	movs	r1, #64	; 0x40
 8006944:	4618      	mov	r0, r3
 8006946:	f000 f942 	bl	8006bce <TIM_ITRx_SetConfig>
      break;
 800694a:	e009      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4619      	mov	r1, r3
 8006956:	4610      	mov	r0, r2
 8006958:	f000 f939 	bl	8006bce <TIM_ITRx_SetConfig>
      break;
 800695c:	e000      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800695e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	fffeff88 	.word	0xfffeff88

08006980 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a40      	ldr	r2, [pc, #256]	; (8006ae4 <TIM_Base_SetConfig+0x114>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d013      	beq.n	8006a10 <TIM_Base_SetConfig+0x40>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ee:	d00f      	beq.n	8006a10 <TIM_Base_SetConfig+0x40>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a3d      	ldr	r2, [pc, #244]	; (8006ae8 <TIM_Base_SetConfig+0x118>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d00b      	beq.n	8006a10 <TIM_Base_SetConfig+0x40>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a3c      	ldr	r2, [pc, #240]	; (8006aec <TIM_Base_SetConfig+0x11c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d007      	beq.n	8006a10 <TIM_Base_SetConfig+0x40>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a3b      	ldr	r2, [pc, #236]	; (8006af0 <TIM_Base_SetConfig+0x120>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d003      	beq.n	8006a10 <TIM_Base_SetConfig+0x40>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a3a      	ldr	r2, [pc, #232]	; (8006af4 <TIM_Base_SetConfig+0x124>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d108      	bne.n	8006a22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a2f      	ldr	r2, [pc, #188]	; (8006ae4 <TIM_Base_SetConfig+0x114>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d02b      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a30:	d027      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a2c      	ldr	r2, [pc, #176]	; (8006ae8 <TIM_Base_SetConfig+0x118>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d023      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a2b      	ldr	r2, [pc, #172]	; (8006aec <TIM_Base_SetConfig+0x11c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d01f      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a2a      	ldr	r2, [pc, #168]	; (8006af0 <TIM_Base_SetConfig+0x120>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d01b      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a29      	ldr	r2, [pc, #164]	; (8006af4 <TIM_Base_SetConfig+0x124>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d017      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a28      	ldr	r2, [pc, #160]	; (8006af8 <TIM_Base_SetConfig+0x128>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d013      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a27      	ldr	r2, [pc, #156]	; (8006afc <TIM_Base_SetConfig+0x12c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00f      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a26      	ldr	r2, [pc, #152]	; (8006b00 <TIM_Base_SetConfig+0x130>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00b      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a25      	ldr	r2, [pc, #148]	; (8006b04 <TIM_Base_SetConfig+0x134>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d007      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a24      	ldr	r2, [pc, #144]	; (8006b08 <TIM_Base_SetConfig+0x138>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d003      	beq.n	8006a82 <TIM_Base_SetConfig+0xb2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a23      	ldr	r2, [pc, #140]	; (8006b0c <TIM_Base_SetConfig+0x13c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d108      	bne.n	8006a94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a0a      	ldr	r2, [pc, #40]	; (8006ae4 <TIM_Base_SetConfig+0x114>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d003      	beq.n	8006ac8 <TIM_Base_SetConfig+0xf8>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a0c      	ldr	r2, [pc, #48]	; (8006af4 <TIM_Base_SetConfig+0x124>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d103      	bne.n	8006ad0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	691a      	ldr	r2, [r3, #16]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	615a      	str	r2, [r3, #20]
}
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40000400 	.word	0x40000400
 8006aec:	40000800 	.word	0x40000800
 8006af0:	40000c00 	.word	0x40000c00
 8006af4:	40010400 	.word	0x40010400
 8006af8:	40014000 	.word	0x40014000
 8006afc:	40014400 	.word	0x40014400
 8006b00:	40014800 	.word	0x40014800
 8006b04:	40001800 	.word	0x40001800
 8006b08:	40001c00 	.word	0x40001c00
 8006b0c:	40002000 	.word	0x40002000

08006b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	f023 0201 	bic.w	r2, r3, #1
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	011b      	lsls	r3, r3, #4
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f023 030a 	bic.w	r3, r3, #10
 8006b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	621a      	str	r2, [r3, #32]
}
 8006b62:	bf00      	nop
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b087      	sub	sp, #28
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	f023 0210 	bic.w	r2, r3, #16
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	031b      	lsls	r3, r3, #12
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006baa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	011b      	lsls	r3, r3, #4
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b085      	sub	sp, #20
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	f043 0307 	orr.w	r3, r3, #7
 8006bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	609a      	str	r2, [r3, #8]
}
 8006bf8:	bf00      	nop
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	021a      	lsls	r2, r3, #8
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	609a      	str	r2, [r3, #8]
}
 8006c38:	bf00      	nop
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e06d      	b.n	8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a30      	ldr	r2, [pc, #192]	; (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d004      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a2f      	ldr	r2, [pc, #188]	; (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d108      	bne.n	8006ca2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a20      	ldr	r2, [pc, #128]	; (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d022      	beq.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cce:	d01d      	beq.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a1d      	ldr	r2, [pc, #116]	; (8006d4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d018      	beq.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1c      	ldr	r2, [pc, #112]	; (8006d50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d013      	beq.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a1a      	ldr	r2, [pc, #104]	; (8006d54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d00e      	beq.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a15      	ldr	r2, [pc, #84]	; (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d009      	beq.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a16      	ldr	r2, [pc, #88]	; (8006d58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d004      	beq.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a15      	ldr	r2, [pc, #84]	; (8006d5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d10c      	bne.n	8006d26 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	40010000 	.word	0x40010000
 8006d48:	40010400 	.word	0x40010400
 8006d4c:	40000400 	.word	0x40000400
 8006d50:	40000800 	.word	0x40000800
 8006d54:	40000c00 	.word	0x40000c00
 8006d58:	40014000 	.word	0x40014000
 8006d5c:	40001800 	.word	0x40001800

08006d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e040      	b.n	8006e30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d106      	bne.n	8006dc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7fa f86a 	bl	8000e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2224      	movs	r2, #36	; 0x24
 8006dc8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0201 	bic.w	r2, r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f82c 	bl	8006e38 <UART_SetConfig>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d101      	bne.n	8006dea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e022      	b.n	8006e30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 faca 	bl	800738c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0201 	orr.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fb51 	bl	80074d0 <UART_CheckIdleState>
 8006e2e:	4603      	mov	r3, r0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	431a      	orrs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	4bb1      	ldr	r3, [pc, #708]	; (800712c <UART_SetConfig+0x2f4>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	6812      	ldr	r2, [r2, #0]
 8006e6e:	6939      	ldr	r1, [r7, #16]
 8006e70:	430b      	orrs	r3, r1
 8006e72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a9f      	ldr	r2, [pc, #636]	; (8007130 <UART_SetConfig+0x2f8>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d121      	bne.n	8006efc <UART_SetConfig+0xc4>
 8006eb8:	4b9e      	ldr	r3, [pc, #632]	; (8007134 <UART_SetConfig+0x2fc>)
 8006eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ebe:	f003 0303 	and.w	r3, r3, #3
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d816      	bhi.n	8006ef4 <UART_SetConfig+0xbc>
 8006ec6:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <UART_SetConfig+0x94>)
 8006ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ecc:	08006edd 	.word	0x08006edd
 8006ed0:	08006ee9 	.word	0x08006ee9
 8006ed4:	08006ee3 	.word	0x08006ee3
 8006ed8:	08006eef 	.word	0x08006eef
 8006edc:	2301      	movs	r3, #1
 8006ede:	77fb      	strb	r3, [r7, #31]
 8006ee0:	e151      	b.n	8007186 <UART_SetConfig+0x34e>
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	77fb      	strb	r3, [r7, #31]
 8006ee6:	e14e      	b.n	8007186 <UART_SetConfig+0x34e>
 8006ee8:	2304      	movs	r3, #4
 8006eea:	77fb      	strb	r3, [r7, #31]
 8006eec:	e14b      	b.n	8007186 <UART_SetConfig+0x34e>
 8006eee:	2308      	movs	r3, #8
 8006ef0:	77fb      	strb	r3, [r7, #31]
 8006ef2:	e148      	b.n	8007186 <UART_SetConfig+0x34e>
 8006ef4:	2310      	movs	r3, #16
 8006ef6:	77fb      	strb	r3, [r7, #31]
 8006ef8:	bf00      	nop
 8006efa:	e144      	b.n	8007186 <UART_SetConfig+0x34e>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a8d      	ldr	r2, [pc, #564]	; (8007138 <UART_SetConfig+0x300>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d134      	bne.n	8006f70 <UART_SetConfig+0x138>
 8006f06:	4b8b      	ldr	r3, [pc, #556]	; (8007134 <UART_SetConfig+0x2fc>)
 8006f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0c:	f003 030c 	and.w	r3, r3, #12
 8006f10:	2b0c      	cmp	r3, #12
 8006f12:	d829      	bhi.n	8006f68 <UART_SetConfig+0x130>
 8006f14:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <UART_SetConfig+0xe4>)
 8006f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1a:	bf00      	nop
 8006f1c:	08006f51 	.word	0x08006f51
 8006f20:	08006f69 	.word	0x08006f69
 8006f24:	08006f69 	.word	0x08006f69
 8006f28:	08006f69 	.word	0x08006f69
 8006f2c:	08006f5d 	.word	0x08006f5d
 8006f30:	08006f69 	.word	0x08006f69
 8006f34:	08006f69 	.word	0x08006f69
 8006f38:	08006f69 	.word	0x08006f69
 8006f3c:	08006f57 	.word	0x08006f57
 8006f40:	08006f69 	.word	0x08006f69
 8006f44:	08006f69 	.word	0x08006f69
 8006f48:	08006f69 	.word	0x08006f69
 8006f4c:	08006f63 	.word	0x08006f63
 8006f50:	2300      	movs	r3, #0
 8006f52:	77fb      	strb	r3, [r7, #31]
 8006f54:	e117      	b.n	8007186 <UART_SetConfig+0x34e>
 8006f56:	2302      	movs	r3, #2
 8006f58:	77fb      	strb	r3, [r7, #31]
 8006f5a:	e114      	b.n	8007186 <UART_SetConfig+0x34e>
 8006f5c:	2304      	movs	r3, #4
 8006f5e:	77fb      	strb	r3, [r7, #31]
 8006f60:	e111      	b.n	8007186 <UART_SetConfig+0x34e>
 8006f62:	2308      	movs	r3, #8
 8006f64:	77fb      	strb	r3, [r7, #31]
 8006f66:	e10e      	b.n	8007186 <UART_SetConfig+0x34e>
 8006f68:	2310      	movs	r3, #16
 8006f6a:	77fb      	strb	r3, [r7, #31]
 8006f6c:	bf00      	nop
 8006f6e:	e10a      	b.n	8007186 <UART_SetConfig+0x34e>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a71      	ldr	r2, [pc, #452]	; (800713c <UART_SetConfig+0x304>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d120      	bne.n	8006fbc <UART_SetConfig+0x184>
 8006f7a:	4b6e      	ldr	r3, [pc, #440]	; (8007134 <UART_SetConfig+0x2fc>)
 8006f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f84:	2b10      	cmp	r3, #16
 8006f86:	d00f      	beq.n	8006fa8 <UART_SetConfig+0x170>
 8006f88:	2b10      	cmp	r3, #16
 8006f8a:	d802      	bhi.n	8006f92 <UART_SetConfig+0x15a>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d005      	beq.n	8006f9c <UART_SetConfig+0x164>
 8006f90:	e010      	b.n	8006fb4 <UART_SetConfig+0x17c>
 8006f92:	2b20      	cmp	r3, #32
 8006f94:	d005      	beq.n	8006fa2 <UART_SetConfig+0x16a>
 8006f96:	2b30      	cmp	r3, #48	; 0x30
 8006f98:	d009      	beq.n	8006fae <UART_SetConfig+0x176>
 8006f9a:	e00b      	b.n	8006fb4 <UART_SetConfig+0x17c>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	77fb      	strb	r3, [r7, #31]
 8006fa0:	e0f1      	b.n	8007186 <UART_SetConfig+0x34e>
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	77fb      	strb	r3, [r7, #31]
 8006fa6:	e0ee      	b.n	8007186 <UART_SetConfig+0x34e>
 8006fa8:	2304      	movs	r3, #4
 8006faa:	77fb      	strb	r3, [r7, #31]
 8006fac:	e0eb      	b.n	8007186 <UART_SetConfig+0x34e>
 8006fae:	2308      	movs	r3, #8
 8006fb0:	77fb      	strb	r3, [r7, #31]
 8006fb2:	e0e8      	b.n	8007186 <UART_SetConfig+0x34e>
 8006fb4:	2310      	movs	r3, #16
 8006fb6:	77fb      	strb	r3, [r7, #31]
 8006fb8:	bf00      	nop
 8006fba:	e0e4      	b.n	8007186 <UART_SetConfig+0x34e>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a5f      	ldr	r2, [pc, #380]	; (8007140 <UART_SetConfig+0x308>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d120      	bne.n	8007008 <UART_SetConfig+0x1d0>
 8006fc6:	4b5b      	ldr	r3, [pc, #364]	; (8007134 <UART_SetConfig+0x2fc>)
 8006fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fcc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006fd0:	2b40      	cmp	r3, #64	; 0x40
 8006fd2:	d00f      	beq.n	8006ff4 <UART_SetConfig+0x1bc>
 8006fd4:	2b40      	cmp	r3, #64	; 0x40
 8006fd6:	d802      	bhi.n	8006fde <UART_SetConfig+0x1a6>
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d005      	beq.n	8006fe8 <UART_SetConfig+0x1b0>
 8006fdc:	e010      	b.n	8007000 <UART_SetConfig+0x1c8>
 8006fde:	2b80      	cmp	r3, #128	; 0x80
 8006fe0:	d005      	beq.n	8006fee <UART_SetConfig+0x1b6>
 8006fe2:	2bc0      	cmp	r3, #192	; 0xc0
 8006fe4:	d009      	beq.n	8006ffa <UART_SetConfig+0x1c2>
 8006fe6:	e00b      	b.n	8007000 <UART_SetConfig+0x1c8>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	77fb      	strb	r3, [r7, #31]
 8006fec:	e0cb      	b.n	8007186 <UART_SetConfig+0x34e>
 8006fee:	2302      	movs	r3, #2
 8006ff0:	77fb      	strb	r3, [r7, #31]
 8006ff2:	e0c8      	b.n	8007186 <UART_SetConfig+0x34e>
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	77fb      	strb	r3, [r7, #31]
 8006ff8:	e0c5      	b.n	8007186 <UART_SetConfig+0x34e>
 8006ffa:	2308      	movs	r3, #8
 8006ffc:	77fb      	strb	r3, [r7, #31]
 8006ffe:	e0c2      	b.n	8007186 <UART_SetConfig+0x34e>
 8007000:	2310      	movs	r3, #16
 8007002:	77fb      	strb	r3, [r7, #31]
 8007004:	bf00      	nop
 8007006:	e0be      	b.n	8007186 <UART_SetConfig+0x34e>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a4d      	ldr	r2, [pc, #308]	; (8007144 <UART_SetConfig+0x30c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d124      	bne.n	800705c <UART_SetConfig+0x224>
 8007012:	4b48      	ldr	r3, [pc, #288]	; (8007134 <UART_SetConfig+0x2fc>)
 8007014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800701c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007020:	d012      	beq.n	8007048 <UART_SetConfig+0x210>
 8007022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007026:	d802      	bhi.n	800702e <UART_SetConfig+0x1f6>
 8007028:	2b00      	cmp	r3, #0
 800702a:	d007      	beq.n	800703c <UART_SetConfig+0x204>
 800702c:	e012      	b.n	8007054 <UART_SetConfig+0x21c>
 800702e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007032:	d006      	beq.n	8007042 <UART_SetConfig+0x20a>
 8007034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007038:	d009      	beq.n	800704e <UART_SetConfig+0x216>
 800703a:	e00b      	b.n	8007054 <UART_SetConfig+0x21c>
 800703c:	2300      	movs	r3, #0
 800703e:	77fb      	strb	r3, [r7, #31]
 8007040:	e0a1      	b.n	8007186 <UART_SetConfig+0x34e>
 8007042:	2302      	movs	r3, #2
 8007044:	77fb      	strb	r3, [r7, #31]
 8007046:	e09e      	b.n	8007186 <UART_SetConfig+0x34e>
 8007048:	2304      	movs	r3, #4
 800704a:	77fb      	strb	r3, [r7, #31]
 800704c:	e09b      	b.n	8007186 <UART_SetConfig+0x34e>
 800704e:	2308      	movs	r3, #8
 8007050:	77fb      	strb	r3, [r7, #31]
 8007052:	e098      	b.n	8007186 <UART_SetConfig+0x34e>
 8007054:	2310      	movs	r3, #16
 8007056:	77fb      	strb	r3, [r7, #31]
 8007058:	bf00      	nop
 800705a:	e094      	b.n	8007186 <UART_SetConfig+0x34e>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a39      	ldr	r2, [pc, #228]	; (8007148 <UART_SetConfig+0x310>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d124      	bne.n	80070b0 <UART_SetConfig+0x278>
 8007066:	4b33      	ldr	r3, [pc, #204]	; (8007134 <UART_SetConfig+0x2fc>)
 8007068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800706c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007074:	d012      	beq.n	800709c <UART_SetConfig+0x264>
 8007076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800707a:	d802      	bhi.n	8007082 <UART_SetConfig+0x24a>
 800707c:	2b00      	cmp	r3, #0
 800707e:	d007      	beq.n	8007090 <UART_SetConfig+0x258>
 8007080:	e012      	b.n	80070a8 <UART_SetConfig+0x270>
 8007082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007086:	d006      	beq.n	8007096 <UART_SetConfig+0x25e>
 8007088:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800708c:	d009      	beq.n	80070a2 <UART_SetConfig+0x26a>
 800708e:	e00b      	b.n	80070a8 <UART_SetConfig+0x270>
 8007090:	2301      	movs	r3, #1
 8007092:	77fb      	strb	r3, [r7, #31]
 8007094:	e077      	b.n	8007186 <UART_SetConfig+0x34e>
 8007096:	2302      	movs	r3, #2
 8007098:	77fb      	strb	r3, [r7, #31]
 800709a:	e074      	b.n	8007186 <UART_SetConfig+0x34e>
 800709c:	2304      	movs	r3, #4
 800709e:	77fb      	strb	r3, [r7, #31]
 80070a0:	e071      	b.n	8007186 <UART_SetConfig+0x34e>
 80070a2:	2308      	movs	r3, #8
 80070a4:	77fb      	strb	r3, [r7, #31]
 80070a6:	e06e      	b.n	8007186 <UART_SetConfig+0x34e>
 80070a8:	2310      	movs	r3, #16
 80070aa:	77fb      	strb	r3, [r7, #31]
 80070ac:	bf00      	nop
 80070ae:	e06a      	b.n	8007186 <UART_SetConfig+0x34e>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a25      	ldr	r2, [pc, #148]	; (800714c <UART_SetConfig+0x314>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d124      	bne.n	8007104 <UART_SetConfig+0x2cc>
 80070ba:	4b1e      	ldr	r3, [pc, #120]	; (8007134 <UART_SetConfig+0x2fc>)
 80070bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80070c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c8:	d012      	beq.n	80070f0 <UART_SetConfig+0x2b8>
 80070ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ce:	d802      	bhi.n	80070d6 <UART_SetConfig+0x29e>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d007      	beq.n	80070e4 <UART_SetConfig+0x2ac>
 80070d4:	e012      	b.n	80070fc <UART_SetConfig+0x2c4>
 80070d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070da:	d006      	beq.n	80070ea <UART_SetConfig+0x2b2>
 80070dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070e0:	d009      	beq.n	80070f6 <UART_SetConfig+0x2be>
 80070e2:	e00b      	b.n	80070fc <UART_SetConfig+0x2c4>
 80070e4:	2300      	movs	r3, #0
 80070e6:	77fb      	strb	r3, [r7, #31]
 80070e8:	e04d      	b.n	8007186 <UART_SetConfig+0x34e>
 80070ea:	2302      	movs	r3, #2
 80070ec:	77fb      	strb	r3, [r7, #31]
 80070ee:	e04a      	b.n	8007186 <UART_SetConfig+0x34e>
 80070f0:	2304      	movs	r3, #4
 80070f2:	77fb      	strb	r3, [r7, #31]
 80070f4:	e047      	b.n	8007186 <UART_SetConfig+0x34e>
 80070f6:	2308      	movs	r3, #8
 80070f8:	77fb      	strb	r3, [r7, #31]
 80070fa:	e044      	b.n	8007186 <UART_SetConfig+0x34e>
 80070fc:	2310      	movs	r3, #16
 80070fe:	77fb      	strb	r3, [r7, #31]
 8007100:	bf00      	nop
 8007102:	e040      	b.n	8007186 <UART_SetConfig+0x34e>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a11      	ldr	r2, [pc, #68]	; (8007150 <UART_SetConfig+0x318>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d139      	bne.n	8007182 <UART_SetConfig+0x34a>
 800710e:	4b09      	ldr	r3, [pc, #36]	; (8007134 <UART_SetConfig+0x2fc>)
 8007110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007114:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007118:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800711c:	d027      	beq.n	800716e <UART_SetConfig+0x336>
 800711e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007122:	d817      	bhi.n	8007154 <UART_SetConfig+0x31c>
 8007124:	2b00      	cmp	r3, #0
 8007126:	d01c      	beq.n	8007162 <UART_SetConfig+0x32a>
 8007128:	e027      	b.n	800717a <UART_SetConfig+0x342>
 800712a:	bf00      	nop
 800712c:	efff69f3 	.word	0xefff69f3
 8007130:	40011000 	.word	0x40011000
 8007134:	40023800 	.word	0x40023800
 8007138:	40004400 	.word	0x40004400
 800713c:	40004800 	.word	0x40004800
 8007140:	40004c00 	.word	0x40004c00
 8007144:	40005000 	.word	0x40005000
 8007148:	40011400 	.word	0x40011400
 800714c:	40007800 	.word	0x40007800
 8007150:	40007c00 	.word	0x40007c00
 8007154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007158:	d006      	beq.n	8007168 <UART_SetConfig+0x330>
 800715a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800715e:	d009      	beq.n	8007174 <UART_SetConfig+0x33c>
 8007160:	e00b      	b.n	800717a <UART_SetConfig+0x342>
 8007162:	2300      	movs	r3, #0
 8007164:	77fb      	strb	r3, [r7, #31]
 8007166:	e00e      	b.n	8007186 <UART_SetConfig+0x34e>
 8007168:	2302      	movs	r3, #2
 800716a:	77fb      	strb	r3, [r7, #31]
 800716c:	e00b      	b.n	8007186 <UART_SetConfig+0x34e>
 800716e:	2304      	movs	r3, #4
 8007170:	77fb      	strb	r3, [r7, #31]
 8007172:	e008      	b.n	8007186 <UART_SetConfig+0x34e>
 8007174:	2308      	movs	r3, #8
 8007176:	77fb      	strb	r3, [r7, #31]
 8007178:	e005      	b.n	8007186 <UART_SetConfig+0x34e>
 800717a:	2310      	movs	r3, #16
 800717c:	77fb      	strb	r3, [r7, #31]
 800717e:	bf00      	nop
 8007180:	e001      	b.n	8007186 <UART_SetConfig+0x34e>
 8007182:	2310      	movs	r3, #16
 8007184:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800718e:	d17f      	bne.n	8007290 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007190:	7ffb      	ldrb	r3, [r7, #31]
 8007192:	2b08      	cmp	r3, #8
 8007194:	d85c      	bhi.n	8007250 <UART_SetConfig+0x418>
 8007196:	a201      	add	r2, pc, #4	; (adr r2, 800719c <UART_SetConfig+0x364>)
 8007198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719c:	080071c1 	.word	0x080071c1
 80071a0:	080071e1 	.word	0x080071e1
 80071a4:	08007201 	.word	0x08007201
 80071a8:	08007251 	.word	0x08007251
 80071ac:	08007219 	.word	0x08007219
 80071b0:	08007251 	.word	0x08007251
 80071b4:	08007251 	.word	0x08007251
 80071b8:	08007251 	.word	0x08007251
 80071bc:	08007239 	.word	0x08007239
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071c0:	f7fe fd0a 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 80071c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	005a      	lsls	r2, r3, #1
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	085b      	lsrs	r3, r3, #1
 80071d0:	441a      	add	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071da:	b29b      	uxth	r3, r3
 80071dc:	61bb      	str	r3, [r7, #24]
        break;
 80071de:	e03a      	b.n	8007256 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071e0:	f7fe fd0e 	bl	8005c00 <HAL_RCC_GetPCLK2Freq>
 80071e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	005a      	lsls	r2, r3, #1
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	085b      	lsrs	r3, r3, #1
 80071f0:	441a      	add	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	61bb      	str	r3, [r7, #24]
        break;
 80071fe:	e02a      	b.n	8007256 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	085a      	lsrs	r2, r3, #1
 8007206:	4b5f      	ldr	r3, [pc, #380]	; (8007384 <UART_SetConfig+0x54c>)
 8007208:	4413      	add	r3, r2
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6852      	ldr	r2, [r2, #4]
 800720e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007212:	b29b      	uxth	r3, r3
 8007214:	61bb      	str	r3, [r7, #24]
        break;
 8007216:	e01e      	b.n	8007256 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007218:	f7fe fbfa 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 800721c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	005a      	lsls	r2, r3, #1
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	085b      	lsrs	r3, r3, #1
 8007228:	441a      	add	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007232:	b29b      	uxth	r3, r3
 8007234:	61bb      	str	r3, [r7, #24]
        break;
 8007236:	e00e      	b.n	8007256 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	085b      	lsrs	r3, r3, #1
 800723e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	fbb2 f3f3 	udiv	r3, r2, r3
 800724a:	b29b      	uxth	r3, r3
 800724c:	61bb      	str	r3, [r7, #24]
        break;
 800724e:	e002      	b.n	8007256 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	75fb      	strb	r3, [r7, #23]
        break;
 8007254:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	2b0f      	cmp	r3, #15
 800725a:	d916      	bls.n	800728a <UART_SetConfig+0x452>
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007262:	d212      	bcs.n	800728a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	b29b      	uxth	r3, r3
 8007268:	f023 030f 	bic.w	r3, r3, #15
 800726c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	085b      	lsrs	r3, r3, #1
 8007272:	b29b      	uxth	r3, r3
 8007274:	f003 0307 	and.w	r3, r3, #7
 8007278:	b29a      	uxth	r2, r3
 800727a:	897b      	ldrh	r3, [r7, #10]
 800727c:	4313      	orrs	r3, r2
 800727e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	897a      	ldrh	r2, [r7, #10]
 8007286:	60da      	str	r2, [r3, #12]
 8007288:	e070      	b.n	800736c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	75fb      	strb	r3, [r7, #23]
 800728e:	e06d      	b.n	800736c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007290:	7ffb      	ldrb	r3, [r7, #31]
 8007292:	2b08      	cmp	r3, #8
 8007294:	d859      	bhi.n	800734a <UART_SetConfig+0x512>
 8007296:	a201      	add	r2, pc, #4	; (adr r2, 800729c <UART_SetConfig+0x464>)
 8007298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729c:	080072c1 	.word	0x080072c1
 80072a0:	080072df 	.word	0x080072df
 80072a4:	080072fd 	.word	0x080072fd
 80072a8:	0800734b 	.word	0x0800734b
 80072ac:	08007315 	.word	0x08007315
 80072b0:	0800734b 	.word	0x0800734b
 80072b4:	0800734b 	.word	0x0800734b
 80072b8:	0800734b 	.word	0x0800734b
 80072bc:	08007333 	.word	0x08007333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072c0:	f7fe fc8a 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 80072c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	085a      	lsrs	r2, r3, #1
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	441a      	add	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d8:	b29b      	uxth	r3, r3
 80072da:	61bb      	str	r3, [r7, #24]
        break;
 80072dc:	e038      	b.n	8007350 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072de:	f7fe fc8f 	bl	8005c00 <HAL_RCC_GetPCLK2Freq>
 80072e2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	085a      	lsrs	r2, r3, #1
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	441a      	add	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	61bb      	str	r3, [r7, #24]
        break;
 80072fa:	e029      	b.n	8007350 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	085a      	lsrs	r2, r3, #1
 8007302:	4b21      	ldr	r3, [pc, #132]	; (8007388 <UART_SetConfig+0x550>)
 8007304:	4413      	add	r3, r2
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	6852      	ldr	r2, [r2, #4]
 800730a:	fbb3 f3f2 	udiv	r3, r3, r2
 800730e:	b29b      	uxth	r3, r3
 8007310:	61bb      	str	r3, [r7, #24]
        break;
 8007312:	e01d      	b.n	8007350 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007314:	f7fe fb7c 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 8007318:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	085a      	lsrs	r2, r3, #1
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	441a      	add	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	fbb2 f3f3 	udiv	r3, r2, r3
 800732c:	b29b      	uxth	r3, r3
 800732e:	61bb      	str	r3, [r7, #24]
        break;
 8007330:	e00e      	b.n	8007350 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	085b      	lsrs	r3, r3, #1
 8007338:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	fbb2 f3f3 	udiv	r3, r2, r3
 8007344:	b29b      	uxth	r3, r3
 8007346:	61bb      	str	r3, [r7, #24]
        break;
 8007348:	e002      	b.n	8007350 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	75fb      	strb	r3, [r7, #23]
        break;
 800734e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	2b0f      	cmp	r3, #15
 8007354:	d908      	bls.n	8007368 <UART_SetConfig+0x530>
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800735c:	d204      	bcs.n	8007368 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	60da      	str	r2, [r3, #12]
 8007366:	e001      	b.n	800736c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007378:	7dfb      	ldrb	r3, [r7, #23]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3720      	adds	r7, #32
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	01e84800 	.word	0x01e84800
 8007388:	00f42400 	.word	0x00f42400

0800738c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00a      	beq.n	80073b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	430a      	orrs	r2, r1
 80073d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00a      	beq.n	80073fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	f003 0310 	and.w	r3, r3, #16
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	f003 0320 	and.w	r3, r3, #32
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01a      	beq.n	80074a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800748a:	d10a      	bne.n	80074a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	605a      	str	r2, [r3, #4]
  }
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af02      	add	r7, sp, #8
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80074de:	f7fd fb9f 	bl	8004c20 <HAL_GetTick>
 80074e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0308 	and.w	r3, r3, #8
 80074ee:	2b08      	cmp	r3, #8
 80074f0:	d10e      	bne.n	8007510 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f82a 	bl	800755a <UART_WaitOnFlagUntilTimeout>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e020      	b.n	8007552 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	2b04      	cmp	r3, #4
 800751c:	d10e      	bne.n	800753c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800751e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f814 	bl	800755a <UART_WaitOnFlagUntilTimeout>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e00a      	b.n	8007552 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	603b      	str	r3, [r7, #0]
 8007566:	4613      	mov	r3, r2
 8007568:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800756a:	e05d      	b.n	8007628 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007572:	d059      	beq.n	8007628 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007574:	f7fd fb54 	bl	8004c20 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	429a      	cmp	r2, r3
 8007582:	d302      	bcc.n	800758a <UART_WaitOnFlagUntilTimeout+0x30>
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d11b      	bne.n	80075c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007598:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0201 	bic.w	r2, r2, #1
 80075a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2220      	movs	r2, #32
 80075ae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2220      	movs	r2, #32
 80075b4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e042      	b.n	8007648 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d02b      	beq.n	8007628 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075de:	d123      	bne.n	8007628 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075e8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80075f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689a      	ldr	r2, [r3, #8]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0201 	bic.w	r2, r2, #1
 8007608:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2220      	movs	r2, #32
 800760e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2220      	movs	r2, #32
 8007614:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2220      	movs	r2, #32
 800761a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e00f      	b.n	8007648 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	69da      	ldr	r2, [r3, #28]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	4013      	ands	r3, r2
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	429a      	cmp	r2, r3
 8007636:	bf0c      	ite	eq
 8007638:	2301      	moveq	r3, #1
 800763a:	2300      	movne	r3, #0
 800763c:	b2db      	uxtb	r3, r3
 800763e:	461a      	mov	r2, r3
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	429a      	cmp	r2, r3
 8007644:	d092      	beq.n	800756c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <__libc_init_array>:
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	4e0d      	ldr	r6, [pc, #52]	; (8007688 <__libc_init_array+0x38>)
 8007654:	4c0d      	ldr	r4, [pc, #52]	; (800768c <__libc_init_array+0x3c>)
 8007656:	1ba4      	subs	r4, r4, r6
 8007658:	10a4      	asrs	r4, r4, #2
 800765a:	2500      	movs	r5, #0
 800765c:	42a5      	cmp	r5, r4
 800765e:	d109      	bne.n	8007674 <__libc_init_array+0x24>
 8007660:	4e0b      	ldr	r6, [pc, #44]	; (8007690 <__libc_init_array+0x40>)
 8007662:	4c0c      	ldr	r4, [pc, #48]	; (8007694 <__libc_init_array+0x44>)
 8007664:	f000 f820 	bl	80076a8 <_init>
 8007668:	1ba4      	subs	r4, r4, r6
 800766a:	10a4      	asrs	r4, r4, #2
 800766c:	2500      	movs	r5, #0
 800766e:	42a5      	cmp	r5, r4
 8007670:	d105      	bne.n	800767e <__libc_init_array+0x2e>
 8007672:	bd70      	pop	{r4, r5, r6, pc}
 8007674:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007678:	4798      	blx	r3
 800767a:	3501      	adds	r5, #1
 800767c:	e7ee      	b.n	800765c <__libc_init_array+0xc>
 800767e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007682:	4798      	blx	r3
 8007684:	3501      	adds	r5, #1
 8007686:	e7f2      	b.n	800766e <__libc_init_array+0x1e>
 8007688:	08008620 	.word	0x08008620
 800768c:	08008620 	.word	0x08008620
 8007690:	08008620 	.word	0x08008620
 8007694:	08008624 	.word	0x08008624

08007698 <memset>:
 8007698:	4402      	add	r2, r0
 800769a:	4603      	mov	r3, r0
 800769c:	4293      	cmp	r3, r2
 800769e:	d100      	bne.n	80076a2 <memset+0xa>
 80076a0:	4770      	bx	lr
 80076a2:	f803 1b01 	strb.w	r1, [r3], #1
 80076a6:	e7f9      	b.n	800769c <memset+0x4>

080076a8 <_init>:
 80076a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076aa:	bf00      	nop
 80076ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ae:	bc08      	pop	{r3}
 80076b0:	469e      	mov	lr, r3
 80076b2:	4770      	bx	lr

080076b4 <_fini>:
 80076b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b6:	bf00      	nop
 80076b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ba:	bc08      	pop	{r3}
 80076bc:	469e      	mov	lr, r3
 80076be:	4770      	bx	lr
