
EmbSynth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091c8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  080093c0  080093c0  000193c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009958  08009958  000203d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009958  08009958  00019958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009960  08009960  000203d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009960  08009960  00019960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009964  08009964  00019964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d4  20000000  08009968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  200003d4  08009d3c  000203d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000764  08009d3c  00020764  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000203d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128b6  00000000  00000000  00020402  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023df  00000000  00000000  00032cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  00035098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001058  00000000  00000000  000361f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002770e  00000000  00000000  00037248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc95  00000000  00000000  0005e956  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fcd75  00000000  00000000  0006b5eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00168360  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c8  00000000  00000000  001683dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200003d4 	.word	0x200003d4
 8000214:	00000000 	.word	0x00000000
 8000218:	080093a8 	.word	0x080093a8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200003d8 	.word	0x200003d8
 8000234:	080093a8 	.word	0x080093a8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f005 f9f0 	bl	8005922 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 fc0d 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 fe59 	bl	80011fc <MX_GPIO_Init>
  MX_DMA_Init();
 800054a:	f000 fe29 	bl	80011a0 <MX_DMA_Init>
  MX_UART4_Init();
 800054e:	f000 fdc7 	bl	80010e0 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000552:	f000 fdf5 	bl	8001140 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000556:	f000 fd1b 	bl	8000f90 <MX_TIM2_Init>
  MX_TIM14_Init();
 800055a:	f000 fd9d 	bl	8001098 <MX_TIM14_Init>
  MX_TIM1_Init();
 800055e:	f000 fcc3 	bl	8000ee8 <MX_TIM1_Init>
  MX_DAC_Init();
 8000562:	f000 fc8d 	bl	8000e80 <MX_DAC_Init>
  MX_TIM6_Init();
 8000566:	f000 fd61 	bl	800102c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800056a:	4891      	ldr	r0, [pc, #580]	; (80007b0 <main+0x278>)
 800056c:	f007 fc52 	bl	8007e14 <HAL_TIM_Base_Start>
  HAL_UART_Receive_DMA(&huart4, rx_buffer, sizeof(rx_buffer)/sizeof(char));
 8000570:	2201      	movs	r2, #1
 8000572:	4990      	ldr	r1, [pc, #576]	; (80007b4 <main+0x27c>)
 8000574:	4890      	ldr	r0, [pc, #576]	; (80007b8 <main+0x280>)
 8000576:	f008 f995 	bl	80088a4 <HAL_UART_Receive_DMA>

  ID = readID();
 800057a:	f002 ff6d 	bl	8003458 <readID>
 800057e:	4603      	mov	r3, r0
 8000580:	461a      	mov	r2, r3
 8000582:	4b8e      	ldr	r3, [pc, #568]	; (80007bc <main+0x284>)
 8000584:	801a      	strh	r2, [r3, #0]
  HAL_Delay(100);
 8000586:	2064      	movs	r0, #100	; 0x64
 8000588:	f005 fa28 	bl	80059dc <HAL_Delay>
  tft_init(ID);
 800058c:	4b8b      	ldr	r3, [pc, #556]	; (80007bc <main+0x284>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f002 fc43 	bl	8002e1c <tft_init>
  setRotation(3);
 8000596:	2003      	movs	r0, #3
 8000598:	f003 fe7c 	bl	8004294 <setRotation>

  // INTERFAZ GLOBAL
  fillRect(0 , 0, 320, 240,(11)&BLUE | (((16)*2)<<5)&GREEN |  ((26)<<(5+6))&RED );//Color base
 800059c:	f24d 430b 	movw	r3, #54283	; 0xd40b
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	23f0      	movs	r3, #240	; 0xf0
 80005a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80005a8:	2100      	movs	r1, #0
 80005aa:	2000      	movs	r0, #0
 80005ac:	f004 fe16 	bl	80051dc <fillRect>
  fillRect(20 , 80, 280, 120,BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));//Color de tablero
 80005b0:	f648 23ca 	movw	r3, #35530	; 0x8aca
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2378      	movs	r3, #120	; 0x78
 80005b8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	2014      	movs	r0, #20
 80005c0:	f004 fe0c 	bl	80051dc <fillRect>
  fillRect(20 , 20, 280, 50,BLUE_LEV(2) | GREEN_LEV(2) | RED_LEV(2));//Color de señales
 80005c4:	f241 0382 	movw	r3, #4226	; 0x1082
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2332      	movs	r3, #50	; 0x32
 80005cc:	f44f 728c 	mov.w	r2, #280	; 0x118
 80005d0:	2114      	movs	r1, #20
 80005d2:	2014      	movs	r0, #20
 80005d4:	f004 fe02 	bl	80051dc <fillRect>

  // AM
  fillTriangle(62, 105, 72, 90, 82, 105, RED);
 80005d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80005dc:	9302      	str	r3, [sp, #8]
 80005de:	2369      	movs	r3, #105	; 0x69
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2352      	movs	r3, #82	; 0x52
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	235a      	movs	r3, #90	; 0x5a
 80005e8:	2248      	movs	r2, #72	; 0x48
 80005ea:	2169      	movs	r1, #105	; 0x69
 80005ec:	203e      	movs	r0, #62	; 0x3e
 80005ee:	f005 f80f 	bl	8005610 <fillTriangle>

  // FM
  fillTriangle(45, 140, 55, 125, 65, 140, RED);
 80005f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80005f6:	9302      	str	r3, [sp, #8]
 80005f8:	238c      	movs	r3, #140	; 0x8c
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2341      	movs	r3, #65	; 0x41
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	237d      	movs	r3, #125	; 0x7d
 8000602:	2237      	movs	r2, #55	; 0x37
 8000604:	218c      	movs	r1, #140	; 0x8c
 8000606:	202d      	movs	r0, #45	; 0x2d
 8000608:	f005 f802 	bl	8005610 <fillTriangle>
  fillTriangle(76, 140, 86, 125, 96, 140, RED);
 800060c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000610:	9302      	str	r3, [sp, #8]
 8000612:	238c      	movs	r3, #140	; 0x8c
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2360      	movs	r3, #96	; 0x60
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	237d      	movs	r3, #125	; 0x7d
 800061c:	2256      	movs	r2, #86	; 0x56
 800061e:	218c      	movs	r1, #140	; 0x8c
 8000620:	204c      	movs	r0, #76	; 0x4c
 8000622:	f004 fff5 	bl	8005610 <fillTriangle>

  // LP
  fillTriangle(76, 175, 76, 160, 90, 175, RED);
 8000626:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800062a:	9302      	str	r3, [sp, #8]
 800062c:	23af      	movs	r3, #175	; 0xaf
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	235a      	movs	r3, #90	; 0x5a
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	23a0      	movs	r3, #160	; 0xa0
 8000636:	224c      	movs	r2, #76	; 0x4c
 8000638:	21af      	movs	r1, #175	; 0xaf
 800063a:	204c      	movs	r0, #76	; 0x4c
 800063c:	f004 ffe8 	bl	8005610 <fillTriangle>
  fillRect(40, 161, 36, 14,RED);
 8000640:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	230e      	movs	r3, #14
 8000648:	2224      	movs	r2, #36	; 0x24
 800064a:	21a1      	movs	r1, #161	; 0xa1
 800064c:	2028      	movs	r0, #40	; 0x28
 800064e:	f004 fdc5 	bl	80051dc <fillRect>

  // PIANO
  fillRect(65 , 205, 190, 35,WHITE);
 8000652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2323      	movs	r3, #35	; 0x23
 800065a:	22be      	movs	r2, #190	; 0xbe
 800065c:	21cd      	movs	r1, #205	; 0xcd
 800065e:	2041      	movs	r0, #65	; 0x41
 8000660:	f004 fdbc 	bl	80051dc <fillRect>
  fillRect(85 , 205, 10 ,22,BLACK);
 8000664:	2300      	movs	r3, #0
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2316      	movs	r3, #22
 800066a:	220a      	movs	r2, #10
 800066c:	21cd      	movs	r1, #205	; 0xcd
 800066e:	2055      	movs	r0, #85	; 0x55
 8000670:	f004 fdb4 	bl	80051dc <fillRect>
  fillRect(115 , 205, 10 ,22,BLACK);
 8000674:	2300      	movs	r3, #0
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2316      	movs	r3, #22
 800067a:	220a      	movs	r2, #10
 800067c:	21cd      	movs	r1, #205	; 0xcd
 800067e:	2073      	movs	r0, #115	; 0x73
 8000680:	f004 fdac 	bl	80051dc <fillRect>
  fillRect(165 , 205, 10 ,22,BLACK);
 8000684:	2300      	movs	r3, #0
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2316      	movs	r3, #22
 800068a:	220a      	movs	r2, #10
 800068c:	21cd      	movs	r1, #205	; 0xcd
 800068e:	20a5      	movs	r0, #165	; 0xa5
 8000690:	f004 fda4 	bl	80051dc <fillRect>
  fillRect(195 , 205, 10 ,22,BLACK);
 8000694:	2300      	movs	r3, #0
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2316      	movs	r3, #22
 800069a:	220a      	movs	r2, #10
 800069c:	21cd      	movs	r1, #205	; 0xcd
 800069e:	20c3      	movs	r0, #195	; 0xc3
 80006a0:	f004 fd9c 	bl	80051dc <fillRect>
  fillRect(225 , 205, 10 ,22,BLACK);
 80006a4:	2300      	movs	r3, #0
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2316      	movs	r3, #22
 80006aa:	220a      	movs	r2, #10
 80006ac:	21cd      	movs	r1, #205	; 0xcd
 80006ae:	20e1      	movs	r0, #225	; 0xe1
 80006b0:	f004 fd94 	bl	80051dc <fillRect>

  //CAJAS DE VOLUMEN
  	//HORIZONTALES
  fillRect(130 , 95, 152, 3,BLACK);
 80006b4:	2300      	movs	r3, #0
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2303      	movs	r3, #3
 80006ba:	2298      	movs	r2, #152	; 0x98
 80006bc:	215f      	movs	r1, #95	; 0x5f
 80006be:	2082      	movs	r0, #130	; 0x82
 80006c0:	f004 fd8c 	bl	80051dc <fillRect>
  fillRect(130 , 112, 152, 3,BLACK);
 80006c4:	2300      	movs	r3, #0
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2303      	movs	r3, #3
 80006ca:	2298      	movs	r2, #152	; 0x98
 80006cc:	2170      	movs	r1, #112	; 0x70
 80006ce:	2082      	movs	r0, #130	; 0x82
 80006d0:	f004 fd84 	bl	80051dc <fillRect>
  fillRect(130 , 130, 152, 3,BLACK);
 80006d4:	2300      	movs	r3, #0
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2303      	movs	r3, #3
 80006da:	2298      	movs	r2, #152	; 0x98
 80006dc:	2182      	movs	r1, #130	; 0x82
 80006de:	2082      	movs	r0, #130	; 0x82
 80006e0:	f004 fd7c 	bl	80051dc <fillRect>
  fillRect(130 , 147, 152, 3,BLACK);
 80006e4:	2300      	movs	r3, #0
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2303      	movs	r3, #3
 80006ea:	2298      	movs	r2, #152	; 0x98
 80006ec:	2193      	movs	r1, #147	; 0x93
 80006ee:	2082      	movs	r0, #130	; 0x82
 80006f0:	f004 fd74 	bl	80051dc <fillRect>
  fillRect(130 , 165, 152, 3,BLACK);
 80006f4:	2300      	movs	r3, #0
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	2303      	movs	r3, #3
 80006fa:	2298      	movs	r2, #152	; 0x98
 80006fc:	21a5      	movs	r1, #165	; 0xa5
 80006fe:	2082      	movs	r0, #130	; 0x82
 8000700:	f004 fd6c 	bl	80051dc <fillRect>
  fillRect(130 , 182, 152, 3,BLACK);
 8000704:	2300      	movs	r3, #0
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2303      	movs	r3, #3
 800070a:	2298      	movs	r2, #152	; 0x98
 800070c:	21b6      	movs	r1, #182	; 0xb6
 800070e:	2082      	movs	r0, #130	; 0x82
 8000710:	f004 fd64 	bl	80051dc <fillRect>

  	  //VERTICALES
  for(i = 0; i < 5; i++){
 8000714:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <main+0x288>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	e040      	b.n	800079e <main+0x266>
  	fillRect(130+(i*38) , 95, 3, 20,BLACK);
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <main+0x288>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	b29b      	uxth	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	00d2      	lsls	r2, r2, #3
 8000726:	441a      	add	r2, r3
 8000728:	0052      	lsls	r2, r2, #1
 800072a:	4413      	add	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	b29b      	uxth	r3, r3
 8000730:	3382      	adds	r3, #130	; 0x82
 8000732:	b29b      	uxth	r3, r3
 8000734:	b218      	sxth	r0, r3
 8000736:	2300      	movs	r3, #0
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2314      	movs	r3, #20
 800073c:	2203      	movs	r2, #3
 800073e:	215f      	movs	r1, #95	; 0x5f
 8000740:	f004 fd4c 	bl	80051dc <fillRect>
  	fillRect(130+(i*38) , 130, 3, 20,BLACK);
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <main+0x288>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	b29b      	uxth	r3, r3
 800074a:	461a      	mov	r2, r3
 800074c:	00d2      	lsls	r2, r2, #3
 800074e:	441a      	add	r2, r3
 8000750:	0052      	lsls	r2, r2, #1
 8000752:	4413      	add	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	b29b      	uxth	r3, r3
 8000758:	3382      	adds	r3, #130	; 0x82
 800075a:	b29b      	uxth	r3, r3
 800075c:	b218      	sxth	r0, r3
 800075e:	2300      	movs	r3, #0
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2314      	movs	r3, #20
 8000764:	2203      	movs	r2, #3
 8000766:	2182      	movs	r1, #130	; 0x82
 8000768:	f004 fd38 	bl	80051dc <fillRect>
  	fillRect(130+(i*38) , 165, 3, 20,BLACK);
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <main+0x288>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	b29b      	uxth	r3, r3
 8000772:	461a      	mov	r2, r3
 8000774:	00d2      	lsls	r2, r2, #3
 8000776:	441a      	add	r2, r3
 8000778:	0052      	lsls	r2, r2, #1
 800077a:	4413      	add	r3, r2
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	b29b      	uxth	r3, r3
 8000780:	3382      	adds	r3, #130	; 0x82
 8000782:	b29b      	uxth	r3, r3
 8000784:	b218      	sxth	r0, r3
 8000786:	2300      	movs	r3, #0
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2314      	movs	r3, #20
 800078c:	2203      	movs	r2, #3
 800078e:	21a5      	movs	r1, #165	; 0xa5
 8000790:	f004 fd24 	bl	80051dc <fillRect>
  for(i = 0; i < 5; i++){
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <main+0x288>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <main+0x288>)
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <main+0x288>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	d9ba      	bls.n	800071c <main+0x1e4>
  }

  // Imagenes que identifican
  for(i=0; i < 3; i++){
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <main+0x288>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	e039      	b.n	8000822 <main+0x2ea>
 80007ae:	bf00      	nop
 80007b0:	200005a0 	.word	0x200005a0
 80007b4:	200003f8 	.word	0x200003f8
 80007b8:	200005e4 	.word	0x200005e4
 80007bc:	200003f0 	.word	0x200003f0
 80007c0:	20000400 	.word	0x20000400
  	fillRect(40 , 90+(i*35), 2, 20,RED);
 80007c4:	4bb3      	ldr	r3, [pc, #716]	; (8000a94 <main+0x55c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	461a      	mov	r2, r3
 80007cc:	0092      	lsls	r2, r2, #2
 80007ce:	4413      	add	r3, r2
 80007d0:	461a      	mov	r2, r3
 80007d2:	00d2      	lsls	r2, r2, #3
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	335a      	adds	r3, #90	; 0x5a
 80007da:	b29b      	uxth	r3, r3
 80007dc:	b219      	sxth	r1, r3
 80007de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2314      	movs	r3, #20
 80007e6:	2202      	movs	r2, #2
 80007e8:	2028      	movs	r0, #40	; 0x28
 80007ea:	f004 fcf7 	bl	80051dc <fillRect>
  	fillRect(30 , 105+(i*35), 70, 2,RED);
 80007ee:	4ba9      	ldr	r3, [pc, #676]	; (8000a94 <main+0x55c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	461a      	mov	r2, r3
 80007f6:	0092      	lsls	r2, r2, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	461a      	mov	r2, r3
 80007fc:	00d2      	lsls	r2, r2, #3
 80007fe:	1ad3      	subs	r3, r2, r3
 8000800:	b29b      	uxth	r3, r3
 8000802:	3369      	adds	r3, #105	; 0x69
 8000804:	b29b      	uxth	r3, r3
 8000806:	b219      	sxth	r1, r3
 8000808:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2302      	movs	r3, #2
 8000810:	2246      	movs	r2, #70	; 0x46
 8000812:	201e      	movs	r0, #30
 8000814:	f004 fce2 	bl	80051dc <fillRect>
  for(i=0; i < 3; i++){
 8000818:	4b9e      	ldr	r3, [pc, #632]	; (8000a94 <main+0x55c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	4a9d      	ldr	r2, [pc, #628]	; (8000a94 <main+0x55c>)
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	4b9c      	ldr	r3, [pc, #624]	; (8000a94 <main+0x55c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d9cc      	bls.n	80007c4 <main+0x28c>
  }

  // Señales
  // SINE
  fillCircle(50, 44, 10 , WHITE);
 800082a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800082e:	220a      	movs	r2, #10
 8000830:	212c      	movs	r1, #44	; 0x2c
 8000832:	2032      	movs	r0, #50	; 0x32
 8000834:	f004 fbd3 	bl	8004fde <fillCircle>
  fillCircle(50, 48, 10 , BLACK);
 8000838:	2300      	movs	r3, #0
 800083a:	220a      	movs	r2, #10
 800083c:	2130      	movs	r1, #48	; 0x30
 800083e:	2032      	movs	r0, #50	; 0x32
 8000840:	f004 fbcd 	bl	8004fde <fillCircle>

  fillCircle(70, 42, 10 , WHITE);
 8000844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000848:	220a      	movs	r2, #10
 800084a:	212a      	movs	r1, #42	; 0x2a
 800084c:	2046      	movs	r0, #70	; 0x46
 800084e:	f004 fbc6 	bl	8004fde <fillCircle>
  fillCircle(70, 38, 10 , BLACK);
 8000852:	2300      	movs	r3, #0
 8000854:	220a      	movs	r2, #10
 8000856:	2126      	movs	r1, #38	; 0x26
 8000858:	2046      	movs	r0, #70	; 0x46
 800085a:	f004 fbc0 	bl	8004fde <fillCircle>

  // Square
  fillRect(97 ,60, 17, 3,WHITE);
 800085e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2303      	movs	r3, #3
 8000866:	2211      	movs	r2, #17
 8000868:	213c      	movs	r1, #60	; 0x3c
 800086a:	2061      	movs	r0, #97	; 0x61
 800086c:	f004 fcb6 	bl	80051dc <fillRect>
  fillRect(117 ,26, 20, 3,WHITE);
 8000870:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2303      	movs	r3, #3
 8000878:	2214      	movs	r2, #20
 800087a:	211a      	movs	r1, #26
 800087c:	2075      	movs	r0, #117	; 0x75
 800087e:	f004 fcad 	bl	80051dc <fillRect>
  fillRect(134 ,60, 17, 3,WHITE);
 8000882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2303      	movs	r3, #3
 800088a:	2211      	movs	r2, #17
 800088c:	213c      	movs	r1, #60	; 0x3c
 800088e:	2086      	movs	r0, #134	; 0x86
 8000890:	f004 fca4 	bl	80051dc <fillRect>

  fillRect(114 ,26, 3, 37,WHITE);
 8000894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2325      	movs	r3, #37	; 0x25
 800089c:	2203      	movs	r2, #3
 800089e:	211a      	movs	r1, #26
 80008a0:	2072      	movs	r0, #114	; 0x72
 80008a2:	f004 fc9b 	bl	80051dc <fillRect>
  fillRect(134 ,26, 3, 34,WHITE);
 80008a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2322      	movs	r3, #34	; 0x22
 80008ae:	2203      	movs	r2, #3
 80008b0:	211a      	movs	r1, #26
 80008b2:	2086      	movs	r0, #134	; 0x86
 80008b4:	f004 fc92 	bl	80051dc <fillRect>
  fillRect(97 ,45, 3, 15,WHITE);
 80008b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	230f      	movs	r3, #15
 80008c0:	2203      	movs	r2, #3
 80008c2:	212d      	movs	r1, #45	; 0x2d
 80008c4:	2061      	movs	r0, #97	; 0x61
 80008c6:	f004 fc89 	bl	80051dc <fillRect>

  HAL_TIM_Base_Start(&htim6);
 80008ca:	4873      	ldr	r0, [pc, #460]	; (8000a98 <main+0x560>)
 80008cc:	f007 faa2 	bl	8007e14 <HAL_TIM_Base_Start>

  HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(message)/sizeof(char) - 1, 1000);
 80008d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d4:	221b      	movs	r2, #27
 80008d6:	4971      	ldr	r1, [pc, #452]	; (8000a9c <main+0x564>)
 80008d8:	4871      	ldr	r0, [pc, #452]	; (8000aa0 <main+0x568>)
 80008da:	f007 ff51 	bl	8008780 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)okay_message, sizeof(okay_message)/sizeof(char) - 1, 1000);
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	2204      	movs	r2, #4
 80008e4:	496f      	ldr	r1, [pc, #444]	; (8000aa4 <main+0x56c>)
 80008e6:	486e      	ldr	r0, [pc, #440]	; (8000aa0 <main+0x568>)
 80008e8:	f007 ff4a 	bl	8008780 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		  if(!EXT_BTN_1_state){
 80008ec:	4b6e      	ldr	r3, [pc, #440]	; (8000aa8 <main+0x570>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	f083 0301 	eor.w	r3, r3, #1
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d056      	beq.n	80009aa <main+0x472>
			  cont_lp ++;
 80008fc:	4b6b      	ldr	r3, [pc, #428]	; (8000aac <main+0x574>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4b69      	ldr	r3, [pc, #420]	; (8000aac <main+0x574>)
 8000906:	701a      	strb	r2, [r3, #0]
			  if(cont_lp < 5){
 8000908:	4b68      	ldr	r3, [pc, #416]	; (8000aac <main+0x574>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b04      	cmp	r3, #4
 800090e:	d824      	bhi.n	800095a <main+0x422>
				  for (i = 0; i < cont_lp; i++) fillRect(133+(i*38), 168, 35,14,BLUE);
 8000910:	4b60      	ldr	r3, [pc, #384]	; (8000a94 <main+0x55c>)
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	e018      	b.n	800094a <main+0x412>
 8000918:	4b5e      	ldr	r3, [pc, #376]	; (8000a94 <main+0x55c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	b29b      	uxth	r3, r3
 800091e:	461a      	mov	r2, r3
 8000920:	00d2      	lsls	r2, r2, #3
 8000922:	441a      	add	r2, r3
 8000924:	0052      	lsls	r2, r2, #1
 8000926:	4413      	add	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	b29b      	uxth	r3, r3
 800092c:	3385      	adds	r3, #133	; 0x85
 800092e:	b29b      	uxth	r3, r3
 8000930:	b218      	sxth	r0, r3
 8000932:	231f      	movs	r3, #31
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	230e      	movs	r3, #14
 8000938:	2223      	movs	r2, #35	; 0x23
 800093a:	21a8      	movs	r1, #168	; 0xa8
 800093c:	f004 fc4e 	bl	80051dc <fillRect>
 8000940:	4b54      	ldr	r3, [pc, #336]	; (8000a94 <main+0x55c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	4a53      	ldr	r2, [pc, #332]	; (8000a94 <main+0x55c>)
 8000948:	6013      	str	r3, [r2, #0]
 800094a:	4b58      	ldr	r3, [pc, #352]	; (8000aac <main+0x574>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	4b50      	ldr	r3, [pc, #320]	; (8000a94 <main+0x55c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	429a      	cmp	r2, r3
 8000956:	d8df      	bhi.n	8000918 <main+0x3e0>
 8000958:	e024      	b.n	80009a4 <main+0x46c>
			  }else{
				  for (i = 0; i < 4; i++) fillRect(133+(i*38), 168, 35,14,BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));
 800095a:	4b4e      	ldr	r3, [pc, #312]	; (8000a94 <main+0x55c>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	e019      	b.n	8000996 <main+0x45e>
 8000962:	4b4c      	ldr	r3, [pc, #304]	; (8000a94 <main+0x55c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	b29b      	uxth	r3, r3
 8000968:	461a      	mov	r2, r3
 800096a:	00d2      	lsls	r2, r2, #3
 800096c:	441a      	add	r2, r3
 800096e:	0052      	lsls	r2, r2, #1
 8000970:	4413      	add	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	b29b      	uxth	r3, r3
 8000976:	3385      	adds	r3, #133	; 0x85
 8000978:	b29b      	uxth	r3, r3
 800097a:	b218      	sxth	r0, r3
 800097c:	f648 23ca 	movw	r3, #35530	; 0x8aca
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	230e      	movs	r3, #14
 8000984:	2223      	movs	r2, #35	; 0x23
 8000986:	21a8      	movs	r1, #168	; 0xa8
 8000988:	f004 fc28 	bl	80051dc <fillRect>
 800098c:	4b41      	ldr	r3, [pc, #260]	; (8000a94 <main+0x55c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	4a40      	ldr	r2, [pc, #256]	; (8000a94 <main+0x55c>)
 8000994:	6013      	str	r3, [r2, #0]
 8000996:	4b3f      	ldr	r3, [pc, #252]	; (8000a94 <main+0x55c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b03      	cmp	r3, #3
 800099c:	d9e1      	bls.n	8000962 <main+0x42a>
				  cont_lp = 0;
 800099e:	4b43      	ldr	r3, [pc, #268]	; (8000aac <main+0x574>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]
			  }
			  EXT_BTN_1_state = true;
 80009a4:	4b40      	ldr	r3, [pc, #256]	; (8000aa8 <main+0x570>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_2_state){
 80009aa:	4b41      	ldr	r3, [pc, #260]	; (8000ab0 <main+0x578>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	f083 0301 	eor.w	r3, r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d056      	beq.n	8000a68 <main+0x530>
			  cont_fm++;
 80009ba:	4b3e      	ldr	r3, [pc, #248]	; (8000ab4 <main+0x57c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b3c      	ldr	r3, [pc, #240]	; (8000ab4 <main+0x57c>)
 80009c4:	701a      	strb	r2, [r3, #0]
			  if(cont_fm < 5){
 80009c6:	4b3b      	ldr	r3, [pc, #236]	; (8000ab4 <main+0x57c>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d824      	bhi.n	8000a18 <main+0x4e0>
				  for (i = 0; i < cont_fm; i++) fillRect(133+(i*38), 133, 35,14,BLUE);
 80009ce:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <main+0x55c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	e018      	b.n	8000a08 <main+0x4d0>
 80009d6:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <main+0x55c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	b29b      	uxth	r3, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	00d2      	lsls	r2, r2, #3
 80009e0:	441a      	add	r2, r3
 80009e2:	0052      	lsls	r2, r2, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	3385      	adds	r3, #133	; 0x85
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	b218      	sxth	r0, r3
 80009f0:	231f      	movs	r3, #31
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	230e      	movs	r3, #14
 80009f6:	2223      	movs	r2, #35	; 0x23
 80009f8:	2185      	movs	r1, #133	; 0x85
 80009fa:	f004 fbef 	bl	80051dc <fillRect>
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <main+0x55c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	3301      	adds	r3, #1
 8000a04:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <main+0x55c>)
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <main+0x57c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <main+0x55c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d8df      	bhi.n	80009d6 <main+0x49e>
 8000a16:	e024      	b.n	8000a62 <main+0x52a>
			  }else{
				  for (i = 0; i < 4; i++) fillRect(133+(i*38), 133, 35,14,BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <main+0x55c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	e019      	b.n	8000a54 <main+0x51c>
 8000a20:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <main+0x55c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	461a      	mov	r2, r3
 8000a28:	00d2      	lsls	r2, r2, #3
 8000a2a:	441a      	add	r2, r3
 8000a2c:	0052      	lsls	r2, r2, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	3385      	adds	r3, #133	; 0x85
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	b218      	sxth	r0, r3
 8000a3a:	f648 23ca 	movw	r3, #35530	; 0x8aca
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	230e      	movs	r3, #14
 8000a42:	2223      	movs	r2, #35	; 0x23
 8000a44:	2185      	movs	r1, #133	; 0x85
 8000a46:	f004 fbc9 	bl	80051dc <fillRect>
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <main+0x55c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <main+0x55c>)
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <main+0x55c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b03      	cmp	r3, #3
 8000a5a:	d9e1      	bls.n	8000a20 <main+0x4e8>
				  cont_fm = 0;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <main+0x57c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]
			  }
			  EXT_BTN_2_state = true;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <main+0x578>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_3_state){
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <main+0x580>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	f083 0301 	eor.w	r3, r3, #1
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d06c      	beq.n	8000b52 <main+0x61a>
			  cont_am++;
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <main+0x584>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <main+0x584>)
 8000a82:	701a      	strb	r2, [r3, #0]
			  if(cont_am < 5){
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <main+0x584>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	d83a      	bhi.n	8000b02 <main+0x5ca>
				  for (i = 0; i < cont_am; i++) fillRect(133+(i*38), 98, 35,14,BLUE);
 8000a8c:	4b01      	ldr	r3, [pc, #4]	; (8000a94 <main+0x55c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	e02e      	b.n	8000af2 <main+0x5ba>
 8000a94:	20000400 	.word	0x20000400
 8000a98:	20000560 	.word	0x20000560
 8000a9c:	20000004 	.word	0x20000004
 8000aa0:	2000046c 	.word	0x2000046c
 8000aa4:	20000020 	.word	0x20000020
 8000aa8:	20000025 	.word	0x20000025
 8000aac:	200003f4 	.word	0x200003f4
 8000ab0:	20000026 	.word	0x20000026
 8000ab4:	200003f3 	.word	0x200003f3
 8000ab8:	20000027 	.word	0x20000027
 8000abc:	200003f2 	.word	0x200003f2
 8000ac0:	4ba1      	ldr	r3, [pc, #644]	; (8000d48 <main+0x810>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	00d2      	lsls	r2, r2, #3
 8000aca:	441a      	add	r2, r3
 8000acc:	0052      	lsls	r2, r2, #1
 8000ace:	4413      	add	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	3385      	adds	r3, #133	; 0x85
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	b218      	sxth	r0, r3
 8000ada:	231f      	movs	r3, #31
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	230e      	movs	r3, #14
 8000ae0:	2223      	movs	r2, #35	; 0x23
 8000ae2:	2162      	movs	r1, #98	; 0x62
 8000ae4:	f004 fb7a 	bl	80051dc <fillRect>
 8000ae8:	4b97      	ldr	r3, [pc, #604]	; (8000d48 <main+0x810>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	4a96      	ldr	r2, [pc, #600]	; (8000d48 <main+0x810>)
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	4b96      	ldr	r3, [pc, #600]	; (8000d4c <main+0x814>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	4b93      	ldr	r3, [pc, #588]	; (8000d48 <main+0x810>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d8df      	bhi.n	8000ac0 <main+0x588>
 8000b00:	e024      	b.n	8000b4c <main+0x614>
			  }else{
			  		for (i = 0; i < 4; i++) fillRect(133+(i*38), 98, 35,14,BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));
 8000b02:	4b91      	ldr	r3, [pc, #580]	; (8000d48 <main+0x810>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	e019      	b.n	8000b3e <main+0x606>
 8000b0a:	4b8f      	ldr	r3, [pc, #572]	; (8000d48 <main+0x810>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	00d2      	lsls	r2, r2, #3
 8000b14:	441a      	add	r2, r3
 8000b16:	0052      	lsls	r2, r2, #1
 8000b18:	4413      	add	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	3385      	adds	r3, #133	; 0x85
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	b218      	sxth	r0, r3
 8000b24:	f648 23ca 	movw	r3, #35530	; 0x8aca
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	230e      	movs	r3, #14
 8000b2c:	2223      	movs	r2, #35	; 0x23
 8000b2e:	2162      	movs	r1, #98	; 0x62
 8000b30:	f004 fb54 	bl	80051dc <fillRect>
 8000b34:	4b84      	ldr	r3, [pc, #528]	; (8000d48 <main+0x810>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	4a83      	ldr	r2, [pc, #524]	; (8000d48 <main+0x810>)
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	4b82      	ldr	r3, [pc, #520]	; (8000d48 <main+0x810>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b03      	cmp	r3, #3
 8000b44:	d9e1      	bls.n	8000b0a <main+0x5d2>
			  		cont_am = 0;
 8000b46:	4b81      	ldr	r3, [pc, #516]	; (8000d4c <main+0x814>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
			  }
			  EXT_BTN_3_state = true;
 8000b4c:	4b80      	ldr	r3, [pc, #512]	; (8000d50 <main+0x818>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_4_state){
 8000b52:	4b80      	ldr	r3, [pc, #512]	; (8000d54 <main+0x81c>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	f083 0301 	eor.w	r3, r3, #1
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f43f aec4 	beq.w	80008ec <main+0x3b4>
			  cont_signal++;
 8000b64:	4b7c      	ldr	r3, [pc, #496]	; (8000d58 <main+0x820>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	4b7a      	ldr	r3, [pc, #488]	; (8000d58 <main+0x820>)
 8000b6e:	701a      	strb	r2, [r3, #0]
			  if(cont_signal<5){
 8000b70:	4b79      	ldr	r3, [pc, #484]	; (8000d58 <main+0x820>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	f200 808d 	bhi.w	8000c94 <main+0x75c>
				  for (i=1; i<=cont_signal; i++){
 8000b7a:	4b73      	ldr	r3, [pc, #460]	; (8000d48 <main+0x810>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	e07f      	b.n	8000c82 <main+0x74a>
					  fillRect(24+((i-2)*65), 22, 3,46,BLACK);
 8000b82:	4b71      	ldr	r3, [pc, #452]	; (8000d48 <main+0x810>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	0192      	lsls	r2, r2, #6
 8000b8c:	4413      	add	r3, r2
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	3b6a      	subs	r3, #106	; 0x6a
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	b218      	sxth	r0, r3
 8000b96:	2300      	movs	r3, #0
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	232e      	movs	r3, #46	; 0x2e
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	2116      	movs	r1, #22
 8000ba0:	f004 fb1c 	bl	80051dc <fillRect>
					  fillRect(24+((i-1)*65), 22, 3,46,YELLOW);
 8000ba4:	4b68      	ldr	r3, [pc, #416]	; (8000d48 <main+0x810>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	461a      	mov	r2, r3
 8000bac:	0192      	lsls	r2, r2, #6
 8000bae:	4413      	add	r3, r2
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	3b29      	subs	r3, #41	; 0x29
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	b218      	sxth	r0, r3
 8000bb8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	232e      	movs	r3, #46	; 0x2e
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	2116      	movs	r1, #22
 8000bc4:	f004 fb0a 	bl	80051dc <fillRect>
					  fillRect(89+((i-1)*65), 22, 3,46,YELLOW);
 8000bc8:	4b5f      	ldr	r3, [pc, #380]	; (8000d48 <main+0x810>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	461a      	mov	r2, r3
 8000bd0:	0192      	lsls	r2, r2, #6
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	3318      	adds	r3, #24
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b218      	sxth	r0, r3
 8000bdc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	232e      	movs	r3, #46	; 0x2e
 8000be4:	2203      	movs	r2, #3
 8000be6:	2116      	movs	r1, #22
 8000be8:	f004 faf8 	bl	80051dc <fillRect>
					  fillRect(24+((i-2)*65), 22, 65,3,BLACK);
 8000bec:	4b56      	ldr	r3, [pc, #344]	; (8000d48 <main+0x810>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	0192      	lsls	r2, r2, #6
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	3b6a      	subs	r3, #106	; 0x6a
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	b218      	sxth	r0, r3
 8000c00:	2300      	movs	r3, #0
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2303      	movs	r3, #3
 8000c06:	2241      	movs	r2, #65	; 0x41
 8000c08:	2116      	movs	r1, #22
 8000c0a:	f004 fae7 	bl	80051dc <fillRect>
					  fillRect(24+((i-2)*65), 65, 65,3,BLACK);
 8000c0e:	4b4e      	ldr	r3, [pc, #312]	; (8000d48 <main+0x810>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	0192      	lsls	r2, r2, #6
 8000c18:	4413      	add	r3, r2
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	3b6a      	subs	r3, #106	; 0x6a
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	b218      	sxth	r0, r3
 8000c22:	2300      	movs	r3, #0
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2303      	movs	r3, #3
 8000c28:	2241      	movs	r2, #65	; 0x41
 8000c2a:	2141      	movs	r1, #65	; 0x41
 8000c2c:	f004 fad6 	bl	80051dc <fillRect>
					  fillRect(24+((i-1)*65), 22, 65,3,YELLOW);
 8000c30:	4b45      	ldr	r3, [pc, #276]	; (8000d48 <main+0x810>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	461a      	mov	r2, r3
 8000c38:	0192      	lsls	r2, r2, #6
 8000c3a:	4413      	add	r3, r2
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	3b29      	subs	r3, #41	; 0x29
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	b218      	sxth	r0, r3
 8000c44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	2241      	movs	r2, #65	; 0x41
 8000c4e:	2116      	movs	r1, #22
 8000c50:	f004 fac4 	bl	80051dc <fillRect>
					  fillRect(24+((i-1)*65), 65, 65,3,YELLOW);
 8000c54:	4b3c      	ldr	r3, [pc, #240]	; (8000d48 <main+0x810>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	0192      	lsls	r2, r2, #6
 8000c5e:	4413      	add	r3, r2
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	3b29      	subs	r3, #41	; 0x29
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	b218      	sxth	r0, r3
 8000c68:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2303      	movs	r3, #3
 8000c70:	2241      	movs	r2, #65	; 0x41
 8000c72:	2141      	movs	r1, #65	; 0x41
 8000c74:	f004 fab2 	bl	80051dc <fillRect>
				  for (i=1; i<=cont_signal; i++){
 8000c78:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <main+0x810>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a32      	ldr	r2, [pc, #200]	; (8000d48 <main+0x810>)
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	4b35      	ldr	r3, [pc, #212]	; (8000d58 <main+0x820>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <main+0x810>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	f4bf af78 	bcs.w	8000b82 <main+0x64a>
 8000c92:	e047      	b.n	8000d24 <main+0x7ec>
				  }
			  }else{
				  fillRect(219, 22, 3,46,BLACK);
 8000c94:	2300      	movs	r3, #0
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	232e      	movs	r3, #46	; 0x2e
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	2116      	movs	r1, #22
 8000c9e:	20db      	movs	r0, #219	; 0xdb
 8000ca0:	f004 fa9c 	bl	80051dc <fillRect>
				  fillRect(284, 22, 3,46,BLACK);
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	232e      	movs	r3, #46	; 0x2e
 8000caa:	2203      	movs	r2, #3
 8000cac:	2116      	movs	r1, #22
 8000cae:	f44f 708e 	mov.w	r0, #284	; 0x11c
 8000cb2:	f004 fa93 	bl	80051dc <fillRect>
				  fillRect(24, 22, 3,46,YELLOW);
 8000cb6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	232e      	movs	r3, #46	; 0x2e
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	2116      	movs	r1, #22
 8000cc2:	2018      	movs	r0, #24
 8000cc4:	f004 fa8a 	bl	80051dc <fillRect>
				  fillRect(89, 22, 3,46,YELLOW);
 8000cc8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	232e      	movs	r3, #46	; 0x2e
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	2116      	movs	r1, #22
 8000cd4:	2059      	movs	r0, #89	; 0x59
 8000cd6:	f004 fa81 	bl	80051dc <fillRect>
				  fillRect(219, 22, 65,3,BLACK);
 8000cda:	2300      	movs	r3, #0
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	2303      	movs	r3, #3
 8000ce0:	2241      	movs	r2, #65	; 0x41
 8000ce2:	2116      	movs	r1, #22
 8000ce4:	20db      	movs	r0, #219	; 0xdb
 8000ce6:	f004 fa79 	bl	80051dc <fillRect>
				  fillRect(219, 65, 65,3,BLACK);
 8000cea:	2300      	movs	r3, #0
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	2303      	movs	r3, #3
 8000cf0:	2241      	movs	r2, #65	; 0x41
 8000cf2:	2141      	movs	r1, #65	; 0x41
 8000cf4:	20db      	movs	r0, #219	; 0xdb
 8000cf6:	f004 fa71 	bl	80051dc <fillRect>
				  fillRect(24, 22, 65,3,YELLOW);
 8000cfa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2303      	movs	r3, #3
 8000d02:	2241      	movs	r2, #65	; 0x41
 8000d04:	2116      	movs	r1, #22
 8000d06:	2018      	movs	r0, #24
 8000d08:	f004 fa68 	bl	80051dc <fillRect>
				  fillRect(24, 65, 65,3,YELLOW);
 8000d0c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2303      	movs	r3, #3
 8000d14:	2241      	movs	r2, #65	; 0x41
 8000d16:	2141      	movs	r1, #65	; 0x41
 8000d18:	2018      	movs	r0, #24
 8000d1a:	f004 fa5f 	bl	80051dc <fillRect>
				  cont_signal = 1;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <main+0x820>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
			  }
			  if(wave_selection < 4){
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <main+0x824>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b03      	cmp	r3, #3
 8000d2a:	d806      	bhi.n	8000d3a <main+0x802>
				  wave_selection++;
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <main+0x824>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <main+0x824>)
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	e002      	b.n	8000d40 <main+0x808>
			  }else{
				  wave_selection = 1;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <main+0x824>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
			  }
			  EXT_BTN_4_state = true;
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <main+0x81c>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
		  if(!EXT_BTN_1_state){
 8000d46:	e5d1      	b.n	80008ec <main+0x3b4>
 8000d48:	20000400 	.word	0x20000400
 8000d4c:	200003f2 	.word	0x200003f2
 8000d50:	20000027 	.word	0x20000027
 8000d54:	20000028 	.word	0x20000028
 8000d58:	200003f5 	.word	0x200003f5
 8000d5c:	20000000 	.word	0x20000000

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0b8      	sub	sp, #224	; 0xe0
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d6a:	2234      	movs	r2, #52	; 0x34
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f008 fb12 	bl	8009398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	2290      	movs	r2, #144	; 0x90
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f008 fb03 	bl	8009398 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d92:	f005 ff37 	bl	8006c04 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <SystemClock_Config+0x118>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a37      	ldr	r2, [pc, #220]	; (8000e78 <SystemClock_Config+0x118>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <SystemClock_Config+0x118>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dae:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <SystemClock_Config+0x11c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000db6:	4a31      	ldr	r2, [pc, #196]	; (8000e7c <SystemClock_Config+0x11c>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	4b2f      	ldr	r3, [pc, #188]	; (8000e7c <SystemClock_Config+0x11c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd6:	2310      	movs	r3, #16
 8000dd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000de8:	2308      	movs	r3, #8
 8000dea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000dee:	2390      	movs	r3, #144	; 0x90
 8000df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e04:	4618      	mov	r0, r3
 8000e06:	f005 ff0d 	bl	8006c24 <HAL_RCC_OscConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e10:	f000 fcc4 	bl	800179c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e14:	230f      	movs	r3, #15
 8000e16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000e2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e36:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f006 f99f 	bl	8007180 <HAL_RCC_ClockConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000e48:	f000 fca8 	bl	800179c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4;
 8000e4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e50:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f006 fb86 	bl	8007570 <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000e6a:	f000 fc97 	bl	800179c <Error_Handler>
  }
}
 8000e6e:	bf00      	nop
 8000e70:	37e0      	adds	r7, #224	; 0xe0
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40007000 	.word	0x40007000

08000e80 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e86:	463b      	mov	r3, r7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_DAC_Init+0x60>)
 8000e90:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <MX_DAC_Init+0x64>)
 8000e92:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e94:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <MX_DAC_Init+0x60>)
 8000e96:	f004 fed4 	bl	8005c42 <HAL_DAC_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ea0:	f000 fc7c 	bl	800179c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <MX_DAC_Init+0x60>)
 8000eb4:	f004 fff5 	bl	8005ea2 <HAL_DAC_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000ebe:	f000 fc6d 	bl	800179c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2210      	movs	r2, #16
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_DAC_Init+0x60>)
 8000eca:	f004 ffea 	bl	8005ea2 <HAL_DAC_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000ed4:	f000 fc62 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2000054c 	.word	0x2000054c
 8000ee4:	40007400 	.word	0x40007400

08000ee8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <MX_TIM1_Init+0xa0>)
 8000f08:	4a20      	ldr	r2, [pc, #128]	; (8000f8c <MX_TIM1_Init+0xa4>)
 8000f0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <MX_TIM1_Init+0xa0>)
 8000f0e:	2247      	movs	r2, #71	; 0x47
 8000f10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_TIM1_Init+0xa0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_TIM1_Init+0xa0>)
 8000f1a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_TIM1_Init+0xa0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_TIM1_Init+0xa0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <MX_TIM1_Init+0xa0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f32:	4815      	ldr	r0, [pc, #84]	; (8000f88 <MX_TIM1_Init+0xa0>)
 8000f34:	f006 ff42 	bl	8007dbc <HAL_TIM_Base_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f3e:	f000 fc2d 	bl	800179c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480e      	ldr	r0, [pc, #56]	; (8000f88 <MX_TIM1_Init+0xa0>)
 8000f50:	f007 f900 	bl	8008154 <HAL_TIM_ConfigClockSource>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f5a:	f000 fc1f 	bl	800179c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_TIM1_Init+0xa0>)
 8000f70:	f007 fb0c 	bl	800858c <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f7a:	f000 fc0f 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3720      	adds	r7, #32
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200005a0 	.word	0x200005a0
 8000f8c:	40010000 	.word	0x40010000

08000f90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <MX_TIM2_Init+0x98>)
 8000fb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000-1;
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <MX_TIM2_Init+0x98>)
 8000fb8:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000fbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <MX_TIM2_Init+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40-1;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <MX_TIM2_Init+0x98>)
 8000fc6:	2227      	movs	r2, #39	; 0x27
 8000fc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_TIM2_Init+0x98>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_TIM2_Init+0x98>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fd6:	4814      	ldr	r0, [pc, #80]	; (8001028 <MX_TIM2_Init+0x98>)
 8000fd8:	f006 fef0 	bl	8007dbc <HAL_TIM_Base_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000fe2:	f000 fbdb 	bl	800179c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <MX_TIM2_Init+0x98>)
 8000ff4:	f007 f8ae 	bl	8008154 <HAL_TIM_ConfigClockSource>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ffe:	f000 fbcd 	bl	800179c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_TIM2_Init+0x98>)
 8001010:	f007 fabc 	bl	800858c <HAL_TIMEx_MasterConfigSynchronization>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800101a:	f000 fbbf 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3720      	adds	r7, #32
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000664 	.word	0x20000664

0800102c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_TIM6_Init+0x64>)
 800103e:	4a15      	ldr	r2, [pc, #84]	; (8001094 <MX_TIM6_Init+0x68>)
 8001040:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 55-1;
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <MX_TIM6_Init+0x64>)
 8001044:	2236      	movs	r2, #54	; 0x36
 8001046:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_TIM6_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 15-1;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_TIM6_Init+0x64>)
 8001050:	220e      	movs	r2, #14
 8001052:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_TIM6_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800105a:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_TIM6_Init+0x64>)
 800105c:	f006 feae 	bl	8007dbc <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001066:	f000 fb99 	bl	800179c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800106a:	2320      	movs	r3, #32
 800106c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <MX_TIM6_Init+0x64>)
 8001078:	f007 fa88 	bl	800858c <HAL_TIMEx_MasterConfigSynchronization>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001082:	f000 fb8b 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000560 	.word	0x20000560
 8001094:	40001000 	.word	0x40001000

08001098 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_TIM14_Init+0x40>)
 800109e:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <MX_TIM14_Init+0x44>)
 80010a0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <MX_TIM14_Init+0x40>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_TIM14_Init+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_TIM14_Init+0x40>)
 80010b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_TIM14_Init+0x40>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_TIM14_Init+0x40>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_TIM14_Init+0x40>)
 80010c4:	f006 fe7a 	bl	8007dbc <HAL_TIM_Base_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80010ce:	f000 fb65 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200006a4 	.word	0x200006a4
 80010dc:	40002000 	.word	0x40002000

080010e0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_UART4_Init+0x58>)
 80010e6:	4a15      	ldr	r2, [pc, #84]	; (800113c <MX_UART4_Init+0x5c>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_UART4_Init+0x58>)
 80010ec:	f647 2212 	movw	r2, #31250	; 0x7a12
 80010f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_UART4_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_UART4_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_UART4_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_UART4_Init+0x58>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_UART4_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_UART4_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_UART4_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_UART4_Init+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_UART4_Init+0x58>)
 8001124:	f007 fade 	bl	80086e4 <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800112e:	f000 fb35 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200005e4 	.word	0x200005e4
 800113c:	40004c00 	.word	0x40004c00

08001140 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001146:	4a15      	ldr	r2, [pc, #84]	; (800119c <MX_USART3_UART_Init+0x5c>)
 8001148:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <MX_USART3_UART_Init+0x58>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_USART3_UART_Init+0x58>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_USART3_UART_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_USART3_UART_Init+0x58>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001184:	f007 faae 	bl	80086e4 <HAL_UART_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800118e:	f000 fb05 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000046c 	.word	0x2000046c
 800119c:	40004800 	.word	0x40004800

080011a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_DMA_Init+0x58>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <MX_DMA_Init+0x58>)
 80011ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_DMA_Init+0x58>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	200d      	movs	r0, #13
 80011c4:	f004 fd07 	bl	8005bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80011c8:	200d      	movs	r0, #13
 80011ca:	f004 fd20 	bl	8005c0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2010      	movs	r0, #16
 80011d4:	f004 fcff 	bl	8005bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80011d8:	2010      	movs	r0, #16
 80011da:	f004 fd18 	bl	8005c0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2011      	movs	r0, #17
 80011e4:	f004 fcf7 	bl	8005bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80011e8:	2011      	movs	r0, #17
 80011ea:	f004 fd10 	bl	8005c0e <HAL_NVIC_EnableIRQ>

}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08e      	sub	sp, #56	; 0x38
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001212:	4bb3      	ldr	r3, [pc, #716]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4ab2      	ldr	r2, [pc, #712]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4bb0      	ldr	r3, [pc, #704]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	623b      	str	r3, [r7, #32]
 8001228:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	4bad      	ldr	r3, [pc, #692]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4aac      	ldr	r2, [pc, #688]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4baa      	ldr	r3, [pc, #680]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001242:	4ba7      	ldr	r3, [pc, #668]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4aa6      	ldr	r2, [pc, #664]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 8001248:	f043 0320 	orr.w	r3, r3, #32
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4ba4      	ldr	r3, [pc, #656]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125a:	4ba1      	ldr	r3, [pc, #644]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4aa0      	ldr	r2, [pc, #640]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 8001260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b9e      	ldr	r3, [pc, #632]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	4b9b      	ldr	r3, [pc, #620]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a9a      	ldr	r2, [pc, #616]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b98      	ldr	r3, [pc, #608]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	4b95      	ldr	r3, [pc, #596]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a94      	ldr	r2, [pc, #592]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b92      	ldr	r3, [pc, #584]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012a2:	4b8f      	ldr	r3, [pc, #572]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a8e      	ldr	r2, [pc, #568]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 80012a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b8c      	ldr	r3, [pc, #560]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ba:	4b89      	ldr	r3, [pc, #548]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a88      	ldr	r2, [pc, #544]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b86      	ldr	r3, [pc, #536]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80012d2:	2200      	movs	r2, #0
 80012d4:	f24c 0178 	movw	r1, #49272	; 0xc078
 80012d8:	4882      	ldr	r0, [pc, #520]	; (80014e4 <MX_GPIO_Init+0x2e8>)
 80012da:	f005 fc61 	bl	8006ba0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 7160 	mov.w	r1, #896	; 0x380
 80012e4:	4880      	ldr	r0, [pc, #512]	; (80014e8 <MX_GPIO_Init+0x2ec>)
 80012e6:	f005 fc5b 	bl	8006ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f644 0181 	movw	r1, #18561	; 0x4881
 80012f0:	487e      	ldr	r0, [pc, #504]	; (80014ec <MX_GPIO_Init+0x2f0>)
 80012f2:	f005 fc55 	bl	8006ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2142      	movs	r1, #66	; 0x42
 80012fa:	487d      	ldr	r0, [pc, #500]	; (80014f0 <MX_GPIO_Init+0x2f4>)
 80012fc:	f005 fc50 	bl	8006ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001300:	f24c 0378 	movw	r3, #49272	; 0xc078
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001306:	2301      	movs	r3, #1
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001316:	4619      	mov	r1, r3
 8001318:	4872      	ldr	r0, [pc, #456]	; (80014e4 <MX_GPIO_Init+0x2e8>)
 800131a:	f005 fa7f 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800131e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001334:	4619      	mov	r1, r3
 8001336:	486c      	ldr	r0, [pc, #432]	; (80014e8 <MX_GPIO_Init+0x2ec>)
 8001338:	f005 fa70 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800133c:	2332      	movs	r3, #50	; 0x32
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800134c:	230b      	movs	r3, #11
 800134e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001354:	4619      	mov	r1, r3
 8001356:	4867      	ldr	r0, [pc, #412]	; (80014f4 <MX_GPIO_Init+0x2f8>)
 8001358:	f005 fa60 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800135c:	2386      	movs	r3, #134	; 0x86
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800136c:	230b      	movs	r3, #11
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001374:	4619      	mov	r1, r3
 8001376:	4860      	ldr	r0, [pc, #384]	; (80014f8 <MX_GPIO_Init+0x2fc>)
 8001378:	f005 fa50 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB11 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin;
 800137c:	f644 0381 	movw	r3, #18561	; 0x4881
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001392:	4619      	mov	r1, r3
 8001394:	4855      	ldr	r0, [pc, #340]	; (80014ec <MX_GPIO_Init+0x2f0>)
 8001396:	f005 fa41 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_BTN_1_Pin EXT_BTN_4_Pin */
  GPIO_InitStruct.Pin = EXT_BTN_1_Pin|EXT_BTN_4_Pin;
 800139a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013a0:	4b56      	ldr	r3, [pc, #344]	; (80014fc <MX_GPIO_Init+0x300>)
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ac:	4619      	mov	r1, r3
 80013ae:	484e      	ldr	r0, [pc, #312]	; (80014e8 <MX_GPIO_Init+0x2ec>)
 80013b0:	f005 fa34 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|USB_PowerSwitchOn_Pin;
 80013b4:	2342      	movs	r3, #66	; 0x42
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c8:	4619      	mov	r1, r3
 80013ca:	4849      	ldr	r0, [pc, #292]	; (80014f0 <MX_GPIO_Init+0x2f4>)
 80013cc:	f005 fa26 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_BTN_2_Pin EXT_BTN_3_Pin */
  GPIO_InitStruct.Pin = EXT_BTN_2_Pin|EXT_BTN_3_Pin;
 80013d0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013d6:	4b49      	ldr	r3, [pc, #292]	; (80014fc <MX_GPIO_Init+0x300>)
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013da:	2301      	movs	r3, #1
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	483f      	ldr	r0, [pc, #252]	; (80014e4 <MX_GPIO_Init+0x2e8>)
 80013e6:	f005 fa19 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fc:	4619      	mov	r1, r3
 80013fe:	4839      	ldr	r0, [pc, #228]	; (80014e4 <MX_GPIO_Init+0x2e8>)
 8001400:	f005 fa0c 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140a:	2303      	movs	r3, #3
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	4834      	ldr	r0, [pc, #208]	; (80014ec <MX_GPIO_Init+0x2f0>)
 800141a:	f005 f9ff 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800141e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001430:	230b      	movs	r3, #11
 8001432:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001438:	4619      	mov	r1, r3
 800143a:	482c      	ldr	r0, [pc, #176]	; (80014ec <MX_GPIO_Init+0x2f0>)
 800143c:	f005 f9ee 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800144c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001450:	4619      	mov	r1, r3
 8001452:	4827      	ldr	r0, [pc, #156]	; (80014f0 <MX_GPIO_Init+0x2f4>)
 8001454:	f005 f9e2 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001458:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800146a:	230a      	movs	r3, #10
 800146c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	4619      	mov	r1, r3
 8001474:	4820      	ldr	r0, [pc, #128]	; (80014f8 <MX_GPIO_Init+0x2fc>)
 8001476:	f005 f9d1 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800147a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148c:	4619      	mov	r1, r3
 800148e:	481a      	ldr	r0, [pc, #104]	; (80014f8 <MX_GPIO_Init+0x2fc>)
 8001490:	f005 f9c4 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001494:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a2:	2303      	movs	r3, #3
 80014a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014a6:	230b      	movs	r3, #11
 80014a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ae:	4619      	mov	r1, r3
 80014b0:	480f      	ldr	r0, [pc, #60]	; (80014f0 <MX_GPIO_Init+0x2f4>)
 80014b2:	f005 f9b3 	bl	800681c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	2017      	movs	r0, #23
 80014bc:	f004 fb8b 	bl	8005bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014c0:	2017      	movs	r0, #23
 80014c2:	f004 fba4 	bl	8005c0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2028      	movs	r0, #40	; 0x28
 80014cc:	f004 fb83 	bl	8005bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014d0:	2028      	movs	r0, #40	; 0x28
 80014d2:	f004 fb9c 	bl	8005c0e <HAL_NVIC_EnableIRQ>

}
 80014d6:	bf00      	nop
 80014d8:	3738      	adds	r7, #56	; 0x38
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40021400 	.word	0x40021400
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40021800 	.word	0x40021800
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	10210000 	.word	0x10210000

08001500 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// Callback para GPIOs
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXT_BTN_1_Pin) HAL_TIM_Base_Start_IT(&htim2);
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001510:	d102      	bne.n	8001518 <HAL_GPIO_EXTI_Callback+0x18>
 8001512:	480e      	ldr	r0, [pc, #56]	; (800154c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001514:	f006 fcd4 	bl	8007ec0 <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_2_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151e:	d102      	bne.n	8001526 <HAL_GPIO_EXTI_Callback+0x26>
 8001520:	480a      	ldr	r0, [pc, #40]	; (800154c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001522:	f006 fccd 	bl	8007ec0 <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_3_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800152c:	d102      	bne.n	8001534 <HAL_GPIO_EXTI_Callback+0x34>
 800152e:	4807      	ldr	r0, [pc, #28]	; (800154c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001530:	f006 fcc6 	bl	8007ec0 <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_4_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800153a:	d102      	bne.n	8001542 <HAL_GPIO_EXTI_Callback+0x42>
 800153c:	4803      	ldr	r0, [pc, #12]	; (800154c <HAL_GPIO_EXTI_Callback+0x4c>)
 800153e:	f006 fcbf 	bl	8007ec0 <HAL_TIM_Base_Start_IT>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000664 	.word	0x20000664

08001550 <HAL_TIM_PeriodElapsedCallback>:
// Callback para Timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(htim == &htim2){
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a1f      	ldr	r2, [pc, #124]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d137      	bne.n	80015d0 <HAL_TIM_PeriodElapsedCallback+0x80>
	  // Ya pasaron 40ms y sigue en 0, es real esto.
	  if(!HAL_GPIO_ReadPin(EXT_BTN_1_GPIO_Port, EXT_BTN_1_Pin)){
 8001560:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001564:	481d      	ldr	r0, [pc, #116]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001566:	f005 fb03 	bl	8006b70 <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d105      	bne.n	800157c <HAL_TIM_PeriodElapsedCallback+0x2c>
		  EXT_BTN_1_state = false;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 8001576:	4818      	ldr	r0, [pc, #96]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001578:	f006 fc76 	bl	8007e68 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_2_GPIO_Port, EXT_BTN_2_Pin)){
 800157c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001580:	4818      	ldr	r0, [pc, #96]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001582:	f005 faf5 	bl	8006b70 <HAL_GPIO_ReadPin>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d105      	bne.n	8001598 <HAL_TIM_PeriodElapsedCallback+0x48>
		  EXT_BTN_2_state = false;
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 8001592:	4811      	ldr	r0, [pc, #68]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001594:	f006 fc68 	bl	8007e68 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_3_GPIO_Port, EXT_BTN_3_Pin)){
 8001598:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800159c:	4811      	ldr	r0, [pc, #68]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800159e:	f005 fae7 	bl	8006b70 <HAL_GPIO_ReadPin>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d105      	bne.n	80015b4 <HAL_TIM_PeriodElapsedCallback+0x64>
		  EXT_BTN_3_state = false;
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 80015ae:	480a      	ldr	r0, [pc, #40]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80015b0:	f006 fc5a 	bl	8007e68 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_4_GPIO_Port, EXT_BTN_4_Pin)){
 80015b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b8:	4808      	ldr	r0, [pc, #32]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80015ba:	f005 fad9 	bl	8006b70 <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d105      	bne.n	80015d0 <HAL_TIM_PeriodElapsedCallback+0x80>
		  EXT_BTN_4_state = false;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 80015ca:	4803      	ldr	r0, [pc, #12]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80015cc:	f006 fc4c 	bl	8007e68 <HAL_TIM_Base_Stop>
	  }
  }
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000664 	.word	0x20000664
 80015dc:	40021400 	.word	0x40021400
 80015e0:	20000025 	.word	0x20000025
 80015e4:	40021000 	.word	0x40021000
 80015e8:	20000026 	.word	0x20000026
 80015ec:	20000027 	.word	0x20000027
 80015f0:	20000028 	.word	0x20000028

080015f4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	6078      	str	r0, [r7, #4]
	note_received_flag = false;
 80015fc:	4b59      	ldr	r3, [pc, #356]	; (8001764 <HAL_UART_RxCpltCallback+0x170>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < RX_BUFFER_SIZE; i++){
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	e0a5      	b.n	8001754 <HAL_UART_RxCpltCallback+0x160>
		if(rx_buffer[i] >= C2 && rx_buffer[i] <= B5){
 8001608:	4a57      	ldr	r2, [pc, #348]	; (8001768 <HAL_UART_RxCpltCallback+0x174>)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b23      	cmp	r3, #35	; 0x23
 8001612:	f240 809b 	bls.w	800174c <HAL_UART_RxCpltCallback+0x158>
 8001616:	4a54      	ldr	r2, [pc, #336]	; (8001768 <HAL_UART_RxCpltCallback+0x174>)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b53      	cmp	r3, #83	; 0x53
 8001620:	f200 8094 	bhi.w	800174c <HAL_UART_RxCpltCallback+0x158>
			note_buffer[current_note_buffer] = rx_buffer[i];
 8001624:	4b51      	ldr	r3, [pc, #324]	; (800176c <HAL_UART_RxCpltCallback+0x178>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	4a4f      	ldr	r2, [pc, #316]	; (8001768 <HAL_UART_RxCpltCallback+0x174>)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	781a      	ldrb	r2, [r3, #0]
 8001632:	4b4f      	ldr	r3, [pc, #316]	; (8001770 <HAL_UART_RxCpltCallback+0x17c>)
 8001634:	545a      	strb	r2, [r3, r1]
			current_note_buffer++;
 8001636:	4b4d      	ldr	r3, [pc, #308]	; (800176c <HAL_UART_RxCpltCallback+0x178>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b4b      	ldr	r3, [pc, #300]	; (800176c <HAL_UART_RxCpltCallback+0x178>)
 8001640:	701a      	strb	r2, [r3, #0]
			received_note_buffer = rx_buffer[i];
 8001642:	4a49      	ldr	r2, [pc, #292]	; (8001768 <HAL_UART_RxCpltCallback+0x174>)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	781a      	ldrb	r2, [r3, #0]
 800164a:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <HAL_UART_RxCpltCallback+0x180>)
 800164c:	701a      	strb	r2, [r3, #0]
			note_received_flag = true;
 800164e:	4b45      	ldr	r3, [pc, #276]	; (8001764 <HAL_UART_RxCpltCallback+0x170>)
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
			if(current_note_buffer >= NOTE_BUFFER_SIZE){
 8001654:	4b45      	ldr	r3, [pc, #276]	; (800176c <HAL_UART_RxCpltCallback+0x178>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <HAL_UART_RxCpltCallback+0x6e>
				current_note_buffer = 0;
 800165c:	4b43      	ldr	r3, [pc, #268]	; (800176c <HAL_UART_RxCpltCallback+0x178>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
			}
			HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001662:	2100      	movs	r1, #0
 8001664:	4844      	ldr	r0, [pc, #272]	; (8001778 <HAL_UART_RxCpltCallback+0x184>)
 8001666:	f004 fbbd 	bl	8005de4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_2);
 800166a:	2110      	movs	r1, #16
 800166c:	4842      	ldr	r0, [pc, #264]	; (8001778 <HAL_UART_RxCpltCallback+0x184>)
 800166e:	f004 fbb9 	bl	8005de4 <HAL_DAC_Stop_DMA>
			htim6.Init.Prescaler = PSC_LUT[received_note_buffer - C2] - 1;
 8001672:	4b40      	ldr	r3, [pc, #256]	; (8001774 <HAL_UART_RxCpltCallback+0x180>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	3b24      	subs	r3, #36	; 0x24
 8001678:	4a40      	ldr	r2, [pc, #256]	; (800177c <HAL_UART_RxCpltCallback+0x188>)
 800167a:	5cd3      	ldrb	r3, [r2, r3]
 800167c:	3b01      	subs	r3, #1
 800167e:	461a      	mov	r2, r3
 8001680:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <HAL_UART_RxCpltCallback+0x18c>)
 8001682:	605a      	str	r2, [r3, #4]
			htim6.Init.Period = ARR_LUT[received_note_buffer - C2] - 1;
 8001684:	4b3b      	ldr	r3, [pc, #236]	; (8001774 <HAL_UART_RxCpltCallback+0x180>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	3b24      	subs	r3, #36	; 0x24
 800168a:	4a3e      	ldr	r2, [pc, #248]	; (8001784 <HAL_UART_RxCpltCallback+0x190>)
 800168c:	5cd3      	ldrb	r3, [r2, r3]
 800168e:	3b01      	subs	r3, #1
 8001690:	461a      	mov	r2, r3
 8001692:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <HAL_UART_RxCpltCallback+0x18c>)
 8001694:	60da      	str	r2, [r3, #12]
			HAL_TIM_Base_Init(&htim6);
 8001696:	483a      	ldr	r0, [pc, #232]	; (8001780 <HAL_UART_RxCpltCallback+0x18c>)
 8001698:	f006 fb90 	bl	8007dbc <HAL_TIM_Base_Init>
			  switch(wave_selection){
 800169c:	4b3a      	ldr	r3, [pc, #232]	; (8001788 <HAL_UART_RxCpltCallback+0x194>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d84e      	bhi.n	8001744 <HAL_UART_RxCpltCallback+0x150>
 80016a6:	a201      	add	r2, pc, #4	; (adr r2, 80016ac <HAL_UART_RxCpltCallback+0xb8>)
 80016a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ac:	080016bd 	.word	0x080016bd
 80016b0:	080016df 	.word	0x080016df
 80016b4:	08001701 	.word	0x08001701
 80016b8:	08001723 	.word	0x08001723
				  case 1:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_LUT, NS, DAC_ALIGN_12B_R);
 80016bc:	2300      	movs	r3, #0
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	2364      	movs	r3, #100	; 0x64
 80016c2:	4a32      	ldr	r2, [pc, #200]	; (800178c <HAL_UART_RxCpltCallback+0x198>)
 80016c4:	2100      	movs	r1, #0
 80016c6:	482c      	ldr	r0, [pc, #176]	; (8001778 <HAL_UART_RxCpltCallback+0x184>)
 80016c8:	f004 fade 	bl	8005c88 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sine_LUT, NS, DAC_ALIGN_12B_R);
 80016cc:	2300      	movs	r3, #0
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2364      	movs	r3, #100	; 0x64
 80016d2:	4a2e      	ldr	r2, [pc, #184]	; (800178c <HAL_UART_RxCpltCallback+0x198>)
 80016d4:	2110      	movs	r1, #16
 80016d6:	4828      	ldr	r0, [pc, #160]	; (8001778 <HAL_UART_RxCpltCallback+0x184>)
 80016d8:	f004 fad6 	bl	8005c88 <HAL_DAC_Start_DMA>
					  break;
 80016dc:	e037      	b.n	800174e <HAL_UART_RxCpltCallback+0x15a>
				  case 2:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, square_LUT, NS, DAC_ALIGN_12B_R);
 80016de:	2300      	movs	r3, #0
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2364      	movs	r3, #100	; 0x64
 80016e4:	4a2a      	ldr	r2, [pc, #168]	; (8001790 <HAL_UART_RxCpltCallback+0x19c>)
 80016e6:	2100      	movs	r1, #0
 80016e8:	4823      	ldr	r0, [pc, #140]	; (8001778 <HAL_UART_RxCpltCallback+0x184>)
 80016ea:	f004 facd 	bl	8005c88 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, square_LUT, NS, DAC_ALIGN_12B_R);
 80016ee:	2300      	movs	r3, #0
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2364      	movs	r3, #100	; 0x64
 80016f4:	4a26      	ldr	r2, [pc, #152]	; (8001790 <HAL_UART_RxCpltCallback+0x19c>)
 80016f6:	2110      	movs	r1, #16
 80016f8:	481f      	ldr	r0, [pc, #124]	; (8001778 <HAL_UART_RxCpltCallback+0x184>)
 80016fa:	f004 fac5 	bl	8005c88 <HAL_DAC_Start_DMA>
					  break;
 80016fe:	e026      	b.n	800174e <HAL_UART_RxCpltCallback+0x15a>
				  case 3:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sawtooth_LUT, NS, DAC_ALIGN_12B_R);
 8001700:	2300      	movs	r3, #0
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2364      	movs	r3, #100	; 0x64
 8001706:	4a23      	ldr	r2, [pc, #140]	; (8001794 <HAL_UART_RxCpltCallback+0x1a0>)
 8001708:	2100      	movs	r1, #0
 800170a:	481b      	ldr	r0, [pc, #108]	; (8001778 <HAL_UART_RxCpltCallback+0x184>)
 800170c:	f004 fabc 	bl	8005c88 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sawtooth_LUT, NS, DAC_ALIGN_12B_R);
 8001710:	2300      	movs	r3, #0
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2364      	movs	r3, #100	; 0x64
 8001716:	4a1f      	ldr	r2, [pc, #124]	; (8001794 <HAL_UART_RxCpltCallback+0x1a0>)
 8001718:	2110      	movs	r1, #16
 800171a:	4817      	ldr	r0, [pc, #92]	; (8001778 <HAL_UART_RxCpltCallback+0x184>)
 800171c:	f004 fab4 	bl	8005c88 <HAL_DAC_Start_DMA>
					  break;
 8001720:	e015      	b.n	800174e <HAL_UART_RxCpltCallback+0x15a>
				  case 4:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, triangle_LUT, NS, DAC_ALIGN_12B_R);
 8001722:	2300      	movs	r3, #0
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2364      	movs	r3, #100	; 0x64
 8001728:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <HAL_UART_RxCpltCallback+0x1a4>)
 800172a:	2100      	movs	r1, #0
 800172c:	4812      	ldr	r0, [pc, #72]	; (8001778 <HAL_UART_RxCpltCallback+0x184>)
 800172e:	f004 faab 	bl	8005c88 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, triangle_LUT, NS, DAC_ALIGN_12B_R);
 8001732:	2300      	movs	r3, #0
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2364      	movs	r3, #100	; 0x64
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <HAL_UART_RxCpltCallback+0x1a4>)
 800173a:	2110      	movs	r1, #16
 800173c:	480e      	ldr	r0, [pc, #56]	; (8001778 <HAL_UART_RxCpltCallback+0x184>)
 800173e:	f004 faa3 	bl	8005c88 <HAL_DAC_Start_DMA>
					  break;
 8001742:	e004      	b.n	800174e <HAL_UART_RxCpltCallback+0x15a>
				  default:
					  wave_selection = 1;
 8001744:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_UART_RxCpltCallback+0x194>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
					  break;
 800174a:	e000      	b.n	800174e <HAL_UART_RxCpltCallback+0x15a>
			  }
		}
 800174c:	bf00      	nop
	for(int i = 0; i < RX_BUFFER_SIZE; i++){
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3301      	adds	r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	f77f af56 	ble.w	8001608 <HAL_UART_RxCpltCallback+0x14>
	}
}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200003ff 	.word	0x200003ff
 8001768:	200003f8 	.word	0x200003f8
 800176c:	200003fd 	.word	0x200003fd
 8001770:	200003fc 	.word	0x200003fc
 8001774:	200003fe 	.word	0x200003fe
 8001778:	2000054c 	.word	0x2000054c
 800177c:	2000034c 	.word	0x2000034c
 8001780:	20000560 	.word	0x20000560
 8001784:	20000388 	.word	0x20000388
 8001788:	20000000 	.word	0x20000000
 800178c:	2000002c 	.word	0x2000002c
 8001790:	20000284 	.word	0x20000284
 8001794:	200000f4 	.word	0x200000f4
 8001798:	200001bc 	.word	0x200001bc

0800179c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_MspInit+0x44>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <HAL_MspInit+0x44>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_MspInit+0x44>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_MspInit+0x44>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_MspInit+0x44>)
 80017d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d4:	6453      	str	r3, [r2, #68]	; 0x44
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_MspInit+0x44>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a47      	ldr	r2, [pc, #284]	; (8001930 <HAL_DAC_MspInit+0x13c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	f040 8088 	bne.w	8001928 <HAL_DAC_MspInit+0x134>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001818:	4b46      	ldr	r3, [pc, #280]	; (8001934 <HAL_DAC_MspInit+0x140>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	4a45      	ldr	r2, [pc, #276]	; (8001934 <HAL_DAC_MspInit+0x140>)
 800181e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001822:	6413      	str	r3, [r2, #64]	; 0x40
 8001824:	4b43      	ldr	r3, [pc, #268]	; (8001934 <HAL_DAC_MspInit+0x140>)
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001830:	4b40      	ldr	r3, [pc, #256]	; (8001934 <HAL_DAC_MspInit+0x140>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	4a3f      	ldr	r2, [pc, #252]	; (8001934 <HAL_DAC_MspInit+0x140>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6313      	str	r3, [r2, #48]	; 0x30
 800183c:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <HAL_DAC_MspInit+0x140>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001848:	2330      	movs	r3, #48	; 0x30
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184c:	2303      	movs	r3, #3
 800184e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4837      	ldr	r0, [pc, #220]	; (8001938 <HAL_DAC_MspInit+0x144>)
 800185c:	f004 ffde 	bl	800681c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001860:	4b36      	ldr	r3, [pc, #216]	; (800193c <HAL_DAC_MspInit+0x148>)
 8001862:	4a37      	ldr	r2, [pc, #220]	; (8001940 <HAL_DAC_MspInit+0x14c>)
 8001864:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001866:	4b35      	ldr	r3, [pc, #212]	; (800193c <HAL_DAC_MspInit+0x148>)
 8001868:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800186c:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800186e:	4b33      	ldr	r3, [pc, #204]	; (800193c <HAL_DAC_MspInit+0x148>)
 8001870:	2240      	movs	r2, #64	; 0x40
 8001872:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001874:	4b31      	ldr	r3, [pc, #196]	; (800193c <HAL_DAC_MspInit+0x148>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <HAL_DAC_MspInit+0x148>)
 800187c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001880:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001882:	4b2e      	ldr	r3, [pc, #184]	; (800193c <HAL_DAC_MspInit+0x148>)
 8001884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001888:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800188a:	4b2c      	ldr	r3, [pc, #176]	; (800193c <HAL_DAC_MspInit+0x148>)
 800188c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001890:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001892:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_DAC_MspInit+0x148>)
 8001894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001898:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 800189a:	4b28      	ldr	r3, [pc, #160]	; (800193c <HAL_DAC_MspInit+0x148>)
 800189c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018a0:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <HAL_DAC_MspInit+0x148>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80018a8:	4824      	ldr	r0, [pc, #144]	; (800193c <HAL_DAC_MspInit+0x148>)
 80018aa:	f004 fbd1 	bl	8006050 <HAL_DMA_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_DAC_MspInit+0xc4>
    {
      Error_Handler();
 80018b4:	f7ff ff72 	bl	800179c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a20      	ldr	r2, [pc, #128]	; (800193c <HAL_DAC_MspInit+0x148>)
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	4a1f      	ldr	r2, [pc, #124]	; (800193c <HAL_DAC_MspInit+0x148>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 80018c4:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <HAL_DAC_MspInit+0x150>)
 80018c6:	4a20      	ldr	r2, [pc, #128]	; (8001948 <HAL_DAC_MspInit+0x154>)
 80018c8:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80018ca:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <HAL_DAC_MspInit+0x150>)
 80018cc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80018d0:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018d2:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <HAL_DAC_MspInit+0x150>)
 80018d4:	2240      	movs	r2, #64	; 0x40
 80018d6:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <HAL_DAC_MspInit+0x150>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80018de:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_DAC_MspInit+0x150>)
 80018e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e4:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018e6:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_DAC_MspInit+0x150>)
 80018e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018ec:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_DAC_MspInit+0x150>)
 80018f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018f4:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <HAL_DAC_MspInit+0x150>)
 80018f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018fc:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_HIGH;
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_DAC_MspInit+0x150>)
 8001900:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001904:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_DAC_MspInit+0x150>)
 8001908:	2200      	movs	r2, #0
 800190a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 800190c:	480d      	ldr	r0, [pc, #52]	; (8001944 <HAL_DAC_MspInit+0x150>)
 800190e:	f004 fb9f 	bl	8006050 <HAL_DMA_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_DAC_MspInit+0x128>
    {
      Error_Handler();
 8001918:	f7ff ff40 	bl	800179c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <HAL_DAC_MspInit+0x150>)
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_DAC_MspInit+0x150>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001928:	bf00      	nop
 800192a:	3728      	adds	r7, #40	; 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40007400 	.word	0x40007400
 8001934:	40023800 	.word	0x40023800
 8001938:	40020000 	.word	0x40020000
 800193c:	200004ec 	.word	0x200004ec
 8001940:	40026088 	.word	0x40026088
 8001944:	200006e4 	.word	0x200006e4
 8001948:	400260a0 	.word	0x400260a0

0800194c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a28      	ldr	r2, [pc, #160]	; (80019fc <HAL_TIM_Base_MspInit+0xb0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d10c      	bne.n	8001978 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <HAL_TIM_Base_MspInit+0xb4>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a27      	ldr	r2, [pc, #156]	; (8001a00 <HAL_TIM_Base_MspInit+0xb4>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <HAL_TIM_Base_MspInit+0xb4>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001976:	e03c      	b.n	80019f2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001980:	d114      	bne.n	80019ac <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001982:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <HAL_TIM_Base_MspInit+0xb4>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <HAL_TIM_Base_MspInit+0xb4>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <HAL_TIM_Base_MspInit+0xb4>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	201c      	movs	r0, #28
 80019a0:	f004 f919 	bl	8005bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019a4:	201c      	movs	r0, #28
 80019a6:	f004 f932 	bl	8005c0e <HAL_NVIC_EnableIRQ>
}
 80019aa:	e022      	b.n	80019f2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <HAL_TIM_Base_MspInit+0xb8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10c      	bne.n	80019d0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_TIM_Base_MspInit+0xb4>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <HAL_TIM_Base_MspInit+0xb4>)
 80019bc:	f043 0310 	orr.w	r3, r3, #16
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_TIM_Base_MspInit+0xb4>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
}
 80019ce:	e010      	b.n	80019f2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <HAL_TIM_Base_MspInit+0xbc>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d10b      	bne.n	80019f2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_TIM_Base_MspInit+0xb4>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <HAL_TIM_Base_MspInit+0xb4>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e4:	6413      	str	r3, [r2, #64]	; 0x40
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_TIM_Base_MspInit+0xb4>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40010000 	.word	0x40010000
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40001000 	.word	0x40001000
 8001a08:	40002000 	.word	0x40002000

08001a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	; 0x30
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a55      	ldr	r2, [pc, #340]	; (8001b80 <HAL_UART_MspInit+0x174>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d175      	bne.n	8001b1a <HAL_UART_MspInit+0x10e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a2e:	4b55      	ldr	r3, [pc, #340]	; (8001b84 <HAL_UART_MspInit+0x178>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a54      	ldr	r2, [pc, #336]	; (8001b84 <HAL_UART_MspInit+0x178>)
 8001a34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b52      	ldr	r3, [pc, #328]	; (8001b84 <HAL_UART_MspInit+0x178>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b4f      	ldr	r3, [pc, #316]	; (8001b84 <HAL_UART_MspInit+0x178>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a4e      	ldr	r2, [pc, #312]	; (8001b84 <HAL_UART_MspInit+0x178>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b4c      	ldr	r3, [pc, #304]	; (8001b84 <HAL_UART_MspInit+0x178>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5e:	4b49      	ldr	r3, [pc, #292]	; (8001b84 <HAL_UART_MspInit+0x178>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a48      	ldr	r2, [pc, #288]	; (8001b84 <HAL_UART_MspInit+0x178>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b46      	ldr	r3, [pc, #280]	; (8001b84 <HAL_UART_MspInit+0x178>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a76:	2301      	movs	r3, #1
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a86:	2308      	movs	r3, #8
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	483d      	ldr	r0, [pc, #244]	; (8001b88 <HAL_UART_MspInit+0x17c>)
 8001a92:	f004 fec3 	bl	800681c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001aa8:	2308      	movs	r3, #8
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aac:	f107 031c 	add.w	r3, r7, #28
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4836      	ldr	r0, [pc, #216]	; (8001b8c <HAL_UART_MspInit+0x180>)
 8001ab4:	f004 feb2 	bl	800681c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001ab8:	4b35      	ldr	r3, [pc, #212]	; (8001b90 <HAL_UART_MspInit+0x184>)
 8001aba:	4a36      	ldr	r2, [pc, #216]	; (8001b94 <HAL_UART_MspInit+0x188>)
 8001abc:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001abe:	4b34      	ldr	r3, [pc, #208]	; (8001b90 <HAL_UART_MspInit+0x184>)
 8001ac0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ac4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ac6:	4b32      	ldr	r3, [pc, #200]	; (8001b90 <HAL_UART_MspInit+0x184>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001acc:	4b30      	ldr	r3, [pc, #192]	; (8001b90 <HAL_UART_MspInit+0x184>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad2:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <HAL_UART_MspInit+0x184>)
 8001ad4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ad8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ada:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <HAL_UART_MspInit+0x184>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <HAL_UART_MspInit+0x184>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <HAL_UART_MspInit+0x184>)
 8001ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aec:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001aee:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <HAL_UART_MspInit+0x184>)
 8001af0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001af4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001af6:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <HAL_UART_MspInit+0x184>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001afc:	4824      	ldr	r0, [pc, #144]	; (8001b90 <HAL_UART_MspInit+0x184>)
 8001afe:	f004 faa7 	bl	8006050 <HAL_DMA_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001b08:	f7ff fe48 	bl	800179c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a20      	ldr	r2, [pc, #128]	; (8001b90 <HAL_UART_MspInit+0x184>)
 8001b10:	66da      	str	r2, [r3, #108]	; 0x6c
 8001b12:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <HAL_UART_MspInit+0x184>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b18:	e02d      	b.n	8001b76 <HAL_UART_MspInit+0x16a>
  else if(huart->Instance==USART3)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_UART_MspInit+0x18c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d128      	bne.n	8001b76 <HAL_UART_MspInit+0x16a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b24:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <HAL_UART_MspInit+0x178>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	4a16      	ldr	r2, [pc, #88]	; (8001b84 <HAL_UART_MspInit+0x178>)
 8001b2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_UART_MspInit+0x178>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HAL_UART_MspInit+0x178>)
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <HAL_UART_MspInit+0x178>)
 8001b42:	f043 0308 	orr.w	r3, r3, #8
 8001b46:	6313      	str	r3, [r2, #48]	; 0x30
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <HAL_UART_MspInit+0x178>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b62:	2303      	movs	r3, #3
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b66:	2307      	movs	r3, #7
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480a      	ldr	r0, [pc, #40]	; (8001b9c <HAL_UART_MspInit+0x190>)
 8001b72:	f004 fe53 	bl	800681c <HAL_GPIO_Init>
}
 8001b76:	bf00      	nop
 8001b78:	3730      	adds	r7, #48	; 0x30
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40004c00 	.word	0x40004c00
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	2000040c 	.word	0x2000040c
 8001b94:	40026040 	.word	0x40026040
 8001b98:	40004800 	.word	0x40004800
 8001b9c:	40020c00 	.word	0x40020c00

08001ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <HardFault_Handler+0x4>

08001bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <MemManage_Handler+0x4>

08001bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <BusFault_Handler+0x4>

08001bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <UsageFault_Handler+0x4>

08001bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf4:	f003 fed2 	bl	800599c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <DMA1_Stream2_IRQHandler+0x10>)
 8001c02:	f004 fba3 	bl	800634c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000040c 	.word	0x2000040c

08001c10 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <DMA1_Stream5_IRQHandler+0x10>)
 8001c16:	f004 fb99 	bl	800634c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200004ec 	.word	0x200004ec

08001c24 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <DMA1_Stream6_IRQHandler+0x10>)
 8001c2a:	f004 fb8f 	bl	800634c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200006e4 	.word	0x200006e4

08001c38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001c3c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c40:	f004 ffc8 	bl	8006bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <TIM2_IRQHandler+0x10>)
 8001c4e:	f006 f961 	bl	8007f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000664 	.word	0x20000664

08001c5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001c60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c64:	f004 ffb6 	bl	8006bd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c6c:	f004 ffb2 	bl	8006bd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001c70:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c74:	f004 ffae 	bl	8006bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <SystemInit+0x28>)
 8001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c86:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <SystemInit+0x28>)
 8001c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <SystemInit+0x28>)
 8001c92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c96:	609a      	str	r2, [r3, #8]
#endif
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <delay+0x2c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8001cb8:	bf00      	nop
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <delay+0x2c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d8f9      	bhi.n	8001cba <delay+0x12>
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	200005a0 	.word	0x200005a0

08001cd8 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001ce4:	887b      	ldrh	r3, [r7, #2]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f004 ff58 	bl	8006ba0 <HAL_GPIO_WritePin>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001d04:	887b      	ldrh	r3, [r7, #2]
 8001d06:	2201      	movs	r2, #1
 8001d08:	4619      	mov	r1, r3
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f004 ff48 	bl	8006ba0 <HAL_GPIO_WritePin>
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001d24:	887b      	ldrh	r3, [r7, #2]
 8001d26:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	4619      	mov	r1, r3
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f004 fd70 	bl	800681c <HAL_GPIO_Init>
}
 8001d3c:	bf00      	nop
 8001d3e:	3720      	adds	r7, #32
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001d50:	887b      	ldrh	r3, [r7, #2]
 8001d52:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	4619      	mov	r1, r3
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f004 fd58 	bl	800681c <HAL_GPIO_Init>
}
 8001d6c:	bf00      	nop
 8001d6e:	3720      	adds	r7, #32
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <width+0x14>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	200003c8 	.word	0x200003c8

08001d8c <height>:

uint16_t height(void)
{ return _height; }
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <height+0x14>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	200003ca 	.word	0x200003ca

08001da4 <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8001dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001db6:	b21a      	sxth	r2, r3
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	b21a      	sxth	r2, r3
 8001dc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	b29b      	uxth	r3, r3
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 8001dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001df6:	b21a      	sxth	r2, r3
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	115b      	asrs	r3, r3, #5
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	4313      	orrs	r3, r2
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	105b      	asrs	r3, r3, #1
 8001e0c:	b21b      	sxth	r3, r3
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	4313      	orrs	r3, r2
 8001e16:	b21b      	sxth	r3, r3
 8001e18:	b29b      	uxth	r3, r3
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	121b      	asrs	r3, r3, #8
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	f023 0307 	bic.w	r3, r3, #7
 8001e3a:	b2db      	uxtb	r3, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	10db      	asrs	r3, r3, #3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f023 0303 	bic.w	r3, r3, #3
 8001e5c:	b2db      	uxtb	r3, r3
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	b2db      	uxtb	r3, r3
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
 8001e92:	460b      	mov	r3, r1
 8001e94:	71bb      	strb	r3, [r7, #6]
 8001e96:	4613      	mov	r3, r2
 8001e98:	717b      	strb	r3, [r7, #5]
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	b21a      	sxth	r2, r3
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <color565+0x48>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	b21a      	sxth	r2, r3
 8001ea6:	79bb      	ldrb	r3, [r7, #6]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001eb0:	b21b      	sxth	r3, r3
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	b21a      	sxth	r2, r3
 8001eb6:	797b      	ldrb	r3, [r7, #5]
 8001eb8:	08db      	lsrs	r3, r3, #3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	b21b      	sxth	r3, r3
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	fffff800 	.word	0xfffff800

08001ed4 <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	4603      	mov	r3, r0
 8001edc:	460a      	mov	r2, r1
 8001ede:	80fb      	strh	r3, [r7, #6]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	80bb      	strh	r3, [r7, #4]
 8001ee4:	f107 020e 	add.w	r2, r7, #14
 8001ee8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001eec:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f001 fbef 	bl	80036d8 <readGRAM>
 8001efa:	89fb      	ldrh	r3, [r7, #14]
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	460a      	mov	r2, r1
 8001f0e:	80fb      	strh	r3, [r7, #6]
 8001f10:	4613      	mov	r3, r2
 8001f12:	80bb      	strh	r3, [r7, #4]
 8001f14:	88ba      	ldrh	r2, [r7, #4]
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f964 	bl	80021e8 <writecmddata>
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	80fb      	strh	r3, [r7, #6]
 8001f34:	4613      	mov	r3, r2
 8001f36:	717b      	strb	r3, [r7, #5]
 8001f38:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fa9d 	bl	8002480 <WriteCmdParamN>
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <setReadDir>:


//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8001f54:	2102      	movs	r1, #2
 8001f56:	4811      	ldr	r0, [pc, #68]	; (8001f9c <setReadDir+0x4c>)
 8001f58:	f7ff fede 	bl	8001d18 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8001f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f60:	480f      	ldr	r0, [pc, #60]	; (8001fa0 <setReadDir+0x50>)
 8001f62:	f7ff fed9 	bl	8001d18 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8001f66:	2180      	movs	r1, #128	; 0x80
 8001f68:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <setReadDir+0x50>)
 8001f6a:	f7ff fed5 	bl	8001d18 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8001f6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f72:	480b      	ldr	r0, [pc, #44]	; (8001fa0 <setReadDir+0x50>)
 8001f74:	f7ff fed0 	bl	8001d18 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8001f78:	2108      	movs	r1, #8
 8001f7a:	480a      	ldr	r0, [pc, #40]	; (8001fa4 <setReadDir+0x54>)
 8001f7c:	f7ff fecc 	bl	8001d18 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8001f80:	2140      	movs	r1, #64	; 0x40
 8001f82:	4808      	ldr	r0, [pc, #32]	; (8001fa4 <setReadDir+0x54>)
 8001f84:	f7ff fec8 	bl	8001d18 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8001f88:	2120      	movs	r1, #32
 8001f8a:	4806      	ldr	r0, [pc, #24]	; (8001fa4 <setReadDir+0x54>)
 8001f8c:	f7ff fec4 	bl	8001d18 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8001f90:	2110      	movs	r1, #16
 8001f92:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <setReadDir+0x54>)
 8001f94:	f7ff fec0 	bl	8001d18 <PIN_INPUT>
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40021800 	.word	0x40021800
 8001fa0:	40021400 	.word	0x40021400
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <setWriteDir>:

void setWriteDir (void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8001fac:	2102      	movs	r1, #2
 8001fae:	4811      	ldr	r0, [pc, #68]	; (8001ff4 <setWriteDir+0x4c>)
 8001fb0:	f7ff fec8 	bl	8001d44 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8001fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fb8:	480f      	ldr	r0, [pc, #60]	; (8001ff8 <setWriteDir+0x50>)
 8001fba:	f7ff fec3 	bl	8001d44 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8001fbe:	2180      	movs	r1, #128	; 0x80
 8001fc0:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <setWriteDir+0x50>)
 8001fc2:	f7ff febf 	bl	8001d44 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8001fc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fca:	480b      	ldr	r0, [pc, #44]	; (8001ff8 <setWriteDir+0x50>)
 8001fcc:	f7ff feba 	bl	8001d44 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8001fd0:	2108      	movs	r1, #8
 8001fd2:	480a      	ldr	r0, [pc, #40]	; (8001ffc <setWriteDir+0x54>)
 8001fd4:	f7ff feb6 	bl	8001d44 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8001fd8:	2140      	movs	r1, #64	; 0x40
 8001fda:	4808      	ldr	r0, [pc, #32]	; (8001ffc <setWriteDir+0x54>)
 8001fdc:	f7ff feb2 	bl	8001d44 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8001fe0:	2120      	movs	r1, #32
 8001fe2:	4806      	ldr	r0, [pc, #24]	; (8001ffc <setWriteDir+0x54>)
 8001fe4:	f7ff feae 	bl	8001d44 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8001fe8:	2110      	movs	r1, #16
 8001fea:	4804      	ldr	r0, [pc, #16]	; (8001ffc <setWriteDir+0x54>)
 8001fec:	f7ff feaa 	bl	8001d44 <PIN_OUTPUT>
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021800 	.word	0x40021800
 8001ff8:	40021400 	.word	0x40021400
 8001ffc:	40021000 	.word	0x40021000

08002000 <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff0a 	bl	8001e26 <color565_to_r>
 8002012:	4603      	mov	r3, r0
 8002014:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff15 	bl	8001e48 <color565_to_g>
 800201e:	4603      	mov	r3, r0
 8002020:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff20 	bl	8001e6a <color565_to_b>
 800202a:	4603      	mov	r3, r0
 800202c:	737b      	strb	r3, [r7, #13]
    write8(r);
 800202e:	4b6b      	ldr	r3, [pc, #428]	; (80021dc <write24+0x1dc>)
 8002030:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002034:	619a      	str	r2, [r3, #24]
 8002036:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <write24+0x1e0>)
 8002038:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800203c:	619a      	str	r2, [r3, #24]
 800203e:	4b69      	ldr	r3, [pc, #420]	; (80021e4 <write24+0x1e4>)
 8002040:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002044:	619a      	str	r2, [r3, #24]
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4a66      	ldr	r2, [pc, #408]	; (80021e4 <write24+0x1e4>)
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	6193      	str	r3, [r2, #24]
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	015b      	lsls	r3, r3, #5
 800205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002062:	431a      	orrs	r2, r3
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	015b      	lsls	r3, r3, #5
 8002068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206c:	431a      	orrs	r2, r3
 800206e:	4b5c      	ldr	r3, [pc, #368]	; (80021e0 <write24+0x1e0>)
 8002070:	619a      	str	r2, [r3, #24]
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	105b      	asrs	r3, r3, #1
 8002076:	f003 0208 	and.w	r2, r3, #8
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002082:	431a      	orrs	r2, r3
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	105b      	asrs	r3, r3, #1
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	431a      	orrs	r2, r3
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	10db      	asrs	r3, r3, #3
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	431a      	orrs	r2, r3
 8002098:	4b50      	ldr	r3, [pc, #320]	; (80021dc <write24+0x1dc>)
 800209a:	619a      	str	r2, [r3, #24]
 800209c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020a0:	484e      	ldr	r0, [pc, #312]	; (80021dc <write24+0x1dc>)
 80020a2:	f7ff fe19 	bl	8001cd8 <PIN_LOW>
 80020a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020aa:	484c      	ldr	r0, [pc, #304]	; (80021dc <write24+0x1dc>)
 80020ac:	f7ff fe24 	bl	8001cf8 <PIN_HIGH>
 80020b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020b4:	4849      	ldr	r0, [pc, #292]	; (80021dc <write24+0x1dc>)
 80020b6:	f7ff fe1f 	bl	8001cf8 <PIN_HIGH>
    write8(g);
 80020ba:	4b48      	ldr	r3, [pc, #288]	; (80021dc <write24+0x1dc>)
 80020bc:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80020c0:	619a      	str	r2, [r3, #24]
 80020c2:	4b47      	ldr	r3, [pc, #284]	; (80021e0 <write24+0x1e0>)
 80020c4:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80020c8:	619a      	str	r2, [r3, #24]
 80020ca:	4b46      	ldr	r3, [pc, #280]	; (80021e4 <write24+0x1e4>)
 80020cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020d0:	619a      	str	r2, [r3, #24]
 80020d2:	7bbb      	ldrb	r3, [r7, #14]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4a43      	ldr	r2, [pc, #268]	; (80021e4 <write24+0x1e4>)
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	6193      	str	r3, [r2, #24]
 80020de:	7bbb      	ldrb	r3, [r7, #14]
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80020e6:	7bbb      	ldrb	r3, [r7, #14]
 80020e8:	015b      	lsls	r3, r3, #5
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	431a      	orrs	r2, r3
 80020f0:	7bbb      	ldrb	r3, [r7, #14]
 80020f2:	015b      	lsls	r3, r3, #5
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	431a      	orrs	r2, r3
 80020fa:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <write24+0x1e0>)
 80020fc:	619a      	str	r2, [r3, #24]
 80020fe:	7bbb      	ldrb	r3, [r7, #14]
 8002100:	105b      	asrs	r3, r3, #1
 8002102:	f003 0208 	and.w	r2, r3, #8
 8002106:	7bbb      	ldrb	r3, [r7, #14]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210e:	431a      	orrs	r2, r3
 8002110:	7bbb      	ldrb	r3, [r7, #14]
 8002112:	105b      	asrs	r3, r3, #1
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	431a      	orrs	r2, r3
 800211a:	7bbb      	ldrb	r3, [r7, #14]
 800211c:	10db      	asrs	r3, r3, #3
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	431a      	orrs	r2, r3
 8002124:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <write24+0x1dc>)
 8002126:	619a      	str	r2, [r3, #24]
 8002128:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800212c:	482b      	ldr	r0, [pc, #172]	; (80021dc <write24+0x1dc>)
 800212e:	f7ff fdd3 	bl	8001cd8 <PIN_LOW>
 8002132:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002136:	4829      	ldr	r0, [pc, #164]	; (80021dc <write24+0x1dc>)
 8002138:	f7ff fdde 	bl	8001cf8 <PIN_HIGH>
 800213c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002140:	4826      	ldr	r0, [pc, #152]	; (80021dc <write24+0x1dc>)
 8002142:	f7ff fdd9 	bl	8001cf8 <PIN_HIGH>
    write8(b);
 8002146:	4b25      	ldr	r3, [pc, #148]	; (80021dc <write24+0x1dc>)
 8002148:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800214c:	619a      	str	r2, [r3, #24]
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <write24+0x1e0>)
 8002150:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002154:	619a      	str	r2, [r3, #24]
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <write24+0x1e4>)
 8002158:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800215c:	619a      	str	r2, [r3, #24]
 800215e:	7b7b      	ldrb	r3, [r7, #13]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4a20      	ldr	r2, [pc, #128]	; (80021e4 <write24+0x1e4>)
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	6193      	str	r3, [r2, #24]
 800216a:	7b7b      	ldrb	r3, [r7, #13]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002172:	7b7b      	ldrb	r3, [r7, #13]
 8002174:	015b      	lsls	r3, r3, #5
 8002176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217a:	431a      	orrs	r2, r3
 800217c:	7b7b      	ldrb	r3, [r7, #13]
 800217e:	015b      	lsls	r3, r3, #5
 8002180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002184:	431a      	orrs	r2, r3
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <write24+0x1e0>)
 8002188:	619a      	str	r2, [r3, #24]
 800218a:	7b7b      	ldrb	r3, [r7, #13]
 800218c:	105b      	asrs	r3, r3, #1
 800218e:	f003 0208 	and.w	r2, r3, #8
 8002192:	7b7b      	ldrb	r3, [r7, #13]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219a:	431a      	orrs	r2, r3
 800219c:	7b7b      	ldrb	r3, [r7, #13]
 800219e:	105b      	asrs	r3, r3, #1
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	431a      	orrs	r2, r3
 80021a6:	7b7b      	ldrb	r3, [r7, #13]
 80021a8:	10db      	asrs	r3, r3, #3
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	431a      	orrs	r2, r3
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <write24+0x1dc>)
 80021b2:	619a      	str	r2, [r3, #24]
 80021b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021b8:	4808      	ldr	r0, [pc, #32]	; (80021dc <write24+0x1dc>)
 80021ba:	f7ff fd8d 	bl	8001cd8 <PIN_LOW>
 80021be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021c2:	4806      	ldr	r0, [pc, #24]	; (80021dc <write24+0x1dc>)
 80021c4:	f7ff fd98 	bl	8001cf8 <PIN_HIGH>
 80021c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021cc:	4803      	ldr	r0, [pc, #12]	; (80021dc <write24+0x1dc>)
 80021ce:	f7ff fd93 	bl	8001cf8 <PIN_HIGH>
}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40021400 	.word	0x40021400
 80021e4:	40021800 	.word	0x40021800

080021e8 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	460a      	mov	r2, r1
 80021f2:	80fb      	strh	r3, [r7, #6]
 80021f4:	4613      	mov	r3, r2
 80021f6:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 80021f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021fc:	489c      	ldr	r0, [pc, #624]	; (8002470 <writecmddata+0x288>)
 80021fe:	f7ff fd6b 	bl	8001cd8 <PIN_LOW>
    WriteCmd(cmd);
 8002202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002206:	489b      	ldr	r0, [pc, #620]	; (8002474 <writecmddata+0x28c>)
 8002208:	f7ff fd66 	bl	8001cd8 <PIN_LOW>
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	b29b      	uxth	r3, r3
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	73bb      	strb	r3, [r7, #14]
 8002218:	4b96      	ldr	r3, [pc, #600]	; (8002474 <writecmddata+0x28c>)
 800221a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800221e:	619a      	str	r2, [r3, #24]
 8002220:	4b95      	ldr	r3, [pc, #596]	; (8002478 <writecmddata+0x290>)
 8002222:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002226:	619a      	str	r2, [r3, #24]
 8002228:	4b94      	ldr	r3, [pc, #592]	; (800247c <writecmddata+0x294>)
 800222a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800222e:	619a      	str	r2, [r3, #24]
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4a91      	ldr	r2, [pc, #580]	; (800247c <writecmddata+0x294>)
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	6193      	str	r3, [r2, #24]
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	015b      	lsls	r3, r3, #5
 8002248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224c:	431a      	orrs	r2, r3
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	015b      	lsls	r3, r3, #5
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	431a      	orrs	r2, r3
 8002258:	4b87      	ldr	r3, [pc, #540]	; (8002478 <writecmddata+0x290>)
 800225a:	619a      	str	r2, [r3, #24]
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	105b      	asrs	r3, r3, #1
 8002260:	f003 0208 	and.w	r2, r3, #8
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226c:	431a      	orrs	r2, r3
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	105b      	asrs	r3, r3, #1
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	431a      	orrs	r2, r3
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	10db      	asrs	r3, r3, #3
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	431a      	orrs	r2, r3
 8002282:	4b7c      	ldr	r3, [pc, #496]	; (8002474 <writecmddata+0x28c>)
 8002284:	619a      	str	r2, [r3, #24]
 8002286:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800228a:	487a      	ldr	r0, [pc, #488]	; (8002474 <writecmddata+0x28c>)
 800228c:	f7ff fd24 	bl	8001cd8 <PIN_LOW>
 8002290:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002294:	4877      	ldr	r0, [pc, #476]	; (8002474 <writecmddata+0x28c>)
 8002296:	f7ff fd2f 	bl	8001cf8 <PIN_HIGH>
 800229a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800229e:	4875      	ldr	r0, [pc, #468]	; (8002474 <writecmddata+0x28c>)
 80022a0:	f7ff fd2a 	bl	8001cf8 <PIN_HIGH>
 80022a4:	4b73      	ldr	r3, [pc, #460]	; (8002474 <writecmddata+0x28c>)
 80022a6:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80022aa:	619a      	str	r2, [r3, #24]
 80022ac:	4b72      	ldr	r3, [pc, #456]	; (8002478 <writecmddata+0x290>)
 80022ae:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80022b2:	619a      	str	r2, [r3, #24]
 80022b4:	4b71      	ldr	r3, [pc, #452]	; (800247c <writecmddata+0x294>)
 80022b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022ba:	619a      	str	r2, [r3, #24]
 80022bc:	7bbb      	ldrb	r3, [r7, #14]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4a6e      	ldr	r2, [pc, #440]	; (800247c <writecmddata+0x294>)
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	6193      	str	r3, [r2, #24]
 80022c8:	7bbb      	ldrb	r3, [r7, #14]
 80022ca:	021b      	lsls	r3, r3, #8
 80022cc:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80022d0:	7bbb      	ldrb	r3, [r7, #14]
 80022d2:	015b      	lsls	r3, r3, #5
 80022d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d8:	431a      	orrs	r2, r3
 80022da:	7bbb      	ldrb	r3, [r7, #14]
 80022dc:	015b      	lsls	r3, r3, #5
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	431a      	orrs	r2, r3
 80022e4:	4b64      	ldr	r3, [pc, #400]	; (8002478 <writecmddata+0x290>)
 80022e6:	619a      	str	r2, [r3, #24]
 80022e8:	7bbb      	ldrb	r3, [r7, #14]
 80022ea:	105b      	asrs	r3, r3, #1
 80022ec:	f003 0208 	and.w	r2, r3, #8
 80022f0:	7bbb      	ldrb	r3, [r7, #14]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	431a      	orrs	r2, r3
 80022fa:	7bbb      	ldrb	r3, [r7, #14]
 80022fc:	105b      	asrs	r3, r3, #1
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	431a      	orrs	r2, r3
 8002304:	7bbb      	ldrb	r3, [r7, #14]
 8002306:	10db      	asrs	r3, r3, #3
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	431a      	orrs	r2, r3
 800230e:	4b59      	ldr	r3, [pc, #356]	; (8002474 <writecmddata+0x28c>)
 8002310:	619a      	str	r2, [r3, #24]
 8002312:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002316:	4857      	ldr	r0, [pc, #348]	; (8002474 <writecmddata+0x28c>)
 8002318:	f7ff fcde 	bl	8001cd8 <PIN_LOW>
 800231c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002320:	4854      	ldr	r0, [pc, #336]	; (8002474 <writecmddata+0x28c>)
 8002322:	f7ff fce9 	bl	8001cf8 <PIN_HIGH>
 8002326:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800232a:	4852      	ldr	r0, [pc, #328]	; (8002474 <writecmddata+0x28c>)
 800232c:	f7ff fce4 	bl	8001cf8 <PIN_HIGH>
 8002330:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002334:	484f      	ldr	r0, [pc, #316]	; (8002474 <writecmddata+0x28c>)
 8002336:	f7ff fcdf 	bl	8001cf8 <PIN_HIGH>
    WriteData(dat);
 800233a:	88bb      	ldrh	r3, [r7, #4]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	b29b      	uxth	r3, r3
 8002340:	737b      	strb	r3, [r7, #13]
 8002342:	88bb      	ldrh	r3, [r7, #4]
 8002344:	733b      	strb	r3, [r7, #12]
 8002346:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <writecmddata+0x28c>)
 8002348:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800234c:	619a      	str	r2, [r3, #24]
 800234e:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <writecmddata+0x290>)
 8002350:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002354:	619a      	str	r2, [r3, #24]
 8002356:	4b49      	ldr	r3, [pc, #292]	; (800247c <writecmddata+0x294>)
 8002358:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800235c:	619a      	str	r2, [r3, #24]
 800235e:	7b7b      	ldrb	r3, [r7, #13]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4a46      	ldr	r2, [pc, #280]	; (800247c <writecmddata+0x294>)
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	6193      	str	r3, [r2, #24]
 800236a:	7b7b      	ldrb	r3, [r7, #13]
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002372:	7b7b      	ldrb	r3, [r7, #13]
 8002374:	015b      	lsls	r3, r3, #5
 8002376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237a:	431a      	orrs	r2, r3
 800237c:	7b7b      	ldrb	r3, [r7, #13]
 800237e:	015b      	lsls	r3, r3, #5
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	431a      	orrs	r2, r3
 8002386:	4b3c      	ldr	r3, [pc, #240]	; (8002478 <writecmddata+0x290>)
 8002388:	619a      	str	r2, [r3, #24]
 800238a:	7b7b      	ldrb	r3, [r7, #13]
 800238c:	105b      	asrs	r3, r3, #1
 800238e:	f003 0208 	and.w	r2, r3, #8
 8002392:	7b7b      	ldrb	r3, [r7, #13]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239a:	431a      	orrs	r2, r3
 800239c:	7b7b      	ldrb	r3, [r7, #13]
 800239e:	105b      	asrs	r3, r3, #1
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	431a      	orrs	r2, r3
 80023a6:	7b7b      	ldrb	r3, [r7, #13]
 80023a8:	10db      	asrs	r3, r3, #3
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	431a      	orrs	r2, r3
 80023b0:	4b30      	ldr	r3, [pc, #192]	; (8002474 <writecmddata+0x28c>)
 80023b2:	619a      	str	r2, [r3, #24]
 80023b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023b8:	482e      	ldr	r0, [pc, #184]	; (8002474 <writecmddata+0x28c>)
 80023ba:	f7ff fc8d 	bl	8001cd8 <PIN_LOW>
 80023be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023c2:	482c      	ldr	r0, [pc, #176]	; (8002474 <writecmddata+0x28c>)
 80023c4:	f7ff fc98 	bl	8001cf8 <PIN_HIGH>
 80023c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023cc:	4829      	ldr	r0, [pc, #164]	; (8002474 <writecmddata+0x28c>)
 80023ce:	f7ff fc93 	bl	8001cf8 <PIN_HIGH>
 80023d2:	4b28      	ldr	r3, [pc, #160]	; (8002474 <writecmddata+0x28c>)
 80023d4:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80023d8:	619a      	str	r2, [r3, #24]
 80023da:	4b27      	ldr	r3, [pc, #156]	; (8002478 <writecmddata+0x290>)
 80023dc:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80023e0:	619a      	str	r2, [r3, #24]
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <writecmddata+0x294>)
 80023e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023e8:	619a      	str	r2, [r3, #24]
 80023ea:	7b3b      	ldrb	r3, [r7, #12]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4a23      	ldr	r2, [pc, #140]	; (800247c <writecmddata+0x294>)
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	6193      	str	r3, [r2, #24]
 80023f6:	7b3b      	ldrb	r3, [r7, #12]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80023fe:	7b3b      	ldrb	r3, [r7, #12]
 8002400:	015b      	lsls	r3, r3, #5
 8002402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002406:	431a      	orrs	r2, r3
 8002408:	7b3b      	ldrb	r3, [r7, #12]
 800240a:	015b      	lsls	r3, r3, #5
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	431a      	orrs	r2, r3
 8002412:	4b19      	ldr	r3, [pc, #100]	; (8002478 <writecmddata+0x290>)
 8002414:	619a      	str	r2, [r3, #24]
 8002416:	7b3b      	ldrb	r3, [r7, #12]
 8002418:	105b      	asrs	r3, r3, #1
 800241a:	f003 0208 	and.w	r2, r3, #8
 800241e:	7b3b      	ldrb	r3, [r7, #12]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002426:	431a      	orrs	r2, r3
 8002428:	7b3b      	ldrb	r3, [r7, #12]
 800242a:	105b      	asrs	r3, r3, #1
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	431a      	orrs	r2, r3
 8002432:	7b3b      	ldrb	r3, [r7, #12]
 8002434:	10db      	asrs	r3, r3, #3
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	431a      	orrs	r2, r3
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <writecmddata+0x28c>)
 800243e:	619a      	str	r2, [r3, #24]
 8002440:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002444:	480b      	ldr	r0, [pc, #44]	; (8002474 <writecmddata+0x28c>)
 8002446:	f7ff fc47 	bl	8001cd8 <PIN_LOW>
 800244a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800244e:	4809      	ldr	r0, [pc, #36]	; (8002474 <writecmddata+0x28c>)
 8002450:	f7ff fc52 	bl	8001cf8 <PIN_HIGH>
 8002454:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002458:	4806      	ldr	r0, [pc, #24]	; (8002474 <writecmddata+0x28c>)
 800245a:	f7ff fc4d 	bl	8001cf8 <PIN_HIGH>
    CS_IDLE;
 800245e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002462:	4803      	ldr	r0, [pc, #12]	; (8002470 <writecmddata+0x288>)
 8002464:	f7ff fc48 	bl	8001cf8 <PIN_HIGH>
}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40020400 	.word	0x40020400
 8002474:	40021000 	.word	0x40021000
 8002478:	40021400 	.word	0x40021400
 800247c:	40021800 	.word	0x40021800

08002480 <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	603a      	str	r2, [r7, #0]
 800248a:	80fb      	strh	r3, [r7, #6]
 800248c:	460b      	mov	r3, r1
 800248e:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8002490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002494:	484f      	ldr	r0, [pc, #316]	; (80025d4 <WriteCmdParamN+0x154>)
 8002496:	f7ff fc1f 	bl	8001cd8 <PIN_LOW>
    WriteCmd(cmd);
 800249a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800249e:	484e      	ldr	r0, [pc, #312]	; (80025d8 <WriteCmdParamN+0x158>)
 80024a0:	f7ff fc1a 	bl	8001cd8 <PIN_LOW>
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	73fb      	strb	r3, [r7, #15]
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	73bb      	strb	r3, [r7, #14]
 80024b0:	4b49      	ldr	r3, [pc, #292]	; (80025d8 <WriteCmdParamN+0x158>)
 80024b2:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80024b6:	619a      	str	r2, [r3, #24]
 80024b8:	4b48      	ldr	r3, [pc, #288]	; (80025dc <WriteCmdParamN+0x15c>)
 80024ba:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80024be:	619a      	str	r2, [r3, #24]
 80024c0:	4b47      	ldr	r3, [pc, #284]	; (80025e0 <WriteCmdParamN+0x160>)
 80024c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024c6:	619a      	str	r2, [r3, #24]
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4a44      	ldr	r2, [pc, #272]	; (80025e0 <WriteCmdParamN+0x160>)
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	6193      	str	r3, [r2, #24]
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	015b      	lsls	r3, r3, #5
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	431a      	orrs	r2, r3
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	015b      	lsls	r3, r3, #5
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	431a      	orrs	r2, r3
 80024f0:	4b3a      	ldr	r3, [pc, #232]	; (80025dc <WriteCmdParamN+0x15c>)
 80024f2:	619a      	str	r2, [r3, #24]
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	105b      	asrs	r3, r3, #1
 80024f8:	f003 0208 	and.w	r2, r3, #8
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002504:	431a      	orrs	r2, r3
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	105b      	asrs	r3, r3, #1
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	431a      	orrs	r2, r3
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	10db      	asrs	r3, r3, #3
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	431a      	orrs	r2, r3
 800251a:	4b2f      	ldr	r3, [pc, #188]	; (80025d8 <WriteCmdParamN+0x158>)
 800251c:	619a      	str	r2, [r3, #24]
 800251e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002522:	482d      	ldr	r0, [pc, #180]	; (80025d8 <WriteCmdParamN+0x158>)
 8002524:	f7ff fbd8 	bl	8001cd8 <PIN_LOW>
 8002528:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800252c:	482a      	ldr	r0, [pc, #168]	; (80025d8 <WriteCmdParamN+0x158>)
 800252e:	f7ff fbe3 	bl	8001cf8 <PIN_HIGH>
 8002532:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002536:	4828      	ldr	r0, [pc, #160]	; (80025d8 <WriteCmdParamN+0x158>)
 8002538:	f7ff fbde 	bl	8001cf8 <PIN_HIGH>
 800253c:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <WriteCmdParamN+0x158>)
 800253e:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002542:	619a      	str	r2, [r3, #24]
 8002544:	4b25      	ldr	r3, [pc, #148]	; (80025dc <WriteCmdParamN+0x15c>)
 8002546:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800254a:	619a      	str	r2, [r3, #24]
 800254c:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <WriteCmdParamN+0x160>)
 800254e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002552:	619a      	str	r2, [r3, #24]
 8002554:	7bbb      	ldrb	r3, [r7, #14]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4a21      	ldr	r2, [pc, #132]	; (80025e0 <WriteCmdParamN+0x160>)
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	6193      	str	r3, [r2, #24]
 8002560:	7bbb      	ldrb	r3, [r7, #14]
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002568:	7bbb      	ldrb	r3, [r7, #14]
 800256a:	015b      	lsls	r3, r3, #5
 800256c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002570:	431a      	orrs	r2, r3
 8002572:	7bbb      	ldrb	r3, [r7, #14]
 8002574:	015b      	lsls	r3, r3, #5
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	431a      	orrs	r2, r3
 800257c:	4b17      	ldr	r3, [pc, #92]	; (80025dc <WriteCmdParamN+0x15c>)
 800257e:	619a      	str	r2, [r3, #24]
 8002580:	7bbb      	ldrb	r3, [r7, #14]
 8002582:	105b      	asrs	r3, r3, #1
 8002584:	f003 0208 	and.w	r2, r3, #8
 8002588:	7bbb      	ldrb	r3, [r7, #14]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002590:	431a      	orrs	r2, r3
 8002592:	7bbb      	ldrb	r3, [r7, #14]
 8002594:	105b      	asrs	r3, r3, #1
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	431a      	orrs	r2, r3
 800259c:	7bbb      	ldrb	r3, [r7, #14]
 800259e:	10db      	asrs	r3, r3, #3
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	431a      	orrs	r2, r3
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <WriteCmdParamN+0x158>)
 80025a8:	619a      	str	r2, [r3, #24]
 80025aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025ae:	480a      	ldr	r0, [pc, #40]	; (80025d8 <WriteCmdParamN+0x158>)
 80025b0:	f7ff fb92 	bl	8001cd8 <PIN_LOW>
 80025b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025b8:	4807      	ldr	r0, [pc, #28]	; (80025d8 <WriteCmdParamN+0x158>)
 80025ba:	f7ff fb9d 	bl	8001cf8 <PIN_HIGH>
 80025be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025c2:	4805      	ldr	r0, [pc, #20]	; (80025d8 <WriteCmdParamN+0x158>)
 80025c4:	f7ff fb98 	bl	8001cf8 <PIN_HIGH>
 80025c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <WriteCmdParamN+0x158>)
 80025ce:	f7ff fb93 	bl	8001cf8 <PIN_HIGH>
    while (N-- > 0) {
 80025d2:	e0fb      	b.n	80027cc <WriteCmdParamN+0x34c>
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40021400 	.word	0x40021400
 80025e0:	40021800 	.word	0x40021800
        uint8_t u8 = *block++;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	603a      	str	r2, [r7, #0]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	737b      	strb	r3, [r7, #13]
        write8(u8);
 80025ee:	4b80      	ldr	r3, [pc, #512]	; (80027f0 <WriteCmdParamN+0x370>)
 80025f0:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80025f4:	619a      	str	r2, [r3, #24]
 80025f6:	4b7f      	ldr	r3, [pc, #508]	; (80027f4 <WriteCmdParamN+0x374>)
 80025f8:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80025fc:	619a      	str	r2, [r3, #24]
 80025fe:	4b7e      	ldr	r3, [pc, #504]	; (80027f8 <WriteCmdParamN+0x378>)
 8002600:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002604:	619a      	str	r2, [r3, #24]
 8002606:	7b7b      	ldrb	r3, [r7, #13]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4a7b      	ldr	r2, [pc, #492]	; (80027f8 <WriteCmdParamN+0x378>)
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	6193      	str	r3, [r2, #24]
 8002612:	7b7b      	ldrb	r3, [r7, #13]
 8002614:	021b      	lsls	r3, r3, #8
 8002616:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800261a:	7b7b      	ldrb	r3, [r7, #13]
 800261c:	015b      	lsls	r3, r3, #5
 800261e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002622:	431a      	orrs	r2, r3
 8002624:	7b7b      	ldrb	r3, [r7, #13]
 8002626:	015b      	lsls	r3, r3, #5
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	431a      	orrs	r2, r3
 800262e:	4b71      	ldr	r3, [pc, #452]	; (80027f4 <WriteCmdParamN+0x374>)
 8002630:	619a      	str	r2, [r3, #24]
 8002632:	7b7b      	ldrb	r3, [r7, #13]
 8002634:	105b      	asrs	r3, r3, #1
 8002636:	f003 0208 	and.w	r2, r3, #8
 800263a:	7b7b      	ldrb	r3, [r7, #13]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002642:	431a      	orrs	r2, r3
 8002644:	7b7b      	ldrb	r3, [r7, #13]
 8002646:	105b      	asrs	r3, r3, #1
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	431a      	orrs	r2, r3
 800264e:	7b7b      	ldrb	r3, [r7, #13]
 8002650:	10db      	asrs	r3, r3, #3
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	431a      	orrs	r2, r3
 8002658:	4b65      	ldr	r3, [pc, #404]	; (80027f0 <WriteCmdParamN+0x370>)
 800265a:	619a      	str	r2, [r3, #24]
 800265c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002660:	4863      	ldr	r0, [pc, #396]	; (80027f0 <WriteCmdParamN+0x370>)
 8002662:	f7ff fb39 	bl	8001cd8 <PIN_LOW>
 8002666:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800266a:	4861      	ldr	r0, [pc, #388]	; (80027f0 <WriteCmdParamN+0x370>)
 800266c:	f7ff fb44 	bl	8001cf8 <PIN_HIGH>
 8002670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002674:	485e      	ldr	r0, [pc, #376]	; (80027f0 <WriteCmdParamN+0x370>)
 8002676:	f7ff fb3f 	bl	8001cf8 <PIN_HIGH>
        if (N && is8347) {
 800267a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80a4 	beq.w	80027cc <WriteCmdParamN+0x34c>
 8002684:	4b5d      	ldr	r3, [pc, #372]	; (80027fc <WriteCmdParamN+0x37c>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 809f 	beq.w	80027cc <WriteCmdParamN+0x34c>
            cmd++;
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	3301      	adds	r3, #1
 8002692:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8002694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002698:	4855      	ldr	r0, [pc, #340]	; (80027f0 <WriteCmdParamN+0x370>)
 800269a:	f7ff fb1d 	bl	8001cd8 <PIN_LOW>
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	733b      	strb	r3, [r7, #12]
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	72fb      	strb	r3, [r7, #11]
 80026aa:	4b51      	ldr	r3, [pc, #324]	; (80027f0 <WriteCmdParamN+0x370>)
 80026ac:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80026b0:	619a      	str	r2, [r3, #24]
 80026b2:	4b50      	ldr	r3, [pc, #320]	; (80027f4 <WriteCmdParamN+0x374>)
 80026b4:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80026b8:	619a      	str	r2, [r3, #24]
 80026ba:	4b4f      	ldr	r3, [pc, #316]	; (80027f8 <WriteCmdParamN+0x378>)
 80026bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026c0:	619a      	str	r2, [r3, #24]
 80026c2:	7b3b      	ldrb	r3, [r7, #12]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4a4c      	ldr	r2, [pc, #304]	; (80027f8 <WriteCmdParamN+0x378>)
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	6193      	str	r3, [r2, #24]
 80026ce:	7b3b      	ldrb	r3, [r7, #12]
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80026d6:	7b3b      	ldrb	r3, [r7, #12]
 80026d8:	015b      	lsls	r3, r3, #5
 80026da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026de:	431a      	orrs	r2, r3
 80026e0:	7b3b      	ldrb	r3, [r7, #12]
 80026e2:	015b      	lsls	r3, r3, #5
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	431a      	orrs	r2, r3
 80026ea:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <WriteCmdParamN+0x374>)
 80026ec:	619a      	str	r2, [r3, #24]
 80026ee:	7b3b      	ldrb	r3, [r7, #12]
 80026f0:	105b      	asrs	r3, r3, #1
 80026f2:	f003 0208 	and.w	r2, r3, #8
 80026f6:	7b3b      	ldrb	r3, [r7, #12]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	431a      	orrs	r2, r3
 8002700:	7b3b      	ldrb	r3, [r7, #12]
 8002702:	105b      	asrs	r3, r3, #1
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	431a      	orrs	r2, r3
 800270a:	7b3b      	ldrb	r3, [r7, #12]
 800270c:	10db      	asrs	r3, r3, #3
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	431a      	orrs	r2, r3
 8002714:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <WriteCmdParamN+0x370>)
 8002716:	619a      	str	r2, [r3, #24]
 8002718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800271c:	4834      	ldr	r0, [pc, #208]	; (80027f0 <WriteCmdParamN+0x370>)
 800271e:	f7ff fadb 	bl	8001cd8 <PIN_LOW>
 8002722:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002726:	4832      	ldr	r0, [pc, #200]	; (80027f0 <WriteCmdParamN+0x370>)
 8002728:	f7ff fae6 	bl	8001cf8 <PIN_HIGH>
 800272c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002730:	482f      	ldr	r0, [pc, #188]	; (80027f0 <WriteCmdParamN+0x370>)
 8002732:	f7ff fae1 	bl	8001cf8 <PIN_HIGH>
 8002736:	4b2e      	ldr	r3, [pc, #184]	; (80027f0 <WriteCmdParamN+0x370>)
 8002738:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800273c:	619a      	str	r2, [r3, #24]
 800273e:	4b2d      	ldr	r3, [pc, #180]	; (80027f4 <WriteCmdParamN+0x374>)
 8002740:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002744:	619a      	str	r2, [r3, #24]
 8002746:	4b2c      	ldr	r3, [pc, #176]	; (80027f8 <WriteCmdParamN+0x378>)
 8002748:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800274c:	619a      	str	r2, [r3, #24]
 800274e:	7afb      	ldrb	r3, [r7, #11]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4a29      	ldr	r2, [pc, #164]	; (80027f8 <WriteCmdParamN+0x378>)
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	6193      	str	r3, [r2, #24]
 800275a:	7afb      	ldrb	r3, [r7, #11]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002762:	7afb      	ldrb	r3, [r7, #11]
 8002764:	015b      	lsls	r3, r3, #5
 8002766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276a:	431a      	orrs	r2, r3
 800276c:	7afb      	ldrb	r3, [r7, #11]
 800276e:	015b      	lsls	r3, r3, #5
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	431a      	orrs	r2, r3
 8002776:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <WriteCmdParamN+0x374>)
 8002778:	619a      	str	r2, [r3, #24]
 800277a:	7afb      	ldrb	r3, [r7, #11]
 800277c:	105b      	asrs	r3, r3, #1
 800277e:	f003 0208 	and.w	r2, r3, #8
 8002782:	7afb      	ldrb	r3, [r7, #11]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278a:	431a      	orrs	r2, r3
 800278c:	7afb      	ldrb	r3, [r7, #11]
 800278e:	105b      	asrs	r3, r3, #1
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	431a      	orrs	r2, r3
 8002796:	7afb      	ldrb	r3, [r7, #11]
 8002798:	10db      	asrs	r3, r3, #3
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	431a      	orrs	r2, r3
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <WriteCmdParamN+0x370>)
 80027a2:	619a      	str	r2, [r3, #24]
 80027a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027a8:	4811      	ldr	r0, [pc, #68]	; (80027f0 <WriteCmdParamN+0x370>)
 80027aa:	f7ff fa95 	bl	8001cd8 <PIN_LOW>
 80027ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027b2:	480f      	ldr	r0, [pc, #60]	; (80027f0 <WriteCmdParamN+0x370>)
 80027b4:	f7ff faa0 	bl	8001cf8 <PIN_HIGH>
 80027b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027bc:	480c      	ldr	r0, [pc, #48]	; (80027f0 <WriteCmdParamN+0x370>)
 80027be:	f7ff fa9b 	bl	8001cf8 <PIN_HIGH>
 80027c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027c6:	480a      	ldr	r0, [pc, #40]	; (80027f0 <WriteCmdParamN+0x370>)
 80027c8:	f7ff fa96 	bl	8001cf8 <PIN_HIGH>
    while (N-- > 0) {
 80027cc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	3a01      	subs	r2, #1
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	717a      	strb	r2, [r7, #5]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f73f af03 	bgt.w	80025e4 <WriteCmdParamN+0x164>
        }
    }
    CS_IDLE;
 80027de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027e2:	4807      	ldr	r0, [pc, #28]	; (8002800 <WriteCmdParamN+0x380>)
 80027e4:	f7ff fa88 	bl	8001cf8 <PIN_HIGH>
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40021400 	.word	0x40021400
 80027f8:	40021800 	.word	0x40021800
 80027fc:	20000405 	.word	0x20000405
 8002800:	40020400 	.word	0x40020400

08002804 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	4604      	mov	r4, r0
 800280c:	4608      	mov	r0, r1
 800280e:	4611      	mov	r1, r2
 8002810:	461a      	mov	r2, r3
 8002812:	4623      	mov	r3, r4
 8002814:	71fb      	strb	r3, [r7, #7]
 8002816:	4603      	mov	r3, r0
 8002818:	71bb      	strb	r3, [r7, #6]
 800281a:	460b      	mov	r3, r1
 800281c:	717b      	strb	r3, [r7, #5]
 800281e:	4613      	mov	r3, r2
 8002820:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8002822:	79bb      	ldrb	r3, [r7, #6]
 8002824:	733b      	strb	r3, [r7, #12]
 8002826:	797b      	ldrb	r3, [r7, #5]
 8002828:	737b      	strb	r3, [r7, #13]
 800282a:	793b      	ldrb	r3, [r7, #4]
 800282c:	73bb      	strb	r3, [r7, #14]
 800282e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002832:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	b29b      	uxth	r3, r3
 8002838:	f107 020c 	add.w	r2, r7, #12
 800283c:	2104      	movs	r1, #4
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fe1e 	bl	8002480 <WriteCmdParamN>
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bd90      	pop	{r4, r7, pc}

0800284c <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 800285c:	e046      	b.n	80028ec <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	627a      	str	r2, [r7, #36]	; 0x24
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	627a      	str	r2, [r7, #36]	; 0x24
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 8002876:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800287a:	2b7f      	cmp	r3, #127	; 0x7f
 800287c:	d108      	bne.n	8002890 <init_table+0x44>
        {
            delay(len);
 800287e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fa10 	bl	8001ca8 <delay>
            len = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800288e:	e024      	b.n	80028da <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8002890:	2300      	movs	r3, #0
 8002892:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002896:	e010      	b.n	80028ba <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	627a      	str	r2, [r7, #36]	; 0x24
 800289e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80028a2:	7819      	ldrb	r1, [r3, #0]
 80028a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028a8:	4413      	add	r3, r2
 80028aa:	460a      	mov	r2, r1
 80028ac:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 80028b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80028b4:	3301      	adds	r3, #1
 80028b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80028ba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80028be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d3e8      	bcc.n	8002898 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 80028c6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 80028d0:	f107 0208 	add.w	r2, r7, #8
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fdd3 	bl	8002480 <WriteCmdParamN>
        }
        size -= len + 2;
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b02      	subs	r3, #2
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 80028ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	dcb4      	bgt.n	800285e <init_table+0x12>
    }
}
 80028f4:	bf00      	nop
 80028f6:	3728      	adds	r7, #40	; 0x28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 800290c:	e01d      	b.n	800294a <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1c9a      	adds	r2, r3, #2
 8002912:	60fa      	str	r2, [r7, #12]
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1c9a      	adds	r2, r3, #2
 800291c:	60fa      	str	r2, [r7, #12]
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8002922:	897b      	ldrh	r3, [r7, #10]
 8002924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002928:	4293      	cmp	r3, r2
 800292a:	d104      	bne.n	8002936 <init_table16+0x3a>
            delay(d);
 800292c:	893b      	ldrh	r3, [r7, #8]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff f9ba 	bl	8001ca8 <delay>
 8002934:	e005      	b.n	8002942 <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 8002936:	893a      	ldrh	r2, [r7, #8]
 8002938:	897b      	ldrh	r3, [r7, #10]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fc53 	bl	80021e8 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8002942:	887b      	ldrh	r3, [r7, #2]
 8002944:	3b04      	subs	r3, #4
 8002946:	b29b      	uxth	r3, r3
 8002948:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 800294a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800294e:	2b00      	cmp	r3, #0
 8002950:	dcdd      	bgt.n	800290e <init_table16+0x12>
    }
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <reset>:



void reset(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
    done_reset = 1;
 8002960:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <reset+0x9c>)
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8002966:	f7ff fb1f 	bl	8001fa8 <setWriteDir>
    CTL_INIT();
 800296a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800296e:	4823      	ldr	r0, [pc, #140]	; (80029fc <reset+0xa0>)
 8002970:	f7ff f9e8 	bl	8001d44 <PIN_OUTPUT>
 8002974:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002978:	4820      	ldr	r0, [pc, #128]	; (80029fc <reset+0xa0>)
 800297a:	f7ff f9e3 	bl	8001d44 <PIN_OUTPUT>
 800297e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002982:	481e      	ldr	r0, [pc, #120]	; (80029fc <reset+0xa0>)
 8002984:	f7ff f9de 	bl	8001d44 <PIN_OUTPUT>
 8002988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800298c:	481c      	ldr	r0, [pc, #112]	; (8002a00 <reset+0xa4>)
 800298e:	f7ff f9d9 	bl	8001d44 <PIN_OUTPUT>
 8002992:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002996:	481a      	ldr	r0, [pc, #104]	; (8002a00 <reset+0xa4>)
 8002998:	f7ff f9d4 	bl	8001d44 <PIN_OUTPUT>
    CS_IDLE;
 800299c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029a0:	4817      	ldr	r0, [pc, #92]	; (8002a00 <reset+0xa4>)
 80029a2:	f7ff f9a9 	bl	8001cf8 <PIN_HIGH>
    RD_IDLE;
 80029a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029aa:	4814      	ldr	r0, [pc, #80]	; (80029fc <reset+0xa0>)
 80029ac:	f7ff f9a4 	bl	8001cf8 <PIN_HIGH>
    WR_IDLE;
 80029b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029b4:	4811      	ldr	r0, [pc, #68]	; (80029fc <reset+0xa0>)
 80029b6:	f7ff f99f 	bl	8001cf8 <PIN_HIGH>
    RESET_IDLE;
 80029ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029be:	4810      	ldr	r0, [pc, #64]	; (8002a00 <reset+0xa4>)
 80029c0:	f7ff f99a 	bl	8001cf8 <PIN_HIGH>
    delay(50);
 80029c4:	2032      	movs	r0, #50	; 0x32
 80029c6:	f7ff f96f 	bl	8001ca8 <delay>
    RESET_ACTIVE;
 80029ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029ce:	480c      	ldr	r0, [pc, #48]	; (8002a00 <reset+0xa4>)
 80029d0:	f7ff f982 	bl	8001cd8 <PIN_LOW>
    delay(100);
 80029d4:	2064      	movs	r0, #100	; 0x64
 80029d6:	f7ff f967 	bl	8001ca8 <delay>
    RESET_IDLE;
 80029da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029de:	4808      	ldr	r0, [pc, #32]	; (8002a00 <reset+0xa4>)
 80029e0:	f7ff f98a 	bl	8001cf8 <PIN_HIGH>
    delay(100);
 80029e4:	2064      	movs	r0, #100	; 0x64
 80029e6:	f7ff f95f 	bl	8001ca8 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 80029ea:	2100      	movs	r1, #0
 80029ec:	20b0      	movs	r0, #176	; 0xb0
 80029ee:	f7ff fa89 	bl	8001f04 <WriteCmdData>
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000404 	.word	0x20000404
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40020400 	.word	0x40020400

08002a04 <read16bits>:

static uint16_t read16bits(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8002a0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a0e:	4871      	ldr	r0, [pc, #452]	; (8002bd4 <read16bits+0x1d0>)
 8002a10:	f7ff f972 	bl	8001cf8 <PIN_HIGH>
 8002a14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a18:	486e      	ldr	r0, [pc, #440]	; (8002bd4 <read16bits+0x1d0>)
 8002a1a:	f7ff f95d 	bl	8001cd8 <PIN_LOW>
 8002a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a22:	486c      	ldr	r0, [pc, #432]	; (8002bd4 <read16bits+0x1d0>)
 8002a24:	f7ff f958 	bl	8001cd8 <PIN_LOW>
 8002a28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a2c:	4869      	ldr	r0, [pc, #420]	; (8002bd4 <read16bits+0x1d0>)
 8002a2e:	f7ff f953 	bl	8001cd8 <PIN_LOW>
 8002a32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a36:	4867      	ldr	r0, [pc, #412]	; (8002bd4 <read16bits+0x1d0>)
 8002a38:	f7ff f94e 	bl	8001cd8 <PIN_LOW>
 8002a3c:	4b66      	ldr	r3, [pc, #408]	; (8002bd8 <read16bits+0x1d4>)
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	085b      	lsrs	r3, r3, #1
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	4b64      	ldr	r3, [pc, #400]	; (8002bdc <read16bits+0x1d8>)
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	0a1b      	lsrs	r3, r3, #8
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	4b5f      	ldr	r3, [pc, #380]	; (8002bdc <read16bits+0x1d8>)
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	4b5b      	ldr	r3, [pc, #364]	; (8002bdc <read16bits+0x1d8>)
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	4b54      	ldr	r3, [pc, #336]	; (8002bd4 <read16bits+0x1d0>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	4313      	orrs	r3, r2
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	4b4f      	ldr	r3, [pc, #316]	; (8002bd4 <read16bits+0x1d0>)
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	4b4b      	ldr	r3, [pc, #300]	; (8002bd4 <read16bits+0x1d0>)
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	4b46      	ldr	r3, [pc, #280]	; (8002bd4 <read16bits+0x1d0>)
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	80fb      	strh	r3, [r7, #6]
 8002ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ad2:	4840      	ldr	r0, [pc, #256]	; (8002bd4 <read16bits+0x1d0>)
 8002ad4:	f7ff f910 	bl	8001cf8 <PIN_HIGH>
 8002ad8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002adc:	483d      	ldr	r0, [pc, #244]	; (8002bd4 <read16bits+0x1d0>)
 8002ade:	f7ff f90b 	bl	8001cf8 <PIN_HIGH>
    READ_8(lo);
 8002ae2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ae6:	483b      	ldr	r0, [pc, #236]	; (8002bd4 <read16bits+0x1d0>)
 8002ae8:	f7ff f906 	bl	8001cf8 <PIN_HIGH>
 8002aec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002af0:	4838      	ldr	r0, [pc, #224]	; (8002bd4 <read16bits+0x1d0>)
 8002af2:	f7ff f8f1 	bl	8001cd8 <PIN_LOW>
 8002af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002afa:	4836      	ldr	r0, [pc, #216]	; (8002bd4 <read16bits+0x1d0>)
 8002afc:	f7ff f8ec 	bl	8001cd8 <PIN_LOW>
 8002b00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b04:	4833      	ldr	r0, [pc, #204]	; (8002bd4 <read16bits+0x1d0>)
 8002b06:	f7ff f8e7 	bl	8001cd8 <PIN_LOW>
 8002b0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b0e:	4831      	ldr	r0, [pc, #196]	; (8002bd4 <read16bits+0x1d0>)
 8002b10:	f7ff f8e2 	bl	8001cd8 <PIN_LOW>
 8002b14:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <read16bits+0x1d4>)
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <read16bits+0x1d8>)
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	4313      	orrs	r3, r2
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <read16bits+0x1d8>)
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	4313      	orrs	r3, r2
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	4b25      	ldr	r3, [pc, #148]	; (8002bdc <read16bits+0x1d8>)
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	4313      	orrs	r3, r2
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <read16bits+0x1d0>)
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <read16bits+0x1d0>)
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	085b      	lsrs	r3, r3, #1
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <read16bits+0x1d0>)
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <read16bits+0x1d0>)
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	717b      	strb	r3, [r7, #5]
 8002ba6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002baa:	480a      	ldr	r0, [pc, #40]	; (8002bd4 <read16bits+0x1d0>)
 8002bac:	f7ff f8a4 	bl	8001cf8 <PIN_HIGH>
 8002bb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bb4:	4807      	ldr	r0, [pc, #28]	; (8002bd4 <read16bits+0x1d0>)
 8002bb6:	f7ff f89f 	bl	8001cf8 <PIN_HIGH>
    return (ret << 8) | lo;
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	b21a      	sxth	r2, r3
 8002bc0:	797b      	ldrb	r3, [r7, #5]
 8002bc2:	b21b      	sxth	r3, r3
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	b21b      	sxth	r3, r3
 8002bc8:	b29b      	uxth	r3, r3
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40021800 	.word	0x40021800
 8002bdc:	40021400 	.word	0x40021400

08002be0 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	460a      	mov	r2, r1
 8002bea:	80fb      	strh	r3, [r7, #6]
 8002bec:	4613      	mov	r3, r2
 8002bee:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8002bf0:	4b64      	ldr	r3, [pc, #400]	; (8002d84 <readReg+0x1a4>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <readReg+0x1c>
        reset();
 8002bf8:	f7ff feb0 	bl	800295c <reset>
    CS_ACTIVE;
 8002bfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c00:	4861      	ldr	r0, [pc, #388]	; (8002d88 <readReg+0x1a8>)
 8002c02:	f7ff f869 	bl	8001cd8 <PIN_LOW>
    WriteCmd(reg);
 8002c06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c0a:	4860      	ldr	r0, [pc, #384]	; (8002d8c <readReg+0x1ac>)
 8002c0c:	f7ff f864 	bl	8001cd8 <PIN_LOW>
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	73fb      	strb	r3, [r7, #15]
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	73bb      	strb	r3, [r7, #14]
 8002c1c:	4b5b      	ldr	r3, [pc, #364]	; (8002d8c <readReg+0x1ac>)
 8002c1e:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002c22:	619a      	str	r2, [r3, #24]
 8002c24:	4b5a      	ldr	r3, [pc, #360]	; (8002d90 <readReg+0x1b0>)
 8002c26:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002c2a:	619a      	str	r2, [r3, #24]
 8002c2c:	4b59      	ldr	r3, [pc, #356]	; (8002d94 <readReg+0x1b4>)
 8002c2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c32:	619a      	str	r2, [r3, #24]
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4a56      	ldr	r2, [pc, #344]	; (8002d94 <readReg+0x1b4>)
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	6193      	str	r3, [r2, #24]
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	021b      	lsls	r3, r3, #8
 8002c44:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	015b      	lsls	r3, r3, #5
 8002c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c50:	431a      	orrs	r2, r3
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	015b      	lsls	r3, r3, #5
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	4b4c      	ldr	r3, [pc, #304]	; (8002d90 <readReg+0x1b0>)
 8002c5e:	619a      	str	r2, [r3, #24]
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	105b      	asrs	r3, r3, #1
 8002c64:	f003 0208 	and.w	r2, r3, #8
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	431a      	orrs	r2, r3
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	105b      	asrs	r3, r3, #1
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	10db      	asrs	r3, r3, #3
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	431a      	orrs	r2, r3
 8002c86:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <readReg+0x1ac>)
 8002c88:	619a      	str	r2, [r3, #24]
 8002c8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c8e:	483f      	ldr	r0, [pc, #252]	; (8002d8c <readReg+0x1ac>)
 8002c90:	f7ff f822 	bl	8001cd8 <PIN_LOW>
 8002c94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c98:	483c      	ldr	r0, [pc, #240]	; (8002d8c <readReg+0x1ac>)
 8002c9a:	f7ff f82d 	bl	8001cf8 <PIN_HIGH>
 8002c9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ca2:	483a      	ldr	r0, [pc, #232]	; (8002d8c <readReg+0x1ac>)
 8002ca4:	f7ff f828 	bl	8001cf8 <PIN_HIGH>
 8002ca8:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <readReg+0x1ac>)
 8002caa:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002cae:	619a      	str	r2, [r3, #24]
 8002cb0:	4b37      	ldr	r3, [pc, #220]	; (8002d90 <readReg+0x1b0>)
 8002cb2:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002cb6:	619a      	str	r2, [r3, #24]
 8002cb8:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <readReg+0x1b4>)
 8002cba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cbe:	619a      	str	r2, [r3, #24]
 8002cc0:	7bbb      	ldrb	r3, [r7, #14]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4a33      	ldr	r2, [pc, #204]	; (8002d94 <readReg+0x1b4>)
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	6193      	str	r3, [r2, #24]
 8002ccc:	7bbb      	ldrb	r3, [r7, #14]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002cd4:	7bbb      	ldrb	r3, [r7, #14]
 8002cd6:	015b      	lsls	r3, r3, #5
 8002cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	7bbb      	ldrb	r3, [r7, #14]
 8002ce0:	015b      	lsls	r3, r3, #5
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	4b29      	ldr	r3, [pc, #164]	; (8002d90 <readReg+0x1b0>)
 8002cea:	619a      	str	r2, [r3, #24]
 8002cec:	7bbb      	ldrb	r3, [r7, #14]
 8002cee:	105b      	asrs	r3, r3, #1
 8002cf0:	f003 0208 	and.w	r2, r3, #8
 8002cf4:	7bbb      	ldrb	r3, [r7, #14]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	7bbb      	ldrb	r3, [r7, #14]
 8002d00:	105b      	asrs	r3, r3, #1
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	431a      	orrs	r2, r3
 8002d08:	7bbb      	ldrb	r3, [r7, #14]
 8002d0a:	10db      	asrs	r3, r3, #3
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	431a      	orrs	r2, r3
 8002d12:	4b1e      	ldr	r3, [pc, #120]	; (8002d8c <readReg+0x1ac>)
 8002d14:	619a      	str	r2, [r3, #24]
 8002d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d1a:	481c      	ldr	r0, [pc, #112]	; (8002d8c <readReg+0x1ac>)
 8002d1c:	f7fe ffdc 	bl	8001cd8 <PIN_LOW>
 8002d20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d24:	4819      	ldr	r0, [pc, #100]	; (8002d8c <readReg+0x1ac>)
 8002d26:	f7fe ffe7 	bl	8001cf8 <PIN_HIGH>
 8002d2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d2e:	4817      	ldr	r0, [pc, #92]	; (8002d8c <readReg+0x1ac>)
 8002d30:	f7fe ffe2 	bl	8001cf8 <PIN_HIGH>
 8002d34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d38:	4814      	ldr	r0, [pc, #80]	; (8002d8c <readReg+0x1ac>)
 8002d3a:	f7fe ffdd 	bl	8001cf8 <PIN_HIGH>
    setReadDir();
 8002d3e:	f7ff f907 	bl	8001f50 <setReadDir>
    delay(1);    //1us should be adequate
 8002d42:	2001      	movs	r0, #1
 8002d44:	f7fe ffb0 	bl	8001ca8 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8002d48:	f7ff fe5c 	bl	8002a04 <read16bits>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	81bb      	strh	r3, [r7, #12]
 8002d50:	797b      	ldrb	r3, [r7, #5]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	717b      	strb	r3, [r7, #5]
 8002d58:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	daf3      	bge.n	8002d48 <readReg+0x168>
    RD_IDLE;
 8002d60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d64:	4809      	ldr	r0, [pc, #36]	; (8002d8c <readReg+0x1ac>)
 8002d66:	f7fe ffc7 	bl	8001cf8 <PIN_HIGH>
    CS_IDLE;
 8002d6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d6e:	4806      	ldr	r0, [pc, #24]	; (8002d88 <readReg+0x1a8>)
 8002d70:	f7fe ffc2 	bl	8001cf8 <PIN_HIGH>
    setWriteDir();
 8002d74:	f7ff f918 	bl	8001fa8 <setWriteDir>
    return ret;
 8002d78:	89bb      	ldrh	r3, [r7, #12]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000404 	.word	0x20000404
 8002d88:	40020400 	.word	0x40020400
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40021400 	.word	0x40021400
 8002d94:	40021800 	.word	0x40021800

08002d98 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ff1a 	bl	8002be0 <readReg>
 8002dac:	4603      	mov	r3, r0
 8002dae:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	2101      	movs	r1, #1
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff13 	bl	8002be0 <readReg>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 8002dbe:	89fb      	ldrh	r3, [r7, #14]
 8002dc0:	041a      	lsls	r2, r3, #16
 8002dc2:	89bb      	ldrh	r3, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff feff 	bl	8002be0 <readReg>
 8002de2:	4603      	mov	r3, r0
 8002de4:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	2101      	movs	r1, #1
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fef8 	bl	8002be0 <readReg>
 8002df0:	4603      	mov	r3, r0
 8002df2:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	2102      	movs	r1, #2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fef1 	bl	8002be0 <readReg>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8002e02:	89fb      	ldrh	r3, [r7, #14]
 8002e04:	061b      	lsls	r3, r3, #24
 8002e06:	89ba      	ldrh	r2, [r7, #12]
 8002e08:	0212      	lsls	r2, r2, #8
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	897a      	ldrh	r2, [r7, #10]
 8002e0e:	0a12      	lsrs	r2, r2, #8
 8002e10:	b292      	uxth	r2, r2
 8002e12:	4313      	orrs	r3, r2
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <tft_init>:


void tft_init(uint16_t ID)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 8002e2e:	4bc4      	ldr	r3, [pc, #784]	; (8003140 <tft_init+0x324>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 8002e34:	4ac3      	ldr	r2, [pc, #780]	; (8003144 <tft_init+0x328>)
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	8013      	strh	r3, [r2, #0]
 8002e3a:	4bc2      	ldr	r3, [pc, #776]	; (8003144 <tft_init+0x328>)
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	f249 0290 	movw	r2, #37008	; 0x9090
 8002e42:	4293      	cmp	r3, r2
 8002e44:	f000 8164 	beq.w	8003110 <tft_init+0x2f4>
 8002e48:	f249 0290 	movw	r2, #37008	; 0x9090
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	dc7f      	bgt.n	8002f50 <tft_init+0x134>
 8002e50:	f244 7247 	movw	r2, #18247	; 0x4747
 8002e54:	4293      	cmp	r3, r2
 8002e56:	f000 8145 	beq.w	80030e4 <tft_init+0x2c8>
 8002e5a:	f244 7247 	movw	r2, #18247	; 0x4747
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	dc34      	bgt.n	8002ecc <tft_init+0xb0>
 8002e62:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8002e66:	f000 8104 	beq.w	8003072 <tft_init+0x256>
 8002e6a:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8002e6e:	dc13      	bgt.n	8002e98 <tft_init+0x7c>
 8002e70:	2b99      	cmp	r3, #153	; 0x99
 8002e72:	f000 8181 	beq.w	8003178 <tft_init+0x35c>
 8002e76:	2b99      	cmp	r3, #153	; 0x99
 8002e78:	dc03      	bgt.n	8002e82 <tft_init+0x66>
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	f000 8191 	beq.w	80031a2 <tft_init+0x386>
 8002e80:	e268      	b.n	8003354 <tft_init+0x538>
 8002e82:	f241 5205 	movw	r2, #5381	; 0x1505
 8002e86:	4293      	cmp	r3, r2
 8002e88:	f000 8195 	beq.w	80031b6 <tft_init+0x39a>
 8002e8c:	f241 5211 	movw	r2, #5393	; 0x1511
 8002e90:	4293      	cmp	r3, r2
 8002e92:	f000 80da 	beq.w	800304a <tft_init+0x22e>
 8002e96:	e25d      	b.n	8003354 <tft_init+0x538>
 8002e98:	f241 5281 	movw	r2, #5505	; 0x1581
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	f000 81f4 	beq.w	800328a <tft_init+0x46e>
 8002ea2:	f241 5281 	movw	r2, #5505	; 0x1581
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	dc05      	bgt.n	8002eb6 <tft_init+0x9a>
 8002eaa:	f241 5226 	movw	r2, #5414	; 0x1526
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	f000 80e8 	beq.w	8003084 <tft_init+0x268>
 8002eb4:	e24e      	b.n	8003354 <tft_init+0x538>
 8002eb6:	f241 6202 	movw	r2, #5634	; 0x1602
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	f000 81af 	beq.w	800321e <tft_init+0x402>
 8002ec0:	f242 0253 	movw	r2, #8275	; 0x2053
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	f000 81b3 	beq.w	8003230 <tft_init+0x414>
 8002eca:	e243      	b.n	8003354 <tft_init+0x538>
 8002ecc:	f247 5275 	movw	r2, #30069	; 0x7575
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	f000 810c 	beq.w	80030ee <tft_init+0x2d2>
 8002ed6:	f247 5275 	movw	r2, #30069	; 0x7575
 8002eda:	4293      	cmp	r3, r2
 8002edc:	dc19      	bgt.n	8002f12 <tft_init+0xf6>
 8002ede:	f245 4208 	movw	r2, #21512	; 0x5408
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	f000 8162 	beq.w	80031ac <tft_init+0x390>
 8002ee8:	f245 4208 	movw	r2, #21512	; 0x5408
 8002eec:	4293      	cmp	r3, r2
 8002eee:	dc05      	bgt.n	8002efc <tft_init+0xe0>
 8002ef0:	f245 3210 	movw	r2, #21264	; 0x5310
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	f000 80ce 	beq.w	8003096 <tft_init+0x27a>
 8002efa:	e22b      	b.n	8003354 <tft_init+0x538>
 8002efc:	f246 7267 	movw	r2, #26471	; 0x6767
 8002f00:	4293      	cmp	r3, r2
 8002f02:	f000 80f4 	beq.w	80030ee <tft_init+0x2d2>
 8002f06:	f646 0209 	movw	r2, #26633	; 0x6809
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	f000 815e 	beq.w	80031cc <tft_init+0x3b0>
 8002f10:	e220      	b.n	8003354 <tft_init+0x538>
 8002f12:	f247 7296 	movw	r2, #30614	; 0x7796
 8002f16:	4293      	cmp	r3, r2
 8002f18:	f000 81e8 	beq.w	80032ec <tft_init+0x4d0>
 8002f1c:	f247 7296 	movw	r2, #30614	; 0x7796
 8002f20:	4293      	cmp	r3, r2
 8002f22:	dc0a      	bgt.n	8002f3a <tft_init+0x11e>
 8002f24:	f247 7289 	movw	r2, #30601	; 0x7789
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	f000 80c9 	beq.w	80030c0 <tft_init+0x2a4>
 8002f2e:	f247 7293 	movw	r2, #30611	; 0x7793
 8002f32:	4293      	cmp	r3, r2
 8002f34:	f000 81ff 	beq.w	8003336 <tft_init+0x51a>
 8002f38:	e20c      	b.n	8003354 <tft_init+0x538>
 8002f3a:	f248 0231 	movw	r2, #32817	; 0x8031
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	f000 80c7 	beq.w	80030d2 <tft_init+0x2b6>
 8002f44:	f248 3257 	movw	r2, #33623	; 0x8357
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	f000 80dc 	beq.w	8003106 <tft_init+0x2ea>
 8002f4e:	e201      	b.n	8003354 <tft_init+0x538>
 8002f50:	f249 3240 	movw	r2, #37696	; 0x9340
 8002f54:	4293      	cmp	r3, r2
 8002f56:	f000 818a 	beq.w	800326e <tft_init+0x452>
 8002f5a:	f249 3240 	movw	r2, #37696	; 0x9340
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	dc3c      	bgt.n	8002fdc <tft_init+0x1c0>
 8002f62:	f249 3228 	movw	r2, #37672	; 0x9328
 8002f66:	4293      	cmp	r3, r2
 8002f68:	f000 8135 	beq.w	80031d6 <tft_init+0x3ba>
 8002f6c:	f249 3228 	movw	r2, #37672	; 0x9328
 8002f70:	4293      	cmp	r3, r2
 8002f72:	dc19      	bgt.n	8002fa8 <tft_init+0x18c>
 8002f74:	f249 3220 	movw	r2, #37664	; 0x9320
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	f000 811c 	beq.w	80031b6 <tft_init+0x39a>
 8002f7e:	f249 3220 	movw	r2, #37664	; 0x9320
 8002f82:	4293      	cmp	r3, r2
 8002f84:	dc05      	bgt.n	8002f92 <tft_init+0x176>
 8002f86:	f249 3202 	movw	r2, #37634	; 0x9302
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	f000 815a 	beq.w	8003244 <tft_init+0x428>
 8002f90:	e1e0      	b.n	8003354 <tft_init+0x538>
 8002f92:	f249 3225 	movw	r2, #37669	; 0x9325
 8002f96:	4293      	cmp	r3, r2
 8002f98:	f000 811d 	beq.w	80031d6 <tft_init+0x3ba>
 8002f9c:	f249 3227 	movw	r2, #37671	; 0x9327
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	f000 8128 	beq.w	80031f6 <tft_init+0x3da>
 8002fa6:	e1d5      	b.n	8003354 <tft_init+0x538>
 8002fa8:	f249 3231 	movw	r2, #37681	; 0x9331
 8002fac:	4293      	cmp	r3, r2
 8002fae:	f000 8117 	beq.w	80031e0 <tft_init+0x3c4>
 8002fb2:	f249 3231 	movw	r2, #37681	; 0x9331
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	dc05      	bgt.n	8002fc6 <tft_init+0x1aa>
 8002fba:	f249 3229 	movw	r2, #37673	; 0x9329
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	f000 814a 	beq.w	8003258 <tft_init+0x43c>
 8002fc4:	e1c6      	b.n	8003354 <tft_init+0x538>
 8002fc6:	f249 3235 	movw	r2, #37685	; 0x9335
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	f000 8108 	beq.w	80031e0 <tft_init+0x3c4>
 8002fd0:	f249 3238 	movw	r2, #37688	; 0x9338
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	f000 813a 	beq.w	800324e <tft_init+0x432>
 8002fda:	e1bb      	b.n	8003354 <tft_init+0x538>
 8002fdc:	f249 4288 	movw	r2, #38024	; 0x9488
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	dc14      	bgt.n	800300e <tft_init+0x1f2>
 8002fe4:	f249 4287 	movw	r2, #38023	; 0x9487
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	f280 8184 	bge.w	80032f6 <tft_init+0x4da>
 8002fee:	f249 4281 	movw	r2, #38017	; 0x9481
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	f000 814e 	beq.w	8003294 <tft_init+0x478>
 8002ff8:	f249 4286 	movw	r2, #38022	; 0x9486
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	f000 8160 	beq.w	80032c2 <tft_init+0x4a6>
 8003002:	f249 3241 	movw	r2, #37697	; 0x9341
 8003006:	4293      	cmp	r3, r2
 8003008:	f000 8136 	beq.w	8003278 <tft_init+0x45c>
 800300c:	e1a2      	b.n	8003354 <tft_init+0x538>
 800300e:	f24b 5205 	movw	r2, #46341	; 0xb505
 8003012:	4293      	cmp	r3, r2
 8003014:	f000 8186 	beq.w	8003324 <tft_init+0x508>
 8003018:	f24b 5205 	movw	r2, #46341	; 0xb505
 800301c:	4293      	cmp	r3, r2
 800301e:	dc09      	bgt.n	8003034 <tft_init+0x218>
 8003020:	f249 5295 	movw	r2, #38293	; 0x9595
 8003024:	4293      	cmp	r3, r2
 8003026:	d062      	beq.n	80030ee <tft_init+0x2d2>
 8003028:	f64a 4211 	movw	r2, #44049	; 0xac11
 800302c:	4293      	cmp	r3, r2
 800302e:	f000 8104 	beq.w	800323a <tft_init+0x41e>
 8003032:	e18f      	b.n	8003354 <tft_init+0x538>
 8003034:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003038:	4293      	cmp	r3, r2
 800303a:	f000 817c 	beq.w	8003336 <tft_init+0x51a>
 800303e:	f24c 5205 	movw	r2, #50437	; 0xc505
 8003042:	4293      	cmp	r3, r2
 8003044:	f000 816e 	beq.w	8003324 <tft_init+0x508>
 8003048:	e184      	b.n	8003354 <tft_init+0x538>
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 800304a:	4b3f      	ldr	r3, [pc, #252]	; (8003148 <tft_init+0x32c>)
 800304c:	2203      	movs	r2, #3
 800304e:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 8003050:	4b3e      	ldr	r3, [pc, #248]	; (800314c <tft_init+0x330>)
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	2303      	movs	r3, #3
 8003056:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003058:	4b3d      	ldr	r3, [pc, #244]	; (8003150 <tft_init+0x334>)
 800305a:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003062:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003064:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <tft_init+0x338>)
 8003066:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800306e:	801a      	strh	r2, [r3, #0]
        break;
 8003070:	e176      	b.n	8003360 <tft_init+0x544>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003072:	4b35      	ldr	r3, [pc, #212]	; (8003148 <tft_init+0x32c>)
 8003074:	f240 4213 	movw	r2, #1043	; 0x413
 8003078:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 800307a:	4b37      	ldr	r3, [pc, #220]	; (8003158 <tft_init+0x33c>)
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	2306      	movs	r3, #6
 8003080:	837b      	strh	r3, [r7, #26]
        break;
 8003082:	e16d      	b.n	8003360 <tft_init+0x544>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003084:	4b30      	ldr	r3, [pc, #192]	; (8003148 <tft_init+0x32c>)
 8003086:	f240 4213 	movw	r2, #1043	; 0x413
 800308a:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 800308c:	4b33      	ldr	r3, [pc, #204]	; (800315c <tft_init+0x340>)
 800308e:	61fb      	str	r3, [r7, #28]
 8003090:	230c      	movs	r3, #12
 8003092:	837b      	strh	r3, [r7, #26]
        break;
 8003094:	e164      	b.n	8003360 <tft_init+0x544>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8003096:	4b2c      	ldr	r3, [pc, #176]	; (8003148 <tft_init+0x32c>)
 8003098:	f640 6213 	movw	r2, #3603	; 0xe13
 800309c:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 800309e:	4b30      	ldr	r3, [pc, #192]	; (8003160 <tft_init+0x344>)
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	2302      	movs	r3, #2
 80030a4:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80030a6:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <tft_init+0x334>)
 80030a8:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80030b0:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80030b2:	4b28      	ldr	r3, [pc, #160]	; (8003154 <tft_init+0x338>)
 80030b4:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030bc:	801a      	strh	r2, [r3, #0]
        break;
 80030be:	e14f      	b.n	8003360 <tft_init+0x544>
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80030c0:	4b21      	ldr	r3, [pc, #132]	; (8003148 <tft_init+0x32c>)
 80030c2:	f240 4213 	movw	r2, #1043	; 0x413
 80030c6:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 80030c8:	4b26      	ldr	r3, [pc, #152]	; (8003164 <tft_init+0x348>)
 80030ca:	61fb      	str	r3, [r7, #28]
 80030cc:	2341      	movs	r3, #65	; 0x41
 80030ce:	837b      	strh	r3, [r7, #26]
        break;
 80030d0:	e146      	b.n	8003360 <tft_init+0x544>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 80030d2:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <tft_init+0x32c>)
 80030d4:	f241 4213 	movw	r2, #5139	; 0x1413
 80030d8:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 80030da:	4b23      	ldr	r3, [pc, #140]	; (8003168 <tft_init+0x34c>)
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	2312      	movs	r3, #18
 80030e0:	837b      	strh	r3, [r7, #26]
        break;
 80030e2:	e13d      	b.n	8003360 <tft_init+0x544>

#ifdef SUPPORT_8347D
    case 0x4747:       //HX8347-D
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | AUTO_READINC | READ_24BITS;
 80030e4:	4b18      	ldr	r3, [pc, #96]	; (8003148 <tft_init+0x32c>)
 80030e6:	f241 6213 	movw	r2, #5651	; 0x1613
 80030ea:	801a      	strh	r2, [r3, #0]
		goto common_8347DGI;
 80030ec:	e003      	b.n	80030f6 <tft_init+0x2da>
    case 0x6767:       //HX8367-A
	case 0x7575:       //HX8347-G
	case 0x9595:       //HX8347-I
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS;
 80030ee:	4b16      	ldr	r3, [pc, #88]	; (8003148 <tft_init+0x32c>)
 80030f0:	f241 4201 	movw	r2, #5121	; 0x1401
 80030f4:	801a      	strh	r2, [r3, #0]
      common_8347DGI:
		is8347 = 1;
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <tft_init+0x350>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	701a      	strb	r2, [r3, #0]
            TFTLCD_DELAY8, 40,
            0x28, 1, 0x3F,      //GON=1, DTE=1, D=1100

            0x16, 1, 0x18,
        };
        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
 80030fc:	2170      	movs	r1, #112	; 0x70
 80030fe:	481c      	ldr	r0, [pc, #112]	; (8003170 <tft_init+0x354>)
 8003100:	f7ff fba4 	bl	800284c <init_table>
        break;
 8003104:	e12c      	b.n	8003360 <tft_init+0x544>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <tft_init+0x32c>)
 8003108:	f241 4203 	movw	r2, #5123	; 0x1403
 800310c:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 800310e:	e003      	b.n	8003118 <tft_init+0x2fc>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8003110:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <tft_init+0x32c>)
 8003112:	f241 4213 	movw	r2, #5139	; 0x1413
 8003116:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 8003118:	2301      	movs	r3, #1
 800311a:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 800311c:	4b15      	ldr	r3, [pc, #84]	; (8003174 <tft_init+0x358>)
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	2302      	movs	r3, #2
 8003122:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <tft_init+0x334>)
 8003126:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800312e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <tft_init+0x338>)
 8003132:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800313a:	801a      	strh	r2, [r3, #0]
        break;
 800313c:	e110      	b.n	8003360 <tft_init+0x544>
 800313e:	bf00      	nop
 8003140:	20000758 	.word	0x20000758
 8003144:	20000756 	.word	0x20000756
 8003148:	20000748 	.word	0x20000748
 800314c:	080093dc 	.word	0x080093dc
 8003150:	08001d8d 	.word	0x08001d8d
 8003154:	08001d75 	.word	0x08001d75
 8003158:	080093e0 	.word	0x080093e0
 800315c:	080093e8 	.word	0x080093e8
 8003160:	080093f4 	.word	0x080093f4
 8003164:	080093f8 	.word	0x080093f8
 8003168:	0800943c 	.word	0x0800943c
 800316c:	20000405 	.word	0x20000405
 8003170:	08009450 	.word	0x08009450
 8003174:	080094c0 	.word	0x080094c0

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8003178:	4ba3      	ldr	r3, [pc, #652]	; (8003408 <tft_init+0x5ec>)
 800317a:	f241 4213 	movw	r2, #5139	; 0x1413
 800317e:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 8003180:	4ba2      	ldr	r3, [pc, #648]	; (800340c <tft_init+0x5f0>)
 8003182:	61fb      	str	r3, [r7, #28]
 8003184:	231d      	movs	r3, #29
 8003186:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003188:	4ba1      	ldr	r3, [pc, #644]	; (8003410 <tft_init+0x5f4>)
 800318a:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003192:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003194:	4b9f      	ldr	r3, [pc, #636]	; (8003414 <tft_init+0x5f8>)
 8003196:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800319e:	801a      	strh	r2, [r3, #0]
        break;
 80031a0:	e0de      	b.n	8003360 <tft_init+0x544>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 80031a2:	4b99      	ldr	r3, [pc, #612]	; (8003408 <tft_init+0x5ec>)
 80031a4:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 80031a8:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 80031aa:	e008      	b.n	80031be <tft_init+0x3a2>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 80031ac:	4b96      	ldr	r3, [pc, #600]	; (8003408 <tft_init+0x5ec>)
 80031ae:	f241 0204 	movw	r2, #4100	; 0x1004
 80031b2:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 80031b4:	e003      	b.n	80031be <tft_init+0x3a2>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 80031b6:	4b94      	ldr	r3, [pc, #592]	; (8003408 <tft_init+0x5ec>)
 80031b8:	f241 0204 	movw	r2, #4100	; 0x1004
 80031bc:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 80031be:	2301      	movs	r3, #1
 80031c0:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 80031c2:	21d8      	movs	r1, #216	; 0xd8
 80031c4:	4894      	ldr	r0, [pc, #592]	; (8003418 <tft_init+0x5fc>)
 80031c6:	f7ff fb99 	bl	80028fc <init_table16>
        break;
 80031ca:	e0c9      	b.n	8003360 <tft_init+0x544>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 80031cc:	4b8e      	ldr	r3, [pc, #568]	; (8003408 <tft_init+0x5ec>)
 80031ce:	f241 1202 	movw	r2, #4354	; 0x1102
 80031d2:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 80031d4:	e008      	b.n	80031e8 <tft_init+0x3cc>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 80031d6:	4b8c      	ldr	r3, [pc, #560]	; (8003408 <tft_init+0x5ec>)
 80031d8:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 80031dc:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 80031de:	e003      	b.n	80031e8 <tft_init+0x3cc>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 80031e0:	4b89      	ldr	r3, [pc, #548]	; (8003408 <tft_init+0x5ec>)
 80031e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031e6:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 80031e8:	2301      	movs	r3, #1
 80031ea:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 80031ec:	21cc      	movs	r1, #204	; 0xcc
 80031ee:	488b      	ldr	r0, [pc, #556]	; (800341c <tft_init+0x600>)
 80031f0:	f7ff fb84 	bl	80028fc <init_table16>
        break;
 80031f4:	e0b4      	b.n	8003360 <tft_init+0x544>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80031f6:	4b84      	ldr	r3, [pc, #528]	; (8003408 <tft_init+0x5ec>)
 80031f8:	f240 4203 	movw	r2, #1027	; 0x403
 80031fc:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 80031fe:	4b88      	ldr	r3, [pc, #544]	; (8003420 <tft_init+0x604>)
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	231e      	movs	r3, #30
 8003204:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003206:	4b82      	ldr	r3, [pc, #520]	; (8003410 <tft_init+0x5f4>)
 8003208:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003210:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003212:	4b80      	ldr	r3, [pc, #512]	; (8003414 <tft_init+0x5f8>)
 8003214:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	22f0      	movs	r2, #240	; 0xf0
 800321a:	801a      	strh	r2, [r3, #0]
        break;
 800321c:	e0a0      	b.n	8003360 <tft_init+0x544>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 800321e:	4b7a      	ldr	r3, [pc, #488]	; (8003408 <tft_init+0x5ec>)
 8003220:	f240 4203 	movw	r2, #1027	; 0x403
 8003224:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 8003226:	4b7f      	ldr	r3, [pc, #508]	; (8003424 <tft_init+0x608>)
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	2306      	movs	r3, #6
 800322c:	837b      	strh	r3, [r7, #26]
        break;
 800322e:	e097      	b.n	8003360 <tft_init+0x544>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 8003230:	4b75      	ldr	r3, [pc, #468]	; (8003408 <tft_init+0x5ec>)
 8003232:	f241 4217 	movw	r2, #5143	; 0x1417
 8003236:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003238:	e012      	b.n	8003260 <tft_init+0x444>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 800323a:	4b73      	ldr	r3, [pc, #460]	; (8003408 <tft_init+0x5ec>)
 800323c:	f241 4213 	movw	r2, #5139	; 0x1413
 8003240:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003242:	e00d      	b.n	8003260 <tft_init+0x444>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8003244:	4b70      	ldr	r3, [pc, #448]	; (8003408 <tft_init+0x5ec>)
 8003246:	f240 4203 	movw	r2, #1027	; 0x403
 800324a:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800324c:	e008      	b.n	8003260 <tft_init+0x444>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800324e:	4b6e      	ldr	r3, [pc, #440]	; (8003408 <tft_init+0x5ec>)
 8003250:	f240 4213 	movw	r2, #1043	; 0x413
 8003254:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003256:	e003      	b.n	8003260 <tft_init+0x444>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 8003258:	4b6b      	ldr	r3, [pc, #428]	; (8003408 <tft_init+0x5ec>)
 800325a:	f241 6203 	movw	r2, #5635	; 0x1603
 800325e:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 8003260:	2301      	movs	r3, #1
 8003262:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8003264:	4b70      	ldr	r3, [pc, #448]	; (8003428 <tft_init+0x60c>)
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	2303      	movs	r3, #3
 800326a:	837b      	strh	r3, [r7, #26]
        break;
 800326c:	e078      	b.n	8003360 <tft_init+0x544>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 800326e:	4b66      	ldr	r3, [pc, #408]	; (8003408 <tft_init+0x5ec>)
 8003270:	f241 4213 	movw	r2, #5139	; 0x1413
 8003274:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 8003276:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003278:	4b63      	ldr	r3, [pc, #396]	; (8003408 <tft_init+0x5ec>)
 800327a:	f240 4213 	movw	r2, #1043	; 0x413
 800327e:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 8003280:	4b6a      	ldr	r3, [pc, #424]	; (800342c <tft_init+0x610>)
 8003282:	61fb      	str	r3, [r7, #28]
 8003284:	2365      	movs	r3, #101	; 0x65
 8003286:	837b      	strh	r3, [r7, #26]
        break;
 8003288:	e06a      	b.n	8003360 <tft_init+0x544>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 800328a:	4b5f      	ldr	r3, [pc, #380]	; (8003408 <tft_init+0x5ec>)
 800328c:	f240 4213 	movw	r2, #1043	; 0x413
 8003290:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 8003292:	e003      	b.n	800329c <tft_init+0x480>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 8003294:	4b5c      	ldr	r3, [pc, #368]	; (8003408 <tft_init+0x5ec>)
 8003296:	f240 4207 	movw	r2, #1031	; 0x407
 800329a:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 800329c:	2301      	movs	r3, #1
 800329e:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 80032a0:	4b63      	ldr	r3, [pc, #396]	; (8003430 <tft_init+0x614>)
 80032a2:	61fb      	str	r3, [r7, #28]
 80032a4:	2345      	movs	r3, #69	; 0x45
 80032a6:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 80032a8:	4b59      	ldr	r3, [pc, #356]	; (8003410 <tft_init+0x5f4>)
 80032aa:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80032b2:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80032b4:	4b57      	ldr	r3, [pc, #348]	; (8003414 <tft_init+0x5f8>)
 80032b6:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032be:	801a      	strh	r2, [r3, #0]
        break;
 80032c0:	e04e      	b.n	8003360 <tft_init+0x544>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 80032c2:	4b51      	ldr	r3, [pc, #324]	; (8003408 <tft_init+0x5ec>)
 80032c4:	f240 4203 	movw	r2, #1027	; 0x403
 80032c8:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 80032ca:	4b5a      	ldr	r3, [pc, #360]	; (8003434 <tft_init+0x618>)
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	233b      	movs	r3, #59	; 0x3b
 80032d0:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80032d2:	4b4f      	ldr	r3, [pc, #316]	; (8003410 <tft_init+0x5f4>)
 80032d4:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80032dc:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80032de:	4b4d      	ldr	r3, [pc, #308]	; (8003414 <tft_init+0x5f8>)
 80032e0:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032e8:	801a      	strh	r2, [r3, #0]
        break;
 80032ea:	e039      	b.n	8003360 <tft_init+0x544>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 80032ec:	4b46      	ldr	r3, [pc, #280]	; (8003408 <tft_init+0x5ec>)
 80032ee:	f240 4203 	movw	r2, #1027	; 0x403
 80032f2:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 80032f4:	e003      	b.n	80032fe <tft_init+0x4e2>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80032f6:	4b44      	ldr	r3, [pc, #272]	; (8003408 <tft_init+0x5ec>)
 80032f8:	f240 4213 	movw	r2, #1043	; 0x413
 80032fc:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 80032fe:	2301      	movs	r3, #1
 8003300:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 8003302:	4b4d      	ldr	r3, [pc, #308]	; (8003438 <tft_init+0x61c>)
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	232b      	movs	r3, #43	; 0x2b
 8003308:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800330a:	4b41      	ldr	r3, [pc, #260]	; (8003410 <tft_init+0x5f4>)
 800330c:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003314:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003316:	4b3f      	ldr	r3, [pc, #252]	; (8003414 <tft_init+0x5f8>)
 8003318:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003320:	801a      	strh	r2, [r3, #0]
        break;
 8003322:	e01d      	b.n	8003360 <tft_init+0x544>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 8003324:	4b38      	ldr	r3, [pc, #224]	; (8003408 <tft_init+0x5ec>)
 8003326:	f241 0208 	movw	r2, #4104	; 0x1008
 800332a:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 800332c:	21b0      	movs	r1, #176	; 0xb0
 800332e:	4843      	ldr	r0, [pc, #268]	; (800343c <tft_init+0x620>)
 8003330:	f7ff fae4 	bl	80028fc <init_table16>
        break;
 8003334:	e014      	b.n	8003360 <tft_init+0x544>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 8003336:	4b34      	ldr	r3, [pc, #208]	; (8003408 <tft_init+0x5ec>)
 8003338:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800333c:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 800333e:	21c0      	movs	r1, #192	; 0xc0
 8003340:	483f      	ldr	r0, [pc, #252]	; (8003440 <tft_init+0x624>)
 8003342:	f7ff fadb 	bl	80028fc <init_table16>
        p16 = (int16_t *) & height;
 8003346:	4b32      	ldr	r3, [pc, #200]	; (8003410 <tft_init+0x5f4>)
 8003348:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003350:	801a      	strh	r2, [r3, #0]
        break;
 8003352:	e005      	b.n	8003360 <tft_init+0x544>
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 8003354:	4b2f      	ldr	r3, [pc, #188]	; (8003414 <tft_init+0x5f8>)
 8003356:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2200      	movs	r2, #0
 800335c:	801a      	strh	r2, [r3, #0]
        break;
 800335e:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8003360:	4b29      	ldr	r3, [pc, #164]	; (8003408 <tft_init+0x5ec>)
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf14      	ite	ne
 800336c:	2301      	movne	r3, #1
 800336e:	2300      	moveq	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	b29a      	uxth	r2, r3
 8003374:	4b33      	ldr	r3, [pc, #204]	; (8003444 <tft_init+0x628>)
 8003376:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <tft_init+0x57e>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 800337e:	2109      	movs	r1, #9
 8003380:	4831      	ldr	r0, [pc, #196]	; (8003448 <tft_init+0x62c>)
 8003382:	f7ff fa63 	bl	800284c <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8003386:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800338a:	4619      	mov	r1, r3
 800338c:	69f8      	ldr	r0, [r7, #28]
 800338e:	f7ff fa5d 	bl	800284c <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8003392:	2106      	movs	r1, #6
 8003394:	482d      	ldr	r0, [pc, #180]	; (800344c <tft_init+0x630>)
 8003396:	f7ff fa59 	bl	800284c <init_table>
    }
    setRotation(0);             //PORTRAIT
 800339a:	2000      	movs	r0, #0
 800339c:	f000 ff7a 	bl	8004294 <setRotation>
    invertDisplay(false);
 80033a0:	2000      	movs	r0, #0
 80033a2:	f001 fd45 	bl	8004e30 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 80033a6:	4b2a      	ldr	r3, [pc, #168]	; (8003450 <tft_init+0x634>)
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	f249 4288 	movw	r2, #38024	; 0x9488
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d125      	bne.n	80033fe <tft_init+0x5e2>
		is555 = 0;
 80033b2:	4b28      	ldr	r3, [pc, #160]	; (8003454 <tft_init+0x638>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 80033b8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80033bc:	2100      	movs	r1, #0
 80033be:	2000      	movs	r0, #0
 80033c0:	f001 f9e8 	bl	8004794 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 80033c4:	2100      	movs	r1, #0
 80033c6:	2000      	movs	r0, #0
 80033c8:	f7fe fd84 	bl	8001ed4 <readPixel>
 80033cc:	4603      	mov	r3, r0
 80033ce:	461a      	mov	r2, r3
 80033d0:	f64f 731f 	movw	r3, #65311	; 0xff1f
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d112      	bne.n	80033fe <tft_init+0x5e2>
			uint8_t pixfmt = 0x06;
 80033d8:	2306      	movs	r3, #6
 80033da:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 80033dc:	f107 030f 	add.w	r3, r7, #15
 80033e0:	2201      	movs	r2, #1
 80033e2:	4619      	mov	r1, r3
 80033e4:	203a      	movs	r0, #58	; 0x3a
 80033e6:	f7fe fd9f 	bl	8001f28 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 80033ea:	4b07      	ldr	r3, [pc, #28]	; (8003408 <tft_init+0x5ec>)
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	f023 0310 	bic.w	r3, r3, #16
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <tft_init+0x5ec>)
 80033f6:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 80033f8:	4b16      	ldr	r3, [pc, #88]	; (8003454 <tft_init+0x638>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 80033fe:	bf00      	nop
 8003400:	3720      	adds	r7, #32
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000748 	.word	0x20000748
 800340c:	080094c4 	.word	0x080094c4
 8003410:	08001d8d 	.word	0x08001d8d
 8003414:	08001d75 	.word	0x08001d75
 8003418:	080094e4 	.word	0x080094e4
 800341c:	080095bc 	.word	0x080095bc
 8003420:	08009688 	.word	0x08009688
 8003424:	080096a8 	.word	0x080096a8
 8003428:	080096b0 	.word	0x080096b0
 800342c:	080096b4 	.word	0x080096b4
 8003430:	0800971c 	.word	0x0800971c
 8003434:	08009764 	.word	0x08009764
 8003438:	080097a0 	.word	0x080097a0
 800343c:	080097cc 	.word	0x080097cc
 8003440:	0800987c 	.word	0x0800987c
 8003444:	2000074c 	.word	0x2000074c
 8003448:	0800993c 	.word	0x0800993c
 800344c:	08009948 	.word	0x08009948
 8003450:	20000756 	.word	0x20000756
 8003454:	20000406 	.word	0x20000406

08003458 <readID>:




uint16_t readID(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 800345e:	2100      	movs	r1, #0
 8003460:	2000      	movs	r0, #0
 8003462:	f7ff fbbd 	bl	8002be0 <readReg>
 8003466:	4603      	mov	r3, r0
 8003468:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 800346a:	89fb      	ldrh	r3, [r7, #14]
 800346c:	f245 4208 	movw	r2, #21512	; 0x5408
 8003470:	4293      	cmp	r3, r2
 8003472:	d102      	bne.n	800347a <readID+0x22>
        return 0x5408;
 8003474:	f245 4308 	movw	r3, #21512	; 0x5408
 8003478:	e128      	b.n	80036cc <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 800347a:	89fb      	ldrh	r3, [r7, #14]
 800347c:	f245 4220 	movw	r2, #21536	; 0x5420
 8003480:	4293      	cmp	r3, r2
 8003482:	d102      	bne.n	800348a <readID+0x32>
        return 0x5420;
 8003484:	f245 4320 	movw	r3, #21536	; 0x5420
 8003488:	e120      	b.n	80036cc <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 800348a:	89fb      	ldrh	r3, [r7, #14]
 800348c:	f648 1289 	movw	r2, #35209	; 0x8989
 8003490:	4293      	cmp	r3, r2
 8003492:	d102      	bne.n	800349a <readID+0x42>
        return 0x1289;
 8003494:	f241 2389 	movw	r3, #4745	; 0x1289
 8003498:	e118      	b.n	80036cc <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 800349a:	2100      	movs	r1, #0
 800349c:	2067      	movs	r0, #103	; 0x67
 800349e:	f7ff fb9f 	bl	8002be0 <readReg>
 80034a2:	4603      	mov	r3, r0
 80034a4:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 80034a6:	89fb      	ldrh	r3, [r7, #14]
 80034a8:	f244 7247 	movw	r2, #18247	; 0x4747
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d102      	bne.n	80034b6 <readID+0x5e>
        return 0x8347;
 80034b0:	f248 3347 	movw	r3, #33607	; 0x8347
 80034b4:	e10a      	b.n	80036cc <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 80034b6:	20a1      	movs	r0, #161	; 0xa1
 80034b8:	f7ff fc6e 	bl	8002d98 <readReg32>
 80034bc:	4603      	mov	r3, r0
 80034be:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 80034c0:	89fb      	ldrh	r3, [r7, #14]
 80034c2:	f246 1201 	movw	r2, #24833	; 0x6101
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d102      	bne.n	80034d0 <readID+0x78>
        return 0x1963;
 80034ca:	f641 1363 	movw	r3, #6499	; 0x1963
 80034ce:	e0fd      	b.n	80036cc <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 80034d0:	89fb      	ldrh	r3, [r7, #14]
 80034d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d102      	bne.n	80034e0 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 80034da:	f241 5326 	movw	r3, #5414	; 0x1526
 80034de:	e0f5      	b.n	80036cc <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 80034e0:	20bf      	movs	r0, #191	; 0xbf
 80034e2:	f7ff fc74 	bl	8002dce <readReg40>
 80034e6:	4603      	mov	r3, r0
 80034e8:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 80034ea:	89fb      	ldrh	r3, [r7, #14]
 80034ec:	f248 3257 	movw	r2, #33623	; 0x8357
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d102      	bne.n	80034fa <readID+0xa2>
        return 0x8357;
 80034f4:	f248 3357 	movw	r3, #33623	; 0x8357
 80034f8:	e0e8      	b.n	80036cc <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 80034fa:	89fb      	ldrh	r3, [r7, #14]
 80034fc:	f249 4281 	movw	r2, #38017	; 0x9481
 8003500:	4293      	cmp	r3, r2
 8003502:	d102      	bne.n	800350a <readID+0xb2>
        return 0x9481;
 8003504:	f249 4381 	movw	r3, #38017	; 0x9481
 8003508:	e0e0      	b.n	80036cc <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 800350a:	89fb      	ldrh	r3, [r7, #14]
 800350c:	f241 5211 	movw	r2, #5393	; 0x1511
 8003510:	4293      	cmp	r3, r2
 8003512:	d102      	bne.n	800351a <readID+0xc2>
        return 0x1511;
 8003514:	f241 5311 	movw	r3, #5393	; 0x1511
 8003518:	e0d8      	b.n	80036cc <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 800351a:	89fb      	ldrh	r3, [r7, #14]
 800351c:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8003520:	d102      	bne.n	8003528 <readID+0xd0>
        return 0x1520;
 8003522:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 8003526:	e0d1      	b.n	80036cc <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8003528:	89fb      	ldrh	r3, [r7, #14]
 800352a:	f241 5226 	movw	r2, #5414	; 0x1526
 800352e:	4293      	cmp	r3, r2
 8003530:	d102      	bne.n	8003538 <readID+0xe0>
        return 0x1526;
 8003532:	f241 5326 	movw	r3, #5414	; 0x1526
 8003536:	e0c9      	b.n	80036cc <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8003538:	89fb      	ldrh	r3, [r7, #14]
 800353a:	f241 5281 	movw	r2, #5505	; 0x1581
 800353e:	4293      	cmp	r3, r2
 8003540:	d102      	bne.n	8003548 <readID+0xf0>
        return 0x1581;
 8003542:	f241 5381 	movw	r3, #5505	; 0x1581
 8003546:	e0c1      	b.n	80036cc <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8003548:	89fb      	ldrh	r3, [r7, #14]
 800354a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800354e:	d102      	bne.n	8003556 <readID+0xfe>
        return 0x6814;
 8003550:	f646 0314 	movw	r3, #26644	; 0x6814
 8003554:	e0ba      	b.n	80036cc <readID+0x274>
    ret = readReg32(0xD4);
 8003556:	20d4      	movs	r0, #212	; 0xd4
 8003558:	f7ff fc1e 	bl	8002d98 <readReg32>
 800355c:	4603      	mov	r3, r0
 800355e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8003560:	89fb      	ldrh	r3, [r7, #14]
 8003562:	f245 3210 	movw	r2, #21264	; 0x5310
 8003566:	4293      	cmp	r3, r2
 8003568:	d102      	bne.n	8003570 <readID+0x118>
        return 0x5310;
 800356a:	f245 3310 	movw	r3, #21264	; 0x5310
 800356e:	e0ad      	b.n	80036cc <readID+0x274>
    ret = readReg32(0xD7);
 8003570:	20d7      	movs	r0, #215	; 0xd7
 8003572:	f7ff fc11 	bl	8002d98 <readReg32>
 8003576:	4603      	mov	r3, r0
 8003578:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 800357a:	89fb      	ldrh	r3, [r7, #14]
 800357c:	f248 0231 	movw	r2, #32817	; 0x8031
 8003580:	4293      	cmp	r3, r2
 8003582:	d102      	bne.n	800358a <readID+0x132>
        return 0x8031;
 8003584:	f248 0331 	movw	r3, #32817	; 0x8031
 8003588:	e0a0      	b.n	80036cc <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 800358a:	20ef      	movs	r0, #239	; 0xef
 800358c:	f7ff fc1f 	bl	8002dce <readReg40>
 8003590:	4603      	mov	r3, r0
 8003592:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8003594:	89fb      	ldrh	r3, [r7, #14]
 8003596:	f249 3227 	movw	r2, #37671	; 0x9327
 800359a:	4293      	cmp	r3, r2
 800359c:	d102      	bne.n	80035a4 <readID+0x14c>
        return 0x9327;
 800359e:	f249 3327 	movw	r3, #37671	; 0x9327
 80035a2:	e093      	b.n	80036cc <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 80035a4:	20fe      	movs	r0, #254	; 0xfe
 80035a6:	f7ff fbf7 	bl	8002d98 <readReg32>
 80035aa:	4603      	mov	r3, r0
 80035ac:	0a1b      	lsrs	r3, r3, #8
 80035ae:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 80035b0:	89fb      	ldrh	r3, [r7, #14]
 80035b2:	f242 0253 	movw	r2, #8275	; 0x2053
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d102      	bne.n	80035c0 <readID+0x168>
        return 0x2053;
 80035ba:	f242 0353 	movw	r3, #8275	; 0x2053
 80035be:	e085      	b.n	80036cc <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 80035c0:	2004      	movs	r0, #4
 80035c2:	f7ff fbe9 	bl	8002d98 <readReg32>
 80035c6:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	0c1b      	lsrs	r3, r3, #16
 80035cc:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d122      	bne.n	800361e <readID+0x1c6>
 80035d8:	89fb      	ldrh	r3, [r7, #14]
 80035da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035de:	d11e      	bne.n	800361e <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 80035e0:	4a3c      	ldr	r2, [pc, #240]	; (80036d4 <readID+0x27c>)
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	4611      	mov	r1, r2
 80035e8:	8019      	strh	r1, [r3, #0]
 80035ea:	3302      	adds	r3, #2
 80035ec:	0c12      	lsrs	r2, r2, #16
 80035ee:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	2203      	movs	r2, #3
 80035f4:	4619      	mov	r1, r3
 80035f6:	20b9      	movs	r0, #185	; 0xb9
 80035f8:	f7fe fc96 	bl	8001f28 <pushCommand>
        msb = readReg(0xD0,0);
 80035fc:	2100      	movs	r1, #0
 80035fe:	20d0      	movs	r0, #208	; 0xd0
 8003600:	f7ff faee 	bl	8002be0 <readReg>
 8003604:	4603      	mov	r3, r0
 8003606:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	2b99      	cmp	r3, #153	; 0x99
 800360c:	d101      	bne.n	8003612 <readID+0x1ba>
 800360e:	2399      	movs	r3, #153	; 0x99
 8003610:	e05c      	b.n	80036cc <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	2b90      	cmp	r3, #144	; 0x90
 8003616:	d102      	bne.n	800361e <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8003618:	f249 0390 	movw	r3, #37008	; 0x9090
 800361c:	e056      	b.n	80036cc <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 800361e:	89fb      	ldrh	r3, [r7, #14]
 8003620:	f241 5226 	movw	r2, #5414	; 0x1526
 8003624:	4293      	cmp	r3, r2
 8003626:	d102      	bne.n	800362e <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8003628:	f241 5326 	movw	r3, #5414	; 0x1526
 800362c:	e04e      	b.n	80036cc <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 800362e:	89fb      	ldrh	r3, [r7, #14]
 8003630:	f648 12f0 	movw	r2, #35312	; 0x89f0
 8003634:	4293      	cmp	r3, r2
 8003636:	d102      	bne.n	800363e <readID+0x1e6>
        return 0x7735;
 8003638:	f247 7335 	movw	r3, #30517	; 0x7735
 800363c:	e046      	b.n	80036cc <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 800363e:	89fb      	ldrh	r3, [r7, #14]
 8003640:	f248 5252 	movw	r2, #34130	; 0x8552
 8003644:	4293      	cmp	r3, r2
 8003646:	d102      	bne.n	800364e <readID+0x1f6>
        return 0x7789;
 8003648:	f247 7389 	movw	r3, #30601	; 0x7789
 800364c:	e03e      	b.n	80036cc <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 800364e:	89fb      	ldrh	r3, [r7, #14]
 8003650:	f64a 4211 	movw	r2, #44049	; 0xac11
 8003654:	4293      	cmp	r3, r2
 8003656:	d102      	bne.n	800365e <readID+0x206>
        return 0xAC11;
 8003658:	f64a 4311 	movw	r3, #44049	; 0xac11
 800365c:	e036      	b.n	80036cc <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 800365e:	20d3      	movs	r0, #211	; 0xd3
 8003660:	f7ff fb9a 	bl	8002d98 <readReg32>
 8003664:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	0a1b      	lsrs	r3, r3, #8
 800366a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 800366c:	89fb      	ldrh	r3, [r7, #14]
 800366e:	f249 1263 	movw	r2, #37219	; 0x9163
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <readID+0x222>
 8003676:	89fb      	ldrh	r3, [r7, #14]
 8003678:	e028      	b.n	80036cc <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 800367a:	20d3      	movs	r0, #211	; 0xd3
 800367c:	f7ff fb8c 	bl	8002d98 <readReg32>
 8003680:	4603      	mov	r3, r0
 8003682:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8003684:	89fb      	ldrh	r3, [r7, #14]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	b29b      	uxth	r3, r3
 800368a:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	2b93      	cmp	r3, #147	; 0x93
 8003690:	d00b      	beq.n	80036aa <readID+0x252>
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	2b94      	cmp	r3, #148	; 0x94
 8003696:	d008      	beq.n	80036aa <readID+0x252>
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	2b98      	cmp	r3, #152	; 0x98
 800369c:	d005      	beq.n	80036aa <readID+0x252>
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	2b77      	cmp	r3, #119	; 0x77
 80036a2:	d002      	beq.n	80036aa <readID+0x252>
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	2b16      	cmp	r3, #22
 80036a8:	d101      	bne.n	80036ae <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 80036aa:	89fb      	ldrh	r3, [r7, #14]
 80036ac:	e00e      	b.n	80036cc <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 80036ae:	89fb      	ldrh	r3, [r7, #14]
 80036b0:	2bd3      	cmp	r3, #211	; 0xd3
 80036b2:	d004      	beq.n	80036be <readID+0x266>
 80036b4:	89fb      	ldrh	r3, [r7, #14]
 80036b6:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d101      	bne.n	80036c2 <readID+0x26a>
        return ret;             //16-bit write-only bus
 80036be:	89fb      	ldrh	r3, [r7, #14]
 80036c0:	e004      	b.n	80036cc <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 80036c2:	2100      	movs	r1, #0
 80036c4:	2000      	movs	r0, #0
 80036c6:	f7ff fa8b 	bl	8002be0 <readReg>
 80036ca:	4603      	mov	r3, r0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	080093c0 	.word	0x080093c0

080036d8 <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b08b      	sub	sp, #44	; 0x2c
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60ba      	str	r2, [r7, #8]
 80036e0:	461a      	mov	r2, r3
 80036e2:	4603      	mov	r3, r0
 80036e4:	81fb      	strh	r3, [r7, #14]
 80036e6:	460b      	mov	r3, r1
 80036e8:	81bb      	strh	r3, [r7, #12]
 80036ea:	4613      	mov	r3, r2
 80036ec:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 80036ee:	4b1c      	ldr	r3, [pc, #112]	; (8003760 <readGRAM+0x88>)
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 80036f4:	88fa      	ldrh	r2, [r7, #6]
 80036f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80036f8:	fb12 f303 	smulbb	r3, r2, r3
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8003700:	2300      	movs	r3, #0
 8003702:	843b      	strh	r3, [r7, #32]
 8003704:	2300      	movs	r3, #0
 8003706:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8003708:	4b16      	ldr	r3, [pc, #88]	; (8003764 <readGRAM+0x8c>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d107      	bne.n	8003720 <readGRAM+0x48>
 8003710:	4b15      	ldr	r3, [pc, #84]	; (8003768 <readGRAM+0x90>)
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <readGRAM+0x48>
        _MR = 0x2E;
 800371c:	232e      	movs	r3, #46	; 0x2e
 800371e:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 8003720:	4b12      	ldr	r3, [pc, #72]	; (800376c <readGRAM+0x94>)
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	f241 6202 	movw	r2, #5634	; 0x1602
 8003728:	4293      	cmp	r3, r2
 800372a:	d101      	bne.n	8003730 <readGRAM+0x58>
 800372c:	232e      	movs	r3, #46	; 0x2e
 800372e:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8003730:	89fa      	ldrh	r2, [r7, #14]
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	4413      	add	r3, r2
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29b      	uxth	r3, r3
 800373c:	b21c      	sxth	r4, r3
 800373e:	89ba      	ldrh	r2, [r7, #12]
 8003740:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003742:	4413      	add	r3, r2
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29b      	uxth	r3, r3
 800374a:	b21b      	sxth	r3, r3
 800374c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003750:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003754:	4622      	mov	r2, r4
 8003756:	f001 f921 	bl	800499c <setAddrWindow>
    while (n > 0) {
 800375a:	f000 bd74 	b.w	8004246 <readGRAM+0xb6e>
 800375e:	bf00      	nop
 8003760:	20000746 	.word	0x20000746
 8003764:	20000405 	.word	0x20000405
 8003768:	20000748 	.word	0x20000748
 800376c:	20000756 	.word	0x20000756
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 8003770:	4b9d      	ldr	r3, [pc, #628]	; (80039e8 <readGRAM+0x310>)
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d111      	bne.n	80037a0 <readGRAM+0xc8>
            WriteCmdData(_MC, x + col);
 800377c:	4b9b      	ldr	r3, [pc, #620]	; (80039ec <readGRAM+0x314>)
 800377e:	8818      	ldrh	r0, [r3, #0]
 8003780:	89fa      	ldrh	r2, [r7, #14]
 8003782:	8bfb      	ldrh	r3, [r7, #30]
 8003784:	4413      	add	r3, r2
 8003786:	b29b      	uxth	r3, r3
 8003788:	4619      	mov	r1, r3
 800378a:	f7fe fbbb 	bl	8001f04 <WriteCmdData>
            WriteCmdData(_MP, y + row);
 800378e:	4b98      	ldr	r3, [pc, #608]	; (80039f0 <readGRAM+0x318>)
 8003790:	8818      	ldrh	r0, [r3, #0]
 8003792:	89ba      	ldrh	r2, [r7, #12]
 8003794:	8c3b      	ldrh	r3, [r7, #32]
 8003796:	4413      	add	r3, r2
 8003798:	b29b      	uxth	r3, r3
 800379a:	4619      	mov	r1, r3
 800379c:	f7fe fbb2 	bl	8001f04 <WriteCmdData>
        }
        CS_ACTIVE;
 80037a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037a4:	4893      	ldr	r0, [pc, #588]	; (80039f4 <readGRAM+0x31c>)
 80037a6:	f7fe fa97 	bl	8001cd8 <PIN_LOW>
        WriteCmd(_MR);
 80037aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037ae:	4892      	ldr	r0, [pc, #584]	; (80039f8 <readGRAM+0x320>)
 80037b0:	f7fe fa92 	bl	8001cd8 <PIN_LOW>
 80037b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037b6:	0a1b      	lsrs	r3, r3, #8
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	777b      	strb	r3, [r7, #29]
 80037bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037be:	773b      	strb	r3, [r7, #28]
 80037c0:	4b8d      	ldr	r3, [pc, #564]	; (80039f8 <readGRAM+0x320>)
 80037c2:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80037c6:	619a      	str	r2, [r3, #24]
 80037c8:	4b8c      	ldr	r3, [pc, #560]	; (80039fc <readGRAM+0x324>)
 80037ca:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80037ce:	619a      	str	r2, [r3, #24]
 80037d0:	4b8b      	ldr	r3, [pc, #556]	; (8003a00 <readGRAM+0x328>)
 80037d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037d6:	619a      	str	r2, [r3, #24]
 80037d8:	7f7b      	ldrb	r3, [r7, #29]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	4a88      	ldr	r2, [pc, #544]	; (8003a00 <readGRAM+0x328>)
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	6193      	str	r3, [r2, #24]
 80037e4:	7f7b      	ldrb	r3, [r7, #29]
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80037ec:	7f7b      	ldrb	r3, [r7, #29]
 80037ee:	015b      	lsls	r3, r3, #5
 80037f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f4:	431a      	orrs	r2, r3
 80037f6:	7f7b      	ldrb	r3, [r7, #29]
 80037f8:	015b      	lsls	r3, r3, #5
 80037fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fe:	431a      	orrs	r2, r3
 8003800:	4b7e      	ldr	r3, [pc, #504]	; (80039fc <readGRAM+0x324>)
 8003802:	619a      	str	r2, [r3, #24]
 8003804:	7f7b      	ldrb	r3, [r7, #29]
 8003806:	105b      	asrs	r3, r3, #1
 8003808:	f003 0208 	and.w	r2, r3, #8
 800380c:	7f7b      	ldrb	r3, [r7, #29]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	431a      	orrs	r2, r3
 8003816:	7f7b      	ldrb	r3, [r7, #29]
 8003818:	105b      	asrs	r3, r3, #1
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	431a      	orrs	r2, r3
 8003820:	7f7b      	ldrb	r3, [r7, #29]
 8003822:	10db      	asrs	r3, r3, #3
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	431a      	orrs	r2, r3
 800382a:	4b73      	ldr	r3, [pc, #460]	; (80039f8 <readGRAM+0x320>)
 800382c:	619a      	str	r2, [r3, #24]
 800382e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003832:	4871      	ldr	r0, [pc, #452]	; (80039f8 <readGRAM+0x320>)
 8003834:	f7fe fa50 	bl	8001cd8 <PIN_LOW>
 8003838:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800383c:	486e      	ldr	r0, [pc, #440]	; (80039f8 <readGRAM+0x320>)
 800383e:	f7fe fa5b 	bl	8001cf8 <PIN_HIGH>
 8003842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003846:	486c      	ldr	r0, [pc, #432]	; (80039f8 <readGRAM+0x320>)
 8003848:	f7fe fa56 	bl	8001cf8 <PIN_HIGH>
 800384c:	4b6a      	ldr	r3, [pc, #424]	; (80039f8 <readGRAM+0x320>)
 800384e:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8003852:	619a      	str	r2, [r3, #24]
 8003854:	4b69      	ldr	r3, [pc, #420]	; (80039fc <readGRAM+0x324>)
 8003856:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800385a:	619a      	str	r2, [r3, #24]
 800385c:	4b68      	ldr	r3, [pc, #416]	; (8003a00 <readGRAM+0x328>)
 800385e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003862:	619a      	str	r2, [r3, #24]
 8003864:	7f3b      	ldrb	r3, [r7, #28]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	4a65      	ldr	r2, [pc, #404]	; (8003a00 <readGRAM+0x328>)
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	6193      	str	r3, [r2, #24]
 8003870:	7f3b      	ldrb	r3, [r7, #28]
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8003878:	7f3b      	ldrb	r3, [r7, #28]
 800387a:	015b      	lsls	r3, r3, #5
 800387c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003880:	431a      	orrs	r2, r3
 8003882:	7f3b      	ldrb	r3, [r7, #28]
 8003884:	015b      	lsls	r3, r3, #5
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	431a      	orrs	r2, r3
 800388c:	4b5b      	ldr	r3, [pc, #364]	; (80039fc <readGRAM+0x324>)
 800388e:	619a      	str	r2, [r3, #24]
 8003890:	7f3b      	ldrb	r3, [r7, #28]
 8003892:	105b      	asrs	r3, r3, #1
 8003894:	f003 0208 	and.w	r2, r3, #8
 8003898:	7f3b      	ldrb	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a0:	431a      	orrs	r2, r3
 80038a2:	7f3b      	ldrb	r3, [r7, #28]
 80038a4:	105b      	asrs	r3, r3, #1
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	431a      	orrs	r2, r3
 80038ac:	7f3b      	ldrb	r3, [r7, #28]
 80038ae:	10db      	asrs	r3, r3, #3
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	431a      	orrs	r2, r3
 80038b6:	4b50      	ldr	r3, [pc, #320]	; (80039f8 <readGRAM+0x320>)
 80038b8:	619a      	str	r2, [r3, #24]
 80038ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80038be:	484e      	ldr	r0, [pc, #312]	; (80039f8 <readGRAM+0x320>)
 80038c0:	f7fe fa0a 	bl	8001cd8 <PIN_LOW>
 80038c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80038c8:	484b      	ldr	r0, [pc, #300]	; (80039f8 <readGRAM+0x320>)
 80038ca:	f7fe fa15 	bl	8001cf8 <PIN_HIGH>
 80038ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80038d2:	4849      	ldr	r0, [pc, #292]	; (80039f8 <readGRAM+0x320>)
 80038d4:	f7fe fa10 	bl	8001cf8 <PIN_HIGH>
 80038d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038dc:	4846      	ldr	r0, [pc, #280]	; (80039f8 <readGRAM+0x320>)
 80038de:	f7fe fa0b 	bl	8001cf8 <PIN_HIGH>
        setReadDir();
 80038e2:	f7fe fb35 	bl	8001f50 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 80038e6:	4b40      	ldr	r3, [pc, #256]	; (80039e8 <readGRAM+0x310>)
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f040 816a 	bne.w	8003bc8 <readGRAM+0x4f0>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 80038f4:	4b3c      	ldr	r3, [pc, #240]	; (80039e8 <readGRAM+0x310>)
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d105      	bne.n	800390c <readGRAM+0x234>
 8003900:	4b40      	ldr	r3, [pc, #256]	; (8003a04 <readGRAM+0x32c>)
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	f241 2289 	movw	r2, #4745	; 0x1289
 8003908:	4293      	cmp	r3, r2
 800390a:	d17d      	bne.n	8003a08 <readGRAM+0x330>
            READ_8(r);
 800390c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003910:	4839      	ldr	r0, [pc, #228]	; (80039f8 <readGRAM+0x320>)
 8003912:	f7fe f9f1 	bl	8001cf8 <PIN_HIGH>
 8003916:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800391a:	4837      	ldr	r0, [pc, #220]	; (80039f8 <readGRAM+0x320>)
 800391c:	f7fe f9dc 	bl	8001cd8 <PIN_LOW>
 8003920:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003924:	4834      	ldr	r0, [pc, #208]	; (80039f8 <readGRAM+0x320>)
 8003926:	f7fe f9d7 	bl	8001cd8 <PIN_LOW>
 800392a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800392e:	4832      	ldr	r0, [pc, #200]	; (80039f8 <readGRAM+0x320>)
 8003930:	f7fe f9d2 	bl	8001cd8 <PIN_LOW>
 8003934:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003938:	482f      	ldr	r0, [pc, #188]	; (80039f8 <readGRAM+0x320>)
 800393a:	f7fe f9cd 	bl	8001cd8 <PIN_LOW>
 800393e:	4b30      	ldr	r3, [pc, #192]	; (8003a00 <readGRAM+0x328>)
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	085b      	lsrs	r3, r3, #1
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	b2da      	uxtb	r2, r3
 800394c:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <readGRAM+0x324>)
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	0a1b      	lsrs	r3, r3, #8
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	b2db      	uxtb	r3, r3
 800395a:	4313      	orrs	r3, r2
 800395c:	b2da      	uxtb	r2, r3
 800395e:	4b27      	ldr	r3, [pc, #156]	; (80039fc <readGRAM+0x324>)
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	b2db      	uxtb	r3, r3
 800396c:	4313      	orrs	r3, r2
 800396e:	b2da      	uxtb	r2, r3
 8003970:	4b22      	ldr	r3, [pc, #136]	; (80039fc <readGRAM+0x324>)
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	095b      	lsrs	r3, r3, #5
 8003976:	b2db      	uxtb	r3, r3
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	b2db      	uxtb	r3, r3
 800397e:	4313      	orrs	r3, r2
 8003980:	b2da      	uxtb	r2, r3
 8003982:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <readGRAM+0x320>)
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	b2db      	uxtb	r3, r3
 8003992:	4313      	orrs	r3, r2
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4b18      	ldr	r3, [pc, #96]	; (80039f8 <readGRAM+0x320>)
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	085b      	lsrs	r3, r3, #1
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	4313      	orrs	r3, r2
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <readGRAM+0x320>)
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	4313      	orrs	r3, r2
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <readGRAM+0x320>)
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	4313      	orrs	r3, r2
 80039ce:	75fb      	strb	r3, [r7, #23]
 80039d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039d4:	4808      	ldr	r0, [pc, #32]	; (80039f8 <readGRAM+0x320>)
 80039d6:	f7fe f98f 	bl	8001cf8 <PIN_HIGH>
 80039da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039de:	4806      	ldr	r0, [pc, #24]	; (80039f8 <readGRAM+0x320>)
 80039e0:	f7fe f98a 	bl	8001cf8 <PIN_HIGH>
 80039e4:	e0f0      	b.n	8003bc8 <readGRAM+0x4f0>
 80039e6:	bf00      	nop
 80039e8:	20000748 	.word	0x20000748
 80039ec:	20000750 	.word	0x20000750
 80039f0:	2000074e 	.word	0x2000074e
 80039f4:	40020400 	.word	0x40020400
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40021400 	.word	0x40021400
 8003a00:	40021800 	.word	0x40021800
 8003a04:	20000756 	.word	0x20000756
        } else {
            READ_16(dummy);
 8003a08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a0c:	48a8      	ldr	r0, [pc, #672]	; (8003cb0 <readGRAM+0x5d8>)
 8003a0e:	f7fe f973 	bl	8001cf8 <PIN_HIGH>
 8003a12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a16:	48a6      	ldr	r0, [pc, #664]	; (8003cb0 <readGRAM+0x5d8>)
 8003a18:	f7fe f95e 	bl	8001cd8 <PIN_LOW>
 8003a1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a20:	48a3      	ldr	r0, [pc, #652]	; (8003cb0 <readGRAM+0x5d8>)
 8003a22:	f7fe f959 	bl	8001cd8 <PIN_LOW>
 8003a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a2a:	48a1      	ldr	r0, [pc, #644]	; (8003cb0 <readGRAM+0x5d8>)
 8003a2c:	f7fe f954 	bl	8001cd8 <PIN_LOW>
 8003a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a34:	489e      	ldr	r0, [pc, #632]	; (8003cb0 <readGRAM+0x5d8>)
 8003a36:	f7fe f94f 	bl	8001cd8 <PIN_LOW>
 8003a3a:	4b9e      	ldr	r3, [pc, #632]	; (8003cb4 <readGRAM+0x5dc>)
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	4b9b      	ldr	r3, [pc, #620]	; (8003cb8 <readGRAM+0x5e0>)
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	0a1b      	lsrs	r3, r3, #8
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	4313      	orrs	r3, r2
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	4b97      	ldr	r3, [pc, #604]	; (8003cb8 <readGRAM+0x5e0>)
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	4b92      	ldr	r3, [pc, #584]	; (8003cb8 <readGRAM+0x5e0>)
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	4b8c      	ldr	r3, [pc, #560]	; (8003cb0 <readGRAM+0x5d8>)
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	4b87      	ldr	r3, [pc, #540]	; (8003cb0 <readGRAM+0x5d8>)
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	085b      	lsrs	r3, r3, #1
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	4b82      	ldr	r3, [pc, #520]	; (8003cb0 <readGRAM+0x5d8>)
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	4b7d      	ldr	r3, [pc, #500]	; (8003cb0 <readGRAM+0x5d8>)
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	76fb      	strb	r3, [r7, #27]
 8003acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ad0:	4877      	ldr	r0, [pc, #476]	; (8003cb0 <readGRAM+0x5d8>)
 8003ad2:	f7fe f911 	bl	8001cf8 <PIN_HIGH>
 8003ad6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ada:	4875      	ldr	r0, [pc, #468]	; (8003cb0 <readGRAM+0x5d8>)
 8003adc:	f7fe f90c 	bl	8001cf8 <PIN_HIGH>
 8003ae0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ae4:	4872      	ldr	r0, [pc, #456]	; (8003cb0 <readGRAM+0x5d8>)
 8003ae6:	f7fe f907 	bl	8001cf8 <PIN_HIGH>
 8003aea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003aee:	4870      	ldr	r0, [pc, #448]	; (8003cb0 <readGRAM+0x5d8>)
 8003af0:	f7fe f8f2 	bl	8001cd8 <PIN_LOW>
 8003af4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003af8:	486d      	ldr	r0, [pc, #436]	; (8003cb0 <readGRAM+0x5d8>)
 8003afa:	f7fe f8ed 	bl	8001cd8 <PIN_LOW>
 8003afe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b02:	486b      	ldr	r0, [pc, #428]	; (8003cb0 <readGRAM+0x5d8>)
 8003b04:	f7fe f8e8 	bl	8001cd8 <PIN_LOW>
 8003b08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b0c:	4868      	ldr	r0, [pc, #416]	; (8003cb0 <readGRAM+0x5d8>)
 8003b0e:	f7fe f8e3 	bl	8001cd8 <PIN_LOW>
 8003b12:	4b68      	ldr	r3, [pc, #416]	; (8003cb4 <readGRAM+0x5dc>)
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	085b      	lsrs	r3, r3, #1
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	4b65      	ldr	r3, [pc, #404]	; (8003cb8 <readGRAM+0x5e0>)
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	4b61      	ldr	r3, [pc, #388]	; (8003cb8 <readGRAM+0x5e0>)
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	4313      	orrs	r3, r2
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	4b5c      	ldr	r3, [pc, #368]	; (8003cb8 <readGRAM+0x5e0>)
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	4313      	orrs	r3, r2
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	4b56      	ldr	r3, [pc, #344]	; (8003cb0 <readGRAM+0x5d8>)
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	4313      	orrs	r3, r2
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	4b51      	ldr	r3, [pc, #324]	; (8003cb0 <readGRAM+0x5d8>)
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	085b      	lsrs	r3, r3, #1
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	4b4c      	ldr	r3, [pc, #304]	; (8003cb0 <readGRAM+0x5d8>)
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <readGRAM+0x5d8>)
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	833b      	strh	r3, [r7, #24]
 8003ba4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ba8:	4841      	ldr	r0, [pc, #260]	; (8003cb0 <readGRAM+0x5d8>)
 8003baa:	f7fe f8a5 	bl	8001cf8 <PIN_HIGH>
 8003bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bb2:	483f      	ldr	r0, [pc, #252]	; (8003cb0 <readGRAM+0x5d8>)
 8003bb4:	f7fe f8a0 	bl	8001cf8 <PIN_HIGH>
 8003bb8:	7efb      	ldrb	r3, [r7, #27]
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	b21a      	sxth	r2, r3
 8003bbe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	b21b      	sxth	r3, r3
 8003bc6:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8003bc8:	4b3c      	ldr	r3, [pc, #240]	; (8003cbc <readGRAM+0x5e4>)
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	f241 5211 	movw	r2, #5393	; 0x1511
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	f040 8302 	bne.w	80041da <readGRAM+0xb02>
 8003bd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bda:	4835      	ldr	r0, [pc, #212]	; (8003cb0 <readGRAM+0x5d8>)
 8003bdc:	f7fe f88c 	bl	8001cf8 <PIN_HIGH>
 8003be0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003be4:	4832      	ldr	r0, [pc, #200]	; (8003cb0 <readGRAM+0x5d8>)
 8003be6:	f7fe f877 	bl	8001cd8 <PIN_LOW>
 8003bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bee:	4830      	ldr	r0, [pc, #192]	; (8003cb0 <readGRAM+0x5d8>)
 8003bf0:	f7fe f872 	bl	8001cd8 <PIN_LOW>
 8003bf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bf8:	482d      	ldr	r0, [pc, #180]	; (8003cb0 <readGRAM+0x5d8>)
 8003bfa:	f7fe f86d 	bl	8001cd8 <PIN_LOW>
 8003bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c02:	482b      	ldr	r0, [pc, #172]	; (8003cb0 <readGRAM+0x5d8>)
 8003c04:	f7fe f868 	bl	8001cd8 <PIN_LOW>
 8003c08:	4b2a      	ldr	r3, [pc, #168]	; (8003cb4 <readGRAM+0x5dc>)
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	085b      	lsrs	r3, r3, #1
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	4b28      	ldr	r3, [pc, #160]	; (8003cb8 <readGRAM+0x5e0>)
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	4313      	orrs	r3, r2
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <readGRAM+0x5e0>)
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	095b      	lsrs	r3, r3, #5
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	4313      	orrs	r3, r2
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	4b1f      	ldr	r3, [pc, #124]	; (8003cb8 <readGRAM+0x5e0>)
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	4b18      	ldr	r3, [pc, #96]	; (8003cb0 <readGRAM+0x5d8>)
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <readGRAM+0x5d8>)
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	085b      	lsrs	r3, r3, #1
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <readGRAM+0x5d8>)
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	4313      	orrs	r3, r2
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <readGRAM+0x5d8>)
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	4313      	orrs	r3, r2
 8003c98:	75fb      	strb	r3, [r7, #23]
 8003c9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c9e:	4804      	ldr	r0, [pc, #16]	; (8003cb0 <readGRAM+0x5d8>)
 8003ca0:	f7fe f82a 	bl	8001cf8 <PIN_HIGH>
 8003ca4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ca8:	4801      	ldr	r0, [pc, #4]	; (8003cb0 <readGRAM+0x5d8>)
 8003caa:	f7fe f825 	bl	8001cf8 <PIN_HIGH>
        while (n)
 8003cae:	e294      	b.n	80041da <readGRAM+0xb02>
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40021800 	.word	0x40021800
 8003cb8:	40021400 	.word	0x40021400
 8003cbc:	20000756 	.word	0x20000756
        {
            if (_lcd_capable & READ_24BITS)
 8003cc0:	4bac      	ldr	r3, [pc, #688]	; (8003f74 <readGRAM+0x89c>)
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 8164 	beq.w	8003f96 <readGRAM+0x8be>
            {
                READ_8(r);
 8003cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cd2:	48a9      	ldr	r0, [pc, #676]	; (8003f78 <readGRAM+0x8a0>)
 8003cd4:	f7fe f810 	bl	8001cf8 <PIN_HIGH>
 8003cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cdc:	48a6      	ldr	r0, [pc, #664]	; (8003f78 <readGRAM+0x8a0>)
 8003cde:	f7fd fffb 	bl	8001cd8 <PIN_LOW>
 8003ce2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ce6:	48a4      	ldr	r0, [pc, #656]	; (8003f78 <readGRAM+0x8a0>)
 8003ce8:	f7fd fff6 	bl	8001cd8 <PIN_LOW>
 8003cec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cf0:	48a1      	ldr	r0, [pc, #644]	; (8003f78 <readGRAM+0x8a0>)
 8003cf2:	f7fd fff1 	bl	8001cd8 <PIN_LOW>
 8003cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cfa:	489f      	ldr	r0, [pc, #636]	; (8003f78 <readGRAM+0x8a0>)
 8003cfc:	f7fd ffec 	bl	8001cd8 <PIN_LOW>
 8003d00:	4b9e      	ldr	r3, [pc, #632]	; (8003f7c <readGRAM+0x8a4>)
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	4b9c      	ldr	r3, [pc, #624]	; (8003f80 <readGRAM+0x8a8>)
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	4b97      	ldr	r3, [pc, #604]	; (8003f80 <readGRAM+0x8a8>)
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	4b93      	ldr	r3, [pc, #588]	; (8003f80 <readGRAM+0x8a8>)
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	4313      	orrs	r3, r2
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	4b8c      	ldr	r3, [pc, #560]	; (8003f78 <readGRAM+0x8a0>)
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	4313      	orrs	r3, r2
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	4b87      	ldr	r3, [pc, #540]	; (8003f78 <readGRAM+0x8a0>)
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	085b      	lsrs	r3, r3, #1
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	4313      	orrs	r3, r2
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	4b83      	ldr	r3, [pc, #524]	; (8003f78 <readGRAM+0x8a0>)
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	4b7e      	ldr	r3, [pc, #504]	; (8003f78 <readGRAM+0x8a0>)
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	75fb      	strb	r3, [r7, #23]
 8003d92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d96:	4878      	ldr	r0, [pc, #480]	; (8003f78 <readGRAM+0x8a0>)
 8003d98:	f7fd ffae 	bl	8001cf8 <PIN_HIGH>
 8003d9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003da0:	4875      	ldr	r0, [pc, #468]	; (8003f78 <readGRAM+0x8a0>)
 8003da2:	f7fd ffa9 	bl	8001cf8 <PIN_HIGH>
                READ_8(g);
 8003da6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003daa:	4873      	ldr	r0, [pc, #460]	; (8003f78 <readGRAM+0x8a0>)
 8003dac:	f7fd ffa4 	bl	8001cf8 <PIN_HIGH>
 8003db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003db4:	4870      	ldr	r0, [pc, #448]	; (8003f78 <readGRAM+0x8a0>)
 8003db6:	f7fd ff8f 	bl	8001cd8 <PIN_LOW>
 8003dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dbe:	486e      	ldr	r0, [pc, #440]	; (8003f78 <readGRAM+0x8a0>)
 8003dc0:	f7fd ff8a 	bl	8001cd8 <PIN_LOW>
 8003dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dc8:	486b      	ldr	r0, [pc, #428]	; (8003f78 <readGRAM+0x8a0>)
 8003dca:	f7fd ff85 	bl	8001cd8 <PIN_LOW>
 8003dce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dd2:	4869      	ldr	r0, [pc, #420]	; (8003f78 <readGRAM+0x8a0>)
 8003dd4:	f7fd ff80 	bl	8001cd8 <PIN_LOW>
 8003dd8:	4b68      	ldr	r3, [pc, #416]	; (8003f7c <readGRAM+0x8a4>)
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	4b66      	ldr	r3, [pc, #408]	; (8003f80 <readGRAM+0x8a8>)
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	0a1b      	lsrs	r3, r3, #8
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	4313      	orrs	r3, r2
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	4b61      	ldr	r3, [pc, #388]	; (8003f80 <readGRAM+0x8a8>)
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	4313      	orrs	r3, r2
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	4b5d      	ldr	r3, [pc, #372]	; (8003f80 <readGRAM+0x8a8>)
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	4b56      	ldr	r3, [pc, #344]	; (8003f78 <readGRAM+0x8a0>)
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	4b51      	ldr	r3, [pc, #324]	; (8003f78 <readGRAM+0x8a0>)
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	4b4d      	ldr	r3, [pc, #308]	; (8003f78 <readGRAM+0x8a0>)
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	4313      	orrs	r3, r2
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	4b48      	ldr	r3, [pc, #288]	; (8003f78 <readGRAM+0x8a0>)
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	4313      	orrs	r3, r2
 8003e68:	757b      	strb	r3, [r7, #21]
 8003e6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e6e:	4842      	ldr	r0, [pc, #264]	; (8003f78 <readGRAM+0x8a0>)
 8003e70:	f7fd ff42 	bl	8001cf8 <PIN_HIGH>
 8003e74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e78:	483f      	ldr	r0, [pc, #252]	; (8003f78 <readGRAM+0x8a0>)
 8003e7a:	f7fd ff3d 	bl	8001cf8 <PIN_HIGH>
                READ_8(b);
 8003e7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e82:	483d      	ldr	r0, [pc, #244]	; (8003f78 <readGRAM+0x8a0>)
 8003e84:	f7fd ff38 	bl	8001cf8 <PIN_HIGH>
 8003e88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e8c:	483a      	ldr	r0, [pc, #232]	; (8003f78 <readGRAM+0x8a0>)
 8003e8e:	f7fd ff23 	bl	8001cd8 <PIN_LOW>
 8003e92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e96:	4838      	ldr	r0, [pc, #224]	; (8003f78 <readGRAM+0x8a0>)
 8003e98:	f7fd ff1e 	bl	8001cd8 <PIN_LOW>
 8003e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ea0:	4835      	ldr	r0, [pc, #212]	; (8003f78 <readGRAM+0x8a0>)
 8003ea2:	f7fd ff19 	bl	8001cd8 <PIN_LOW>
 8003ea6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003eaa:	4833      	ldr	r0, [pc, #204]	; (8003f78 <readGRAM+0x8a0>)
 8003eac:	f7fd ff14 	bl	8001cd8 <PIN_LOW>
 8003eb0:	4b32      	ldr	r3, [pc, #200]	; (8003f7c <readGRAM+0x8a4>)
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	085b      	lsrs	r3, r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	4b30      	ldr	r3, [pc, #192]	; (8003f80 <readGRAM+0x8a8>)
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	0a1b      	lsrs	r3, r3, #8
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <readGRAM+0x8a8>)
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <readGRAM+0x8a8>)
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <readGRAM+0x8a0>)
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f003 0310 	and.w	r3, r3, #16
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	4313      	orrs	r3, r2
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <readGRAM+0x8a0>)
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	085b      	lsrs	r3, r3, #1
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	4313      	orrs	r3, r2
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	4b17      	ldr	r3, [pc, #92]	; (8003f78 <readGRAM+0x8a0>)
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <readGRAM+0x8a0>)
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	753b      	strb	r3, [r7, #20]
 8003f42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f46:	480c      	ldr	r0, [pc, #48]	; (8003f78 <readGRAM+0x8a0>)
 8003f48:	f7fd fed6 	bl	8001cf8 <PIN_HIGH>
 8003f4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f50:	4809      	ldr	r0, [pc, #36]	; (8003f78 <readGRAM+0x8a0>)
 8003f52:	f7fd fed1 	bl	8001cf8 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <readGRAM+0x89c>)
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d010      	beq.n	8003f84 <readGRAM+0x8ac>
                    ret = color565(b, g, r);
 8003f62:	7dfa      	ldrb	r2, [r7, #23]
 8003f64:	7d79      	ldrb	r1, [r7, #21]
 8003f66:	7d3b      	ldrb	r3, [r7, #20]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fd ff8d 	bl	8001e88 <color565>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003f72:	e117      	b.n	80041a4 <readGRAM+0xacc>
 8003f74:	20000748 	.word	0x20000748
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40021800 	.word	0x40021800
 8003f80:	40021400 	.word	0x40021400
                else
                    ret = color565(r, g, b);
 8003f84:	7d3a      	ldrb	r2, [r7, #20]
 8003f86:	7d79      	ldrb	r1, [r7, #21]
 8003f88:	7dfb      	ldrb	r3, [r7, #23]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fd ff7c 	bl	8001e88 <color565>
 8003f90:	4603      	mov	r3, r0
 8003f92:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003f94:	e106      	b.n	80041a4 <readGRAM+0xacc>
            } else
            {
                READ_16(ret);
 8003f96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f9a:	4893      	ldr	r0, [pc, #588]	; (80041e8 <readGRAM+0xb10>)
 8003f9c:	f7fd feac 	bl	8001cf8 <PIN_HIGH>
 8003fa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fa4:	4890      	ldr	r0, [pc, #576]	; (80041e8 <readGRAM+0xb10>)
 8003fa6:	f7fd fe97 	bl	8001cd8 <PIN_LOW>
 8003faa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fae:	488e      	ldr	r0, [pc, #568]	; (80041e8 <readGRAM+0xb10>)
 8003fb0:	f7fd fe92 	bl	8001cd8 <PIN_LOW>
 8003fb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fb8:	488b      	ldr	r0, [pc, #556]	; (80041e8 <readGRAM+0xb10>)
 8003fba:	f7fd fe8d 	bl	8001cd8 <PIN_LOW>
 8003fbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fc2:	4889      	ldr	r0, [pc, #548]	; (80041e8 <readGRAM+0xb10>)
 8003fc4:	f7fd fe88 	bl	8001cd8 <PIN_LOW>
 8003fc8:	4b88      	ldr	r3, [pc, #544]	; (80041ec <readGRAM+0xb14>)
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	4b86      	ldr	r3, [pc, #536]	; (80041f0 <readGRAM+0xb18>)
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	0a1b      	lsrs	r3, r3, #8
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	4b81      	ldr	r3, [pc, #516]	; (80041f0 <readGRAM+0xb18>)
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	4b7d      	ldr	r3, [pc, #500]	; (80041f0 <readGRAM+0xb18>)
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	b2db      	uxtb	r3, r3
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	b2db      	uxtb	r3, r3
 8004008:	4313      	orrs	r3, r2
 800400a:	b2da      	uxtb	r2, r3
 800400c:	4b76      	ldr	r3, [pc, #472]	; (80041e8 <readGRAM+0xb10>)
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	b2db      	uxtb	r3, r3
 800401c:	4313      	orrs	r3, r2
 800401e:	b2da      	uxtb	r2, r3
 8004020:	4b71      	ldr	r3, [pc, #452]	; (80041e8 <readGRAM+0xb10>)
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	b2db      	uxtb	r3, r3
 800402e:	4313      	orrs	r3, r2
 8004030:	b2da      	uxtb	r2, r3
 8004032:	4b6d      	ldr	r3, [pc, #436]	; (80041e8 <readGRAM+0xb10>)
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	b2db      	uxtb	r3, r3
 8004042:	4313      	orrs	r3, r2
 8004044:	b2da      	uxtb	r2, r3
 8004046:	4b68      	ldr	r3, [pc, #416]	; (80041e8 <readGRAM+0xb10>)
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	b2db      	uxtb	r3, r3
 8004050:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004054:	b2db      	uxtb	r3, r3
 8004056:	4313      	orrs	r3, r2
 8004058:	75bb      	strb	r3, [r7, #22]
 800405a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800405e:	4862      	ldr	r0, [pc, #392]	; (80041e8 <readGRAM+0xb10>)
 8004060:	f7fd fe4a 	bl	8001cf8 <PIN_HIGH>
 8004064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004068:	485f      	ldr	r0, [pc, #380]	; (80041e8 <readGRAM+0xb10>)
 800406a:	f7fd fe45 	bl	8001cf8 <PIN_HIGH>
 800406e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004072:	485d      	ldr	r0, [pc, #372]	; (80041e8 <readGRAM+0xb10>)
 8004074:	f7fd fe40 	bl	8001cf8 <PIN_HIGH>
 8004078:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800407c:	485a      	ldr	r0, [pc, #360]	; (80041e8 <readGRAM+0xb10>)
 800407e:	f7fd fe2b 	bl	8001cd8 <PIN_LOW>
 8004082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004086:	4858      	ldr	r0, [pc, #352]	; (80041e8 <readGRAM+0xb10>)
 8004088:	f7fd fe26 	bl	8001cd8 <PIN_LOW>
 800408c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004090:	4855      	ldr	r0, [pc, #340]	; (80041e8 <readGRAM+0xb10>)
 8004092:	f7fd fe21 	bl	8001cd8 <PIN_LOW>
 8004096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800409a:	4853      	ldr	r0, [pc, #332]	; (80041e8 <readGRAM+0xb10>)
 800409c:	f7fd fe1c 	bl	8001cd8 <PIN_LOW>
 80040a0:	4b52      	ldr	r3, [pc, #328]	; (80041ec <readGRAM+0xb14>)
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	4b50      	ldr	r3, [pc, #320]	; (80041f0 <readGRAM+0xb18>)
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	0a1b      	lsrs	r3, r3, #8
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	4313      	orrs	r3, r2
 80040be:	b29a      	uxth	r2, r3
 80040c0:	4b4b      	ldr	r3, [pc, #300]	; (80041f0 <readGRAM+0xb18>)
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	4313      	orrs	r3, r2
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	4b47      	ldr	r3, [pc, #284]	; (80041f0 <readGRAM+0xb18>)
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	b29b      	uxth	r3, r3
 80040e0:	4313      	orrs	r3, r2
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	4b40      	ldr	r3, [pc, #256]	; (80041e8 <readGRAM+0xb10>)
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	4313      	orrs	r3, r2
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <readGRAM+0xb10>)
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	085b      	lsrs	r3, r3, #1
 80040fe:	b29b      	uxth	r3, r3
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	b29b      	uxth	r3, r3
 8004106:	4313      	orrs	r3, r2
 8004108:	b29a      	uxth	r2, r3
 800410a:	4b37      	ldr	r3, [pc, #220]	; (80041e8 <readGRAM+0xb10>)
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	b29b      	uxth	r3, r3
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	b29b      	uxth	r3, r3
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	b29b      	uxth	r3, r3
 800411a:	4313      	orrs	r3, r2
 800411c:	b29a      	uxth	r2, r3
 800411e:	4b32      	ldr	r3, [pc, #200]	; (80041e8 <readGRAM+0xb10>)
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	b29b      	uxth	r3, r3
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	b29b      	uxth	r3, r3
 8004128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412c:	b29b      	uxth	r3, r3
 800412e:	4313      	orrs	r3, r2
 8004130:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004132:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004136:	482c      	ldr	r0, [pc, #176]	; (80041e8 <readGRAM+0xb10>)
 8004138:	f7fd fdde 	bl	8001cf8 <PIN_HIGH>
 800413c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004140:	4829      	ldr	r0, [pc, #164]	; (80041e8 <readGRAM+0xb10>)
 8004142:	f7fd fdd9 	bl	8001cf8 <PIN_HIGH>
 8004146:	7dbb      	ldrb	r3, [r7, #22]
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	b21a      	sxth	r2, r3
 800414c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004150:	4313      	orrs	r3, r2
 8004152:	b21b      	sxth	r3, r3
 8004154:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 8004156:	4b27      	ldr	r3, [pc, #156]	; (80041f4 <readGRAM+0xb1c>)
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d009      	beq.n	8004176 <readGRAM+0xa9e>
                    ret = (ret >> 8) | (ret << 8);
 8004162:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004164:	0a1b      	lsrs	r3, r3, #8
 8004166:	b29b      	uxth	r3, r3
 8004168:	b21a      	sxth	r2, r3
 800416a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	b21b      	sxth	r3, r3
 8004170:	4313      	orrs	r3, r2
 8004172:	b21b      	sxth	r3, r3
 8004174:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 8004176:	4b1f      	ldr	r3, [pc, #124]	; (80041f4 <readGRAM+0xb1c>)
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	d010      	beq.n	80041a4 <readGRAM+0xacc>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 8004182:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004186:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800418a:	b21a      	sxth	r2, r3
 800418c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800418e:	0adb      	lsrs	r3, r3, #11
 8004190:	b29b      	uxth	r3, r3
 8004192:	b21b      	sxth	r3, r3
 8004194:	4313      	orrs	r3, r2
 8004196:	b21a      	sxth	r2, r3
 8004198:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800419a:	02db      	lsls	r3, r3, #11
 800419c:	b21b      	sxth	r3, r3
 800419e:	4313      	orrs	r3, r2
 80041a0:	b21b      	sxth	r3, r3
 80041a2:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 80041a4:	4b14      	ldr	r3, [pc, #80]	; (80041f8 <readGRAM+0xb20>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <readGRAM+0xae0>
 80041ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fd fe18 	bl	8001de4 <color555_to_565>
 80041b4:	4603      	mov	r3, r0
 80041b6:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	1c9a      	adds	r2, r3, #2
 80041bc:	60ba      	str	r2, [r7, #8]
 80041be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80041c0:	801a      	strh	r2, [r3, #0]
            n--;
 80041c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 80041ce:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <readGRAM+0xb1c>)
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d010      	beq.n	80041fc <readGRAM+0xb24>
        while (n)
 80041da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f47f ad6e 	bne.w	8003cc0 <readGRAM+0x5e8>
 80041e4:	e00b      	b.n	80041fe <readGRAM+0xb26>
 80041e6:	bf00      	nop
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40021800 	.word	0x40021800
 80041f0:	40021400 	.word	0x40021400
 80041f4:	20000748 	.word	0x20000748
 80041f8:	20000406 	.word	0x20000406
                break;
 80041fc:	bf00      	nop
        }
        if (++col >= w) {
 80041fe:	8bfb      	ldrh	r3, [r7, #30]
 8004200:	3301      	adds	r3, #1
 8004202:	b29b      	uxth	r3, r3
 8004204:	83fb      	strh	r3, [r7, #30]
 8004206:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800420a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800420e:	429a      	cmp	r2, r3
 8004210:	db0d      	blt.n	800422e <readGRAM+0xb56>
            col = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 8004216:	8c3b      	ldrh	r3, [r7, #32]
 8004218:	3301      	adds	r3, #1
 800421a:	b29b      	uxth	r3, r3
 800421c:	843b      	strh	r3, [r7, #32]
 800421e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004222:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8004226:	429a      	cmp	r2, r3
 8004228:	db01      	blt.n	800422e <readGRAM+0xb56>
                row = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 800422e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004232:	4815      	ldr	r0, [pc, #84]	; (8004288 <readGRAM+0xbb0>)
 8004234:	f7fd fd60 	bl	8001cf8 <PIN_HIGH>
        CS_IDLE;
 8004238:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800423c:	4813      	ldr	r0, [pc, #76]	; (800428c <readGRAM+0xbb4>)
 800423e:	f7fd fd5b 	bl	8001cf8 <PIN_HIGH>
        setWriteDir();
 8004242:	f7fd feb1 	bl	8001fa8 <setWriteDir>
    while (n > 0) {
 8004246:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800424a:	2b00      	cmp	r3, #0
 800424c:	f73f aa90 	bgt.w	8003770 <readGRAM+0x98>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 8004250:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <readGRAM+0xbb8>)
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d110      	bne.n	800427e <readGRAM+0xba6>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 800425c:	f7fd fd8a 	bl	8001d74 <width>
 8004260:	4603      	mov	r3, r0
 8004262:	3b01      	subs	r3, #1
 8004264:	b29b      	uxth	r3, r3
 8004266:	b21c      	sxth	r4, r3
 8004268:	f7fd fd90 	bl	8001d8c <height>
 800426c:	4603      	mov	r3, r0
 800426e:	3b01      	subs	r3, #1
 8004270:	b29b      	uxth	r3, r3
 8004272:	b21b      	sxth	r3, r3
 8004274:	4622      	mov	r2, r4
 8004276:	2100      	movs	r1, #0
 8004278:	2000      	movs	r0, #0
 800427a:	f000 fb8f 	bl	800499c <setAddrWindow>
    return 0;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	372c      	adds	r7, #44	; 0x2c
 8004284:	46bd      	mov	sp, r7
 8004286:	bd90      	pop	{r4, r7, pc}
 8004288:	40021000 	.word	0x40021000
 800428c:	40020400 	.word	0x40020400
 8004290:	20000748 	.word	0x20000748

08004294 <setRotation>:

void setRotation(uint8_t r)
{
 8004294:	b590      	push	{r4, r7, lr}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 800429e:	4bab      	ldr	r3, [pc, #684]	; (800454c <setRotation+0x2b8>)
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	4ba8      	ldr	r3, [pc, #672]	; (8004550 <setRotation+0x2bc>)
 80042ae:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 80042b0:	4ba7      	ldr	r3, [pc, #668]	; (8004550 <setRotation+0x2bc>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <setRotation+0x2e>
 80042bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80042c0:	e000      	b.n	80042c4 <setRotation+0x30>
 80042c2:	22f0      	movs	r2, #240	; 0xf0
 80042c4:	4ba3      	ldr	r3, [pc, #652]	; (8004554 <setRotation+0x2c0>)
 80042c6:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 80042c8:	4ba1      	ldr	r3, [pc, #644]	; (8004550 <setRotation+0x2bc>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <setRotation+0x44>
 80042d4:	22f0      	movs	r2, #240	; 0xf0
 80042d6:	e001      	b.n	80042dc <setRotation+0x48>
 80042d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80042dc:	4b9e      	ldr	r3, [pc, #632]	; (8004558 <setRotation+0x2c4>)
 80042de:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 80042e0:	4b9b      	ldr	r3, [pc, #620]	; (8004550 <setRotation+0x2bc>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	d817      	bhi.n	8004318 <setRotation+0x84>
 80042e8:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <setRotation+0x5c>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	08004301 	.word	0x08004301
 80042f4:	08004307 	.word	0x08004307
 80042f8:	0800430d 	.word	0x0800430d
 80042fc:	08004313 	.word	0x08004313
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8004300:	2348      	movs	r3, #72	; 0x48
 8004302:	72fb      	strb	r3, [r7, #11]
       break;
 8004304:	e008      	b.n	8004318 <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8004306:	2328      	movs	r3, #40	; 0x28
 8004308:	72fb      	strb	r3, [r7, #11]
       break;
 800430a:	e005      	b.n	8004318 <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 800430c:	2398      	movs	r3, #152	; 0x98
 800430e:	72fb      	strb	r3, [r7, #11]
       break;
 8004310:	e002      	b.n	8004318 <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8004312:	23f8      	movs	r3, #248	; 0xf8
 8004314:	72fb      	strb	r3, [r7, #11]
       break;
 8004316:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8004318:	4b90      	ldr	r3, [pc, #576]	; (800455c <setRotation+0x2c8>)
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <setRotation+0x9c>
       val ^= 0x80;
 8004324:	7afa      	ldrb	r2, [r7, #11]
 8004326:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800432a:	4053      	eors	r3, r2
 800432c:	b2db      	uxtb	r3, r3
 800432e:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 8004330:	4b8a      	ldr	r3, [pc, #552]	; (800455c <setRotation+0x2c8>)
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004338:	2b00      	cmp	r3, #0
 800433a:	d004      	beq.n	8004346 <setRotation+0xb2>
       val ^= 0x40;
 800433c:	7afb      	ldrb	r3, [r7, #11]
 800433e:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8004342:	b2db      	uxtb	r3, r3
 8004344:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 8004346:	4b85      	ldr	r3, [pc, #532]	; (800455c <setRotation+0x2c8>)
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800434e:	2b00      	cmp	r3, #0
 8004350:	d004      	beq.n	800435c <setRotation+0xc8>
       val ^= 0x08;
 8004352:	7afb      	ldrb	r3, [r7, #11]
 8004354:	f083 0308 	eor.w	r3, r3, #8
 8004358:	b2db      	uxtb	r3, r3
 800435a:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 800435c:	4b7f      	ldr	r3, [pc, #508]	; (800455c <setRotation+0x2c8>)
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8119 	beq.w	800459c <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 800436a:	4b7d      	ldr	r3, [pc, #500]	; (8004560 <setRotation+0x2cc>)
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	f646 0214 	movw	r2, #26644	; 0x6814
 8004372:	4293      	cmp	r3, r2
 8004374:	d128      	bne.n	80043c8 <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8004376:	7afb      	ldrb	r3, [r7, #11]
 8004378:	b25b      	sxtb	r3, r3
 800437a:	105b      	asrs	r3, r3, #1
 800437c:	b25b      	sxtb	r3, r3
 800437e:	b29b      	uxth	r3, r3
 8004380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004384:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8004386:	7afb      	ldrb	r3, [r7, #11]
 8004388:	105b      	asrs	r3, r3, #1
 800438a:	b29b      	uxth	r3, r3
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 8004392:	7afb      	ldrb	r3, [r7, #11]
 8004394:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004398:	b2db      	uxtb	r3, r3
 800439a:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 80043a0:	8a3b      	ldrh	r3, [r7, #16]
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	89fb      	ldrh	r3, [r7, #14]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	4313      	orrs	r3, r2
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	f043 0302 	orr.w	r3, r3, #2
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 80043b4:	233b      	movs	r3, #59	; 0x3b
 80043b6:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 80043b8:	f107 0308 	add.w	r3, r7, #8
 80043bc:	461a      	mov	r2, r3
 80043be:	2103      	movs	r1, #3
 80043c0:	20b6      	movs	r0, #182	; 0xb6
 80043c2:	f7fe f85d 	bl	8002480 <WriteCmdParamN>
           goto common_MC;
 80043c6:	e0a4      	b.n	8004512 <setRotation+0x27e>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 80043c8:	4b65      	ldr	r3, [pc, #404]	; (8004560 <setRotation+0x2cc>)
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	f641 1263 	movw	r2, #6499	; 0x1963
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00b      	beq.n	80043ec <setRotation+0x158>
 80043d4:	4b62      	ldr	r3, [pc, #392]	; (8004560 <setRotation+0x2cc>)
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	f249 4281 	movw	r2, #38017	; 0x9481
 80043dc:	4293      	cmp	r3, r2
 80043de:	d005      	beq.n	80043ec <setRotation+0x158>
 80043e0:	4b5f      	ldr	r3, [pc, #380]	; (8004560 <setRotation+0x2cc>)
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	f241 5211 	movw	r2, #5393	; 0x1511
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d139      	bne.n	8004460 <setRotation+0x1cc>
           if (val & 0x80)
 80043ec:	7afb      	ldrb	r3, [r7, #11]
 80043ee:	b25b      	sxtb	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	da04      	bge.n	80043fe <setRotation+0x16a>
               val |= 0x01;    //GS
 80043f4:	7afb      	ldrb	r3, [r7, #11]
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 80043fe:	7afb      	ldrb	r3, [r7, #11]
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <setRotation+0x17e>
               val |= 0x02;    //SS
 8004408:	7afb      	ldrb	r3, [r7, #11]
 800440a:	f043 0302 	orr.w	r3, r3, #2
 800440e:	b2db      	uxtb	r3, r3
 8004410:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 8004412:	4b53      	ldr	r3, [pc, #332]	; (8004560 <setRotation+0x2cc>)
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	f641 1263 	movw	r2, #6499	; 0x1963
 800441a:	4293      	cmp	r3, r2
 800441c:	d104      	bne.n	8004428 <setRotation+0x194>
 800441e:	7afb      	ldrb	r3, [r7, #11]
 8004420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004424:	b2db      	uxtb	r3, r3
 8004426:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8004428:	4b4d      	ldr	r3, [pc, #308]	; (8004560 <setRotation+0x2cc>)
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	f249 4281 	movw	r2, #38017	; 0x9481
 8004430:	4293      	cmp	r3, r2
 8004432:	d104      	bne.n	800443e <setRotation+0x1aa>
 8004434:	7afb      	ldrb	r3, [r7, #11]
 8004436:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 800443a:	b2db      	uxtb	r3, r3
 800443c:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 800443e:	4b48      	ldr	r3, [pc, #288]	; (8004560 <setRotation+0x2cc>)
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	f241 5211 	movw	r2, #5393	; 0x1511
 8004446:	4293      	cmp	r3, r2
 8004448:	d160      	bne.n	800450c <setRotation+0x278>
               val &= ~0x10;   //remove ML
 800444a:	7afb      	ldrb	r3, [r7, #11]
 800444c:	f023 0310 	bic.w	r3, r3, #16
 8004450:	b2db      	uxtb	r3, r3
 8004452:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 8004454:	7afb      	ldrb	r3, [r7, #11]
 8004456:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800445a:	b2db      	uxtb	r3, r3
 800445c:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 800445e:	e055      	b.n	800450c <setRotation+0x278>
      }
       else if (is8347) {
 8004460:	4b40      	ldr	r3, [pc, #256]	; (8004564 <setRotation+0x2d0>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d053      	beq.n	8004510 <setRotation+0x27c>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8004468:	4b3f      	ldr	r3, [pc, #252]	; (8004568 <setRotation+0x2d4>)
 800446a:	2202      	movs	r2, #2
 800446c:	801a      	strh	r2, [r3, #0]
 800446e:	4b3f      	ldr	r3, [pc, #252]	; (800456c <setRotation+0x2d8>)
 8004470:	2206      	movs	r2, #6
 8004472:	801a      	strh	r2, [r3, #0]
 8004474:	4b3e      	ldr	r3, [pc, #248]	; (8004570 <setRotation+0x2dc>)
 8004476:	2222      	movs	r2, #34	; 0x22
 8004478:	801a      	strh	r2, [r3, #0]
 800447a:	4b3e      	ldr	r3, [pc, #248]	; (8004574 <setRotation+0x2e0>)
 800447c:	2202      	movs	r2, #2
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	4b3d      	ldr	r3, [pc, #244]	; (8004578 <setRotation+0x2e4>)
 8004482:	2204      	movs	r2, #4
 8004484:	801a      	strh	r2, [r3, #0]
 8004486:	4b3d      	ldr	r3, [pc, #244]	; (800457c <setRotation+0x2e8>)
 8004488:	2206      	movs	r2, #6
 800448a:	801a      	strh	r2, [r3, #0]
 800448c:	4b3c      	ldr	r3, [pc, #240]	; (8004580 <setRotation+0x2ec>)
 800448e:	2208      	movs	r2, #8
 8004490:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 8004492:	4b33      	ldr	r3, [pc, #204]	; (8004560 <setRotation+0x2cc>)
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	2b65      	cmp	r3, #101	; 0x65
 8004498:	d121      	bne.n	80044de <setRotation+0x24a>
               val |= 0x01;    //GS=1
 800449a:	7afb      	ldrb	r3, [r7, #11]
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 80044a4:	7afb      	ldrb	r3, [r7, #11]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <setRotation+0x226>
 80044ae:	7afa      	ldrb	r2, [r7, #11]
 80044b0:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 80044b4:	4053      	eors	r3, r2
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d006      	beq.n	80044d2 <setRotation+0x23e>
 80044c4:	4b28      	ldr	r3, [pc, #160]	; (8004568 <setRotation+0x2d4>)
 80044c6:	2282      	movs	r2, #130	; 0x82
 80044c8:	801a      	strh	r2, [r3, #0]
 80044ca:	4b28      	ldr	r3, [pc, #160]	; (800456c <setRotation+0x2d8>)
 80044cc:	2280      	movs	r2, #128	; 0x80
 80044ce:	801a      	strh	r2, [r3, #0]
 80044d0:	e005      	b.n	80044de <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 80044d2:	4b25      	ldr	r3, [pc, #148]	; (8004568 <setRotation+0x2d4>)
 80044d4:	2280      	movs	r2, #128	; 0x80
 80044d6:	801a      	strh	r2, [r3, #0]
 80044d8:	4b24      	ldr	r3, [pc, #144]	; (800456c <setRotation+0x2d8>)
 80044da:	2282      	movs	r2, #130	; 0x82
 80044dc:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 80044de:	4b20      	ldr	r3, [pc, #128]	; (8004560 <setRotation+0x2cc>)
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	f245 2252 	movw	r2, #21074	; 0x5252
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d129      	bne.n	800453e <setRotation+0x2aa>
               val |= 0x02;   //VERT_SCROLLON
 80044ea:	7afb      	ldrb	r3, [r7, #11]
 80044ec:	f043 0302 	orr.w	r3, r3, #2
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 80044f4:	7afb      	ldrb	r3, [r7, #11]
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01f      	beq.n	800453e <setRotation+0x2aa>
 80044fe:	7afa      	ldrb	r2, [r7, #11]
 8004500:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8004504:	4053      	eors	r3, r2
 8004506:	b2db      	uxtb	r3, r3
 8004508:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 800450a:	e018      	b.n	800453e <setRotation+0x2aa>
           goto common_MC;
 800450c:	bf00      	nop
 800450e:	e000      	b.n	8004512 <setRotation+0x27e>
       }
     common_MC:
 8004510:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <setRotation+0x2d4>)
 8004514:	222a      	movs	r2, #42	; 0x2a
 8004516:	801a      	strh	r2, [r3, #0]
 8004518:	4b14      	ldr	r3, [pc, #80]	; (800456c <setRotation+0x2d8>)
 800451a:	222b      	movs	r2, #43	; 0x2b
 800451c:	801a      	strh	r2, [r3, #0]
 800451e:	4b14      	ldr	r3, [pc, #80]	; (8004570 <setRotation+0x2dc>)
 8004520:	222c      	movs	r2, #44	; 0x2c
 8004522:	801a      	strh	r2, [r3, #0]
 8004524:	4b13      	ldr	r3, [pc, #76]	; (8004574 <setRotation+0x2e0>)
 8004526:	222a      	movs	r2, #42	; 0x2a
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	4b13      	ldr	r3, [pc, #76]	; (8004578 <setRotation+0x2e4>)
 800452c:	222a      	movs	r2, #42	; 0x2a
 800452e:	801a      	strh	r2, [r3, #0]
 8004530:	4b12      	ldr	r3, [pc, #72]	; (800457c <setRotation+0x2e8>)
 8004532:	222b      	movs	r2, #43	; 0x2b
 8004534:	801a      	strh	r2, [r3, #0]
 8004536:	4b12      	ldr	r3, [pc, #72]	; (8004580 <setRotation+0x2ec>)
 8004538:	222b      	movs	r2, #43	; 0x2b
 800453a:	801a      	strh	r2, [r3, #0]
 800453c:	e000      	b.n	8004540 <setRotation+0x2ac>
			goto common_BGR;
 800453e:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8004540:	4b08      	ldr	r3, [pc, #32]	; (8004564 <setRotation+0x2d0>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01d      	beq.n	8004584 <setRotation+0x2f0>
 8004548:	2316      	movs	r3, #22
 800454a:	e01c      	b.n	8004586 <setRotation+0x2f2>
 800454c:	2000074c 	.word	0x2000074c
 8004550:	20000408 	.word	0x20000408
 8004554:	200003c8 	.word	0x200003c8
 8004558:	200003ca 	.word	0x200003ca
 800455c:	20000748 	.word	0x20000748
 8004560:	20000756 	.word	0x20000756
 8004564:	20000405 	.word	0x20000405
 8004568:	20000750 	.word	0x20000750
 800456c:	2000074e 	.word	0x2000074e
 8004570:	20000746 	.word	0x20000746
 8004574:	20000752 	.word	0x20000752
 8004578:	2000075a 	.word	0x2000075a
 800457c:	2000074a 	.word	0x2000074a
 8004580:	20000754 	.word	0x20000754
 8004584:	2336      	movs	r3, #54	; 0x36
 8004586:	f107 020b 	add.w	r2, r7, #11
 800458a:	2101      	movs	r1, #1
 800458c:	4618      	mov	r0, r3
 800458e:	f7fd ff77 	bl	8002480 <WriteCmdParamN>
       _lcd_madctl = val;
 8004592:	7afb      	ldrb	r3, [r7, #11]
 8004594:	b29a      	uxth	r2, r3
 8004596:	4b73      	ldr	r3, [pc, #460]	; (8004764 <setRotation+0x4d0>)
 8004598:	801a      	strh	r2, [r3, #0]
 800459a:	e09e      	b.n	80046da <setRotation+0x446>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 800459c:	4b72      	ldr	r3, [pc, #456]	; (8004768 <setRotation+0x4d4>)
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	f247 7293 	movw	r2, #30611	; 0x7793
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d010      	beq.n	80045ca <setRotation+0x336>
 80045a8:	f247 7293 	movw	r2, #30611	; 0x7793
 80045ac:	4293      	cmp	r3, r2
 80045ae:	dc04      	bgt.n	80045ba <setRotation+0x326>
 80045b0:	f245 4220 	movw	r2, #21536	; 0x5420
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d008      	beq.n	80045ca <setRotation+0x336>
 80045b8:	e045      	b.n	8004646 <setRotation+0x3b2>
 80045ba:	f249 3226 	movw	r2, #37670	; 0x9326
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <setRotation+0x336>
 80045c2:	f24b 5209 	movw	r2, #46345	; 0xb509
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d13d      	bne.n	8004646 <setRotation+0x3b2>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 80045ca:	4b68      	ldr	r3, [pc, #416]	; (800476c <setRotation+0x4d8>)
 80045cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045d0:	801a      	strh	r2, [r3, #0]
 80045d2:	4b67      	ldr	r3, [pc, #412]	; (8004770 <setRotation+0x4dc>)
 80045d4:	f240 2201 	movw	r2, #513	; 0x201
 80045d8:	801a      	strh	r2, [r3, #0]
 80045da:	4b66      	ldr	r3, [pc, #408]	; (8004774 <setRotation+0x4e0>)
 80045dc:	f240 2202 	movw	r2, #514	; 0x202
 80045e0:	801a      	strh	r2, [r3, #0]
 80045e2:	4b65      	ldr	r3, [pc, #404]	; (8004778 <setRotation+0x4e4>)
 80045e4:	f44f 7204 	mov.w	r2, #528	; 0x210
 80045e8:	801a      	strh	r2, [r3, #0]
 80045ea:	4b64      	ldr	r3, [pc, #400]	; (800477c <setRotation+0x4e8>)
 80045ec:	f240 2211 	movw	r2, #529	; 0x211
 80045f0:	801a      	strh	r2, [r3, #0]
 80045f2:	4b63      	ldr	r3, [pc, #396]	; (8004780 <setRotation+0x4ec>)
 80045f4:	f240 2212 	movw	r2, #530	; 0x212
 80045f8:	801a      	strh	r2, [r3, #0]
 80045fa:	4b62      	ldr	r3, [pc, #392]	; (8004784 <setRotation+0x4f0>)
 80045fc:	f240 2213 	movw	r2, #531	; 0x213
 8004600:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8004602:	7afb      	ldrb	r3, [r7, #11]
 8004604:	b25b      	sxtb	r3, r3
 8004606:	b29a      	uxth	r2, r3
 8004608:	4b5f      	ldr	r3, [pc, #380]	; (8004788 <setRotation+0x4f4>)
 800460a:	4013      	ands	r3, r2
 800460c:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 800460e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8004612:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8004614:	4b54      	ldr	r3, [pc, #336]	; (8004768 <setRotation+0x4d4>)
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	f249 3226 	movw	r2, #37670	; 0x9326
 800461c:	4293      	cmp	r3, r2
 800461e:	d005      	beq.n	800462c <setRotation+0x398>
 8004620:	4b51      	ldr	r3, [pc, #324]	; (8004768 <setRotation+0x4d4>)
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	f245 4220 	movw	r2, #21536	; 0x5420
 8004628:	4293      	cmp	r3, r2
 800462a:	d102      	bne.n	8004632 <setRotation+0x39e>
 800462c:	8abb      	ldrh	r3, [r7, #20]
 800462e:	085b      	lsrs	r3, r3, #1
 8004630:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 8004632:	8a3a      	ldrh	r2, [r7, #16]
 8004634:	8abb      	ldrh	r3, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	b29b      	uxth	r3, r3
 800463a:	4619      	mov	r1, r3
 800463c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004640:	f7fd fc60 	bl	8001f04 <WriteCmdData>
           goto common_SS;
 8004644:	e022      	b.n	800468c <setRotation+0x3f8>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8004646:	4b49      	ldr	r3, [pc, #292]	; (800476c <setRotation+0x4d8>)
 8004648:	2220      	movs	r2, #32
 800464a:	801a      	strh	r2, [r3, #0]
 800464c:	4b48      	ldr	r3, [pc, #288]	; (8004770 <setRotation+0x4dc>)
 800464e:	2221      	movs	r2, #33	; 0x21
 8004650:	801a      	strh	r2, [r3, #0]
 8004652:	4b48      	ldr	r3, [pc, #288]	; (8004774 <setRotation+0x4e0>)
 8004654:	2222      	movs	r2, #34	; 0x22
 8004656:	801a      	strh	r2, [r3, #0]
 8004658:	4b47      	ldr	r3, [pc, #284]	; (8004778 <setRotation+0x4e4>)
 800465a:	2250      	movs	r2, #80	; 0x50
 800465c:	801a      	strh	r2, [r3, #0]
 800465e:	4b47      	ldr	r3, [pc, #284]	; (800477c <setRotation+0x4e8>)
 8004660:	2251      	movs	r2, #81	; 0x51
 8004662:	801a      	strh	r2, [r3, #0]
 8004664:	4b46      	ldr	r3, [pc, #280]	; (8004780 <setRotation+0x4ec>)
 8004666:	2252      	movs	r2, #82	; 0x52
 8004668:	801a      	strh	r2, [r3, #0]
 800466a:	4b46      	ldr	r3, [pc, #280]	; (8004784 <setRotation+0x4f0>)
 800466c:	2253      	movs	r2, #83	; 0x53
 800466e:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8004670:	7afb      	ldrb	r3, [r7, #11]
 8004672:	b25b      	sxtb	r3, r3
 8004674:	b29a      	uxth	r2, r3
 8004676:	4b44      	ldr	r3, [pc, #272]	; (8004788 <setRotation+0x4f4>)
 8004678:	4013      	ands	r3, r2
 800467a:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 800467c:	8a3b      	ldrh	r3, [r7, #16]
 800467e:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 8004682:	b29b      	uxth	r3, r3
 8004684:	4619      	mov	r1, r3
 8004686:	2060      	movs	r0, #96	; 0x60
 8004688:	f7fd fc3c 	bl	8001f04 <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 800468c:	7afb      	ldrb	r3, [r7, #11]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	b29b      	uxth	r3, r3
 8004692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004696:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8004698:	89fb      	ldrh	r3, [r7, #14]
 800469a:	4619      	mov	r1, r3
 800469c:	2001      	movs	r0, #1
 800469e:	f7fd fc31 	bl	8001f04 <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 80046a2:	7afb      	ldrb	r3, [r7, #11]
 80046a4:	109b      	asrs	r3, r3, #2
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 80046ae:	7afb      	ldrb	r3, [r7, #11]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <setRotation+0x42c>
               ORG |= 0x1000;  //BGR
 80046b8:	8afb      	ldrh	r3, [r7, #22]
 80046ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046be:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 80046c0:	8afb      	ldrh	r3, [r7, #22]
 80046c2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	4b26      	ldr	r3, [pc, #152]	; (8004764 <setRotation+0x4d0>)
 80046ca:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 80046cc:	4b25      	ldr	r3, [pc, #148]	; (8004764 <setRotation+0x4d0>)
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	4619      	mov	r1, r3
 80046d2:	2003      	movs	r0, #3
 80046d4:	f7fd fc16 	bl	8001f04 <WriteCmdData>
           break;
 80046d8:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 80046da:	4b2c      	ldr	r3, [pc, #176]	; (800478c <setRotation+0x4f8>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d023      	beq.n	800472e <setRotation+0x49a>
 80046e6:	4b2a      	ldr	r3, [pc, #168]	; (8004790 <setRotation+0x4fc>)
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d11d      	bne.n	800472e <setRotation+0x49a>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 80046f2:	4b1e      	ldr	r3, [pc, #120]	; (800476c <setRotation+0x4d8>)
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	81bb      	strh	r3, [r7, #12]
 80046f8:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <setRotation+0x4dc>)
 80046fa:	881a      	ldrh	r2, [r3, #0]
 80046fc:	4b1b      	ldr	r3, [pc, #108]	; (800476c <setRotation+0x4d8>)
 80046fe:	801a      	strh	r2, [r3, #0]
 8004700:	4a1b      	ldr	r2, [pc, #108]	; (8004770 <setRotation+0x4dc>)
 8004702:	89bb      	ldrh	r3, [r7, #12]
 8004704:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8004706:	4b1c      	ldr	r3, [pc, #112]	; (8004778 <setRotation+0x4e4>)
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	81bb      	strh	r3, [r7, #12]
 800470c:	4b1c      	ldr	r3, [pc, #112]	; (8004780 <setRotation+0x4ec>)
 800470e:	881a      	ldrh	r2, [r3, #0]
 8004710:	4b19      	ldr	r3, [pc, #100]	; (8004778 <setRotation+0x4e4>)
 8004712:	801a      	strh	r2, [r3, #0]
 8004714:	4a1a      	ldr	r2, [pc, #104]	; (8004780 <setRotation+0x4ec>)
 8004716:	89bb      	ldrh	r3, [r7, #12]
 8004718:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 800471a:	4b18      	ldr	r3, [pc, #96]	; (800477c <setRotation+0x4e8>)
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	81bb      	strh	r3, [r7, #12]
 8004720:	4b18      	ldr	r3, [pc, #96]	; (8004784 <setRotation+0x4f0>)
 8004722:	881a      	ldrh	r2, [r3, #0]
 8004724:	4b15      	ldr	r3, [pc, #84]	; (800477c <setRotation+0x4e8>)
 8004726:	801a      	strh	r2, [r3, #0]
 8004728:	4a16      	ldr	r2, [pc, #88]	; (8004784 <setRotation+0x4f0>)
 800472a:	89bb      	ldrh	r3, [r7, #12]
 800472c:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 800472e:	f7fd fb21 	bl	8001d74 <width>
 8004732:	4603      	mov	r3, r0
 8004734:	3b01      	subs	r3, #1
 8004736:	b29b      	uxth	r3, r3
 8004738:	b21c      	sxth	r4, r3
 800473a:	f7fd fb27 	bl	8001d8c <height>
 800473e:	4603      	mov	r3, r0
 8004740:	3b01      	subs	r3, #1
 8004742:	b29b      	uxth	r3, r3
 8004744:	b21b      	sxth	r3, r3
 8004746:	4622      	mov	r2, r4
 8004748:	2100      	movs	r1, #0
 800474a:	2000      	movs	r0, #0
 800474c:	f000 f926 	bl	800499c <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8004750:	2200      	movs	r2, #0
 8004752:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004756:	2000      	movs	r0, #0
 8004758:	f000 fa44 	bl	8004be4 <vertScroll>
}
 800475c:	bf00      	nop
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	bd90      	pop	{r4, r7, pc}
 8004764:	2000075c 	.word	0x2000075c
 8004768:	20000756 	.word	0x20000756
 800476c:	20000750 	.word	0x20000750
 8004770:	2000074e 	.word	0x2000074e
 8004774:	20000746 	.word	0x20000746
 8004778:	20000752 	.word	0x20000752
 800477c:	2000075a 	.word	0x2000075a
 8004780:	2000074a 	.word	0x2000074a
 8004784:	20000754 	.word	0x20000754
 8004788:	ffff8000 	.word	0xffff8000
 800478c:	20000408 	.word	0x20000408
 8004790:	20000748 	.word	0x20000748

08004794 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8004794:	b590      	push	{r4, r7, lr}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	80fb      	strh	r3, [r7, #6]
 800479e:	460b      	mov	r3, r1
 80047a0:	80bb      	strh	r3, [r7, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 80047a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f2c0 80e3 	blt.w	8004976 <drawPixel+0x1e2>
 80047b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f2c0 80de 	blt.w	8004976 <drawPixel+0x1e2>
 80047ba:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80047be:	f7fd fad9 	bl	8001d74 <width>
 80047c2:	4603      	mov	r3, r0
 80047c4:	429c      	cmp	r4, r3
 80047c6:	f280 80d6 	bge.w	8004976 <drawPixel+0x1e2>
 80047ca:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80047ce:	f7fd fadd 	bl	8001d8c <height>
 80047d2:	4603      	mov	r3, r0
 80047d4:	429c      	cmp	r4, r3
 80047d6:	f280 80ce 	bge.w	8004976 <drawPixel+0x1e2>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 80047da:	4b69      	ldr	r3, [pc, #420]	; (8004980 <drawPixel+0x1ec>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <drawPixel+0x5a>
 80047e2:	887b      	ldrh	r3, [r7, #2]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fd fadd 	bl	8001da4 <color565_to_555>
 80047ea:	4603      	mov	r3, r0
 80047ec:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 80047ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80047f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80047f6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80047fa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80047fe:	f000 f8cd 	bl	800499c <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8004802:	4b60      	ldr	r3, [pc, #384]	; (8004984 <drawPixel+0x1f0>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 80ad 	beq.w	8004966 <drawPixel+0x1d2>
 800480c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004810:	485d      	ldr	r0, [pc, #372]	; (8004988 <drawPixel+0x1f4>)
 8004812:	f7fd fa61 	bl	8001cd8 <PIN_LOW>
 8004816:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800481a:	485c      	ldr	r0, [pc, #368]	; (800498c <drawPixel+0x1f8>)
 800481c:	f7fd fa5c 	bl	8001cd8 <PIN_LOW>
 8004820:	4b5b      	ldr	r3, [pc, #364]	; (8004990 <drawPixel+0x1fc>)
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	0a1b      	lsrs	r3, r3, #8
 8004826:	b29b      	uxth	r3, r3
 8004828:	73fb      	strb	r3, [r7, #15]
 800482a:	4b59      	ldr	r3, [pc, #356]	; (8004990 <drawPixel+0x1fc>)
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	73bb      	strb	r3, [r7, #14]
 8004830:	4b56      	ldr	r3, [pc, #344]	; (800498c <drawPixel+0x1f8>)
 8004832:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8004836:	619a      	str	r2, [r3, #24]
 8004838:	4b56      	ldr	r3, [pc, #344]	; (8004994 <drawPixel+0x200>)
 800483a:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800483e:	619a      	str	r2, [r3, #24]
 8004840:	4b55      	ldr	r3, [pc, #340]	; (8004998 <drawPixel+0x204>)
 8004842:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004846:	619a      	str	r2, [r3, #24]
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	4a52      	ldr	r2, [pc, #328]	; (8004998 <drawPixel+0x204>)
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	6193      	str	r3, [r2, #24]
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	021b      	lsls	r3, r3, #8
 8004858:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	015b      	lsls	r3, r3, #5
 8004860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004864:	431a      	orrs	r2, r3
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	015b      	lsls	r3, r3, #5
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	431a      	orrs	r2, r3
 8004870:	4b48      	ldr	r3, [pc, #288]	; (8004994 <drawPixel+0x200>)
 8004872:	619a      	str	r2, [r3, #24]
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	105b      	asrs	r3, r3, #1
 8004878:	f003 0208 	and.w	r2, r3, #8
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	431a      	orrs	r2, r3
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	105b      	asrs	r3, r3, #1
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	431a      	orrs	r2, r3
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	10db      	asrs	r3, r3, #3
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	431a      	orrs	r2, r3
 800489a:	4b3c      	ldr	r3, [pc, #240]	; (800498c <drawPixel+0x1f8>)
 800489c:	619a      	str	r2, [r3, #24]
 800489e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048a2:	483a      	ldr	r0, [pc, #232]	; (800498c <drawPixel+0x1f8>)
 80048a4:	f7fd fa18 	bl	8001cd8 <PIN_LOW>
 80048a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048ac:	4837      	ldr	r0, [pc, #220]	; (800498c <drawPixel+0x1f8>)
 80048ae:	f7fd fa23 	bl	8001cf8 <PIN_HIGH>
 80048b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048b6:	4835      	ldr	r0, [pc, #212]	; (800498c <drawPixel+0x1f8>)
 80048b8:	f7fd fa1e 	bl	8001cf8 <PIN_HIGH>
 80048bc:	4b33      	ldr	r3, [pc, #204]	; (800498c <drawPixel+0x1f8>)
 80048be:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80048c2:	619a      	str	r2, [r3, #24]
 80048c4:	4b33      	ldr	r3, [pc, #204]	; (8004994 <drawPixel+0x200>)
 80048c6:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80048ca:	619a      	str	r2, [r3, #24]
 80048cc:	4b32      	ldr	r3, [pc, #200]	; (8004998 <drawPixel+0x204>)
 80048ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048d2:	619a      	str	r2, [r3, #24]
 80048d4:	7bbb      	ldrb	r3, [r7, #14]
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4a2f      	ldr	r2, [pc, #188]	; (8004998 <drawPixel+0x204>)
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	6193      	str	r3, [r2, #24]
 80048e0:	7bbb      	ldrb	r3, [r7, #14]
 80048e2:	021b      	lsls	r3, r3, #8
 80048e4:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80048e8:	7bbb      	ldrb	r3, [r7, #14]
 80048ea:	015b      	lsls	r3, r3, #5
 80048ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f0:	431a      	orrs	r2, r3
 80048f2:	7bbb      	ldrb	r3, [r7, #14]
 80048f4:	015b      	lsls	r3, r3, #5
 80048f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fa:	431a      	orrs	r2, r3
 80048fc:	4b25      	ldr	r3, [pc, #148]	; (8004994 <drawPixel+0x200>)
 80048fe:	619a      	str	r2, [r3, #24]
 8004900:	7bbb      	ldrb	r3, [r7, #14]
 8004902:	105b      	asrs	r3, r3, #1
 8004904:	f003 0208 	and.w	r2, r3, #8
 8004908:	7bbb      	ldrb	r3, [r7, #14]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004910:	431a      	orrs	r2, r3
 8004912:	7bbb      	ldrb	r3, [r7, #14]
 8004914:	105b      	asrs	r3, r3, #1
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	431a      	orrs	r2, r3
 800491c:	7bbb      	ldrb	r3, [r7, #14]
 800491e:	10db      	asrs	r3, r3, #3
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	431a      	orrs	r2, r3
 8004926:	4b19      	ldr	r3, [pc, #100]	; (800498c <drawPixel+0x1f8>)
 8004928:	619a      	str	r2, [r3, #24]
 800492a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800492e:	4817      	ldr	r0, [pc, #92]	; (800498c <drawPixel+0x1f8>)
 8004930:	f7fd f9d2 	bl	8001cd8 <PIN_LOW>
 8004934:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004938:	4814      	ldr	r0, [pc, #80]	; (800498c <drawPixel+0x1f8>)
 800493a:	f7fd f9dd 	bl	8001cf8 <PIN_HIGH>
 800493e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004942:	4812      	ldr	r0, [pc, #72]	; (800498c <drawPixel+0x1f8>)
 8004944:	f7fd f9d8 	bl	8001cf8 <PIN_HIGH>
 8004948:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800494c:	480f      	ldr	r0, [pc, #60]	; (800498c <drawPixel+0x1f8>)
 800494e:	f7fd f9d3 	bl	8001cf8 <PIN_HIGH>
 8004952:	887b      	ldrh	r3, [r7, #2]
 8004954:	4618      	mov	r0, r3
 8004956:	f7fd fb53 	bl	8002000 <write24>
 800495a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800495e:	480a      	ldr	r0, [pc, #40]	; (8004988 <drawPixel+0x1f4>)
 8004960:	f7fd f9ca 	bl	8001cf8 <PIN_HIGH>
 8004964:	e008      	b.n	8004978 <drawPixel+0x1e4>
   WriteCmdData(_MW, color);
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <drawPixel+0x1fc>)
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	887a      	ldrh	r2, [r7, #2]
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f7fd fac8 	bl	8001f04 <WriteCmdData>
 8004974:	e000      	b.n	8004978 <drawPixel+0x1e4>
       return;
 8004976:	bf00      	nop
}
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	bd90      	pop	{r4, r7, pc}
 800497e:	bf00      	nop
 8004980:	20000406 	.word	0x20000406
 8004984:	20000407 	.word	0x20000407
 8004988:	40020400 	.word	0x40020400
 800498c:	40021000 	.word	0x40021000
 8004990:	20000746 	.word	0x20000746
 8004994:	40021400 	.word	0x40021400
 8004998:	40021800 	.word	0x40021800

0800499c <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 800499c:	b590      	push	{r4, r7, lr}
 800499e:	b087      	sub	sp, #28
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	4604      	mov	r4, r0
 80049a4:	4608      	mov	r0, r1
 80049a6:	4611      	mov	r1, r2
 80049a8:	461a      	mov	r2, r3
 80049aa:	4623      	mov	r3, r4
 80049ac:	80fb      	strh	r3, [r7, #6]
 80049ae:	4603      	mov	r3, r0
 80049b0:	80bb      	strh	r3, [r7, #4]
 80049b2:	460b      	mov	r3, r1
 80049b4:	807b      	strh	r3, [r7, #2]
 80049b6:	4613      	mov	r3, r2
 80049b8:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 80049ba:	4b80      	ldr	r3, [pc, #512]	; (8004bbc <setAddrWindow+0x220>)
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	f249 3227 	movw	r2, #37671	; 0x9327
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d117      	bne.n	80049f6 <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 80049c6:	4b7e      	ldr	r3, [pc, #504]	; (8004bc0 <setAddrWindow+0x224>)
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d107      	bne.n	80049de <setAddrWindow+0x42>
 80049ce:	88bb      	ldrh	r3, [r7, #4]
 80049d0:	3320      	adds	r3, #32
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	80bb      	strh	r3, [r7, #4]
 80049d6:	883b      	ldrh	r3, [r7, #0]
 80049d8:	3320      	adds	r3, #32
 80049da:	b29b      	uxth	r3, r3
 80049dc:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 80049de:	4b78      	ldr	r3, [pc, #480]	; (8004bc0 <setAddrWindow+0x224>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d107      	bne.n	80049f6 <setAddrWindow+0x5a>
 80049e6:	88fb      	ldrh	r3, [r7, #6]
 80049e8:	3320      	adds	r3, #32
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	80fb      	strh	r3, [r7, #6]
 80049ee:	887b      	ldrh	r3, [r7, #2]
 80049f0:	3320      	adds	r3, #32
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 80049f6:	4b71      	ldr	r3, [pc, #452]	; (8004bbc <setAddrWindow+0x220>)
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	f241 5226 	movw	r2, #5414	; 0x1526
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d128      	bne.n	8004a54 <setAddrWindow+0xb8>
 8004a02:	4b6f      	ldr	r3, [pc, #444]	; (8004bc0 <setAddrWindow+0x224>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d022      	beq.n	8004a54 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8004a0e:	887a      	ldrh	r2, [r7, #2]
 8004a10:	88fb      	ldrh	r3, [r7, #6]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	81fb      	strh	r3, [r7, #14]
 8004a18:	883a      	ldrh	r2, [r7, #0]
 8004a1a:	88bb      	ldrh	r3, [r7, #4]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8004a22:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <setAddrWindow+0x9c>
 8004a2a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3301      	adds	r3, #1
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	803b      	strh	r3, [r7, #0]
 8004a36:	e00d      	b.n	8004a54 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8004a38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d109      	bne.n	8004a54 <setAddrWindow+0xb8>
 8004a40:	887a      	ldrh	r2, [r7, #2]
 8004a42:	89bb      	ldrh	r3, [r7, #12]
 8004a44:	4413      	add	r3, r2
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	807b      	strh	r3, [r7, #2]
 8004a4a:	883a      	ldrh	r2, [r7, #0]
 8004a4c:	89bb      	ldrh	r3, [r7, #12]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8004a54:	4b5b      	ldr	r3, [pc, #364]	; (8004bc4 <setAddrWindow+0x228>)
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d054      	beq.n	8004b0a <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8004a60:	4b59      	ldr	r3, [pc, #356]	; (8004bc8 <setAddrWindow+0x22c>)
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b2d8      	uxtb	r0, r3
 8004a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a6a:	121b      	asrs	r3, r3, #8
 8004a6c:	b21b      	sxth	r3, r3
 8004a6e:	b2d9      	uxtb	r1, r3
 8004a70:	88fb      	ldrh	r3, [r7, #6]
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a78:	121b      	asrs	r3, r3, #8
 8004a7a:	b21b      	sxth	r3, r3
 8004a7c:	b2dc      	uxtb	r4, r3
 8004a7e:	887b      	ldrh	r3, [r7, #2]
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	4623      	mov	r3, r4
 8004a86:	f7fd febd 	bl	8002804 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8004a8a:	4b50      	ldr	r3, [pc, #320]	; (8004bcc <setAddrWindow+0x230>)
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	b2d8      	uxtb	r0, r3
 8004a90:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004a94:	121b      	asrs	r3, r3, #8
 8004a96:	b21b      	sxth	r3, r3
 8004a98:	b2d9      	uxtb	r1, r3
 8004a9a:	88bb      	ldrh	r3, [r7, #4]
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004aa2:	121b      	asrs	r3, r3, #8
 8004aa4:	b21b      	sxth	r3, r3
 8004aa6:	b2dc      	uxtb	r4, r3
 8004aa8:	883b      	ldrh	r3, [r7, #0]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	4623      	mov	r3, r4
 8004ab0:	f7fd fea8 	bl	8002804 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8004ab4:	4b46      	ldr	r3, [pc, #280]	; (8004bd0 <setAddrWindow+0x234>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d07b      	beq.n	8004bb4 <setAddrWindow+0x218>
 8004abc:	4b3f      	ldr	r3, [pc, #252]	; (8004bbc <setAddrWindow+0x220>)
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	2b65      	cmp	r3, #101	; 0x65
 8004ac2:	d177      	bne.n	8004bb4 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8004ac4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ac8:	121b      	asrs	r3, r3, #8
 8004aca:	b21b      	sxth	r3, r3
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	723b      	strb	r3, [r7, #8]
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8004ad6:	4b3f      	ldr	r3, [pc, #252]	; (8004bd4 <setAddrWindow+0x238>)
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	f107 0208 	add.w	r2, r7, #8
 8004ade:	2102      	movs	r1, #2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fd fccd 	bl	8002480 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 8004ae6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004aea:	121b      	asrs	r3, r3, #8
 8004aec:	b21b      	sxth	r3, r3
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	723b      	strb	r3, [r7, #8]
 8004af2:	88bb      	ldrh	r3, [r7, #4]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8004af8:	4b37      	ldr	r3, [pc, #220]	; (8004bd8 <setAddrWindow+0x23c>)
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	f107 0208 	add.w	r2, r7, #8
 8004b00:	2102      	movs	r1, #2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fd fcbc 	bl	8002480 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8004b08:	e054      	b.n	8004bb4 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 8004b0a:	4b32      	ldr	r3, [pc, #200]	; (8004bd4 <setAddrWindow+0x238>)
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	88fa      	ldrh	r2, [r7, #6]
 8004b10:	4611      	mov	r1, r2
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fd f9f6 	bl	8001f04 <WriteCmdData>
       WriteCmdData(_MP, y);
 8004b18:	4b2f      	ldr	r3, [pc, #188]	; (8004bd8 <setAddrWindow+0x23c>)
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	88ba      	ldrh	r2, [r7, #4]
 8004b1e:	4611      	mov	r1, r2
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fd f9ef 	bl	8001f04 <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8004b26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d105      	bne.n	8004b3e <setAddrWindow+0x1a2>
 8004b32:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004b36:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d03a      	beq.n	8004bb4 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8004b3e:	4b21      	ldr	r3, [pc, #132]	; (8004bc4 <setAddrWindow+0x228>)
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d018      	beq.n	8004b7c <setAddrWindow+0x1e0>
               if (rotation & 1)
 8004b4a:	4b1d      	ldr	r3, [pc, #116]	; (8004bc0 <setAddrWindow+0x224>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d009      	beq.n	8004b6a <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 8004b56:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	b21a      	sxth	r2, r3
 8004b5e:	88bb      	ldrh	r3, [r7, #4]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	80bb      	strh	r3, [r7, #4]
 8004b64:	88bb      	ldrh	r3, [r7, #4]
 8004b66:	803b      	strh	r3, [r7, #0]
 8004b68:	e008      	b.n	8004b7c <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 8004b6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	b21a      	sxth	r2, r3
 8004b72:	88fb      	ldrh	r3, [r7, #6]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	80fb      	strh	r3, [r7, #6]
 8004b78:	88fb      	ldrh	r3, [r7, #6]
 8004b7a:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8004b7c:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <setAddrWindow+0x22c>)
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	88fa      	ldrh	r2, [r7, #6]
 8004b82:	4611      	mov	r1, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fd f9bd 	bl	8001f04 <WriteCmdData>
           WriteCmdData(_SP, y);
 8004b8a:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <setAddrWindow+0x230>)
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	88ba      	ldrh	r2, [r7, #4]
 8004b90:	4611      	mov	r1, r2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fd f9b6 	bl	8001f04 <WriteCmdData>
           WriteCmdData(_EC, x1);
 8004b98:	4b10      	ldr	r3, [pc, #64]	; (8004bdc <setAddrWindow+0x240>)
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	887a      	ldrh	r2, [r7, #2]
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fd f9af 	bl	8001f04 <WriteCmdData>
           WriteCmdData(_EP, y1);
 8004ba6:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <setAddrWindow+0x244>)
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	883a      	ldrh	r2, [r7, #0]
 8004bac:	4611      	mov	r1, r2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fd f9a8 	bl	8001f04 <WriteCmdData>
}
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd90      	pop	{r4, r7, pc}
 8004bbc:	20000756 	.word	0x20000756
 8004bc0:	20000408 	.word	0x20000408
 8004bc4:	20000748 	.word	0x20000748
 8004bc8:	20000752 	.word	0x20000752
 8004bcc:	2000074a 	.word	0x2000074a
 8004bd0:	20000405 	.word	0x20000405
 8004bd4:	20000750 	.word	0x20000750
 8004bd8:	2000074e 	.word	0x2000074e
 8004bdc:	2000075a 	.word	0x2000075a
 8004be0:	20000754 	.word	0x20000754

08004be4 <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	80fb      	strh	r3, [r7, #6]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	80bb      	strh	r3, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8004bf6:	4b89      	ldr	r3, [pc, #548]	; (8004e1c <vertScroll+0x238>)
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	f249 3227 	movw	r2, #37671	; 0x9327
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d10b      	bne.n	8004c1a <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8004c02:	4b87      	ldr	r3, [pc, #540]	; (8004e20 <vertScroll+0x23c>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d003      	beq.n	8004c12 <vertScroll+0x2e>
 8004c0a:	4b85      	ldr	r3, [pc, #532]	; (8004e20 <vertScroll+0x23c>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d103      	bne.n	8004c1a <vertScroll+0x36>
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	3320      	adds	r3, #32
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8004c1a:	88fb      	ldrh	r3, [r7, #6]
 8004c1c:	425b      	negs	r3, r3
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	88bb      	ldrh	r3, [r7, #4]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8004c32:	4b7a      	ldr	r3, [pc, #488]	; (8004e1c <vertScroll+0x238>)
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	f249 3227 	movw	r2, #37671	; 0x9327
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d103      	bne.n	8004c46 <vertScroll+0x62>
 8004c3e:	8afb      	ldrh	r3, [r7, #22]
 8004c40:	3320      	adds	r3, #32
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8004c46:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004c4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c4e:	425b      	negs	r3, r3
 8004c50:	429a      	cmp	r2, r3
 8004c52:	dd05      	ble.n	8004c60 <vertScroll+0x7c>
 8004c54:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004c58:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	db01      	blt.n	8004c64 <vertScroll+0x80>
 8004c60:	2300      	movs	r3, #0
 8004c62:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8004c64:	88fa      	ldrh	r2, [r7, #6]
 8004c66:	887b      	ldrh	r3, [r7, #2]
 8004c68:	4413      	add	r3, r2
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 8004c6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	da04      	bge.n	8004c80 <vertScroll+0x9c>
        vsp += scrollines;          //keep in unsigned range
 8004c76:	8aba      	ldrh	r2, [r7, #20]
 8004c78:	88bb      	ldrh	r3, [r7, #4]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 8004c80:	88fa      	ldrh	r2, [r7, #6]
 8004c82:	88bb      	ldrh	r3, [r7, #4]
 8004c84:	4413      	add	r3, r2
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8004c8e:	4b65      	ldr	r3, [pc, #404]	; (8004e24 <vertScroll+0x240>)
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d072      	beq.n	8004d80 <vertScroll+0x19c>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8004c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c9e:	121b      	asrs	r3, r3, #8
 8004ca0:	b21b      	sxth	r3, r3
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 8004cac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004cb0:	121b      	asrs	r3, r3, #8
 8004cb2:	b21b      	sxth	r3, r3
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 8004cb8:	88bb      	ldrh	r3, [r7, #4]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 8004cbe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004cc2:	121b      	asrs	r3, r3, #8
 8004cc4:	b21b      	sxth	r3, r3
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 8004cca:	8afb      	ldrh	r3, [r7, #22]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8004cd0:	4b55      	ldr	r3, [pc, #340]	; (8004e28 <vertScroll+0x244>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <vertScroll+0xf8>
 8004cd8:	230e      	movs	r3, #14
 8004cda:	e000      	b.n	8004cde <vertScroll+0xfa>
 8004cdc:	2333      	movs	r3, #51	; 0x33
 8004cde:	f107 020c 	add.w	r2, r7, #12
 8004ce2:	2106      	movs	r1, #6
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fd fbcb 	bl	8002480 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 8004cea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004cee:	121b      	asrs	r3, r3, #8
 8004cf0:	b21b      	sxth	r3, r3
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 8004cf6:	8abb      	ldrh	r3, [r7, #20]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8004cfc:	4b4a      	ldr	r3, [pc, #296]	; (8004e28 <vertScroll+0x244>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <vertScroll+0x124>
 8004d04:	2314      	movs	r3, #20
 8004d06:	e000      	b.n	8004d0a <vertScroll+0x126>
 8004d08:	2337      	movs	r3, #55	; 0x37
 8004d0a:	f107 020c 	add.w	r2, r7, #12
 8004d0e:	2102      	movs	r1, #2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fd fbb5 	bl	8002480 <WriteCmdParamN>
		if (is8347) {
 8004d16:	4b44      	ldr	r3, [pc, #272]	; (8004e28 <vertScroll+0x244>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d01f      	beq.n	8004d5e <vertScroll+0x17a>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8004d1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d009      	beq.n	8004d3a <vertScroll+0x156>
 8004d26:	4b3d      	ldr	r3, [pc, #244]	; (8004e1c <vertScroll+0x238>)
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	f248 3247 	movw	r2, #33607	; 0x8347
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d101      	bne.n	8004d36 <vertScroll+0x152>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e002      	b.n	8004d3c <vertScroll+0x158>
 8004d36:	2308      	movs	r3, #8
 8004d38:	e000      	b.n	8004d3c <vertScroll+0x158>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8004d3e:	4b37      	ldr	r3, [pc, #220]	; (8004e1c <vertScroll+0x238>)
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	f248 3247 	movw	r2, #33607	; 0x8347
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d101      	bne.n	8004d4e <vertScroll+0x16a>
 8004d4a:	2318      	movs	r3, #24
 8004d4c:	e000      	b.n	8004d50 <vertScroll+0x16c>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f107 020c 	add.w	r2, r7, #12
 8004d54:	2101      	movs	r1, #1
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fd fb92 	bl	8002480 <WriteCmdParamN>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
		}
		return;
 8004d5c:	e059      	b.n	8004e12 <vertScroll+0x22e>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8004d5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d155      	bne.n	8004e12 <vertScroll+0x22e>
 8004d66:	4b2f      	ldr	r3, [pc, #188]	; (8004e24 <vertScroll+0x240>)
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d04f      	beq.n	8004e12 <vertScroll+0x22e>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8004d72:	2200      	movs	r2, #0
 8004d74:	2100      	movs	r1, #0
 8004d76:	2013      	movs	r0, #19
 8004d78:	f7fd fb82 	bl	8002480 <WriteCmdParamN>
		return;
 8004d7c:	bf00      	nop
 8004d7e:	e048      	b.n	8004e12 <vertScroll+0x22e>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8004d80:	4b26      	ldr	r3, [pc, #152]	; (8004e1c <vertScroll+0x238>)
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	f247 7293 	movw	r2, #30611	; 0x7793
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d021      	beq.n	8004dd0 <vertScroll+0x1ec>
 8004d8c:	f247 7293 	movw	r2, #30611	; 0x7793
 8004d90:	4293      	cmp	r3, r2
 8004d92:	dc08      	bgt.n	8004da6 <vertScroll+0x1c2>
 8004d94:	f245 4220 	movw	r2, #21536	; 0x5420
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d019      	beq.n	8004dd0 <vertScroll+0x1ec>
 8004d9c:	f247 7283 	movw	r2, #30595	; 0x7783
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d009      	beq.n	8004db8 <vertScroll+0x1d4>
 8004da4:	e025      	b.n	8004df2 <vertScroll+0x20e>
 8004da6:	f249 3226 	movw	r2, #37670	; 0x9326
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d010      	beq.n	8004dd0 <vertScroll+0x1ec>
 8004dae:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00c      	beq.n	8004dd0 <vertScroll+0x1ec>
 8004db6:	e01c      	b.n	8004df2 <vertScroll+0x20e>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 8004db8:	4b1c      	ldr	r3, [pc, #112]	; (8004e2c <vertScroll+0x248>)
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	2061      	movs	r0, #97	; 0x61
 8004dc0:	f7fd f8a0 	bl	8001f04 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8004dc4:	8abb      	ldrh	r3, [r7, #20]
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	206a      	movs	r0, #106	; 0x6a
 8004dca:	f7fd f89b 	bl	8001f04 <WriteCmdData>
        break;
 8004dce:	e021      	b.n	8004e14 <vertScroll+0x230>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8004dd0:	4b16      	ldr	r3, [pc, #88]	; (8004e2c <vertScroll+0x248>)
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	f043 0302 	orr.w	r3, r3, #2
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	4619      	mov	r1, r3
 8004ddc:	f240 4001 	movw	r0, #1025	; 0x401
 8004de0:	f7fd f890 	bl	8001f04 <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 8004de4:	8abb      	ldrh	r3, [r7, #20]
 8004de6:	4619      	mov	r1, r3
 8004de8:	f240 4004 	movw	r0, #1028	; 0x404
 8004dec:	f7fd f88a 	bl	8001f04 <WriteCmdData>
        break;
 8004df0:	e010      	b.n	8004e14 <vertScroll+0x230>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8004df2:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <vertScroll+0x248>)
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	f043 0302 	orr.w	r3, r3, #2
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	2061      	movs	r0, #97	; 0x61
 8004e00:	f7fd f880 	bl	8001f04 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8004e04:	8abb      	ldrh	r3, [r7, #20]
 8004e06:	4619      	mov	r1, r3
 8004e08:	206a      	movs	r0, #106	; 0x6a
 8004e0a:	f7fd f87b 	bl	8001f04 <WriteCmdData>
        break;
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <vertScroll+0x230>
		return;
 8004e12:	bf00      	nop
    }
}
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000756 	.word	0x20000756
 8004e20:	20000408 	.word	0x20000408
 8004e24:	20000748 	.word	0x20000748
 8004e28:	20000405 	.word	0x20000405
 8004e2c:	2000074c 	.word	0x2000074c

08004e30 <invertDisplay>:
{
    fillRect(0, 0, _width, _height, color);
}

void invertDisplay(uint8_t i)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	4603      	mov	r3, r0
 8004e38:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8004e3a:	4b46      	ldr	r3, [pc, #280]	; (8004f54 <invertDisplay+0x124>)
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	bf14      	ite	ne
 8004e46:	2301      	movne	r3, #1
 8004e48:	2300      	moveq	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	b21a      	sxth	r2, r3
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	b21b      	sxth	r3, r3
 8004e52:	4053      	eors	r3, r2
 8004e54:	b21b      	sxth	r3, r3
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	4b3f      	ldr	r3, [pc, #252]	; (8004f58 <invertDisplay+0x128>)
 8004e5a:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8004e5c:	4b3d      	ldr	r3, [pc, #244]	; (8004f54 <invertDisplay+0x124>)
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d035      	beq.n	8004ed4 <invertDisplay+0xa4>
        if (is8347) {
 8004e68:	4b3c      	ldr	r3, [pc, #240]	; (8004f5c <invertDisplay+0x12c>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d024      	beq.n	8004eba <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8004e70:	4b3b      	ldr	r3, [pc, #236]	; (8004f60 <invertDisplay+0x130>)
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	f248 3247 	movw	r2, #33607	; 0x8347
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d005      	beq.n	8004e88 <invertDisplay+0x58>
 8004e7c:	4b38      	ldr	r3, [pc, #224]	; (8004f60 <invertDisplay+0x130>)
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	f245 2252 	movw	r2, #21074	; 0x5252
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d108      	bne.n	8004e9a <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 8004e88:	4b33      	ldr	r3, [pc, #204]	; (8004f58 <invertDisplay+0x128>)
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <invertDisplay+0x64>
 8004e90:	2306      	movs	r3, #6
 8004e92:	e000      	b.n	8004e96 <invertDisplay+0x66>
 8004e94:	2302      	movs	r3, #2
 8004e96:	73fb      	strb	r3, [r7, #15]
 8004e98:	e007      	b.n	8004eaa <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 8004e9a:	4b2f      	ldr	r3, [pc, #188]	; (8004f58 <invertDisplay+0x128>)
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <invertDisplay+0x76>
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	e000      	b.n	8004ea8 <invertDisplay+0x78>
 8004ea6:	230a      	movs	r3, #10
 8004ea8:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 8004eaa:	f107 030f 	add.w	r3, r7, #15
 8004eae:	461a      	mov	r2, r3
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	2001      	movs	r0, #1
 8004eb4:	f7fd fae4 	bl	8002480 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 8004eb8:	e049      	b.n	8004f4e <invertDisplay+0x11e>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8004eba:	4b27      	ldr	r3, [pc, #156]	; (8004f58 <invertDisplay+0x128>)
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <invertDisplay+0x96>
 8004ec2:	2321      	movs	r3, #33	; 0x21
 8004ec4:	e000      	b.n	8004ec8 <invertDisplay+0x98>
 8004ec6:	2320      	movs	r3, #32
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2100      	movs	r1, #0
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fd fad7 	bl	8002480 <WriteCmdParamN>
 8004ed2:	e03c      	b.n	8004f4e <invertDisplay+0x11e>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8004ed4:	4b22      	ldr	r3, [pc, #136]	; (8004f60 <invertDisplay+0x130>)
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	f247 7293 	movw	r2, #30611	; 0x7793
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d024      	beq.n	8004f2a <invertDisplay+0xfa>
 8004ee0:	f247 7293 	movw	r2, #30611	; 0x7793
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	dc07      	bgt.n	8004ef8 <invertDisplay+0xc8>
 8004ee8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004eec:	d010      	beq.n	8004f10 <invertDisplay+0xe0>
 8004eee:	f245 4220 	movw	r2, #21536	; 0x5420
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d019      	beq.n	8004f2a <invertDisplay+0xfa>
 8004ef6:	e023      	b.n	8004f40 <invertDisplay+0x110>
 8004ef8:	f249 3226 	movw	r2, #37670	; 0x9326
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d014      	beq.n	8004f2a <invertDisplay+0xfa>
 8004f00:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d010      	beq.n	8004f2a <invertDisplay+0xfa>
 8004f08:	f249 2225 	movw	r2, #37413	; 0x9225
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d117      	bne.n	8004f40 <invertDisplay+0x110>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8004f10:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <invertDisplay+0x128>)
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	b21b      	sxth	r3, r3
 8004f18:	f043 0313 	orr.w	r3, r3, #19
 8004f1c:	b21b      	sxth	r3, r3
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	4619      	mov	r1, r3
 8004f22:	2007      	movs	r0, #7
 8004f24:	f7fc ffee 	bl	8001f04 <WriteCmdData>
        break;
 8004f28:	e011      	b.n	8004f4e <invertDisplay+0x11e>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 8004f2a:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <invertDisplay+0x128>)
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	f043 0302 	orr.w	r3, r3, #2
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	4619      	mov	r1, r3
 8004f36:	f240 4001 	movw	r0, #1025	; 0x401
 8004f3a:	f7fc ffe3 	bl	8001f04 <WriteCmdData>
        break;
 8004f3e:	e006      	b.n	8004f4e <invertDisplay+0x11e>
    default:
        WriteCmdData(0x61, _lcd_rev);
 8004f40:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <invertDisplay+0x128>)
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	4619      	mov	r1, r3
 8004f46:	2061      	movs	r0, #97	; 0x61
 8004f48:	f7fc ffdc 	bl	8001f04 <WriteCmdData>
        break;
 8004f4c:	bf00      	nop
    }
}
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	20000748 	.word	0x20000748
 8004f58:	2000074c 	.word	0x2000074c
 8004f5c:	20000405 	.word	0x20000405
 8004f60:	20000756 	.word	0x20000756

08004f64 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8004f64:	b590      	push	{r4, r7, lr}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	4611      	mov	r1, r2
 8004f70:	461a      	mov	r2, r3
 8004f72:	4623      	mov	r3, r4
 8004f74:	80fb      	strh	r3, [r7, #6]
 8004f76:	4603      	mov	r3, r0
 8004f78:	80bb      	strh	r3, [r7, #4]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	807b      	strh	r3, [r7, #2]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, 1, h, color);
 8004f82:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004f86:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004f8a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004f8e:	883b      	ldrh	r3, [r7, #0]
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	4613      	mov	r3, r2
 8004f94:	2201      	movs	r2, #1
 8004f96:	f000 f921 	bl	80051dc <fillRect>
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd90      	pop	{r4, r7, pc}

08004fa2 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8004fa2:	b590      	push	{r4, r7, lr}
 8004fa4:	b085      	sub	sp, #20
 8004fa6:	af02      	add	r7, sp, #8
 8004fa8:	4604      	mov	r4, r0
 8004faa:	4608      	mov	r0, r1
 8004fac:	4611      	mov	r1, r2
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	80fb      	strh	r3, [r7, #6]
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	80bb      	strh	r3, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	807b      	strh	r3, [r7, #2]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, w, 1, color);
 8004fc0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004fc4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004fc8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004fcc:	883b      	ldrh	r3, [r7, #0]
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f000 f903 	bl	80051dc <fillRect>
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd90      	pop	{r4, r7, pc}

08004fde <fillCircle>:
        }
    }
}

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8004fde:	b590      	push	{r4, r7, lr}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af02      	add	r7, sp, #8
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	4608      	mov	r0, r1
 8004fe8:	4611      	mov	r1, r2
 8004fea:	461a      	mov	r2, r3
 8004fec:	4623      	mov	r3, r4
 8004fee:	80fb      	strh	r3, [r7, #6]
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	80bb      	strh	r3, [r7, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	807b      	strh	r3, [r7, #2]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8004ffc:	88ba      	ldrh	r2, [r7, #4]
 8004ffe:	887b      	ldrh	r3, [r7, #2]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	b29b      	uxth	r3, r3
 8005004:	b219      	sxth	r1, r3
 8005006:	887b      	ldrh	r3, [r7, #2]
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	b29b      	uxth	r3, r3
 800500c:	3301      	adds	r3, #1
 800500e:	b29b      	uxth	r3, r3
 8005010:	b21a      	sxth	r2, r3
 8005012:	883b      	ldrh	r3, [r7, #0]
 8005014:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005018:	f7ff ffa4 	bl	8004f64 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 800501c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005020:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005024:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005028:	883b      	ldrh	r3, [r7, #0]
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	2300      	movs	r3, #0
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	2303      	movs	r3, #3
 8005032:	f000 f804 	bl	800503e <fillCircleHelper>
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	bd90      	pop	{r4, r7, pc}

0800503e <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 800503e:	b590      	push	{r4, r7, lr}
 8005040:	b087      	sub	sp, #28
 8005042:	af00      	add	r7, sp, #0
 8005044:	4604      	mov	r4, r0
 8005046:	4608      	mov	r0, r1
 8005048:	4611      	mov	r1, r2
 800504a:	461a      	mov	r2, r3
 800504c:	4623      	mov	r3, r4
 800504e:	80fb      	strh	r3, [r7, #6]
 8005050:	4603      	mov	r3, r0
 8005052:	80bb      	strh	r3, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	807b      	strh	r3, [r7, #2]
 8005058:	4613      	mov	r3, r2
 800505a:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 800505c:	887b      	ldrh	r3, [r7, #2]
 800505e:	f1c3 0301 	rsb	r3, r3, #1
 8005062:	b29b      	uxth	r3, r3
 8005064:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8005066:	2301      	movs	r3, #1
 8005068:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800506a:	887b      	ldrh	r3, [r7, #2]
 800506c:	461a      	mov	r2, r3
 800506e:	03d2      	lsls	r2, r2, #15
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	b29b      	uxth	r3, r3
 8005076:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800507c:	887b      	ldrh	r3, [r7, #2]
 800507e:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8005080:	8a3b      	ldrh	r3, [r7, #16]
 8005082:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8005084:	89fb      	ldrh	r3, [r7, #14]
 8005086:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8005088:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800508c:	b29b      	uxth	r3, r3
 800508e:	3301      	adds	r3, #1
 8005090:	b29b      	uxth	r3, r3
 8005092:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 8005094:	e096      	b.n	80051c4 <fillCircleHelper+0x186>
        if (f >= 0) {
 8005096:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800509a:	2b00      	cmp	r3, #0
 800509c:	db0e      	blt.n	80050bc <fillCircleHelper+0x7e>
            y--;
 800509e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80050aa:	8a7b      	ldrh	r3, [r7, #18]
 80050ac:	3302      	adds	r3, #2
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 80050b2:	8afa      	ldrh	r2, [r7, #22]
 80050b4:	8a7b      	ldrh	r3, [r7, #18]
 80050b6:	4413      	add	r3, r2
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80050bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3301      	adds	r3, #1
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80050c8:	8abb      	ldrh	r3, [r7, #20]
 80050ca:	3302      	adds	r3, #2
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 80050d0:	8afa      	ldrh	r2, [r7, #22]
 80050d2:	8abb      	ldrh	r3, [r7, #20]
 80050d4:	4413      	add	r3, r2
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 80050da:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80050de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050e2:	3301      	adds	r3, #1
 80050e4:	429a      	cmp	r2, r3
 80050e6:	da31      	bge.n	800514c <fillCircleHelper+0x10e>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 80050e8:	787b      	ldrb	r3, [r7, #1]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d013      	beq.n	800511a <fillCircleHelper+0xdc>
 80050f2:	88fa      	ldrh	r2, [r7, #6]
 80050f4:	8a3b      	ldrh	r3, [r7, #16]
 80050f6:	4413      	add	r3, r2
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	b218      	sxth	r0, r3
 80050fc:	88ba      	ldrh	r2, [r7, #4]
 80050fe:	89fb      	ldrh	r3, [r7, #14]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	b29b      	uxth	r3, r3
 8005104:	b219      	sxth	r1, r3
 8005106:	89fb      	ldrh	r3, [r7, #14]
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800510e:	4413      	add	r3, r2
 8005110:	b29b      	uxth	r3, r3
 8005112:	b21a      	sxth	r2, r3
 8005114:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005116:	f7ff ff25 	bl	8004f64 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 800511a:	787b      	ldrb	r3, [r7, #1]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d013      	beq.n	800514c <fillCircleHelper+0x10e>
 8005124:	88fa      	ldrh	r2, [r7, #6]
 8005126:	8a3b      	ldrh	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	b29b      	uxth	r3, r3
 800512c:	b218      	sxth	r0, r3
 800512e:	88ba      	ldrh	r2, [r7, #4]
 8005130:	89fb      	ldrh	r3, [r7, #14]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	b29b      	uxth	r3, r3
 8005136:	b219      	sxth	r1, r3
 8005138:	89fb      	ldrh	r3, [r7, #14]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005140:	4413      	add	r3, r2
 8005142:	b29b      	uxth	r3, r3
 8005144:	b21a      	sxth	r2, r3
 8005146:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005148:	f7ff ff0c 	bl	8004f64 <drawFastVLine>
        }
        if(y != py) {
 800514c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005150:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005154:	429a      	cmp	r2, r3
 8005156:	d033      	beq.n	80051c0 <fillCircleHelper+0x182>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8005158:	787b      	ldrb	r3, [r7, #1]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d013      	beq.n	800518a <fillCircleHelper+0x14c>
 8005162:	88fa      	ldrh	r2, [r7, #6]
 8005164:	897b      	ldrh	r3, [r7, #10]
 8005166:	4413      	add	r3, r2
 8005168:	b29b      	uxth	r3, r3
 800516a:	b218      	sxth	r0, r3
 800516c:	88ba      	ldrh	r2, [r7, #4]
 800516e:	89bb      	ldrh	r3, [r7, #12]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	b29b      	uxth	r3, r3
 8005174:	b219      	sxth	r1, r3
 8005176:	89bb      	ldrh	r3, [r7, #12]
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800517e:	4413      	add	r3, r2
 8005180:	b29b      	uxth	r3, r3
 8005182:	b21a      	sxth	r2, r3
 8005184:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005186:	f7ff feed 	bl	8004f64 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 800518a:	787b      	ldrb	r3, [r7, #1]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d013      	beq.n	80051bc <fillCircleHelper+0x17e>
 8005194:	88fa      	ldrh	r2, [r7, #6]
 8005196:	897b      	ldrh	r3, [r7, #10]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	b29b      	uxth	r3, r3
 800519c:	b218      	sxth	r0, r3
 800519e:	88ba      	ldrh	r2, [r7, #4]
 80051a0:	89bb      	ldrh	r3, [r7, #12]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	b219      	sxth	r1, r3
 80051a8:	89bb      	ldrh	r3, [r7, #12]
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80051b0:	4413      	add	r3, r2
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	b21a      	sxth	r2, r3
 80051b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80051b8:	f7ff fed4 	bl	8004f64 <drawFastVLine>
            py = y;
 80051bc:	89fb      	ldrh	r3, [r7, #14]
 80051be:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 80051c0:	8a3b      	ldrh	r3, [r7, #16]
 80051c2:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 80051c4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80051c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	f6ff af62 	blt.w	8005096 <fillCircleHelper+0x58>
    }
}
 80051d2:	bf00      	nop
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd90      	pop	{r4, r7, pc}
	...

080051dc <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80051dc:	b590      	push	{r4, r7, lr}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4604      	mov	r4, r0
 80051e4:	4608      	mov	r0, r1
 80051e6:	4611      	mov	r1, r2
 80051e8:	461a      	mov	r2, r3
 80051ea:	4623      	mov	r3, r4
 80051ec:	80fb      	strh	r3, [r7, #6]
 80051ee:	4603      	mov	r3, r0
 80051f0:	80bb      	strh	r3, [r7, #4]
 80051f2:	460b      	mov	r3, r1
 80051f4:	807b      	strh	r3, [r7, #2]
 80051f6:	4613      	mov	r3, r2
 80051f8:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 80051fa:	4b92      	ldr	r3, [pc, #584]	; (8005444 <fillRect+0x268>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <fillRect+0x32>
 8005202:	8c3b      	ldrh	r3, [r7, #32]
 8005204:	4618      	mov	r0, r3
 8005206:	f7fc fdcd 	bl	8001da4 <color565_to_555>
 800520a:	4603      	mov	r3, r0
 800520c:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 800520e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005212:	2b00      	cmp	r3, #0
 8005214:	da08      	bge.n	8005228 <fillRect+0x4c>
        w = -w;
 8005216:	887b      	ldrh	r3, [r7, #2]
 8005218:	425b      	negs	r3, r3
 800521a:	b29b      	uxth	r3, r3
 800521c:	807b      	strh	r3, [r7, #2]
        x -= w;
 800521e:	88fa      	ldrh	r2, [r7, #6]
 8005220:	887b      	ldrh	r3, [r7, #2]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	b29b      	uxth	r3, r3
 8005226:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8005228:	88fa      	ldrh	r2, [r7, #6]
 800522a:	887b      	ldrh	r3, [r7, #2]
 800522c:	4413      	add	r3, r2
 800522e:	b29b      	uxth	r3, r3
 8005230:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8005232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005236:	2b00      	cmp	r3, #0
 8005238:	da01      	bge.n	800523e <fillRect+0x62>
        x = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 800523e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8005242:	f7fc fd97 	bl	8001d74 <width>
 8005246:	4603      	mov	r3, r0
 8005248:	429c      	cmp	r4, r3
 800524a:	dd03      	ble.n	8005254 <fillRect+0x78>
        end = width();
 800524c:	f7fc fd92 	bl	8001d74 <width>
 8005250:	4603      	mov	r3, r0
 8005252:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 8005254:	89fa      	ldrh	r2, [r7, #14]
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	b29b      	uxth	r3, r3
 800525c:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 800525e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005262:	2b00      	cmp	r3, #0
 8005264:	da08      	bge.n	8005278 <fillRect+0x9c>
        h = -h;
 8005266:	883b      	ldrh	r3, [r7, #0]
 8005268:	425b      	negs	r3, r3
 800526a:	b29b      	uxth	r3, r3
 800526c:	803b      	strh	r3, [r7, #0]
        y -= h;
 800526e:	88ba      	ldrh	r2, [r7, #4]
 8005270:	883b      	ldrh	r3, [r7, #0]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	b29b      	uxth	r3, r3
 8005276:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8005278:	88ba      	ldrh	r2, [r7, #4]
 800527a:	883b      	ldrh	r3, [r7, #0]
 800527c:	4413      	add	r3, r2
 800527e:	b29b      	uxth	r3, r3
 8005280:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8005282:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	da01      	bge.n	800528e <fillRect+0xb2>
        y = 0;
 800528a:	2300      	movs	r3, #0
 800528c:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 800528e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8005292:	f7fc fd7b 	bl	8001d8c <height>
 8005296:	4603      	mov	r3, r0
 8005298:	429c      	cmp	r4, r3
 800529a:	dd03      	ble.n	80052a4 <fillRect+0xc8>
        end = height();
 800529c:	f7fc fd76 	bl	8001d8c <height>
 80052a0:	4603      	mov	r3, r0
 80052a2:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 80052a4:	89fa      	ldrh	r2, [r7, #14]
 80052a6:	88bb      	ldrh	r3, [r7, #4]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 80052ae:	88fa      	ldrh	r2, [r7, #6]
 80052b0:	887b      	ldrh	r3, [r7, #2]
 80052b2:	4413      	add	r3, r2
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	b21c      	sxth	r4, r3
 80052bc:	88ba      	ldrh	r2, [r7, #4]
 80052be:	883b      	ldrh	r3, [r7, #0]
 80052c0:	4413      	add	r3, r2
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	b21b      	sxth	r3, r3
 80052ca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80052ce:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80052d2:	4622      	mov	r2, r4
 80052d4:	f7ff fb62 	bl	800499c <setAddrWindow>
    CS_ACTIVE;
 80052d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052dc:	485a      	ldr	r0, [pc, #360]	; (8005448 <fillRect+0x26c>)
 80052de:	f7fc fcfb 	bl	8001cd8 <PIN_LOW>
    WriteCmd(_MW);
 80052e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052e6:	4859      	ldr	r0, [pc, #356]	; (800544c <fillRect+0x270>)
 80052e8:	f7fc fcf6 	bl	8001cd8 <PIN_LOW>
 80052ec:	4b58      	ldr	r3, [pc, #352]	; (8005450 <fillRect+0x274>)
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	0a1b      	lsrs	r3, r3, #8
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	737b      	strb	r3, [r7, #13]
 80052f6:	4b56      	ldr	r3, [pc, #344]	; (8005450 <fillRect+0x274>)
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	733b      	strb	r3, [r7, #12]
 80052fc:	4b53      	ldr	r3, [pc, #332]	; (800544c <fillRect+0x270>)
 80052fe:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8005302:	619a      	str	r2, [r3, #24]
 8005304:	4b53      	ldr	r3, [pc, #332]	; (8005454 <fillRect+0x278>)
 8005306:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800530a:	619a      	str	r2, [r3, #24]
 800530c:	4b52      	ldr	r3, [pc, #328]	; (8005458 <fillRect+0x27c>)
 800530e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005312:	619a      	str	r2, [r3, #24]
 8005314:	7b7b      	ldrb	r3, [r7, #13]
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	4a4f      	ldr	r2, [pc, #316]	; (8005458 <fillRect+0x27c>)
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	6193      	str	r3, [r2, #24]
 8005320:	7b7b      	ldrb	r3, [r7, #13]
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8005328:	7b7b      	ldrb	r3, [r7, #13]
 800532a:	015b      	lsls	r3, r3, #5
 800532c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005330:	431a      	orrs	r2, r3
 8005332:	7b7b      	ldrb	r3, [r7, #13]
 8005334:	015b      	lsls	r3, r3, #5
 8005336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533a:	431a      	orrs	r2, r3
 800533c:	4b45      	ldr	r3, [pc, #276]	; (8005454 <fillRect+0x278>)
 800533e:	619a      	str	r2, [r3, #24]
 8005340:	7b7b      	ldrb	r3, [r7, #13]
 8005342:	105b      	asrs	r3, r3, #1
 8005344:	f003 0208 	and.w	r2, r3, #8
 8005348:	7b7b      	ldrb	r3, [r7, #13]
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005350:	431a      	orrs	r2, r3
 8005352:	7b7b      	ldrb	r3, [r7, #13]
 8005354:	105b      	asrs	r3, r3, #1
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	431a      	orrs	r2, r3
 800535c:	7b7b      	ldrb	r3, [r7, #13]
 800535e:	10db      	asrs	r3, r3, #3
 8005360:	f003 0310 	and.w	r3, r3, #16
 8005364:	431a      	orrs	r2, r3
 8005366:	4b39      	ldr	r3, [pc, #228]	; (800544c <fillRect+0x270>)
 8005368:	619a      	str	r2, [r3, #24]
 800536a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800536e:	4837      	ldr	r0, [pc, #220]	; (800544c <fillRect+0x270>)
 8005370:	f7fc fcb2 	bl	8001cd8 <PIN_LOW>
 8005374:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005378:	4834      	ldr	r0, [pc, #208]	; (800544c <fillRect+0x270>)
 800537a:	f7fc fcbd 	bl	8001cf8 <PIN_HIGH>
 800537e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005382:	4832      	ldr	r0, [pc, #200]	; (800544c <fillRect+0x270>)
 8005384:	f7fc fcb8 	bl	8001cf8 <PIN_HIGH>
 8005388:	4b30      	ldr	r3, [pc, #192]	; (800544c <fillRect+0x270>)
 800538a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800538e:	619a      	str	r2, [r3, #24]
 8005390:	4b30      	ldr	r3, [pc, #192]	; (8005454 <fillRect+0x278>)
 8005392:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8005396:	619a      	str	r2, [r3, #24]
 8005398:	4b2f      	ldr	r3, [pc, #188]	; (8005458 <fillRect+0x27c>)
 800539a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800539e:	619a      	str	r2, [r3, #24]
 80053a0:	7b3b      	ldrb	r3, [r7, #12]
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	4a2c      	ldr	r2, [pc, #176]	; (8005458 <fillRect+0x27c>)
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	6193      	str	r3, [r2, #24]
 80053ac:	7b3b      	ldrb	r3, [r7, #12]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80053b4:	7b3b      	ldrb	r3, [r7, #12]
 80053b6:	015b      	lsls	r3, r3, #5
 80053b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053bc:	431a      	orrs	r2, r3
 80053be:	7b3b      	ldrb	r3, [r7, #12]
 80053c0:	015b      	lsls	r3, r3, #5
 80053c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c6:	431a      	orrs	r2, r3
 80053c8:	4b22      	ldr	r3, [pc, #136]	; (8005454 <fillRect+0x278>)
 80053ca:	619a      	str	r2, [r3, #24]
 80053cc:	7b3b      	ldrb	r3, [r7, #12]
 80053ce:	105b      	asrs	r3, r3, #1
 80053d0:	f003 0208 	and.w	r2, r3, #8
 80053d4:	7b3b      	ldrb	r3, [r7, #12]
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053dc:	431a      	orrs	r2, r3
 80053de:	7b3b      	ldrb	r3, [r7, #12]
 80053e0:	105b      	asrs	r3, r3, #1
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	431a      	orrs	r2, r3
 80053e8:	7b3b      	ldrb	r3, [r7, #12]
 80053ea:	10db      	asrs	r3, r3, #3
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	431a      	orrs	r2, r3
 80053f2:	4b16      	ldr	r3, [pc, #88]	; (800544c <fillRect+0x270>)
 80053f4:	619a      	str	r2, [r3, #24]
 80053f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053fa:	4814      	ldr	r0, [pc, #80]	; (800544c <fillRect+0x270>)
 80053fc:	f7fc fc6c 	bl	8001cd8 <PIN_LOW>
 8005400:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005404:	4811      	ldr	r0, [pc, #68]	; (800544c <fillRect+0x270>)
 8005406:	f7fc fc77 	bl	8001cf8 <PIN_HIGH>
 800540a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800540e:	480f      	ldr	r0, [pc, #60]	; (800544c <fillRect+0x270>)
 8005410:	f7fc fc72 	bl	8001cf8 <PIN_HIGH>
 8005414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005418:	480c      	ldr	r0, [pc, #48]	; (800544c <fillRect+0x270>)
 800541a:	f7fc fc6d 	bl	8001cf8 <PIN_HIGH>
    if (h > w) {
 800541e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005422:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005426:	429a      	cmp	r2, r3
 8005428:	dd05      	ble.n	8005436 <fillRect+0x25a>
        end = h;
 800542a:	883b      	ldrh	r3, [r7, #0]
 800542c:	81fb      	strh	r3, [r7, #14]
        h = w;
 800542e:	887b      	ldrh	r3, [r7, #2]
 8005430:	803b      	strh	r3, [r7, #0]
        w = end;
 8005432:	89fb      	ldrh	r3, [r7, #14]
 8005434:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8005436:	8c3b      	ldrh	r3, [r7, #32]
 8005438:	0a1b      	lsrs	r3, r3, #8
 800543a:	b29b      	uxth	r3, r3
 800543c:	72fb      	strb	r3, [r7, #11]
 800543e:	8c3b      	ldrh	r3, [r7, #32]
 8005440:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 8005442:	e0a2      	b.n	800558a <fillRect+0x3ae>
 8005444:	20000406 	.word	0x20000406
 8005448:	40020400 	.word	0x40020400
 800544c:	40021000 	.word	0x40021000
 8005450:	20000746 	.word	0x20000746
 8005454:	40021400 	.word	0x40021400
 8005458:	40021800 	.word	0x40021800
        end = w;
 800545c:	887b      	ldrh	r3, [r7, #2]
 800545e:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 8005460:	4b64      	ldr	r3, [pc, #400]	; (80055f4 <fillRect+0x418>)
 8005462:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8005466:	619a      	str	r2, [r3, #24]
 8005468:	4b63      	ldr	r3, [pc, #396]	; (80055f8 <fillRect+0x41c>)
 800546a:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800546e:	619a      	str	r2, [r3, #24]
 8005470:	4b62      	ldr	r3, [pc, #392]	; (80055fc <fillRect+0x420>)
 8005472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005476:	619a      	str	r2, [r3, #24]
 8005478:	7afb      	ldrb	r3, [r7, #11]
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	4a5f      	ldr	r2, [pc, #380]	; (80055fc <fillRect+0x420>)
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	6193      	str	r3, [r2, #24]
 8005484:	7afb      	ldrb	r3, [r7, #11]
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800548c:	7afb      	ldrb	r3, [r7, #11]
 800548e:	015b      	lsls	r3, r3, #5
 8005490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005494:	431a      	orrs	r2, r3
 8005496:	7afb      	ldrb	r3, [r7, #11]
 8005498:	015b      	lsls	r3, r3, #5
 800549a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549e:	431a      	orrs	r2, r3
 80054a0:	4b55      	ldr	r3, [pc, #340]	; (80055f8 <fillRect+0x41c>)
 80054a2:	619a      	str	r2, [r3, #24]
 80054a4:	7afb      	ldrb	r3, [r7, #11]
 80054a6:	105b      	asrs	r3, r3, #1
 80054a8:	f003 0208 	and.w	r2, r3, #8
 80054ac:	7afb      	ldrb	r3, [r7, #11]
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b4:	431a      	orrs	r2, r3
 80054b6:	7afb      	ldrb	r3, [r7, #11]
 80054b8:	105b      	asrs	r3, r3, #1
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	431a      	orrs	r2, r3
 80054c0:	7afb      	ldrb	r3, [r7, #11]
 80054c2:	10db      	asrs	r3, r3, #3
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	431a      	orrs	r2, r3
 80054ca:	4b4a      	ldr	r3, [pc, #296]	; (80055f4 <fillRect+0x418>)
 80054cc:	619a      	str	r2, [r3, #24]
 80054ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054d2:	4848      	ldr	r0, [pc, #288]	; (80055f4 <fillRect+0x418>)
 80054d4:	f7fc fc00 	bl	8001cd8 <PIN_LOW>
 80054d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054dc:	4845      	ldr	r0, [pc, #276]	; (80055f4 <fillRect+0x418>)
 80054de:	f7fc fc0b 	bl	8001cf8 <PIN_HIGH>
 80054e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054e6:	4843      	ldr	r0, [pc, #268]	; (80055f4 <fillRect+0x418>)
 80054e8:	f7fc fc06 	bl	8001cf8 <PIN_HIGH>
            write8(lo);
 80054ec:	4b41      	ldr	r3, [pc, #260]	; (80055f4 <fillRect+0x418>)
 80054ee:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80054f2:	619a      	str	r2, [r3, #24]
 80054f4:	4b40      	ldr	r3, [pc, #256]	; (80055f8 <fillRect+0x41c>)
 80054f6:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80054fa:	619a      	str	r2, [r3, #24]
 80054fc:	4b3f      	ldr	r3, [pc, #252]	; (80055fc <fillRect+0x420>)
 80054fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005502:	619a      	str	r2, [r3, #24]
 8005504:	7abb      	ldrb	r3, [r7, #10]
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	4a3c      	ldr	r2, [pc, #240]	; (80055fc <fillRect+0x420>)
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	6193      	str	r3, [r2, #24]
 8005510:	7abb      	ldrb	r3, [r7, #10]
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8005518:	7abb      	ldrb	r3, [r7, #10]
 800551a:	015b      	lsls	r3, r3, #5
 800551c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005520:	431a      	orrs	r2, r3
 8005522:	7abb      	ldrb	r3, [r7, #10]
 8005524:	015b      	lsls	r3, r3, #5
 8005526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552a:	431a      	orrs	r2, r3
 800552c:	4b32      	ldr	r3, [pc, #200]	; (80055f8 <fillRect+0x41c>)
 800552e:	619a      	str	r2, [r3, #24]
 8005530:	7abb      	ldrb	r3, [r7, #10]
 8005532:	105b      	asrs	r3, r3, #1
 8005534:	f003 0208 	and.w	r2, r3, #8
 8005538:	7abb      	ldrb	r3, [r7, #10]
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005540:	431a      	orrs	r2, r3
 8005542:	7abb      	ldrb	r3, [r7, #10]
 8005544:	105b      	asrs	r3, r3, #1
 8005546:	f003 0320 	and.w	r3, r3, #32
 800554a:	431a      	orrs	r2, r3
 800554c:	7abb      	ldrb	r3, [r7, #10]
 800554e:	10db      	asrs	r3, r3, #3
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	431a      	orrs	r2, r3
 8005556:	4b27      	ldr	r3, [pc, #156]	; (80055f4 <fillRect+0x418>)
 8005558:	619a      	str	r2, [r3, #24]
 800555a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800555e:	4825      	ldr	r0, [pc, #148]	; (80055f4 <fillRect+0x418>)
 8005560:	f7fc fbba 	bl	8001cd8 <PIN_LOW>
 8005564:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005568:	4822      	ldr	r0, [pc, #136]	; (80055f4 <fillRect+0x418>)
 800556a:	f7fc fbc5 	bl	8001cf8 <PIN_HIGH>
 800556e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005572:	4820      	ldr	r0, [pc, #128]	; (80055f4 <fillRect+0x418>)
 8005574:	f7fc fbc0 	bl	8001cf8 <PIN_HIGH>
        } while (--end != 0);
 8005578:	89fb      	ldrh	r3, [r7, #14]
 800557a:	3b01      	subs	r3, #1
 800557c:	b29b      	uxth	r3, r3
 800557e:	81fb      	strh	r3, [r7, #14]
 8005580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005584:	2b00      	cmp	r3, #0
 8005586:	f47f af6b 	bne.w	8005460 <fillRect+0x284>
    while (h-- > 0) {
 800558a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800558e:	b29a      	uxth	r2, r3
 8005590:	3a01      	subs	r2, #1
 8005592:	b292      	uxth	r2, r2
 8005594:	803a      	strh	r2, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	f73f af60 	bgt.w	800545c <fillRect+0x280>
#endif
    }
    CS_IDLE;
 800559c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055a0:	4817      	ldr	r0, [pc, #92]	; (8005600 <fillRect+0x424>)
 80055a2:	f7fc fba9 	bl	8001cf8 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 80055a6:	4b17      	ldr	r3, [pc, #92]	; (8005604 <fillRect+0x428>)
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00b      	beq.n	80055ca <fillRect+0x3ee>
 80055b2:	4b15      	ldr	r3, [pc, #84]	; (8005608 <fillRect+0x42c>)
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	f241 5226 	movw	r2, #5414	; 0x1526
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d116      	bne.n	80055ec <fillRect+0x410>
 80055be:	4b13      	ldr	r3, [pc, #76]	; (800560c <fillRect+0x430>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d010      	beq.n	80055ec <fillRect+0x410>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 80055ca:	f7fc fbd3 	bl	8001d74 <width>
 80055ce:	4603      	mov	r3, r0
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	b21c      	sxth	r4, r3
 80055d6:	f7fc fbd9 	bl	8001d8c <height>
 80055da:	4603      	mov	r3, r0
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29b      	uxth	r3, r3
 80055e0:	b21b      	sxth	r3, r3
 80055e2:	4622      	mov	r2, r4
 80055e4:	2100      	movs	r1, #0
 80055e6:	2000      	movs	r0, #0
 80055e8:	f7ff f9d8 	bl	800499c <setAddrWindow>
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd90      	pop	{r4, r7, pc}
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40021400 	.word	0x40021400
 80055fc:	40021800 	.word	0x40021800
 8005600:	40020400 	.word	0x40020400
 8005604:	20000748 	.word	0x20000748
 8005608:	20000756 	.word	0x20000756
 800560c:	20000408 	.word	0x20000408

08005610 <fillTriangle>:
    drawLine(x2, y2, x0, y0, color);
}


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8005610:	b590      	push	{r4, r7, lr}
 8005612:	b08f      	sub	sp, #60	; 0x3c
 8005614:	af00      	add	r7, sp, #0
 8005616:	4604      	mov	r4, r0
 8005618:	4608      	mov	r0, r1
 800561a:	4611      	mov	r1, r2
 800561c:	461a      	mov	r2, r3
 800561e:	4623      	mov	r3, r4
 8005620:	80fb      	strh	r3, [r7, #6]
 8005622:	4603      	mov	r3, r0
 8005624:	80bb      	strh	r3, [r7, #4]
 8005626:	460b      	mov	r3, r1
 8005628:	807b      	strh	r3, [r7, #2]
 800562a:	4613      	mov	r3, r2
 800562c:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 800562e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005632:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005636:	429a      	cmp	r2, r3
 8005638:	dd0b      	ble.n	8005652 <fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 800563a:	88bb      	ldrh	r3, [r7, #4]
 800563c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800563e:	883b      	ldrh	r3, [r7, #0]
 8005640:	80bb      	strh	r3, [r7, #4]
 8005642:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005644:	803b      	strh	r3, [r7, #0]
 8005646:	88fb      	ldrh	r3, [r7, #6]
 8005648:	84bb      	strh	r3, [r7, #36]	; 0x24
 800564a:	887b      	ldrh	r3, [r7, #2]
 800564c:	80fb      	strh	r3, [r7, #6]
 800564e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005650:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8005652:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005656:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800565a:	429a      	cmp	r2, r3
 800565c:	dd0f      	ble.n	800567e <fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 800565e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005662:	847b      	strh	r3, [r7, #34]	; 0x22
 8005664:	883b      	ldrh	r3, [r7, #0]
 8005666:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800566a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800566c:	803b      	strh	r3, [r7, #0]
 800566e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005672:	843b      	strh	r3, [r7, #32]
 8005674:	887b      	ldrh	r3, [r7, #2]
 8005676:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800567a:	8c3b      	ldrh	r3, [r7, #32]
 800567c:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 800567e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005682:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005686:	429a      	cmp	r2, r3
 8005688:	dd0b      	ble.n	80056a2 <fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 800568a:	88bb      	ldrh	r3, [r7, #4]
 800568c:	83fb      	strh	r3, [r7, #30]
 800568e:	883b      	ldrh	r3, [r7, #0]
 8005690:	80bb      	strh	r3, [r7, #4]
 8005692:	8bfb      	ldrh	r3, [r7, #30]
 8005694:	803b      	strh	r3, [r7, #0]
 8005696:	88fb      	ldrh	r3, [r7, #6]
 8005698:	83bb      	strh	r3, [r7, #28]
 800569a:	887b      	ldrh	r3, [r7, #2]
 800569c:	80fb      	strh	r3, [r7, #6]
 800569e:	8bbb      	ldrh	r3, [r7, #28]
 80056a0:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80056a2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80056a6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d137      	bne.n	800571e <fillTriangle+0x10e>
        a = b = x0;
 80056ae:	88fb      	ldrh	r3, [r7, #6]
 80056b0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80056b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80056b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 80056b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056ba:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80056be:	429a      	cmp	r2, r3
 80056c0:	da02      	bge.n	80056c8 <fillTriangle+0xb8>
 80056c2:	887b      	ldrh	r3, [r7, #2]
 80056c4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80056c6:	e007      	b.n	80056d8 <fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 80056c8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056cc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80056d0:	429a      	cmp	r2, r3
 80056d2:	dd01      	ble.n	80056d8 <fillTriangle+0xc8>
 80056d4:	887b      	ldrh	r3, [r7, #2]
 80056d6:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 80056d8:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80056dc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80056e0:	429a      	cmp	r2, r3
 80056e2:	da03      	bge.n	80056ec <fillTriangle+0xdc>
 80056e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80056e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80056ea:	e008      	b.n	80056fe <fillTriangle+0xee>
        else if(x2 > b) b = x2;
 80056ec:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80056f0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80056f4:	429a      	cmp	r2, r3
 80056f6:	dd02      	ble.n	80056fe <fillTriangle+0xee>
 80056f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80056fc:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y0, b-a+1, color);
 80056fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005700:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	b29b      	uxth	r3, r3
 8005706:	3301      	adds	r3, #1
 8005708:	b29b      	uxth	r3, r3
 800570a:	b21a      	sxth	r2, r3
 800570c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005710:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005714:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005718:	f7ff fc43 	bl	8004fa2 <drawFastHLine>
        return;
 800571c:	e0d4      	b.n	80058c8 <fillTriangle+0x2b8>
    }

    int16_t
    dx01 = x1 - x0,
 800571e:	887a      	ldrh	r2, [r7, #2]
 8005720:	88fb      	ldrh	r3, [r7, #6]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	b29b      	uxth	r3, r3
 8005726:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8005728:	883a      	ldrh	r2, [r7, #0]
 800572a:	88bb      	ldrh	r3, [r7, #4]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	b29b      	uxth	r3, r3
 8005730:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8005732:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	b29b      	uxth	r3, r3
 800573c:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 800573e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005742:	88bb      	ldrh	r3, [r7, #4]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	b29b      	uxth	r3, r3
 8005748:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 800574a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800574e:	887b      	ldrh	r3, [r7, #2]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	b29b      	uxth	r3, r3
 8005754:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8005756:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800575a:	883b      	ldrh	r3, [r7, #0]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	b29b      	uxth	r3, r3
 8005760:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8005762:	2300      	movs	r3, #0
 8005764:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 800576a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800576e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005772:	429a      	cmp	r2, r3
 8005774:	d102      	bne.n	800577c <fillTriangle+0x16c>
 8005776:	883b      	ldrh	r3, [r7, #0]
 8005778:	863b      	strh	r3, [r7, #48]	; 0x30
 800577a:	e003      	b.n	8005784 <fillTriangle+0x174>
    else         last = y1-1; // Skip it
 800577c:	883b      	ldrh	r3, [r7, #0]
 800577e:	3b01      	subs	r3, #1
 8005780:	b29b      	uxth	r3, r3
 8005782:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8005784:	88bb      	ldrh	r3, [r7, #4]
 8005786:	867b      	strh	r3, [r7, #50]	; 0x32
 8005788:	e03e      	b.n	8005808 <fillTriangle+0x1f8>
        a   = x0 + sa / dy01;
 800578a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800578e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005790:	fb92 f3f3 	sdiv	r3, r2, r3
 8005794:	b29a      	uxth	r2, r3
 8005796:	88fb      	ldrh	r3, [r7, #6]
 8005798:	4413      	add	r3, r2
 800579a:	b29b      	uxth	r3, r3
 800579c:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 800579e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	88fb      	ldrh	r3, [r7, #6]
 80057ac:	4413      	add	r3, r2
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 80057b2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80057b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b8:	4413      	add	r3, r2
 80057ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80057bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80057c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057c2:	4413      	add	r3, r2
 80057c4:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80057c6:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80057ca:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80057ce:	429a      	cmp	r2, r3
 80057d0:	dd05      	ble.n	80057de <fillTriangle+0x1ce>
 80057d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057d4:	81bb      	strh	r3, [r7, #12]
 80057d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80057d8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80057da:	89bb      	ldrh	r3, [r7, #12]
 80057dc:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 80057de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80057e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3301      	adds	r3, #1
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	b21a      	sxth	r2, r3
 80057ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80057f0:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80057f4:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80057f8:	f7ff fbd3 	bl	8004fa2 <drawFastHLine>
    for(y=y0; y<=last; y++) {
 80057fc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005800:	b29b      	uxth	r3, r3
 8005802:	3301      	adds	r3, #1
 8005804:	b29b      	uxth	r3, r3
 8005806:	867b      	strh	r3, [r7, #50]	; 0x32
 8005808:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800580c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005810:	429a      	cmp	r2, r3
 8005812:	ddba      	ble.n	800578a <fillTriangle+0x17a>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8005814:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005818:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800581c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005820:	1a8a      	subs	r2, r1, r2
 8005822:	fb02 f303 	mul.w	r3, r2, r3
 8005826:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8005828:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800582c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005830:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005834:	1a8a      	subs	r2, r1, r2
 8005836:	fb02 f303 	mul.w	r3, r2, r3
 800583a:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 800583c:	e03e      	b.n	80058bc <fillTriangle+0x2ac>
        a   = x1 + sa / dy12;
 800583e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005844:	fb92 f3f3 	sdiv	r3, r2, r3
 8005848:	b29a      	uxth	r2, r3
 800584a:	887b      	ldrh	r3, [r7, #2]
 800584c:	4413      	add	r3, r2
 800584e:	b29b      	uxth	r3, r3
 8005850:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005852:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005858:	fb92 f3f3 	sdiv	r3, r2, r3
 800585c:	b29a      	uxth	r2, r3
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	4413      	add	r3, r2
 8005862:	b29b      	uxth	r3, r3
 8005864:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8005866:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800586a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800586c:	4413      	add	r3, r2
 800586e:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005870:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005876:	4413      	add	r3, r2
 8005878:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 800587a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800587e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005882:	429a      	cmp	r2, r3
 8005884:	dd05      	ble.n	8005892 <fillTriangle+0x282>
 8005886:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005888:	81fb      	strh	r3, [r7, #14]
 800588a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800588c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800588e:	89fb      	ldrh	r3, [r7, #14]
 8005890:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 8005892:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005894:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	b29b      	uxth	r3, r3
 800589a:	3301      	adds	r3, #1
 800589c:	b29b      	uxth	r3, r3
 800589e:	b21a      	sxth	r2, r3
 80058a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80058a4:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80058a8:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80058ac:	f7ff fb79 	bl	8004fa2 <drawFastHLine>
    for(; y<=y2; y++) {
 80058b0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3301      	adds	r3, #1
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	867b      	strh	r3, [r7, #50]	; 0x32
 80058bc:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80058c0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80058c4:	429a      	cmp	r2, r3
 80058c6:	ddba      	ble.n	800583e <fillTriangle+0x22e>
    }
}
 80058c8:	373c      	adds	r7, #60	; 0x3c
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd90      	pop	{r4, r7, pc}
	...

080058d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80058d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005908 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80058d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80058d6:	e003      	b.n	80058e0 <LoopCopyDataInit>

080058d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80058d8:	4b0c      	ldr	r3, [pc, #48]	; (800590c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80058da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80058dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80058de:	3104      	adds	r1, #4

080058e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80058e0:	480b      	ldr	r0, [pc, #44]	; (8005910 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80058e2:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80058e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80058e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80058e8:	d3f6      	bcc.n	80058d8 <CopyDataInit>
  ldr  r2, =_sbss
 80058ea:	4a0b      	ldr	r2, [pc, #44]	; (8005918 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80058ec:	e002      	b.n	80058f4 <LoopFillZerobss>

080058ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80058ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80058f0:	f842 3b04 	str.w	r3, [r2], #4

080058f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80058f4:	4b09      	ldr	r3, [pc, #36]	; (800591c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80058f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80058f8:	d3f9      	bcc.n	80058ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80058fa:	f7fc f9bf 	bl	8001c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058fe:	f003 fd27 	bl	8009350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005902:	f7fa fe19 	bl	8000538 <main>
  bx  lr    
 8005906:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005908:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800590c:	08009968 	.word	0x08009968
  ldr  r0, =_sdata
 8005910:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005914:	200003d4 	.word	0x200003d4
  ldr  r2, =_sbss
 8005918:	200003d4 	.word	0x200003d4
  ldr  r3, = _ebss
 800591c:	20000764 	.word	0x20000764

08005920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005920:	e7fe      	b.n	8005920 <ADC_IRQHandler>

08005922 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005926:	2003      	movs	r0, #3
 8005928:	f000 f94a 	bl	8005bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800592c:	2000      	movs	r0, #0
 800592e:	f000 f805 	bl	800593c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005932:	f7fb ff3b 	bl	80017ac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005944:	4b12      	ldr	r3, [pc, #72]	; (8005990 <HAL_InitTick+0x54>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	4b12      	ldr	r3, [pc, #72]	; (8005994 <HAL_InitTick+0x58>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	4619      	mov	r1, r3
 800594e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005952:	fbb3 f3f1 	udiv	r3, r3, r1
 8005956:	fbb2 f3f3 	udiv	r3, r2, r3
 800595a:	4618      	mov	r0, r3
 800595c:	f000 f965 	bl	8005c2a <HAL_SYSTICK_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e00e      	b.n	8005988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b0f      	cmp	r3, #15
 800596e:	d80a      	bhi.n	8005986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005970:	2200      	movs	r2, #0
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	f04f 30ff 	mov.w	r0, #4294967295
 8005978:	f000 f92d 	bl	8005bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800597c:	4a06      	ldr	r2, [pc, #24]	; (8005998 <HAL_InitTick+0x5c>)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	e000      	b.n	8005988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	200003c4 	.word	0x200003c4
 8005994:	200003d0 	.word	0x200003d0
 8005998:	200003cc 	.word	0x200003cc

0800599c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059a0:	4b06      	ldr	r3, [pc, #24]	; (80059bc <HAL_IncTick+0x20>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <HAL_IncTick+0x24>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4413      	add	r3, r2
 80059ac:	4a04      	ldr	r2, [pc, #16]	; (80059c0 <HAL_IncTick+0x24>)
 80059ae:	6013      	str	r3, [r2, #0]
}
 80059b0:	bf00      	nop
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	200003d0 	.word	0x200003d0
 80059c0:	20000760 	.word	0x20000760

080059c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059c4:	b480      	push	{r7}
 80059c6:	af00      	add	r7, sp, #0
  return uwTick;
 80059c8:	4b03      	ldr	r3, [pc, #12]	; (80059d8 <HAL_GetTick+0x14>)
 80059ca:	681b      	ldr	r3, [r3, #0]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	20000760 	.word	0x20000760

080059dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059e4:	f7ff ffee 	bl	80059c4 <HAL_GetTick>
 80059e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d005      	beq.n	8005a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059f6:	4b09      	ldr	r3, [pc, #36]	; (8005a1c <HAL_Delay+0x40>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a02:	bf00      	nop
 8005a04:	f7ff ffde 	bl	80059c4 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d8f7      	bhi.n	8005a04 <HAL_Delay+0x28>
  {
  }
}
 8005a14:	bf00      	nop
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	200003d0 	.word	0x200003d0

08005a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a30:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <__NVIC_SetPriorityGrouping+0x40>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <__NVIC_SetPriorityGrouping+0x44>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a4e:	4a04      	ldr	r2, [pc, #16]	; (8005a60 <__NVIC_SetPriorityGrouping+0x40>)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	60d3      	str	r3, [r2, #12]
}
 8005a54:	bf00      	nop
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	e000ed00 	.word	0xe000ed00
 8005a64:	05fa0000 	.word	0x05fa0000

08005a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a6c:	4b04      	ldr	r3, [pc, #16]	; (8005a80 <__NVIC_GetPriorityGrouping+0x18>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	0a1b      	lsrs	r3, r3, #8
 8005a72:	f003 0307 	and.w	r3, r3, #7
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	e000ed00 	.word	0xe000ed00

08005a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	db0b      	blt.n	8005aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	f003 021f 	and.w	r2, r3, #31
 8005a9c:	4907      	ldr	r1, [pc, #28]	; (8005abc <__NVIC_EnableIRQ+0x38>)
 8005a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	2001      	movs	r0, #1
 8005aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8005aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	e000e100 	.word	0xe000e100

08005ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	6039      	str	r1, [r7, #0]
 8005aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	db0a      	blt.n	8005aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	490c      	ldr	r1, [pc, #48]	; (8005b0c <__NVIC_SetPriority+0x4c>)
 8005ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ade:	0112      	lsls	r2, r2, #4
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ae8:	e00a      	b.n	8005b00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	4908      	ldr	r1, [pc, #32]	; (8005b10 <__NVIC_SetPriority+0x50>)
 8005af0:	79fb      	ldrb	r3, [r7, #7]
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	3b04      	subs	r3, #4
 8005af8:	0112      	lsls	r2, r2, #4
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	440b      	add	r3, r1
 8005afe:	761a      	strb	r2, [r3, #24]
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	e000e100 	.word	0xe000e100
 8005b10:	e000ed00 	.word	0xe000ed00

08005b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b089      	sub	sp, #36	; 0x24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	f1c3 0307 	rsb	r3, r3, #7
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	bf28      	it	cs
 8005b32:	2304      	movcs	r3, #4
 8005b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	2b06      	cmp	r3, #6
 8005b3c:	d902      	bls.n	8005b44 <NVIC_EncodePriority+0x30>
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	3b03      	subs	r3, #3
 8005b42:	e000      	b.n	8005b46 <NVIC_EncodePriority+0x32>
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b48:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	43da      	mvns	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	401a      	ands	r2, r3
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	fa01 f303 	lsl.w	r3, r1, r3
 8005b66:	43d9      	mvns	r1, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b6c:	4313      	orrs	r3, r2
         );
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3724      	adds	r7, #36	; 0x24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b8c:	d301      	bcc.n	8005b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e00f      	b.n	8005bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b92:	4a0a      	ldr	r2, [pc, #40]	; (8005bbc <SysTick_Config+0x40>)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b9a:	210f      	movs	r1, #15
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	f7ff ff8e 	bl	8005ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <SysTick_Config+0x40>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005baa:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <SysTick_Config+0x40>)
 8005bac:	2207      	movs	r2, #7
 8005bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	e000e010 	.word	0xe000e010

08005bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff ff29 	bl	8005a20 <__NVIC_SetPriorityGrouping>
}
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b086      	sub	sp, #24
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	4603      	mov	r3, r0
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	607a      	str	r2, [r7, #4]
 8005be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005be4:	2300      	movs	r3, #0
 8005be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005be8:	f7ff ff3e 	bl	8005a68 <__NVIC_GetPriorityGrouping>
 8005bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	6978      	ldr	r0, [r7, #20]
 8005bf4:	f7ff ff8e 	bl	8005b14 <NVIC_EncodePriority>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bfe:	4611      	mov	r1, r2
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff ff5d 	bl	8005ac0 <__NVIC_SetPriority>
}
 8005c06:	bf00      	nop
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	4603      	mov	r3, r0
 8005c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff ff31 	bl	8005a84 <__NVIC_EnableIRQ>
}
 8005c22:	bf00      	nop
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b082      	sub	sp, #8
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff ffa2 	bl	8005b7c <SysTick_Config>
 8005c38:	4603      	mov	r3, r0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b082      	sub	sp, #8
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e014      	b.n	8005c7e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	791b      	ldrb	r3, [r3, #4]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d105      	bne.n	8005c6a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7fb fdc5 	bl	80017f4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	795b      	ldrb	r3, [r3, #5]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <HAL_DAC_Start_DMA+0x1e>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e08e      	b.n	8005dc4 <HAL_DAC_Start_DMA+0x13c>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d12a      	bne.n	8005d0e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	4a43      	ldr	r2, [pc, #268]	; (8005dcc <HAL_DAC_Start_DMA+0x144>)
 8005cbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	4a42      	ldr	r2, [pc, #264]	; (8005dd0 <HAL_DAC_Start_DMA+0x148>)
 8005cc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	4a41      	ldr	r2, [pc, #260]	; (8005dd4 <HAL_DAC_Start_DMA+0x14c>)
 8005cce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cde:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d009      	beq.n	8005cfa <HAL_DAC_Start_DMA+0x72>
 8005ce6:	2b08      	cmp	r3, #8
 8005ce8:	d00c      	beq.n	8005d04 <HAL_DAC_Start_DMA+0x7c>
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d000      	beq.n	8005cf0 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8005cee:	e039      	b.n	8005d64 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	617b      	str	r3, [r7, #20]
        break;
 8005cf8:	e034      	b.n	8005d64 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	330c      	adds	r3, #12
 8005d00:	617b      	str	r3, [r7, #20]
        break;
 8005d02:	e02f      	b.n	8005d64 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3310      	adds	r3, #16
 8005d0a:	617b      	str	r3, [r7, #20]
        break;
 8005d0c:	e02a      	b.n	8005d64 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	4a31      	ldr	r2, [pc, #196]	; (8005dd8 <HAL_DAC_Start_DMA+0x150>)
 8005d14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	4a30      	ldr	r2, [pc, #192]	; (8005ddc <HAL_DAC_Start_DMA+0x154>)
 8005d1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	4a2f      	ldr	r2, [pc, #188]	; (8005de0 <HAL_DAC_Start_DMA+0x158>)
 8005d24:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d34:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d009      	beq.n	8005d50 <HAL_DAC_Start_DMA+0xc8>
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d00c      	beq.n	8005d5a <HAL_DAC_Start_DMA+0xd2>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d000      	beq.n	8005d46 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8005d44:	e00e      	b.n	8005d64 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3314      	adds	r3, #20
 8005d4c:	617b      	str	r3, [r7, #20]
        break;
 8005d4e:	e009      	b.n	8005d64 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3318      	adds	r3, #24
 8005d56:	617b      	str	r3, [r7, #20]
        break;
 8005d58:	e004      	b.n	8005d64 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	331c      	adds	r3, #28
 8005d60:	617b      	str	r3, [r7, #20]
        break;
 8005d62:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10f      	bne.n	8005d8a <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d78:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6898      	ldr	r0, [r3, #8]
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	f000 fa12 	bl	80061ac <HAL_DMA_Start_IT>
 8005d88:	e00e      	b.n	8005da8 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005d98:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	68d8      	ldr	r0, [r3, #12]
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	f000 fa02 	bl	80061ac <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6819      	ldr	r1, [r3, #0]
 8005dae:	2201      	movs	r2, #1
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	409a      	lsls	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	08005f3d 	.word	0x08005f3d
 8005dd0:	08005f5f 	.word	0x08005f5f
 8005dd4:	08005f7b 	.word	0x08005f7b
 8005dd8:	08005fe5 	.word	0x08005fe5
 8005ddc:	08006007 	.word	0x08006007
 8005de0:	08006023 	.word	0x08006023

08005de4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6819      	ldr	r1, [r3, #0]
 8005df8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	43da      	mvns	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	400a      	ands	r2, r1
 8005e0a:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6819      	ldr	r1, [r3, #0]
 8005e12:	2201      	movs	r2, #1
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	43da      	mvns	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	400a      	ands	r2, r1
 8005e22:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d107      	bne.n	8005e3a <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fa1c 	bl	800626c <HAL_DMA_Abort>
 8005e34:	4603      	mov	r3, r0
 8005e36:	73fb      	strb	r3, [r7, #15]
 8005e38:	e006      	b.n	8005e48 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 fa14 	bl	800626c <HAL_DMA_Abort>
 8005e44:	4603      	mov	r3, r0
 8005e46:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2204      	movs	r2, #4
 8005e52:	711a      	strb	r2, [r3, #4]
 8005e54:	e002      	b.n	8005e5c <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
   
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b087      	sub	sp, #28
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	795b      	ldrb	r3, [r3, #5]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <HAL_DAC_ConfigChannel+0x20>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e036      	b.n	8005f30 <HAL_DAC_ConfigChannel+0x8e>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005ed6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6819      	ldr	r1, [r3, #0]
 8005f10:	22c0      	movs	r2, #192	; 0xc0
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	43da      	mvns	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	400a      	ands	r2, r1
 8005f20:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	371c      	adds	r7, #28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <DAC_DMAConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f7ff ff8b 	bl	8005e66 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2201      	movs	r2, #1
 8005f54:	711a      	strb	r2, [r3, #4]
}
 8005f56:	bf00      	nop
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f7ff ff84 	bl	8005e7a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005f72:	bf00      	nop
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <DAC_DMAErrorCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	f043 0204 	orr.w	r2, r3, #4
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f7ff ff7a 	bl	8005e8e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	711a      	strb	r2, [r3, #4]
}
 8005fa0:	bf00      	nop
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <DAC_DMAConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7ff ffd8 	bl	8005fa8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	711a      	strb	r2, [r3, #4]
}
 8005ffe:	bf00      	nop
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006012:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7ff ffd1 	bl	8005fbc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800601a:	bf00      	nop
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <DAC_DMAErrorCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f043 0204 	orr.w	r2, r3, #4
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f7ff ffc7 	bl	8005fd0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	711a      	strb	r2, [r3, #4]
}
 8006048:	bf00      	nop
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800605c:	f7ff fcb2 	bl	80059c4 <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e099      	b.n	80061a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0201 	bic.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800608c:	e00f      	b.n	80060ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800608e:	f7ff fc99 	bl	80059c4 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b05      	cmp	r3, #5
 800609a:	d908      	bls.n	80060ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2203      	movs	r2, #3
 80060a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e078      	b.n	80061a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1e8      	bne.n	800608e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	4b38      	ldr	r3, [pc, #224]	; (80061a8 <HAL_DMA_Init+0x158>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	2b04      	cmp	r3, #4
 8006106:	d107      	bne.n	8006118 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006110:	4313      	orrs	r3, r2
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f023 0307 	bic.w	r3, r3, #7
 800612e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	2b04      	cmp	r3, #4
 8006140:	d117      	bne.n	8006172 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00e      	beq.n	8006172 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fae7 	bl	8006728 <DMA_CheckFifoParam>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d008      	beq.n	8006172 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2240      	movs	r2, #64	; 0x40
 8006164:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800616e:	2301      	movs	r3, #1
 8006170:	e016      	b.n	80061a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fa9e 	bl	80066bc <DMA_CalcBaseAndBitshift>
 8006180:	4603      	mov	r3, r0
 8006182:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006188:	223f      	movs	r2, #63	; 0x3f
 800618a:	409a      	lsls	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	e010803f 	.word	0xe010803f

080061ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d101      	bne.n	80061d2 <HAL_DMA_Start_IT+0x26>
 80061ce:	2302      	movs	r3, #2
 80061d0:	e048      	b.n	8006264 <HAL_DMA_Start_IT+0xb8>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d137      	bne.n	8006256 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2202      	movs	r2, #2
 80061ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 fa30 	bl	8006660 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006204:	223f      	movs	r2, #63	; 0x3f
 8006206:	409a      	lsls	r2, r3
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0216 	orr.w	r2, r2, #22
 800621a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695a      	ldr	r2, [r3, #20]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800622a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0208 	orr.w	r2, r2, #8
 8006242:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0201 	orr.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	e005      	b.n	8006262 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800625e:	2302      	movs	r3, #2
 8006260:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006262:	7dfb      	ldrb	r3, [r7, #23]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006278:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800627a:	f7ff fba3 	bl	80059c4 <HAL_GetTick>
 800627e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d008      	beq.n	800629e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2280      	movs	r2, #128	; 0x80
 8006290:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e052      	b.n	8006344 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0216 	bic.w	r2, r2, #22
 80062ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695a      	ldr	r2, [r3, #20]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d103      	bne.n	80062ce <HAL_DMA_Abort+0x62>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d007      	beq.n	80062de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 0208 	bic.w	r2, r2, #8
 80062dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0201 	bic.w	r2, r2, #1
 80062ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062ee:	e013      	b.n	8006318 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062f0:	f7ff fb68 	bl	80059c4 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b05      	cmp	r3, #5
 80062fc:	d90c      	bls.n	8006318 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2203      	movs	r2, #3
 8006310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e015      	b.n	8006344 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e4      	bne.n	80062f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632a:	223f      	movs	r2, #63	; 0x3f
 800632c:	409a      	lsls	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006354:	2300      	movs	r3, #0
 8006356:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006358:	4b92      	ldr	r3, [pc, #584]	; (80065a4 <HAL_DMA_IRQHandler+0x258>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a92      	ldr	r2, [pc, #584]	; (80065a8 <HAL_DMA_IRQHandler+0x25c>)
 800635e:	fba2 2303 	umull	r2, r3, r2, r3
 8006362:	0a9b      	lsrs	r3, r3, #10
 8006364:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006376:	2208      	movs	r2, #8
 8006378:	409a      	lsls	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4013      	ands	r3, r2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d01a      	beq.n	80063b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d013      	beq.n	80063b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0204 	bic.w	r2, r2, #4
 800639e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a4:	2208      	movs	r2, #8
 80063a6:	409a      	lsls	r2, r3
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b0:	f043 0201 	orr.w	r2, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063bc:	2201      	movs	r2, #1
 80063be:	409a      	lsls	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4013      	ands	r3, r2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d012      	beq.n	80063ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00b      	beq.n	80063ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063da:	2201      	movs	r2, #1
 80063dc:	409a      	lsls	r2, r3
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e6:	f043 0202 	orr.w	r2, r3, #2
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f2:	2204      	movs	r2, #4
 80063f4:	409a      	lsls	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4013      	ands	r3, r2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d012      	beq.n	8006424 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0302 	and.w	r3, r3, #2
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00b      	beq.n	8006424 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006410:	2204      	movs	r2, #4
 8006412:	409a      	lsls	r2, r3
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641c:	f043 0204 	orr.w	r2, r3, #4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006428:	2210      	movs	r2, #16
 800642a:	409a      	lsls	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4013      	ands	r3, r2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d043      	beq.n	80064bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0308 	and.w	r3, r3, #8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d03c      	beq.n	80064bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006446:	2210      	movs	r2, #16
 8006448:	409a      	lsls	r2, r3
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d018      	beq.n	800648e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d108      	bne.n	800647c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d024      	beq.n	80064bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	4798      	blx	r3
 800647a:	e01f      	b.n	80064bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006480:	2b00      	cmp	r3, #0
 8006482:	d01b      	beq.n	80064bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	4798      	blx	r3
 800648c:	e016      	b.n	80064bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006498:	2b00      	cmp	r3, #0
 800649a:	d107      	bne.n	80064ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0208 	bic.w	r2, r2, #8
 80064aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c0:	2220      	movs	r2, #32
 80064c2:	409a      	lsls	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	4013      	ands	r3, r2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 808e 	beq.w	80065ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0310 	and.w	r3, r3, #16
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 8086 	beq.w	80065ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e2:	2220      	movs	r2, #32
 80064e4:	409a      	lsls	r2, r3
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b05      	cmp	r3, #5
 80064f4:	d136      	bne.n	8006564 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0216 	bic.w	r2, r2, #22
 8006504:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	695a      	ldr	r2, [r3, #20]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006514:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	2b00      	cmp	r3, #0
 800651c:	d103      	bne.n	8006526 <HAL_DMA_IRQHandler+0x1da>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006522:	2b00      	cmp	r3, #0
 8006524:	d007      	beq.n	8006536 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0208 	bic.w	r2, r2, #8
 8006534:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653a:	223f      	movs	r2, #63	; 0x3f
 800653c:	409a      	lsls	r2, r3
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006556:	2b00      	cmp	r3, #0
 8006558:	d07d      	beq.n	8006656 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	4798      	blx	r3
        }
        return;
 8006562:	e078      	b.n	8006656 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d01c      	beq.n	80065ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d108      	bne.n	8006592 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006584:	2b00      	cmp	r3, #0
 8006586:	d030      	beq.n	80065ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	4798      	blx	r3
 8006590:	e02b      	b.n	80065ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d027      	beq.n	80065ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
 80065a2:	e022      	b.n	80065ea <HAL_DMA_IRQHandler+0x29e>
 80065a4:	200003c4 	.word	0x200003c4
 80065a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10f      	bne.n	80065da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0210 	bic.w	r2, r2, #16
 80065c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d032      	beq.n	8006658 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d022      	beq.n	8006644 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2205      	movs	r2, #5
 8006602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0201 	bic.w	r2, r2, #1
 8006614:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	3301      	adds	r3, #1
 800661a:	60bb      	str	r3, [r7, #8]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	429a      	cmp	r2, r3
 8006620:	d307      	bcc.n	8006632 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1f2      	bne.n	8006616 <HAL_DMA_IRQHandler+0x2ca>
 8006630:	e000      	b.n	8006634 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006632:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d005      	beq.n	8006658 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4798      	blx	r3
 8006654:	e000      	b.n	8006658 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006656:	bf00      	nop
    }
  }
}
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop

08006660 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
 800666c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800667c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	2b40      	cmp	r3, #64	; 0x40
 800668c:	d108      	bne.n	80066a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800669e:	e007      	b.n	80066b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	60da      	str	r2, [r3, #12]
}
 80066b0:	bf00      	nop
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	3b10      	subs	r3, #16
 80066cc:	4a13      	ldr	r2, [pc, #76]	; (800671c <DMA_CalcBaseAndBitshift+0x60>)
 80066ce:	fba2 2303 	umull	r2, r3, r2, r3
 80066d2:	091b      	lsrs	r3, r3, #4
 80066d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80066d6:	4a12      	ldr	r2, [pc, #72]	; (8006720 <DMA_CalcBaseAndBitshift+0x64>)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4413      	add	r3, r2
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d908      	bls.n	80066fc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	461a      	mov	r2, r3
 80066f0:	4b0c      	ldr	r3, [pc, #48]	; (8006724 <DMA_CalcBaseAndBitshift+0x68>)
 80066f2:	4013      	ands	r3, r2
 80066f4:	1d1a      	adds	r2, r3, #4
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	659a      	str	r2, [r3, #88]	; 0x58
 80066fa:	e006      	b.n	800670a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	4b08      	ldr	r3, [pc, #32]	; (8006724 <DMA_CalcBaseAndBitshift+0x68>)
 8006704:	4013      	ands	r3, r2
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	aaaaaaab 	.word	0xaaaaaaab
 8006720:	08009950 	.word	0x08009950
 8006724:	fffffc00 	.word	0xfffffc00

08006728 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006738:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d11f      	bne.n	8006782 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b03      	cmp	r3, #3
 8006746:	d855      	bhi.n	80067f4 <DMA_CheckFifoParam+0xcc>
 8006748:	a201      	add	r2, pc, #4	; (adr r2, 8006750 <DMA_CheckFifoParam+0x28>)
 800674a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674e:	bf00      	nop
 8006750:	08006761 	.word	0x08006761
 8006754:	08006773 	.word	0x08006773
 8006758:	08006761 	.word	0x08006761
 800675c:	080067f5 	.word	0x080067f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d045      	beq.n	80067f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006770:	e042      	b.n	80067f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006776:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800677a:	d13f      	bne.n	80067fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006780:	e03c      	b.n	80067fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800678a:	d121      	bne.n	80067d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2b03      	cmp	r3, #3
 8006790:	d836      	bhi.n	8006800 <DMA_CheckFifoParam+0xd8>
 8006792:	a201      	add	r2, pc, #4	; (adr r2, 8006798 <DMA_CheckFifoParam+0x70>)
 8006794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006798:	080067a9 	.word	0x080067a9
 800679c:	080067af 	.word	0x080067af
 80067a0:	080067a9 	.word	0x080067a9
 80067a4:	080067c1 	.word	0x080067c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	73fb      	strb	r3, [r7, #15]
      break;
 80067ac:	e02f      	b.n	800680e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d024      	beq.n	8006804 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067be:	e021      	b.n	8006804 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067c8:	d11e      	bne.n	8006808 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80067ce:	e01b      	b.n	8006808 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d902      	bls.n	80067dc <DMA_CheckFifoParam+0xb4>
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d003      	beq.n	80067e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80067da:	e018      	b.n	800680e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	73fb      	strb	r3, [r7, #15]
      break;
 80067e0:	e015      	b.n	800680e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00e      	beq.n	800680c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	73fb      	strb	r3, [r7, #15]
      break;
 80067f2:	e00b      	b.n	800680c <DMA_CheckFifoParam+0xe4>
      break;
 80067f4:	bf00      	nop
 80067f6:	e00a      	b.n	800680e <DMA_CheckFifoParam+0xe6>
      break;
 80067f8:	bf00      	nop
 80067fa:	e008      	b.n	800680e <DMA_CheckFifoParam+0xe6>
      break;
 80067fc:	bf00      	nop
 80067fe:	e006      	b.n	800680e <DMA_CheckFifoParam+0xe6>
      break;
 8006800:	bf00      	nop
 8006802:	e004      	b.n	800680e <DMA_CheckFifoParam+0xe6>
      break;
 8006804:	bf00      	nop
 8006806:	e002      	b.n	800680e <DMA_CheckFifoParam+0xe6>
      break;   
 8006808:	bf00      	nop
 800680a:	e000      	b.n	800680e <DMA_CheckFifoParam+0xe6>
      break;
 800680c:	bf00      	nop
    }
  } 
  
  return status; 
 800680e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800681c:	b480      	push	{r7}
 800681e:	b089      	sub	sp, #36	; 0x24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006826:	2300      	movs	r3, #0
 8006828:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800682a:	2300      	movs	r3, #0
 800682c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800682e:	2300      	movs	r3, #0
 8006830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006832:	2300      	movs	r3, #0
 8006834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006836:	2300      	movs	r3, #0
 8006838:	61fb      	str	r3, [r7, #28]
 800683a:	e175      	b.n	8006b28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800683c:	2201      	movs	r2, #1
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	fa02 f303 	lsl.w	r3, r2, r3
 8006844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	4013      	ands	r3, r2
 800684e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	429a      	cmp	r2, r3
 8006856:	f040 8164 	bne.w	8006b22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d00b      	beq.n	800687a <HAL_GPIO_Init+0x5e>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	2b02      	cmp	r3, #2
 8006868:	d007      	beq.n	800687a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800686e:	2b11      	cmp	r3, #17
 8006870:	d003      	beq.n	800687a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	2b12      	cmp	r3, #18
 8006878:	d130      	bne.n	80068dc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	2203      	movs	r2, #3
 8006886:	fa02 f303 	lsl.w	r3, r2, r3
 800688a:	43db      	mvns	r3, r3
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	4013      	ands	r3, r2
 8006890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	fa02 f303 	lsl.w	r3, r2, r3
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80068b0:	2201      	movs	r2, #1
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	fa02 f303 	lsl.w	r3, r2, r3
 80068b8:	43db      	mvns	r3, r3
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	4013      	ands	r3, r2
 80068be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	091b      	lsrs	r3, r3, #4
 80068c6:	f003 0201 	and.w	r2, r3, #1
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	fa02 f303 	lsl.w	r3, r2, r3
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	2203      	movs	r2, #3
 80068e8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ec:	43db      	mvns	r3, r3
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	4013      	ands	r3, r2
 80068f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	4313      	orrs	r3, r2
 8006904:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d003      	beq.n	800691c <HAL_GPIO_Init+0x100>
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	2b12      	cmp	r3, #18
 800691a:	d123      	bne.n	8006964 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	08da      	lsrs	r2, r3, #3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3208      	adds	r2, #8
 8006924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	f003 0307 	and.w	r3, r3, #7
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	220f      	movs	r2, #15
 8006934:	fa02 f303 	lsl.w	r3, r2, r3
 8006938:	43db      	mvns	r3, r3
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	4013      	ands	r3, r2
 800693e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	4313      	orrs	r3, r2
 8006954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	08da      	lsrs	r2, r3, #3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3208      	adds	r2, #8
 800695e:	69b9      	ldr	r1, [r7, #24]
 8006960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	2203      	movs	r2, #3
 8006970:	fa02 f303 	lsl.w	r3, r2, r3
 8006974:	43db      	mvns	r3, r3
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	4013      	ands	r3, r2
 800697a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f003 0203 	and.w	r2, r3, #3
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	fa02 f303 	lsl.w	r3, r2, r3
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	4313      	orrs	r3, r2
 8006990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 80be 	beq.w	8006b22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069a6:	4b65      	ldr	r3, [pc, #404]	; (8006b3c <HAL_GPIO_Init+0x320>)
 80069a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069aa:	4a64      	ldr	r2, [pc, #400]	; (8006b3c <HAL_GPIO_Init+0x320>)
 80069ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069b0:	6453      	str	r3, [r2, #68]	; 0x44
 80069b2:	4b62      	ldr	r3, [pc, #392]	; (8006b3c <HAL_GPIO_Init+0x320>)
 80069b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80069be:	4a60      	ldr	r2, [pc, #384]	; (8006b40 <HAL_GPIO_Init+0x324>)
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	089b      	lsrs	r3, r3, #2
 80069c4:	3302      	adds	r3, #2
 80069c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	220f      	movs	r2, #15
 80069d6:	fa02 f303 	lsl.w	r3, r2, r3
 80069da:	43db      	mvns	r3, r3
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	4013      	ands	r3, r2
 80069e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a57      	ldr	r2, [pc, #348]	; (8006b44 <HAL_GPIO_Init+0x328>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d037      	beq.n	8006a5a <HAL_GPIO_Init+0x23e>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a56      	ldr	r2, [pc, #344]	; (8006b48 <HAL_GPIO_Init+0x32c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d031      	beq.n	8006a56 <HAL_GPIO_Init+0x23a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a55      	ldr	r2, [pc, #340]	; (8006b4c <HAL_GPIO_Init+0x330>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d02b      	beq.n	8006a52 <HAL_GPIO_Init+0x236>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a54      	ldr	r2, [pc, #336]	; (8006b50 <HAL_GPIO_Init+0x334>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d025      	beq.n	8006a4e <HAL_GPIO_Init+0x232>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a53      	ldr	r2, [pc, #332]	; (8006b54 <HAL_GPIO_Init+0x338>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d01f      	beq.n	8006a4a <HAL_GPIO_Init+0x22e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a52      	ldr	r2, [pc, #328]	; (8006b58 <HAL_GPIO_Init+0x33c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d019      	beq.n	8006a46 <HAL_GPIO_Init+0x22a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a51      	ldr	r2, [pc, #324]	; (8006b5c <HAL_GPIO_Init+0x340>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d013      	beq.n	8006a42 <HAL_GPIO_Init+0x226>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a50      	ldr	r2, [pc, #320]	; (8006b60 <HAL_GPIO_Init+0x344>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00d      	beq.n	8006a3e <HAL_GPIO_Init+0x222>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a4f      	ldr	r2, [pc, #316]	; (8006b64 <HAL_GPIO_Init+0x348>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d007      	beq.n	8006a3a <HAL_GPIO_Init+0x21e>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a4e      	ldr	r2, [pc, #312]	; (8006b68 <HAL_GPIO_Init+0x34c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d101      	bne.n	8006a36 <HAL_GPIO_Init+0x21a>
 8006a32:	2309      	movs	r3, #9
 8006a34:	e012      	b.n	8006a5c <HAL_GPIO_Init+0x240>
 8006a36:	230a      	movs	r3, #10
 8006a38:	e010      	b.n	8006a5c <HAL_GPIO_Init+0x240>
 8006a3a:	2308      	movs	r3, #8
 8006a3c:	e00e      	b.n	8006a5c <HAL_GPIO_Init+0x240>
 8006a3e:	2307      	movs	r3, #7
 8006a40:	e00c      	b.n	8006a5c <HAL_GPIO_Init+0x240>
 8006a42:	2306      	movs	r3, #6
 8006a44:	e00a      	b.n	8006a5c <HAL_GPIO_Init+0x240>
 8006a46:	2305      	movs	r3, #5
 8006a48:	e008      	b.n	8006a5c <HAL_GPIO_Init+0x240>
 8006a4a:	2304      	movs	r3, #4
 8006a4c:	e006      	b.n	8006a5c <HAL_GPIO_Init+0x240>
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e004      	b.n	8006a5c <HAL_GPIO_Init+0x240>
 8006a52:	2302      	movs	r3, #2
 8006a54:	e002      	b.n	8006a5c <HAL_GPIO_Init+0x240>
 8006a56:	2301      	movs	r3, #1
 8006a58:	e000      	b.n	8006a5c <HAL_GPIO_Init+0x240>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	69fa      	ldr	r2, [r7, #28]
 8006a5e:	f002 0203 	and.w	r2, r2, #3
 8006a62:	0092      	lsls	r2, r2, #2
 8006a64:	4093      	lsls	r3, r2
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006a6c:	4934      	ldr	r1, [pc, #208]	; (8006b40 <HAL_GPIO_Init+0x324>)
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	089b      	lsrs	r3, r3, #2
 8006a72:	3302      	adds	r3, #2
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a7a:	4b3c      	ldr	r3, [pc, #240]	; (8006b6c <HAL_GPIO_Init+0x350>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	43db      	mvns	r3, r3
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	4013      	ands	r3, r2
 8006a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006a9e:	4a33      	ldr	r2, [pc, #204]	; (8006b6c <HAL_GPIO_Init+0x350>)
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006aa4:	4b31      	ldr	r3, [pc, #196]	; (8006b6c <HAL_GPIO_Init+0x350>)
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	43db      	mvns	r3, r3
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ac8:	4a28      	ldr	r2, [pc, #160]	; (8006b6c <HAL_GPIO_Init+0x350>)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006ace:	4b27      	ldr	r3, [pc, #156]	; (8006b6c <HAL_GPIO_Init+0x350>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	43db      	mvns	r3, r3
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	4013      	ands	r3, r2
 8006adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006af2:	4a1e      	ldr	r2, [pc, #120]	; (8006b6c <HAL_GPIO_Init+0x350>)
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006af8:	4b1c      	ldr	r3, [pc, #112]	; (8006b6c <HAL_GPIO_Init+0x350>)
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	43db      	mvns	r3, r3
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	4013      	ands	r3, r2
 8006b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b1c:	4a13      	ldr	r2, [pc, #76]	; (8006b6c <HAL_GPIO_Init+0x350>)
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	3301      	adds	r3, #1
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	2b0f      	cmp	r3, #15
 8006b2c:	f67f ae86 	bls.w	800683c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006b30:	bf00      	nop
 8006b32:	3724      	adds	r7, #36	; 0x24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	40023800 	.word	0x40023800
 8006b40:	40013800 	.word	0x40013800
 8006b44:	40020000 	.word	0x40020000
 8006b48:	40020400 	.word	0x40020400
 8006b4c:	40020800 	.word	0x40020800
 8006b50:	40020c00 	.word	0x40020c00
 8006b54:	40021000 	.word	0x40021000
 8006b58:	40021400 	.word	0x40021400
 8006b5c:	40021800 	.word	0x40021800
 8006b60:	40021c00 	.word	0x40021c00
 8006b64:	40022000 	.word	0x40022000
 8006b68:	40022400 	.word	0x40022400
 8006b6c:	40013c00 	.word	0x40013c00

08006b70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	887b      	ldrh	r3, [r7, #2]
 8006b82:	4013      	ands	r3, r2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	73fb      	strb	r3, [r7, #15]
 8006b8c:	e001      	b.n	8006b92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	807b      	strh	r3, [r7, #2]
 8006bac:	4613      	mov	r3, r2
 8006bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006bb0:	787b      	ldrb	r3, [r7, #1]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bb6:	887a      	ldrh	r2, [r7, #2]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006bbc:	e003      	b.n	8006bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006bbe:	887b      	ldrh	r3, [r7, #2]
 8006bc0:	041a      	lsls	r2, r3, #16
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	619a      	str	r2, [r3, #24]
}
 8006bc6:	bf00      	nop
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
	...

08006bd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006bde:	4b08      	ldr	r3, [pc, #32]	; (8006c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006be0:	695a      	ldr	r2, [r3, #20]
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	4013      	ands	r3, r2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d006      	beq.n	8006bf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006bea:	4a05      	ldr	r2, [pc, #20]	; (8006c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bec:	88fb      	ldrh	r3, [r7, #6]
 8006bee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006bf0:	88fb      	ldrh	r3, [r7, #6]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fa fc84 	bl	8001500 <HAL_GPIO_EXTI_Callback>
  }
}
 8006bf8:	bf00      	nop
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	40013c00 	.word	0x40013c00

08006c04 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006c04:	b480      	push	{r7}
 8006c06:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c08:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a04      	ldr	r2, [pc, #16]	; (8006c20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c12:	6013      	str	r3, [r2, #0]
}
 8006c14:	bf00      	nop
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	40007000 	.word	0x40007000

08006c24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e29b      	b.n	8007172 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 8087 	beq.w	8006d56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c48:	4b96      	ldr	r3, [pc, #600]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f003 030c 	and.w	r3, r3, #12
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d00c      	beq.n	8006c6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c54:	4b93      	ldr	r3, [pc, #588]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 030c 	and.w	r3, r3, #12
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d112      	bne.n	8006c86 <HAL_RCC_OscConfig+0x62>
 8006c60:	4b90      	ldr	r3, [pc, #576]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c6c:	d10b      	bne.n	8006c86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c6e:	4b8d      	ldr	r3, [pc, #564]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d06c      	beq.n	8006d54 <HAL_RCC_OscConfig+0x130>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d168      	bne.n	8006d54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e275      	b.n	8007172 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c8e:	d106      	bne.n	8006c9e <HAL_RCC_OscConfig+0x7a>
 8006c90:	4b84      	ldr	r3, [pc, #528]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a83      	ldr	r2, [pc, #524]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	e02e      	b.n	8006cfc <HAL_RCC_OscConfig+0xd8>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10c      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x9c>
 8006ca6:	4b7f      	ldr	r3, [pc, #508]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a7e      	ldr	r2, [pc, #504]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cb0:	6013      	str	r3, [r2, #0]
 8006cb2:	4b7c      	ldr	r3, [pc, #496]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a7b      	ldr	r2, [pc, #492]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	e01d      	b.n	8006cfc <HAL_RCC_OscConfig+0xd8>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cc8:	d10c      	bne.n	8006ce4 <HAL_RCC_OscConfig+0xc0>
 8006cca:	4b76      	ldr	r3, [pc, #472]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a75      	ldr	r2, [pc, #468]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	4b73      	ldr	r3, [pc, #460]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a72      	ldr	r2, [pc, #456]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ce0:	6013      	str	r3, [r2, #0]
 8006ce2:	e00b      	b.n	8006cfc <HAL_RCC_OscConfig+0xd8>
 8006ce4:	4b6f      	ldr	r3, [pc, #444]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a6e      	ldr	r2, [pc, #440]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	4b6c      	ldr	r3, [pc, #432]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a6b      	ldr	r2, [pc, #428]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d013      	beq.n	8006d2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d04:	f7fe fe5e 	bl	80059c4 <HAL_GetTick>
 8006d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d0c:	f7fe fe5a 	bl	80059c4 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b64      	cmp	r3, #100	; 0x64
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e229      	b.n	8007172 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d1e:	4b61      	ldr	r3, [pc, #388]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d0f0      	beq.n	8006d0c <HAL_RCC_OscConfig+0xe8>
 8006d2a:	e014      	b.n	8006d56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2c:	f7fe fe4a 	bl	80059c4 <HAL_GetTick>
 8006d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d32:	e008      	b.n	8006d46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d34:	f7fe fe46 	bl	80059c4 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b64      	cmp	r3, #100	; 0x64
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e215      	b.n	8007172 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d46:	4b57      	ldr	r3, [pc, #348]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1f0      	bne.n	8006d34 <HAL_RCC_OscConfig+0x110>
 8006d52:	e000      	b.n	8006d56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d069      	beq.n	8006e36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d62:	4b50      	ldr	r3, [pc, #320]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 030c 	and.w	r3, r3, #12
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00b      	beq.n	8006d86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d6e:	4b4d      	ldr	r3, [pc, #308]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 030c 	and.w	r3, r3, #12
 8006d76:	2b08      	cmp	r3, #8
 8006d78:	d11c      	bne.n	8006db4 <HAL_RCC_OscConfig+0x190>
 8006d7a:	4b4a      	ldr	r3, [pc, #296]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d116      	bne.n	8006db4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d86:	4b47      	ldr	r3, [pc, #284]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d005      	beq.n	8006d9e <HAL_RCC_OscConfig+0x17a>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d001      	beq.n	8006d9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e1e9      	b.n	8007172 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d9e:	4b41      	ldr	r3, [pc, #260]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	493d      	ldr	r1, [pc, #244]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006db2:	e040      	b.n	8006e36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d023      	beq.n	8006e04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006dbc:	4b39      	ldr	r3, [pc, #228]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a38      	ldr	r2, [pc, #224]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006dc2:	f043 0301 	orr.w	r3, r3, #1
 8006dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc8:	f7fe fdfc 	bl	80059c4 <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dd0:	f7fe fdf8 	bl	80059c4 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e1c7      	b.n	8007172 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006de2:	4b30      	ldr	r3, [pc, #192]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0f0      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dee:	4b2d      	ldr	r3, [pc, #180]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	4929      	ldr	r1, [pc, #164]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	600b      	str	r3, [r1, #0]
 8006e02:	e018      	b.n	8006e36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e04:	4b27      	ldr	r3, [pc, #156]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a26      	ldr	r2, [pc, #152]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006e0a:	f023 0301 	bic.w	r3, r3, #1
 8006e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e10:	f7fe fdd8 	bl	80059c4 <HAL_GetTick>
 8006e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e16:	e008      	b.n	8006e2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e18:	f7fe fdd4 	bl	80059c4 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d901      	bls.n	8006e2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e1a3      	b.n	8007172 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e2a:	4b1e      	ldr	r3, [pc, #120]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1f0      	bne.n	8006e18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0308 	and.w	r3, r3, #8
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d038      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d019      	beq.n	8006e7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e4a:	4b16      	ldr	r3, [pc, #88]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e4e:	4a15      	ldr	r2, [pc, #84]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006e50:	f043 0301 	orr.w	r3, r3, #1
 8006e54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e56:	f7fe fdb5 	bl	80059c4 <HAL_GetTick>
 8006e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e5c:	e008      	b.n	8006e70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e5e:	f7fe fdb1 	bl	80059c4 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d901      	bls.n	8006e70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e180      	b.n	8007172 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e70:	4b0c      	ldr	r3, [pc, #48]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0f0      	beq.n	8006e5e <HAL_RCC_OscConfig+0x23a>
 8006e7c:	e01a      	b.n	8006eb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e7e:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e82:	4a08      	ldr	r2, [pc, #32]	; (8006ea4 <HAL_RCC_OscConfig+0x280>)
 8006e84:	f023 0301 	bic.w	r3, r3, #1
 8006e88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e8a:	f7fe fd9b 	bl	80059c4 <HAL_GetTick>
 8006e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e90:	e00a      	b.n	8006ea8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e92:	f7fe fd97 	bl	80059c4 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d903      	bls.n	8006ea8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e166      	b.n	8007172 <HAL_RCC_OscConfig+0x54e>
 8006ea4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ea8:	4b92      	ldr	r3, [pc, #584]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1ee      	bne.n	8006e92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0304 	and.w	r3, r3, #4
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 80a4 	beq.w	800700a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ec2:	4b8c      	ldr	r3, [pc, #560]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10d      	bne.n	8006eea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ece:	4b89      	ldr	r3, [pc, #548]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	4a88      	ldr	r2, [pc, #544]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8006eda:	4b86      	ldr	r3, [pc, #536]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ee2:	60bb      	str	r3, [r7, #8]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006eea:	4b83      	ldr	r3, [pc, #524]	; (80070f8 <HAL_RCC_OscConfig+0x4d4>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d118      	bne.n	8006f28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006ef6:	4b80      	ldr	r3, [pc, #512]	; (80070f8 <HAL_RCC_OscConfig+0x4d4>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a7f      	ldr	r2, [pc, #508]	; (80070f8 <HAL_RCC_OscConfig+0x4d4>)
 8006efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f02:	f7fe fd5f 	bl	80059c4 <HAL_GetTick>
 8006f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f08:	e008      	b.n	8006f1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f0a:	f7fe fd5b 	bl	80059c4 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	2b64      	cmp	r3, #100	; 0x64
 8006f16:	d901      	bls.n	8006f1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e12a      	b.n	8007172 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f1c:	4b76      	ldr	r3, [pc, #472]	; (80070f8 <HAL_RCC_OscConfig+0x4d4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d0f0      	beq.n	8006f0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d106      	bne.n	8006f3e <HAL_RCC_OscConfig+0x31a>
 8006f30:	4b70      	ldr	r3, [pc, #448]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f34:	4a6f      	ldr	r2, [pc, #444]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006f36:	f043 0301 	orr.w	r3, r3, #1
 8006f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f3c:	e02d      	b.n	8006f9a <HAL_RCC_OscConfig+0x376>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10c      	bne.n	8006f60 <HAL_RCC_OscConfig+0x33c>
 8006f46:	4b6b      	ldr	r3, [pc, #428]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4a:	4a6a      	ldr	r2, [pc, #424]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006f4c:	f023 0301 	bic.w	r3, r3, #1
 8006f50:	6713      	str	r3, [r2, #112]	; 0x70
 8006f52:	4b68      	ldr	r3, [pc, #416]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f56:	4a67      	ldr	r2, [pc, #412]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006f58:	f023 0304 	bic.w	r3, r3, #4
 8006f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f5e:	e01c      	b.n	8006f9a <HAL_RCC_OscConfig+0x376>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	2b05      	cmp	r3, #5
 8006f66:	d10c      	bne.n	8006f82 <HAL_RCC_OscConfig+0x35e>
 8006f68:	4b62      	ldr	r3, [pc, #392]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f6c:	4a61      	ldr	r2, [pc, #388]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006f6e:	f043 0304 	orr.w	r3, r3, #4
 8006f72:	6713      	str	r3, [r2, #112]	; 0x70
 8006f74:	4b5f      	ldr	r3, [pc, #380]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f78:	4a5e      	ldr	r2, [pc, #376]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006f7a:	f043 0301 	orr.w	r3, r3, #1
 8006f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f80:	e00b      	b.n	8006f9a <HAL_RCC_OscConfig+0x376>
 8006f82:	4b5c      	ldr	r3, [pc, #368]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f86:	4a5b      	ldr	r2, [pc, #364]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006f88:	f023 0301 	bic.w	r3, r3, #1
 8006f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f8e:	4b59      	ldr	r3, [pc, #356]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f92:	4a58      	ldr	r2, [pc, #352]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006f94:	f023 0304 	bic.w	r3, r3, #4
 8006f98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d015      	beq.n	8006fce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fa2:	f7fe fd0f 	bl	80059c4 <HAL_GetTick>
 8006fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fa8:	e00a      	b.n	8006fc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006faa:	f7fe fd0b 	bl	80059c4 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d901      	bls.n	8006fc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e0d8      	b.n	8007172 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fc0:	4b4c      	ldr	r3, [pc, #304]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d0ee      	beq.n	8006faa <HAL_RCC_OscConfig+0x386>
 8006fcc:	e014      	b.n	8006ff8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fce:	f7fe fcf9 	bl	80059c4 <HAL_GetTick>
 8006fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fd4:	e00a      	b.n	8006fec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fd6:	f7fe fcf5 	bl	80059c4 <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d901      	bls.n	8006fec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e0c2      	b.n	8007172 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fec:	4b41      	ldr	r3, [pc, #260]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8006fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1ee      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ff8:	7dfb      	ldrb	r3, [r7, #23]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d105      	bne.n	800700a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ffe:	4b3d      	ldr	r3, [pc, #244]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	4a3c      	ldr	r2, [pc, #240]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8007004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007008:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 80ae 	beq.w	8007170 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007014:	4b37      	ldr	r3, [pc, #220]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f003 030c 	and.w	r3, r3, #12
 800701c:	2b08      	cmp	r3, #8
 800701e:	d06d      	beq.n	80070fc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	2b02      	cmp	r3, #2
 8007026:	d14b      	bne.n	80070c0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007028:	4b32      	ldr	r3, [pc, #200]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a31      	ldr	r2, [pc, #196]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 800702e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007034:	f7fe fcc6 	bl	80059c4 <HAL_GetTick>
 8007038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800703a:	e008      	b.n	800704e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800703c:	f7fe fcc2 	bl	80059c4 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b02      	cmp	r3, #2
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e091      	b.n	8007172 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800704e:	4b29      	ldr	r3, [pc, #164]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1f0      	bne.n	800703c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	69da      	ldr	r2, [r3, #28]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	431a      	orrs	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	019b      	lsls	r3, r3, #6
 800706a:	431a      	orrs	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007070:	085b      	lsrs	r3, r3, #1
 8007072:	3b01      	subs	r3, #1
 8007074:	041b      	lsls	r3, r3, #16
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707c:	061b      	lsls	r3, r3, #24
 800707e:	431a      	orrs	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007084:	071b      	lsls	r3, r3, #28
 8007086:	491b      	ldr	r1, [pc, #108]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8007088:	4313      	orrs	r3, r2
 800708a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800708c:	4b19      	ldr	r3, [pc, #100]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a18      	ldr	r2, [pc, #96]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 8007092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007098:	f7fe fc94 	bl	80059c4 <HAL_GetTick>
 800709c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800709e:	e008      	b.n	80070b2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070a0:	f7fe fc90 	bl	80059c4 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e05f      	b.n	8007172 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070b2:	4b10      	ldr	r3, [pc, #64]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0f0      	beq.n	80070a0 <HAL_RCC_OscConfig+0x47c>
 80070be:	e057      	b.n	8007170 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070c0:	4b0c      	ldr	r3, [pc, #48]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a0b      	ldr	r2, [pc, #44]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 80070c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070cc:	f7fe fc7a 	bl	80059c4 <HAL_GetTick>
 80070d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070d2:	e008      	b.n	80070e6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070d4:	f7fe fc76 	bl	80059c4 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d901      	bls.n	80070e6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e045      	b.n	8007172 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070e6:	4b03      	ldr	r3, [pc, #12]	; (80070f4 <HAL_RCC_OscConfig+0x4d0>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1f0      	bne.n	80070d4 <HAL_RCC_OscConfig+0x4b0>
 80070f2:	e03d      	b.n	8007170 <HAL_RCC_OscConfig+0x54c>
 80070f4:	40023800 	.word	0x40023800
 80070f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80070fc:	4b1f      	ldr	r3, [pc, #124]	; (800717c <HAL_RCC_OscConfig+0x558>)
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d030      	beq.n	800716c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007114:	429a      	cmp	r2, r3
 8007116:	d129      	bne.n	800716c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007122:	429a      	cmp	r2, r3
 8007124:	d122      	bne.n	800716c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800712c:	4013      	ands	r3, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007132:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007134:	4293      	cmp	r3, r2
 8007136:	d119      	bne.n	800716c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007142:	085b      	lsrs	r3, r3, #1
 8007144:	3b01      	subs	r3, #1
 8007146:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007148:	429a      	cmp	r2, r3
 800714a:	d10f      	bne.n	800716c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007156:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007158:	429a      	cmp	r2, r3
 800715a:	d107      	bne.n	800716c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007166:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007168:	429a      	cmp	r2, r3
 800716a:	d001      	beq.n	8007170 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e000      	b.n	8007172 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3718      	adds	r7, #24
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	40023800 	.word	0x40023800

08007180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e0d0      	b.n	800733a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007198:	4b6a      	ldr	r3, [pc, #424]	; (8007344 <HAL_RCC_ClockConfig+0x1c4>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 030f 	and.w	r3, r3, #15
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d910      	bls.n	80071c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071a6:	4b67      	ldr	r3, [pc, #412]	; (8007344 <HAL_RCC_ClockConfig+0x1c4>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f023 020f 	bic.w	r2, r3, #15
 80071ae:	4965      	ldr	r1, [pc, #404]	; (8007344 <HAL_RCC_ClockConfig+0x1c4>)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071b6:	4b63      	ldr	r3, [pc, #396]	; (8007344 <HAL_RCC_ClockConfig+0x1c4>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d001      	beq.n	80071c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e0b8      	b.n	800733a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d020      	beq.n	8007216 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d005      	beq.n	80071ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071e0:	4b59      	ldr	r3, [pc, #356]	; (8007348 <HAL_RCC_ClockConfig+0x1c8>)
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	4a58      	ldr	r2, [pc, #352]	; (8007348 <HAL_RCC_ClockConfig+0x1c8>)
 80071e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80071ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0308 	and.w	r3, r3, #8
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d005      	beq.n	8007204 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071f8:	4b53      	ldr	r3, [pc, #332]	; (8007348 <HAL_RCC_ClockConfig+0x1c8>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	4a52      	ldr	r2, [pc, #328]	; (8007348 <HAL_RCC_ClockConfig+0x1c8>)
 80071fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007202:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007204:	4b50      	ldr	r3, [pc, #320]	; (8007348 <HAL_RCC_ClockConfig+0x1c8>)
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	494d      	ldr	r1, [pc, #308]	; (8007348 <HAL_RCC_ClockConfig+0x1c8>)
 8007212:	4313      	orrs	r3, r2
 8007214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d040      	beq.n	80072a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d107      	bne.n	800723a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800722a:	4b47      	ldr	r3, [pc, #284]	; (8007348 <HAL_RCC_ClockConfig+0x1c8>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d115      	bne.n	8007262 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e07f      	b.n	800733a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	2b02      	cmp	r3, #2
 8007240:	d107      	bne.n	8007252 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007242:	4b41      	ldr	r3, [pc, #260]	; (8007348 <HAL_RCC_ClockConfig+0x1c8>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d109      	bne.n	8007262 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e073      	b.n	800733a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007252:	4b3d      	ldr	r3, [pc, #244]	; (8007348 <HAL_RCC_ClockConfig+0x1c8>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e06b      	b.n	800733a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007262:	4b39      	ldr	r3, [pc, #228]	; (8007348 <HAL_RCC_ClockConfig+0x1c8>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f023 0203 	bic.w	r2, r3, #3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	4936      	ldr	r1, [pc, #216]	; (8007348 <HAL_RCC_ClockConfig+0x1c8>)
 8007270:	4313      	orrs	r3, r2
 8007272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007274:	f7fe fba6 	bl	80059c4 <HAL_GetTick>
 8007278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800727a:	e00a      	b.n	8007292 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800727c:	f7fe fba2 	bl	80059c4 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	f241 3288 	movw	r2, #5000	; 0x1388
 800728a:	4293      	cmp	r3, r2
 800728c:	d901      	bls.n	8007292 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e053      	b.n	800733a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007292:	4b2d      	ldr	r3, [pc, #180]	; (8007348 <HAL_RCC_ClockConfig+0x1c8>)
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f003 020c 	and.w	r2, r3, #12
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d1eb      	bne.n	800727c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072a4:	4b27      	ldr	r3, [pc, #156]	; (8007344 <HAL_RCC_ClockConfig+0x1c4>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 030f 	and.w	r3, r3, #15
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d210      	bcs.n	80072d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072b2:	4b24      	ldr	r3, [pc, #144]	; (8007344 <HAL_RCC_ClockConfig+0x1c4>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f023 020f 	bic.w	r2, r3, #15
 80072ba:	4922      	ldr	r1, [pc, #136]	; (8007344 <HAL_RCC_ClockConfig+0x1c4>)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	4313      	orrs	r3, r2
 80072c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072c2:	4b20      	ldr	r3, [pc, #128]	; (8007344 <HAL_RCC_ClockConfig+0x1c4>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 030f 	and.w	r3, r3, #15
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d001      	beq.n	80072d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e032      	b.n	800733a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0304 	and.w	r3, r3, #4
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d008      	beq.n	80072f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072e0:	4b19      	ldr	r3, [pc, #100]	; (8007348 <HAL_RCC_ClockConfig+0x1c8>)
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	4916      	ldr	r1, [pc, #88]	; (8007348 <HAL_RCC_ClockConfig+0x1c8>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0308 	and.w	r3, r3, #8
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d009      	beq.n	8007312 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80072fe:	4b12      	ldr	r3, [pc, #72]	; (8007348 <HAL_RCC_ClockConfig+0x1c8>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	490e      	ldr	r1, [pc, #56]	; (8007348 <HAL_RCC_ClockConfig+0x1c8>)
 800730e:	4313      	orrs	r3, r2
 8007310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007312:	f000 f821 	bl	8007358 <HAL_RCC_GetSysClockFreq>
 8007316:	4601      	mov	r1, r0
 8007318:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <HAL_RCC_ClockConfig+0x1c8>)
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	091b      	lsrs	r3, r3, #4
 800731e:	f003 030f 	and.w	r3, r3, #15
 8007322:	4a0a      	ldr	r2, [pc, #40]	; (800734c <HAL_RCC_ClockConfig+0x1cc>)
 8007324:	5cd3      	ldrb	r3, [r2, r3]
 8007326:	fa21 f303 	lsr.w	r3, r1, r3
 800732a:	4a09      	ldr	r2, [pc, #36]	; (8007350 <HAL_RCC_ClockConfig+0x1d0>)
 800732c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800732e:	4b09      	ldr	r3, [pc, #36]	; (8007354 <HAL_RCC_ClockConfig+0x1d4>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4618      	mov	r0, r3
 8007334:	f7fe fb02 	bl	800593c <HAL_InitTick>

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	40023c00 	.word	0x40023c00
 8007348:	40023800 	.word	0x40023800
 800734c:	080093c4 	.word	0x080093c4
 8007350:	200003c4 	.word	0x200003c4
 8007354:	200003cc 	.word	0x200003cc

08007358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	607b      	str	r3, [r7, #4]
 8007362:	2300      	movs	r3, #0
 8007364:	60fb      	str	r3, [r7, #12]
 8007366:	2300      	movs	r3, #0
 8007368:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800736e:	4b63      	ldr	r3, [pc, #396]	; (80074fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f003 030c 	and.w	r3, r3, #12
 8007376:	2b04      	cmp	r3, #4
 8007378:	d007      	beq.n	800738a <HAL_RCC_GetSysClockFreq+0x32>
 800737a:	2b08      	cmp	r3, #8
 800737c:	d008      	beq.n	8007390 <HAL_RCC_GetSysClockFreq+0x38>
 800737e:	2b00      	cmp	r3, #0
 8007380:	f040 80b4 	bne.w	80074ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007384:	4b5e      	ldr	r3, [pc, #376]	; (8007500 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007386:	60bb      	str	r3, [r7, #8]
      break;
 8007388:	e0b3      	b.n	80074f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800738a:	4b5e      	ldr	r3, [pc, #376]	; (8007504 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800738c:	60bb      	str	r3, [r7, #8]
      break;
 800738e:	e0b0      	b.n	80074f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007390:	4b5a      	ldr	r3, [pc, #360]	; (80074fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007398:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800739a:	4b58      	ldr	r3, [pc, #352]	; (80074fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d04a      	beq.n	800743c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073a6:	4b55      	ldr	r3, [pc, #340]	; (80074fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	099b      	lsrs	r3, r3, #6
 80073ac:	f04f 0400 	mov.w	r4, #0
 80073b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80073b4:	f04f 0200 	mov.w	r2, #0
 80073b8:	ea03 0501 	and.w	r5, r3, r1
 80073bc:	ea04 0602 	and.w	r6, r4, r2
 80073c0:	4629      	mov	r1, r5
 80073c2:	4632      	mov	r2, r6
 80073c4:	f04f 0300 	mov.w	r3, #0
 80073c8:	f04f 0400 	mov.w	r4, #0
 80073cc:	0154      	lsls	r4, r2, #5
 80073ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80073d2:	014b      	lsls	r3, r1, #5
 80073d4:	4619      	mov	r1, r3
 80073d6:	4622      	mov	r2, r4
 80073d8:	1b49      	subs	r1, r1, r5
 80073da:	eb62 0206 	sbc.w	r2, r2, r6
 80073de:	f04f 0300 	mov.w	r3, #0
 80073e2:	f04f 0400 	mov.w	r4, #0
 80073e6:	0194      	lsls	r4, r2, #6
 80073e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80073ec:	018b      	lsls	r3, r1, #6
 80073ee:	1a5b      	subs	r3, r3, r1
 80073f0:	eb64 0402 	sbc.w	r4, r4, r2
 80073f4:	f04f 0100 	mov.w	r1, #0
 80073f8:	f04f 0200 	mov.w	r2, #0
 80073fc:	00e2      	lsls	r2, r4, #3
 80073fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007402:	00d9      	lsls	r1, r3, #3
 8007404:	460b      	mov	r3, r1
 8007406:	4614      	mov	r4, r2
 8007408:	195b      	adds	r3, r3, r5
 800740a:	eb44 0406 	adc.w	r4, r4, r6
 800740e:	f04f 0100 	mov.w	r1, #0
 8007412:	f04f 0200 	mov.w	r2, #0
 8007416:	0262      	lsls	r2, r4, #9
 8007418:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800741c:	0259      	lsls	r1, r3, #9
 800741e:	460b      	mov	r3, r1
 8007420:	4614      	mov	r4, r2
 8007422:	4618      	mov	r0, r3
 8007424:	4621      	mov	r1, r4
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f04f 0400 	mov.w	r4, #0
 800742c:	461a      	mov	r2, r3
 800742e:	4623      	mov	r3, r4
 8007430:	f7f8 ff02 	bl	8000238 <__aeabi_uldivmod>
 8007434:	4603      	mov	r3, r0
 8007436:	460c      	mov	r4, r1
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	e049      	b.n	80074d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800743c:	4b2f      	ldr	r3, [pc, #188]	; (80074fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	099b      	lsrs	r3, r3, #6
 8007442:	f04f 0400 	mov.w	r4, #0
 8007446:	f240 11ff 	movw	r1, #511	; 0x1ff
 800744a:	f04f 0200 	mov.w	r2, #0
 800744e:	ea03 0501 	and.w	r5, r3, r1
 8007452:	ea04 0602 	and.w	r6, r4, r2
 8007456:	4629      	mov	r1, r5
 8007458:	4632      	mov	r2, r6
 800745a:	f04f 0300 	mov.w	r3, #0
 800745e:	f04f 0400 	mov.w	r4, #0
 8007462:	0154      	lsls	r4, r2, #5
 8007464:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007468:	014b      	lsls	r3, r1, #5
 800746a:	4619      	mov	r1, r3
 800746c:	4622      	mov	r2, r4
 800746e:	1b49      	subs	r1, r1, r5
 8007470:	eb62 0206 	sbc.w	r2, r2, r6
 8007474:	f04f 0300 	mov.w	r3, #0
 8007478:	f04f 0400 	mov.w	r4, #0
 800747c:	0194      	lsls	r4, r2, #6
 800747e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007482:	018b      	lsls	r3, r1, #6
 8007484:	1a5b      	subs	r3, r3, r1
 8007486:	eb64 0402 	sbc.w	r4, r4, r2
 800748a:	f04f 0100 	mov.w	r1, #0
 800748e:	f04f 0200 	mov.w	r2, #0
 8007492:	00e2      	lsls	r2, r4, #3
 8007494:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007498:	00d9      	lsls	r1, r3, #3
 800749a:	460b      	mov	r3, r1
 800749c:	4614      	mov	r4, r2
 800749e:	195b      	adds	r3, r3, r5
 80074a0:	eb44 0406 	adc.w	r4, r4, r6
 80074a4:	f04f 0100 	mov.w	r1, #0
 80074a8:	f04f 0200 	mov.w	r2, #0
 80074ac:	02a2      	lsls	r2, r4, #10
 80074ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80074b2:	0299      	lsls	r1, r3, #10
 80074b4:	460b      	mov	r3, r1
 80074b6:	4614      	mov	r4, r2
 80074b8:	4618      	mov	r0, r3
 80074ba:	4621      	mov	r1, r4
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f04f 0400 	mov.w	r4, #0
 80074c2:	461a      	mov	r2, r3
 80074c4:	4623      	mov	r3, r4
 80074c6:	f7f8 feb7 	bl	8000238 <__aeabi_uldivmod>
 80074ca:	4603      	mov	r3, r0
 80074cc:	460c      	mov	r4, r1
 80074ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80074d0:	4b0a      	ldr	r3, [pc, #40]	; (80074fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	0c1b      	lsrs	r3, r3, #16
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	3301      	adds	r3, #1
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e8:	60bb      	str	r3, [r7, #8]
      break;
 80074ea:	e002      	b.n	80074f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074ec:	4b04      	ldr	r3, [pc, #16]	; (8007500 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80074ee:	60bb      	str	r3, [r7, #8]
      break;
 80074f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074f2:	68bb      	ldr	r3, [r7, #8]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074fc:	40023800 	.word	0x40023800
 8007500:	00f42400 	.word	0x00f42400
 8007504:	007a1200 	.word	0x007a1200

08007508 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007508:	b480      	push	{r7}
 800750a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800750c:	4b03      	ldr	r3, [pc, #12]	; (800751c <HAL_RCC_GetHCLKFreq+0x14>)
 800750e:	681b      	ldr	r3, [r3, #0]
}
 8007510:	4618      	mov	r0, r3
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	200003c4 	.word	0x200003c4

08007520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007524:	f7ff fff0 	bl	8007508 <HAL_RCC_GetHCLKFreq>
 8007528:	4601      	mov	r1, r0
 800752a:	4b05      	ldr	r3, [pc, #20]	; (8007540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	0a9b      	lsrs	r3, r3, #10
 8007530:	f003 0307 	and.w	r3, r3, #7
 8007534:	4a03      	ldr	r2, [pc, #12]	; (8007544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007536:	5cd3      	ldrb	r3, [r2, r3]
 8007538:	fa21 f303 	lsr.w	r3, r1, r3
}
 800753c:	4618      	mov	r0, r3
 800753e:	bd80      	pop	{r7, pc}
 8007540:	40023800 	.word	0x40023800
 8007544:	080093d4 	.word	0x080093d4

08007548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800754c:	f7ff ffdc 	bl	8007508 <HAL_RCC_GetHCLKFreq>
 8007550:	4601      	mov	r1, r0
 8007552:	4b05      	ldr	r3, [pc, #20]	; (8007568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	0b5b      	lsrs	r3, r3, #13
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	4a03      	ldr	r2, [pc, #12]	; (800756c <HAL_RCC_GetPCLK2Freq+0x24>)
 800755e:	5cd3      	ldrb	r3, [r2, r3]
 8007560:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007564:	4618      	mov	r0, r3
 8007566:	bd80      	pop	{r7, pc}
 8007568:	40023800 	.word	0x40023800
 800756c:	080093d4 	.word	0x080093d4

08007570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b088      	sub	sp, #32
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007578:	2300      	movs	r3, #0
 800757a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007580:	2300      	movs	r3, #0
 8007582:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007584:	2300      	movs	r3, #0
 8007586:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007588:	2300      	movs	r3, #0
 800758a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	2b00      	cmp	r3, #0
 8007596:	d012      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007598:	4b69      	ldr	r3, [pc, #420]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	4a68      	ldr	r2, [pc, #416]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800759e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80075a2:	6093      	str	r3, [r2, #8]
 80075a4:	4b66      	ldr	r3, [pc, #408]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ac:	4964      	ldr	r1, [pc, #400]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d101      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80075ba:	2301      	movs	r3, #1
 80075bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d017      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075ca:	4b5d      	ldr	r3, [pc, #372]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d8:	4959      	ldr	r1, [pc, #356]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075e8:	d101      	bne.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80075ea:	2301      	movs	r3, #1
 80075ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80075f6:	2301      	movs	r3, #1
 80075f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d017      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007606:	4b4e      	ldr	r3, [pc, #312]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800760c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007614:	494a      	ldr	r1, [pc, #296]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007616:	4313      	orrs	r3, r2
 8007618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007624:	d101      	bne.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007626:	2301      	movs	r3, #1
 8007628:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007632:	2301      	movs	r3, #1
 8007634:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007642:	2301      	movs	r3, #1
 8007644:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0320 	and.w	r3, r3, #32
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 808b 	beq.w	800776a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007654:	4b3a      	ldr	r3, [pc, #232]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007658:	4a39      	ldr	r2, [pc, #228]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800765a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800765e:	6413      	str	r3, [r2, #64]	; 0x40
 8007660:	4b37      	ldr	r3, [pc, #220]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007668:	60bb      	str	r3, [r7, #8]
 800766a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800766c:	4b35      	ldr	r3, [pc, #212]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a34      	ldr	r2, [pc, #208]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007678:	f7fe f9a4 	bl	80059c4 <HAL_GetTick>
 800767c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800767e:	e008      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007680:	f7fe f9a0 	bl	80059c4 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b64      	cmp	r3, #100	; 0x64
 800768c:	d901      	bls.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e38d      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007692:	4b2c      	ldr	r3, [pc, #176]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769a:	2b00      	cmp	r3, #0
 800769c:	d0f0      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800769e:	4b28      	ldr	r3, [pc, #160]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d035      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d02e      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076bc:	4b20      	ldr	r3, [pc, #128]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80076c6:	4b1e      	ldr	r3, [pc, #120]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ca:	4a1d      	ldr	r2, [pc, #116]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076d0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076d2:	4b1b      	ldr	r3, [pc, #108]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076d6:	4a1a      	ldr	r2, [pc, #104]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80076de:	4a18      	ldr	r2, [pc, #96]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80076e4:	4b16      	ldr	r3, [pc, #88]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d114      	bne.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f0:	f7fe f968 	bl	80059c4 <HAL_GetTick>
 80076f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076f6:	e00a      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076f8:	f7fe f964 	bl	80059c4 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	f241 3288 	movw	r2, #5000	; 0x1388
 8007706:	4293      	cmp	r3, r2
 8007708:	d901      	bls.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e34f      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800770e:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0ee      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007726:	d111      	bne.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007734:	4b04      	ldr	r3, [pc, #16]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007736:	400b      	ands	r3, r1
 8007738:	4901      	ldr	r1, [pc, #4]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800773a:	4313      	orrs	r3, r2
 800773c:	608b      	str	r3, [r1, #8]
 800773e:	e00b      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007740:	40023800 	.word	0x40023800
 8007744:	40007000 	.word	0x40007000
 8007748:	0ffffcff 	.word	0x0ffffcff
 800774c:	4bb3      	ldr	r3, [pc, #716]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	4ab2      	ldr	r2, [pc, #712]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007752:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007756:	6093      	str	r3, [r2, #8]
 8007758:	4bb0      	ldr	r3, [pc, #704]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800775a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007764:	49ad      	ldr	r1, [pc, #692]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007766:	4313      	orrs	r3, r2
 8007768:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0310 	and.w	r3, r3, #16
 8007772:	2b00      	cmp	r3, #0
 8007774:	d010      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007776:	4ba9      	ldr	r3, [pc, #676]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800777c:	4aa7      	ldr	r2, [pc, #668]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800777e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007782:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007786:	4ba5      	ldr	r3, [pc, #660]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007788:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	49a2      	ldr	r1, [pc, #648]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007792:	4313      	orrs	r3, r2
 8007794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00a      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80077a4:	4b9d      	ldr	r3, [pc, #628]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077b2:	499a      	ldr	r1, [pc, #616]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00a      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80077c6:	4b95      	ldr	r3, [pc, #596]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077d4:	4991      	ldr	r1, [pc, #580]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00a      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80077e8:	4b8c      	ldr	r3, [pc, #560]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077f6:	4989      	ldr	r1, [pc, #548]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800780a:	4b84      	ldr	r3, [pc, #528]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800780c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007810:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007818:	4980      	ldr	r1, [pc, #512]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800781a:	4313      	orrs	r3, r2
 800781c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00a      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800782c:	4b7b      	ldr	r3, [pc, #492]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800782e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007832:	f023 0203 	bic.w	r2, r3, #3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783a:	4978      	ldr	r1, [pc, #480]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800783c:	4313      	orrs	r3, r2
 800783e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800784e:	4b73      	ldr	r3, [pc, #460]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007854:	f023 020c 	bic.w	r2, r3, #12
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800785c:	496f      	ldr	r1, [pc, #444]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800785e:	4313      	orrs	r3, r2
 8007860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00a      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007870:	4b6a      	ldr	r3, [pc, #424]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007876:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800787e:	4967      	ldr	r1, [pc, #412]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007880:	4313      	orrs	r3, r2
 8007882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00a      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007892:	4b62      	ldr	r3, [pc, #392]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007898:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a0:	495e      	ldr	r1, [pc, #376]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00a      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80078b4:	4b59      	ldr	r3, [pc, #356]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c2:	4956      	ldr	r1, [pc, #344]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078c4:	4313      	orrs	r3, r2
 80078c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00a      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80078d6:	4b51      	ldr	r3, [pc, #324]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e4:	494d      	ldr	r1, [pc, #308]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00a      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80078f8:	4b48      	ldr	r3, [pc, #288]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007906:	4945      	ldr	r1, [pc, #276]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007908:	4313      	orrs	r3, r2
 800790a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00a      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800791a:	4b40      	ldr	r3, [pc, #256]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800791c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007920:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007928:	493c      	ldr	r1, [pc, #240]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800792a:	4313      	orrs	r3, r2
 800792c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800793c:	4b37      	ldr	r3, [pc, #220]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800793e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007942:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800794a:	4934      	ldr	r1, [pc, #208]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800794c:	4313      	orrs	r3, r2
 800794e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d011      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800795e:	4b2f      	ldr	r3, [pc, #188]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007964:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800796c:	492b      	ldr	r1, [pc, #172]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800796e:	4313      	orrs	r3, r2
 8007970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800797c:	d101      	bne.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800797e:	2301      	movs	r3, #1
 8007980:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0308 	and.w	r3, r3, #8
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800798e:	2301      	movs	r3, #1
 8007990:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00a      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800799e:	4b1f      	ldr	r3, [pc, #124]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ac:	491b      	ldr	r1, [pc, #108]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00b      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80079c0:	4b16      	ldr	r3, [pc, #88]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079d0:	4912      	ldr	r1, [pc, #72]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80079e4:	4b0d      	ldr	r3, [pc, #52]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079f4:	4909      	ldr	r1, [pc, #36]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00f      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a08:	4b04      	ldr	r3, [pc, #16]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a18:	e002      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007a1a:	bf00      	nop
 8007a1c:	40023800 	.word	0x40023800
 8007a20:	4985      	ldr	r1, [pc, #532]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00b      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007a34:	4b80      	ldr	r3, [pc, #512]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a44:	497c      	ldr	r1, [pc, #496]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d005      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a5a:	f040 80d6 	bne.w	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007a5e:	4b76      	ldr	r3, [pc, #472]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a75      	ldr	r2, [pc, #468]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007a64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a6a:	f7fd ffab 	bl	80059c4 <HAL_GetTick>
 8007a6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a70:	e008      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007a72:	f7fd ffa7 	bl	80059c4 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	2b64      	cmp	r3, #100	; 0x64
 8007a7e:	d901      	bls.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e194      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a84:	4b6c      	ldr	r3, [pc, #432]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1f0      	bne.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d021      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d11d      	bne.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007aa4:	4b64      	ldr	r3, [pc, #400]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aaa:	0c1b      	lsrs	r3, r3, #16
 8007aac:	f003 0303 	and.w	r3, r3, #3
 8007ab0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007ab2:	4b61      	ldr	r3, [pc, #388]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ab8:	0e1b      	lsrs	r3, r3, #24
 8007aba:	f003 030f 	and.w	r3, r3, #15
 8007abe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	019a      	lsls	r2, r3, #6
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	041b      	lsls	r3, r3, #16
 8007aca:	431a      	orrs	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	061b      	lsls	r3, r3, #24
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	071b      	lsls	r3, r3, #28
 8007ad8:	4957      	ldr	r1, [pc, #348]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d004      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007af4:	d00a      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d02e      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b0a:	d129      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b0c:	4b4a      	ldr	r3, [pc, #296]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b12:	0c1b      	lsrs	r3, r3, #16
 8007b14:	f003 0303 	and.w	r3, r3, #3
 8007b18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b1a:	4b47      	ldr	r3, [pc, #284]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b20:	0f1b      	lsrs	r3, r3, #28
 8007b22:	f003 0307 	and.w	r3, r3, #7
 8007b26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	019a      	lsls	r2, r3, #6
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	041b      	lsls	r3, r3, #16
 8007b32:	431a      	orrs	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	061b      	lsls	r3, r3, #24
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	071b      	lsls	r3, r3, #28
 8007b40:	493d      	ldr	r1, [pc, #244]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007b48:	4b3b      	ldr	r3, [pc, #236]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b4e:	f023 021f 	bic.w	r2, r3, #31
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	3b01      	subs	r3, #1
 8007b58:	4937      	ldr	r1, [pc, #220]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d01d      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007b6c:	4b32      	ldr	r3, [pc, #200]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b72:	0e1b      	lsrs	r3, r3, #24
 8007b74:	f003 030f 	and.w	r3, r3, #15
 8007b78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b7a:	4b2f      	ldr	r3, [pc, #188]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b80:	0f1b      	lsrs	r3, r3, #28
 8007b82:	f003 0307 	and.w	r3, r3, #7
 8007b86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	019a      	lsls	r2, r3, #6
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	041b      	lsls	r3, r3, #16
 8007b94:	431a      	orrs	r2, r3
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	061b      	lsls	r3, r3, #24
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	071b      	lsls	r3, r3, #28
 8007ba0:	4925      	ldr	r1, [pc, #148]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d011      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	019a      	lsls	r2, r3, #6
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	041b      	lsls	r3, r3, #16
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	061b      	lsls	r3, r3, #24
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	071b      	lsls	r3, r3, #28
 8007bd0:	4919      	ldr	r1, [pc, #100]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007bd8:	4b17      	ldr	r3, [pc, #92]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a16      	ldr	r2, [pc, #88]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007bde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007be4:	f7fd feee 	bl	80059c4 <HAL_GetTick>
 8007be8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007bea:	e008      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007bec:	f7fd feea 	bl	80059c4 <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b64      	cmp	r3, #100	; 0x64
 8007bf8:	d901      	bls.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e0d7      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007bfe:	4b0e      	ldr	r3, [pc, #56]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0f0      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	f040 80cd 	bne.w	8007dac <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007c12:	4b09      	ldr	r3, [pc, #36]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a08      	ldr	r2, [pc, #32]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c1e:	f7fd fed1 	bl	80059c4 <HAL_GetTick>
 8007c22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007c24:	e00a      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007c26:	f7fd fecd 	bl	80059c4 <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	2b64      	cmp	r3, #100	; 0x64
 8007c32:	d903      	bls.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e0ba      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007c38:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007c3c:	4b5e      	ldr	r3, [pc, #376]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c48:	d0ed      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d009      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d02e      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d12a      	bne.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007c72:	4b51      	ldr	r3, [pc, #324]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c78:	0c1b      	lsrs	r3, r3, #16
 8007c7a:	f003 0303 	and.w	r3, r3, #3
 8007c7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007c80:	4b4d      	ldr	r3, [pc, #308]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c86:	0f1b      	lsrs	r3, r3, #28
 8007c88:	f003 0307 	and.w	r3, r3, #7
 8007c8c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	019a      	lsls	r2, r3, #6
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	041b      	lsls	r3, r3, #16
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	061b      	lsls	r3, r3, #24
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	071b      	lsls	r3, r3, #28
 8007ca6:	4944      	ldr	r1, [pc, #272]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007cae:	4b42      	ldr	r3, [pc, #264]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	021b      	lsls	r3, r3, #8
 8007cc0:	493d      	ldr	r1, [pc, #244]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d022      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cdc:	d11d      	bne.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007cde:	4b36      	ldr	r3, [pc, #216]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ce4:	0e1b      	lsrs	r3, r3, #24
 8007ce6:	f003 030f 	and.w	r3, r3, #15
 8007cea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007cec:	4b32      	ldr	r3, [pc, #200]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf2:	0f1b      	lsrs	r3, r3, #28
 8007cf4:	f003 0307 	and.w	r3, r3, #7
 8007cf8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	019a      	lsls	r2, r3, #6
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a1b      	ldr	r3, [r3, #32]
 8007d04:	041b      	lsls	r3, r3, #16
 8007d06:	431a      	orrs	r2, r3
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	061b      	lsls	r3, r3, #24
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	071b      	lsls	r3, r3, #28
 8007d12:	4929      	ldr	r1, [pc, #164]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0308 	and.w	r3, r3, #8
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d028      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d26:	4b24      	ldr	r3, [pc, #144]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d2c:	0e1b      	lsrs	r3, r3, #24
 8007d2e:	f003 030f 	and.w	r3, r3, #15
 8007d32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007d34:	4b20      	ldr	r3, [pc, #128]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d3a:	0c1b      	lsrs	r3, r3, #16
 8007d3c:	f003 0303 	and.w	r3, r3, #3
 8007d40:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	019a      	lsls	r2, r3, #6
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	041b      	lsls	r3, r3, #16
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	061b      	lsls	r3, r3, #24
 8007d52:	431a      	orrs	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	69db      	ldr	r3, [r3, #28]
 8007d58:	071b      	lsls	r3, r3, #28
 8007d5a:	4917      	ldr	r1, [pc, #92]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007d62:	4b15      	ldr	r3, [pc, #84]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	4911      	ldr	r1, [pc, #68]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007d78:	4b0f      	ldr	r3, [pc, #60]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a0e      	ldr	r2, [pc, #56]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d84:	f7fd fe1e 	bl	80059c4 <HAL_GetTick>
 8007d88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007d8a:	e008      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007d8c:	f7fd fe1a 	bl	80059c4 <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	2b64      	cmp	r3, #100	; 0x64
 8007d98:	d901      	bls.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e007      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007d9e:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007daa:	d1ef      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3720      	adds	r7, #32
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	40023800 	.word	0x40023800

08007dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e01d      	b.n	8007e0a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d106      	bne.n	8007de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7f9 fdb2 	bl	800194c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	3304      	adds	r3, #4
 8007df8:	4619      	mov	r1, r3
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	f000 fa8c 	bl	8008318 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
	...

08007e14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	4b0e      	ldr	r3, [pc, #56]	; (8007e64 <HAL_TIM_Base_Start+0x50>)
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2b06      	cmp	r3, #6
 8007e34:	d00b      	beq.n	8007e4e <HAL_TIM_Base_Start+0x3a>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e3c:	d007      	beq.n	8007e4e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f042 0201 	orr.w	r2, r2, #1
 8007e4c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	00010007 	.word	0x00010007

08007e68 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6a1a      	ldr	r2, [r3, #32]
 8007e7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e82:	4013      	ands	r3, r2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10f      	bne.n	8007ea8 <HAL_TIM_Base_Stop+0x40>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6a1a      	ldr	r2, [r3, #32]
 8007e8e:	f240 4344 	movw	r3, #1092	; 0x444
 8007e92:	4013      	ands	r3, r2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d107      	bne.n	8007ea8 <HAL_TIM_Base_Stop+0x40>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0201 	bic.w	r2, r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
	...

08007ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f042 0201 	orr.w	r2, r2, #1
 8007ed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689a      	ldr	r2, [r3, #8]
 8007ede:	4b0c      	ldr	r3, [pc, #48]	; (8007f10 <HAL_TIM_Base_Start_IT+0x50>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2b06      	cmp	r3, #6
 8007ee8:	d00b      	beq.n	8007f02 <HAL_TIM_Base_Start_IT+0x42>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef0:	d007      	beq.n	8007f02 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f042 0201 	orr.w	r2, r2, #1
 8007f00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	00010007 	.word	0x00010007

08007f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d122      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d11b      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f06f 0202 	mvn.w	r2, #2
 8007f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f9c0 	bl	80082dc <HAL_TIM_IC_CaptureCallback>
 8007f5c:	e005      	b.n	8007f6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f9b2 	bl	80082c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f9c3 	bl	80082f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	f003 0304 	and.w	r3, r3, #4
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	d122      	bne.n	8007fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f003 0304 	and.w	r3, r3, #4
 8007f88:	2b04      	cmp	r3, #4
 8007f8a:	d11b      	bne.n	8007fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f06f 0204 	mvn.w	r2, #4
 8007f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2202      	movs	r2, #2
 8007f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f996 	bl	80082dc <HAL_TIM_IC_CaptureCallback>
 8007fb0:	e005      	b.n	8007fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f988 	bl	80082c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f999 	bl	80082f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	f003 0308 	and.w	r3, r3, #8
 8007fce:	2b08      	cmp	r3, #8
 8007fd0:	d122      	bne.n	8008018 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f003 0308 	and.w	r3, r3, #8
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d11b      	bne.n	8008018 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f06f 0208 	mvn.w	r2, #8
 8007fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2204      	movs	r2, #4
 8007fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	f003 0303 	and.w	r3, r3, #3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f96c 	bl	80082dc <HAL_TIM_IC_CaptureCallback>
 8008004:	e005      	b.n	8008012 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f95e 	bl	80082c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f96f 	bl	80082f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	f003 0310 	and.w	r3, r3, #16
 8008022:	2b10      	cmp	r3, #16
 8008024:	d122      	bne.n	800806c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f003 0310 	and.w	r3, r3, #16
 8008030:	2b10      	cmp	r3, #16
 8008032:	d11b      	bne.n	800806c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f06f 0210 	mvn.w	r2, #16
 800803c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2208      	movs	r2, #8
 8008042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f942 	bl	80082dc <HAL_TIM_IC_CaptureCallback>
 8008058:	e005      	b.n	8008066 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f934 	bl	80082c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f945 	bl	80082f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	2b01      	cmp	r3, #1
 8008078:	d10e      	bne.n	8008098 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	f003 0301 	and.w	r3, r3, #1
 8008084:	2b01      	cmp	r3, #1
 8008086:	d107      	bne.n	8008098 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f06f 0201 	mvn.w	r2, #1
 8008090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7f9 fa5c 	bl	8001550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a2:	2b80      	cmp	r3, #128	; 0x80
 80080a4:	d10e      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b0:	2b80      	cmp	r3, #128	; 0x80
 80080b2:	d107      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fafc 	bl	80086bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d2:	d10e      	bne.n	80080f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080de:	2b80      	cmp	r3, #128	; 0x80
 80080e0:	d107      	bne.n	80080f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80080ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 faef 	bl	80086d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080fc:	2b40      	cmp	r3, #64	; 0x40
 80080fe:	d10e      	bne.n	800811e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800810a:	2b40      	cmp	r3, #64	; 0x40
 800810c:	d107      	bne.n	800811e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f8f3 	bl	8008304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	f003 0320 	and.w	r3, r3, #32
 8008128:	2b20      	cmp	r3, #32
 800812a:	d10e      	bne.n	800814a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	f003 0320 	and.w	r3, r3, #32
 8008136:	2b20      	cmp	r3, #32
 8008138:	d107      	bne.n	800814a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f06f 0220 	mvn.w	r2, #32
 8008142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 faaf 	bl	80086a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800814a:	bf00      	nop
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
	...

08008154 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008164:	2b01      	cmp	r3, #1
 8008166:	d101      	bne.n	800816c <HAL_TIM_ConfigClockSource+0x18>
 8008168:	2302      	movs	r3, #2
 800816a:	e0a6      	b.n	80082ba <HAL_TIM_ConfigClockSource+0x166>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	4b4f      	ldr	r3, [pc, #316]	; (80082c4 <HAL_TIM_ConfigClockSource+0x170>)
 8008188:	4013      	ands	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008192:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b40      	cmp	r3, #64	; 0x40
 80081a2:	d067      	beq.n	8008274 <HAL_TIM_ConfigClockSource+0x120>
 80081a4:	2b40      	cmp	r3, #64	; 0x40
 80081a6:	d80b      	bhi.n	80081c0 <HAL_TIM_ConfigClockSource+0x6c>
 80081a8:	2b10      	cmp	r3, #16
 80081aa:	d073      	beq.n	8008294 <HAL_TIM_ConfigClockSource+0x140>
 80081ac:	2b10      	cmp	r3, #16
 80081ae:	d802      	bhi.n	80081b6 <HAL_TIM_ConfigClockSource+0x62>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d06f      	beq.n	8008294 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80081b4:	e078      	b.n	80082a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80081b6:	2b20      	cmp	r3, #32
 80081b8:	d06c      	beq.n	8008294 <HAL_TIM_ConfigClockSource+0x140>
 80081ba:	2b30      	cmp	r3, #48	; 0x30
 80081bc:	d06a      	beq.n	8008294 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80081be:	e073      	b.n	80082a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80081c0:	2b70      	cmp	r3, #112	; 0x70
 80081c2:	d00d      	beq.n	80081e0 <HAL_TIM_ConfigClockSource+0x8c>
 80081c4:	2b70      	cmp	r3, #112	; 0x70
 80081c6:	d804      	bhi.n	80081d2 <HAL_TIM_ConfigClockSource+0x7e>
 80081c8:	2b50      	cmp	r3, #80	; 0x50
 80081ca:	d033      	beq.n	8008234 <HAL_TIM_ConfigClockSource+0xe0>
 80081cc:	2b60      	cmp	r3, #96	; 0x60
 80081ce:	d041      	beq.n	8008254 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80081d0:	e06a      	b.n	80082a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80081d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d6:	d066      	beq.n	80082a6 <HAL_TIM_ConfigClockSource+0x152>
 80081d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081dc:	d017      	beq.n	800820e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80081de:	e063      	b.n	80082a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6818      	ldr	r0, [r3, #0]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	6899      	ldr	r1, [r3, #8]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f000 f9ac 	bl	800854c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008202:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	609a      	str	r2, [r3, #8]
      break;
 800820c:	e04c      	b.n	80082a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6818      	ldr	r0, [r3, #0]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	6899      	ldr	r1, [r3, #8]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	f000 f995 	bl	800854c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008230:	609a      	str	r2, [r3, #8]
      break;
 8008232:	e039      	b.n	80082a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6818      	ldr	r0, [r3, #0]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	6859      	ldr	r1, [r3, #4]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	461a      	mov	r2, r3
 8008242:	f000 f909 	bl	8008458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2150      	movs	r1, #80	; 0x50
 800824c:	4618      	mov	r0, r3
 800824e:	f000 f962 	bl	8008516 <TIM_ITRx_SetConfig>
      break;
 8008252:	e029      	b.n	80082a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6818      	ldr	r0, [r3, #0]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	6859      	ldr	r1, [r3, #4]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	461a      	mov	r2, r3
 8008262:	f000 f928 	bl	80084b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2160      	movs	r1, #96	; 0x60
 800826c:	4618      	mov	r0, r3
 800826e:	f000 f952 	bl	8008516 <TIM_ITRx_SetConfig>
      break;
 8008272:	e019      	b.n	80082a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	6859      	ldr	r1, [r3, #4]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	461a      	mov	r2, r3
 8008282:	f000 f8e9 	bl	8008458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2140      	movs	r1, #64	; 0x40
 800828c:	4618      	mov	r0, r3
 800828e:	f000 f942 	bl	8008516 <TIM_ITRx_SetConfig>
      break;
 8008292:	e009      	b.n	80082a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4619      	mov	r1, r3
 800829e:	4610      	mov	r0, r2
 80082a0:	f000 f939 	bl	8008516 <TIM_ITRx_SetConfig>
      break;
 80082a4:	e000      	b.n	80082a8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80082a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	fffeff88 	.word	0xfffeff88

080082c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a40      	ldr	r2, [pc, #256]	; (800842c <TIM_Base_SetConfig+0x114>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d013      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008336:	d00f      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a3d      	ldr	r2, [pc, #244]	; (8008430 <TIM_Base_SetConfig+0x118>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d00b      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a3c      	ldr	r2, [pc, #240]	; (8008434 <TIM_Base_SetConfig+0x11c>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d007      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a3b      	ldr	r2, [pc, #236]	; (8008438 <TIM_Base_SetConfig+0x120>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d003      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a3a      	ldr	r2, [pc, #232]	; (800843c <TIM_Base_SetConfig+0x124>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d108      	bne.n	800836a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800835e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4313      	orrs	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a2f      	ldr	r2, [pc, #188]	; (800842c <TIM_Base_SetConfig+0x114>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d02b      	beq.n	80083ca <TIM_Base_SetConfig+0xb2>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008378:	d027      	beq.n	80083ca <TIM_Base_SetConfig+0xb2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a2c      	ldr	r2, [pc, #176]	; (8008430 <TIM_Base_SetConfig+0x118>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d023      	beq.n	80083ca <TIM_Base_SetConfig+0xb2>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a2b      	ldr	r2, [pc, #172]	; (8008434 <TIM_Base_SetConfig+0x11c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d01f      	beq.n	80083ca <TIM_Base_SetConfig+0xb2>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a2a      	ldr	r2, [pc, #168]	; (8008438 <TIM_Base_SetConfig+0x120>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d01b      	beq.n	80083ca <TIM_Base_SetConfig+0xb2>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a29      	ldr	r2, [pc, #164]	; (800843c <TIM_Base_SetConfig+0x124>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d017      	beq.n	80083ca <TIM_Base_SetConfig+0xb2>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a28      	ldr	r2, [pc, #160]	; (8008440 <TIM_Base_SetConfig+0x128>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d013      	beq.n	80083ca <TIM_Base_SetConfig+0xb2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a27      	ldr	r2, [pc, #156]	; (8008444 <TIM_Base_SetConfig+0x12c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d00f      	beq.n	80083ca <TIM_Base_SetConfig+0xb2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a26      	ldr	r2, [pc, #152]	; (8008448 <TIM_Base_SetConfig+0x130>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d00b      	beq.n	80083ca <TIM_Base_SetConfig+0xb2>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a25      	ldr	r2, [pc, #148]	; (800844c <TIM_Base_SetConfig+0x134>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d007      	beq.n	80083ca <TIM_Base_SetConfig+0xb2>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a24      	ldr	r2, [pc, #144]	; (8008450 <TIM_Base_SetConfig+0x138>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d003      	beq.n	80083ca <TIM_Base_SetConfig+0xb2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a23      	ldr	r2, [pc, #140]	; (8008454 <TIM_Base_SetConfig+0x13c>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d108      	bne.n	80083dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	4313      	orrs	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a0a      	ldr	r2, [pc, #40]	; (800842c <TIM_Base_SetConfig+0x114>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d003      	beq.n	8008410 <TIM_Base_SetConfig+0xf8>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a0c      	ldr	r2, [pc, #48]	; (800843c <TIM_Base_SetConfig+0x124>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d103      	bne.n	8008418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	691a      	ldr	r2, [r3, #16]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	615a      	str	r2, [r3, #20]
}
 800841e:	bf00      	nop
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	40010000 	.word	0x40010000
 8008430:	40000400 	.word	0x40000400
 8008434:	40000800 	.word	0x40000800
 8008438:	40000c00 	.word	0x40000c00
 800843c:	40010400 	.word	0x40010400
 8008440:	40014000 	.word	0x40014000
 8008444:	40014400 	.word	0x40014400
 8008448:	40014800 	.word	0x40014800
 800844c:	40001800 	.word	0x40001800
 8008450:	40001c00 	.word	0x40001c00
 8008454:	40002000 	.word	0x40002000

08008458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	f023 0201 	bic.w	r2, r3, #1
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	011b      	lsls	r3, r3, #4
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	4313      	orrs	r3, r2
 800848c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f023 030a 	bic.w	r3, r3, #10
 8008494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	4313      	orrs	r3, r2
 800849c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	621a      	str	r2, [r3, #32]
}
 80084aa:	bf00      	nop
 80084ac:	371c      	adds	r7, #28
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b087      	sub	sp, #28
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	f023 0210 	bic.w	r2, r3, #16
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	031b      	lsls	r3, r3, #12
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	621a      	str	r2, [r3, #32]
}
 800850a:	bf00      	nop
 800850c:	371c      	adds	r7, #28
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008516:	b480      	push	{r7}
 8008518:	b085      	sub	sp, #20
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800852c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4313      	orrs	r3, r2
 8008534:	f043 0307 	orr.w	r3, r3, #7
 8008538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	609a      	str	r2, [r3, #8]
}
 8008540:	bf00      	nop
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800854c:	b480      	push	{r7}
 800854e:	b087      	sub	sp, #28
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
 8008558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	021a      	lsls	r2, r3, #8
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	431a      	orrs	r2, r3
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	4313      	orrs	r3, r2
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	4313      	orrs	r3, r2
 8008578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	609a      	str	r2, [r3, #8]
}
 8008580:	bf00      	nop
 8008582:	371c      	adds	r7, #28
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800859c:	2b01      	cmp	r3, #1
 800859e:	d101      	bne.n	80085a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085a0:	2302      	movs	r3, #2
 80085a2:	e06d      	b.n	8008680 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a30      	ldr	r2, [pc, #192]	; (800868c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d004      	beq.n	80085d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a2f      	ldr	r2, [pc, #188]	; (8008690 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d108      	bne.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a20      	ldr	r2, [pc, #128]	; (800868c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d022      	beq.n	8008654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008616:	d01d      	beq.n	8008654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a1d      	ldr	r2, [pc, #116]	; (8008694 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d018      	beq.n	8008654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a1c      	ldr	r2, [pc, #112]	; (8008698 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d013      	beq.n	8008654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a1a      	ldr	r2, [pc, #104]	; (800869c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d00e      	beq.n	8008654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a15      	ldr	r2, [pc, #84]	; (8008690 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d009      	beq.n	8008654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a16      	ldr	r2, [pc, #88]	; (80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d004      	beq.n	8008654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a15      	ldr	r2, [pc, #84]	; (80086a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d10c      	bne.n	800866e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800865a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	4313      	orrs	r3, r2
 8008664:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	40010000 	.word	0x40010000
 8008690:	40010400 	.word	0x40010400
 8008694:	40000400 	.word	0x40000400
 8008698:	40000800 	.word	0x40000800
 800869c:	40000c00 	.word	0x40000c00
 80086a0:	40014000 	.word	0x40014000
 80086a4:	40001800 	.word	0x40001800

080086a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d101      	bne.n	80086f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e040      	b.n	8008778 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d106      	bne.n	800870c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7f9 f980 	bl	8001a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2224      	movs	r2, #36	; 0x24
 8008710:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 0201 	bic.w	r2, r2, #1
 8008720:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f956 	bl	80089d4 <UART_SetConfig>
 8008728:	4603      	mov	r3, r0
 800872a:	2b01      	cmp	r3, #1
 800872c:	d101      	bne.n	8008732 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e022      	b.n	8008778 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008736:	2b00      	cmp	r3, #0
 8008738:	d002      	beq.n	8008740 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fbf4 	bl	8008f28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	685a      	ldr	r2, [r3, #4]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800874e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689a      	ldr	r2, [r3, #8]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800875e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f042 0201 	orr.w	r2, r2, #1
 800876e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fc7b 	bl	800906c <UART_CheckIdleState>
 8008776:	4603      	mov	r3, r0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b08a      	sub	sp, #40	; 0x28
 8008784:	af02      	add	r7, sp, #8
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	4613      	mov	r3, r2
 800878e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008794:	2b20      	cmp	r3, #32
 8008796:	d17f      	bne.n	8008898 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d002      	beq.n	80087a4 <HAL_UART_Transmit+0x24>
 800879e:	88fb      	ldrh	r3, [r7, #6]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e078      	b.n	800889a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d101      	bne.n	80087b6 <HAL_UART_Transmit+0x36>
 80087b2:	2302      	movs	r3, #2
 80087b4:	e071      	b.n	800889a <HAL_UART_Transmit+0x11a>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2221      	movs	r2, #33	; 0x21
 80087c8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80087ca:	f7fd f8fb 	bl	80059c4 <HAL_GetTick>
 80087ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	88fa      	ldrh	r2, [r7, #6]
 80087d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	88fa      	ldrh	r2, [r7, #6]
 80087dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e8:	d108      	bne.n	80087fc <HAL_UART_Transmit+0x7c>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d104      	bne.n	80087fc <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	61bb      	str	r3, [r7, #24]
 80087fa:	e003      	b.n	8008804 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008800:	2300      	movs	r3, #0
 8008802:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800880c:	e02c      	b.n	8008868 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2200      	movs	r2, #0
 8008816:	2180      	movs	r1, #128	; 0x80
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 fc6c 	bl	80090f6 <UART_WaitOnFlagUntilTimeout>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e038      	b.n	800889a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10b      	bne.n	8008846 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	461a      	mov	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800883c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	3302      	adds	r3, #2
 8008842:	61bb      	str	r3, [r7, #24]
 8008844:	e007      	b.n	8008856 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	781a      	ldrb	r2, [r3, #0]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	3301      	adds	r3, #1
 8008854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800885c:	b29b      	uxth	r3, r3
 800885e:	3b01      	subs	r3, #1
 8008860:	b29a      	uxth	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800886e:	b29b      	uxth	r3, r3
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1cc      	bne.n	800880e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	2200      	movs	r2, #0
 800887c:	2140      	movs	r1, #64	; 0x40
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f000 fc39 	bl	80090f6 <UART_WaitOnFlagUntilTimeout>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e005      	b.n	800889a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2220      	movs	r2, #32
 8008892:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	e000      	b.n	800889a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008898:	2302      	movs	r3, #2
  }
}
 800889a:	4618      	mov	r0, r3
 800889c:	3720      	adds	r7, #32
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	4613      	mov	r3, r2
 80088b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088b6:	2b20      	cmp	r3, #32
 80088b8:	d16c      	bne.n	8008994 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d002      	beq.n	80088c6 <HAL_UART_Receive_DMA+0x22>
 80088c0:	88fb      	ldrh	r3, [r7, #6]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e065      	b.n	8008996 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d101      	bne.n	80088d8 <HAL_UART_Receive_DMA+0x34>
 80088d4:	2302      	movs	r3, #2
 80088d6:	e05e      	b.n	8008996 <HAL_UART_Receive_DMA+0xf2>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	88fa      	ldrh	r2, [r7, #6]
 80088ea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2222      	movs	r2, #34	; 0x22
 80088f8:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d02a      	beq.n	8008958 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008906:	4a26      	ldr	r2, [pc, #152]	; (80089a0 <HAL_UART_Receive_DMA+0xfc>)
 8008908:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800890e:	4a25      	ldr	r2, [pc, #148]	; (80089a4 <HAL_UART_Receive_DMA+0x100>)
 8008910:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008916:	4a24      	ldr	r2, [pc, #144]	; (80089a8 <HAL_UART_Receive_DMA+0x104>)
 8008918:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800891e:	2200      	movs	r2, #0
 8008920:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	3324      	adds	r3, #36	; 0x24
 800892c:	4619      	mov	r1, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008932:	461a      	mov	r2, r3
 8008934:	88fb      	ldrh	r3, [r7, #6]
 8008936:	f7fd fc39 	bl	80061ac <HAL_DMA_Start_IT>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00b      	beq.n	8008958 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2210      	movs	r2, #16
 8008944:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2220      	movs	r2, #32
 8008952:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e01e      	b.n	8008996 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800896e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	689a      	ldr	r2, [r3, #8]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f042 0201 	orr.w	r2, r2, #1
 800897e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	689a      	ldr	r2, [r3, #8]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800898e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	e000      	b.n	8008996 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8008994:	2302      	movs	r3, #2
  }
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	08009257 	.word	0x08009257
 80089a4:	080092bb 	.word	0x080092bb
 80089a8:	080092d7 	.word	0x080092d7

080089ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80089c8:	bf00      	nop
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b088      	sub	sp, #32
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80089dc:	2300      	movs	r3, #0
 80089de:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689a      	ldr	r2, [r3, #8]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	431a      	orrs	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	431a      	orrs	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	4bb1      	ldr	r3, [pc, #708]	; (8008cc8 <UART_SetConfig+0x2f4>)
 8008a04:	4013      	ands	r3, r2
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	6812      	ldr	r2, [r2, #0]
 8008a0a:	6939      	ldr	r1, [r7, #16]
 8008a0c:	430b      	orrs	r3, r1
 8008a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	430a      	orrs	r2, r1
 8008a48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a9f      	ldr	r2, [pc, #636]	; (8008ccc <UART_SetConfig+0x2f8>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d121      	bne.n	8008a98 <UART_SetConfig+0xc4>
 8008a54:	4b9e      	ldr	r3, [pc, #632]	; (8008cd0 <UART_SetConfig+0x2fc>)
 8008a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a5a:	f003 0303 	and.w	r3, r3, #3
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d816      	bhi.n	8008a90 <UART_SetConfig+0xbc>
 8008a62:	a201      	add	r2, pc, #4	; (adr r2, 8008a68 <UART_SetConfig+0x94>)
 8008a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a68:	08008a79 	.word	0x08008a79
 8008a6c:	08008a85 	.word	0x08008a85
 8008a70:	08008a7f 	.word	0x08008a7f
 8008a74:	08008a8b 	.word	0x08008a8b
 8008a78:	2301      	movs	r3, #1
 8008a7a:	77fb      	strb	r3, [r7, #31]
 8008a7c:	e151      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008a7e:	2302      	movs	r3, #2
 8008a80:	77fb      	strb	r3, [r7, #31]
 8008a82:	e14e      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008a84:	2304      	movs	r3, #4
 8008a86:	77fb      	strb	r3, [r7, #31]
 8008a88:	e14b      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008a8a:	2308      	movs	r3, #8
 8008a8c:	77fb      	strb	r3, [r7, #31]
 8008a8e:	e148      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008a90:	2310      	movs	r3, #16
 8008a92:	77fb      	strb	r3, [r7, #31]
 8008a94:	bf00      	nop
 8008a96:	e144      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a8d      	ldr	r2, [pc, #564]	; (8008cd4 <UART_SetConfig+0x300>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d134      	bne.n	8008b0c <UART_SetConfig+0x138>
 8008aa2:	4b8b      	ldr	r3, [pc, #556]	; (8008cd0 <UART_SetConfig+0x2fc>)
 8008aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aa8:	f003 030c 	and.w	r3, r3, #12
 8008aac:	2b0c      	cmp	r3, #12
 8008aae:	d829      	bhi.n	8008b04 <UART_SetConfig+0x130>
 8008ab0:	a201      	add	r2, pc, #4	; (adr r2, 8008ab8 <UART_SetConfig+0xe4>)
 8008ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab6:	bf00      	nop
 8008ab8:	08008aed 	.word	0x08008aed
 8008abc:	08008b05 	.word	0x08008b05
 8008ac0:	08008b05 	.word	0x08008b05
 8008ac4:	08008b05 	.word	0x08008b05
 8008ac8:	08008af9 	.word	0x08008af9
 8008acc:	08008b05 	.word	0x08008b05
 8008ad0:	08008b05 	.word	0x08008b05
 8008ad4:	08008b05 	.word	0x08008b05
 8008ad8:	08008af3 	.word	0x08008af3
 8008adc:	08008b05 	.word	0x08008b05
 8008ae0:	08008b05 	.word	0x08008b05
 8008ae4:	08008b05 	.word	0x08008b05
 8008ae8:	08008aff 	.word	0x08008aff
 8008aec:	2300      	movs	r3, #0
 8008aee:	77fb      	strb	r3, [r7, #31]
 8008af0:	e117      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008af2:	2302      	movs	r3, #2
 8008af4:	77fb      	strb	r3, [r7, #31]
 8008af6:	e114      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008af8:	2304      	movs	r3, #4
 8008afa:	77fb      	strb	r3, [r7, #31]
 8008afc:	e111      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008afe:	2308      	movs	r3, #8
 8008b00:	77fb      	strb	r3, [r7, #31]
 8008b02:	e10e      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008b04:	2310      	movs	r3, #16
 8008b06:	77fb      	strb	r3, [r7, #31]
 8008b08:	bf00      	nop
 8008b0a:	e10a      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a71      	ldr	r2, [pc, #452]	; (8008cd8 <UART_SetConfig+0x304>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d120      	bne.n	8008b58 <UART_SetConfig+0x184>
 8008b16:	4b6e      	ldr	r3, [pc, #440]	; (8008cd0 <UART_SetConfig+0x2fc>)
 8008b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008b20:	2b10      	cmp	r3, #16
 8008b22:	d00f      	beq.n	8008b44 <UART_SetConfig+0x170>
 8008b24:	2b10      	cmp	r3, #16
 8008b26:	d802      	bhi.n	8008b2e <UART_SetConfig+0x15a>
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <UART_SetConfig+0x164>
 8008b2c:	e010      	b.n	8008b50 <UART_SetConfig+0x17c>
 8008b2e:	2b20      	cmp	r3, #32
 8008b30:	d005      	beq.n	8008b3e <UART_SetConfig+0x16a>
 8008b32:	2b30      	cmp	r3, #48	; 0x30
 8008b34:	d009      	beq.n	8008b4a <UART_SetConfig+0x176>
 8008b36:	e00b      	b.n	8008b50 <UART_SetConfig+0x17c>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	77fb      	strb	r3, [r7, #31]
 8008b3c:	e0f1      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008b3e:	2302      	movs	r3, #2
 8008b40:	77fb      	strb	r3, [r7, #31]
 8008b42:	e0ee      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008b44:	2304      	movs	r3, #4
 8008b46:	77fb      	strb	r3, [r7, #31]
 8008b48:	e0eb      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008b4a:	2308      	movs	r3, #8
 8008b4c:	77fb      	strb	r3, [r7, #31]
 8008b4e:	e0e8      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008b50:	2310      	movs	r3, #16
 8008b52:	77fb      	strb	r3, [r7, #31]
 8008b54:	bf00      	nop
 8008b56:	e0e4      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a5f      	ldr	r2, [pc, #380]	; (8008cdc <UART_SetConfig+0x308>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d120      	bne.n	8008ba4 <UART_SetConfig+0x1d0>
 8008b62:	4b5b      	ldr	r3, [pc, #364]	; (8008cd0 <UART_SetConfig+0x2fc>)
 8008b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b68:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b6c:	2b40      	cmp	r3, #64	; 0x40
 8008b6e:	d00f      	beq.n	8008b90 <UART_SetConfig+0x1bc>
 8008b70:	2b40      	cmp	r3, #64	; 0x40
 8008b72:	d802      	bhi.n	8008b7a <UART_SetConfig+0x1a6>
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <UART_SetConfig+0x1b0>
 8008b78:	e010      	b.n	8008b9c <UART_SetConfig+0x1c8>
 8008b7a:	2b80      	cmp	r3, #128	; 0x80
 8008b7c:	d005      	beq.n	8008b8a <UART_SetConfig+0x1b6>
 8008b7e:	2bc0      	cmp	r3, #192	; 0xc0
 8008b80:	d009      	beq.n	8008b96 <UART_SetConfig+0x1c2>
 8008b82:	e00b      	b.n	8008b9c <UART_SetConfig+0x1c8>
 8008b84:	2300      	movs	r3, #0
 8008b86:	77fb      	strb	r3, [r7, #31]
 8008b88:	e0cb      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	77fb      	strb	r3, [r7, #31]
 8008b8e:	e0c8      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008b90:	2304      	movs	r3, #4
 8008b92:	77fb      	strb	r3, [r7, #31]
 8008b94:	e0c5      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008b96:	2308      	movs	r3, #8
 8008b98:	77fb      	strb	r3, [r7, #31]
 8008b9a:	e0c2      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008b9c:	2310      	movs	r3, #16
 8008b9e:	77fb      	strb	r3, [r7, #31]
 8008ba0:	bf00      	nop
 8008ba2:	e0be      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a4d      	ldr	r2, [pc, #308]	; (8008ce0 <UART_SetConfig+0x30c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d124      	bne.n	8008bf8 <UART_SetConfig+0x224>
 8008bae:	4b48      	ldr	r3, [pc, #288]	; (8008cd0 <UART_SetConfig+0x2fc>)
 8008bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bbc:	d012      	beq.n	8008be4 <UART_SetConfig+0x210>
 8008bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bc2:	d802      	bhi.n	8008bca <UART_SetConfig+0x1f6>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d007      	beq.n	8008bd8 <UART_SetConfig+0x204>
 8008bc8:	e012      	b.n	8008bf0 <UART_SetConfig+0x21c>
 8008bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bce:	d006      	beq.n	8008bde <UART_SetConfig+0x20a>
 8008bd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bd4:	d009      	beq.n	8008bea <UART_SetConfig+0x216>
 8008bd6:	e00b      	b.n	8008bf0 <UART_SetConfig+0x21c>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	77fb      	strb	r3, [r7, #31]
 8008bdc:	e0a1      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008bde:	2302      	movs	r3, #2
 8008be0:	77fb      	strb	r3, [r7, #31]
 8008be2:	e09e      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008be4:	2304      	movs	r3, #4
 8008be6:	77fb      	strb	r3, [r7, #31]
 8008be8:	e09b      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008bea:	2308      	movs	r3, #8
 8008bec:	77fb      	strb	r3, [r7, #31]
 8008bee:	e098      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008bf0:	2310      	movs	r3, #16
 8008bf2:	77fb      	strb	r3, [r7, #31]
 8008bf4:	bf00      	nop
 8008bf6:	e094      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a39      	ldr	r2, [pc, #228]	; (8008ce4 <UART_SetConfig+0x310>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d124      	bne.n	8008c4c <UART_SetConfig+0x278>
 8008c02:	4b33      	ldr	r3, [pc, #204]	; (8008cd0 <UART_SetConfig+0x2fc>)
 8008c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c10:	d012      	beq.n	8008c38 <UART_SetConfig+0x264>
 8008c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c16:	d802      	bhi.n	8008c1e <UART_SetConfig+0x24a>
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d007      	beq.n	8008c2c <UART_SetConfig+0x258>
 8008c1c:	e012      	b.n	8008c44 <UART_SetConfig+0x270>
 8008c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c22:	d006      	beq.n	8008c32 <UART_SetConfig+0x25e>
 8008c24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c28:	d009      	beq.n	8008c3e <UART_SetConfig+0x26a>
 8008c2a:	e00b      	b.n	8008c44 <UART_SetConfig+0x270>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	77fb      	strb	r3, [r7, #31]
 8008c30:	e077      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008c32:	2302      	movs	r3, #2
 8008c34:	77fb      	strb	r3, [r7, #31]
 8008c36:	e074      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008c38:	2304      	movs	r3, #4
 8008c3a:	77fb      	strb	r3, [r7, #31]
 8008c3c:	e071      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008c3e:	2308      	movs	r3, #8
 8008c40:	77fb      	strb	r3, [r7, #31]
 8008c42:	e06e      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008c44:	2310      	movs	r3, #16
 8008c46:	77fb      	strb	r3, [r7, #31]
 8008c48:	bf00      	nop
 8008c4a:	e06a      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a25      	ldr	r2, [pc, #148]	; (8008ce8 <UART_SetConfig+0x314>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d124      	bne.n	8008ca0 <UART_SetConfig+0x2cc>
 8008c56:	4b1e      	ldr	r3, [pc, #120]	; (8008cd0 <UART_SetConfig+0x2fc>)
 8008c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c5c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c64:	d012      	beq.n	8008c8c <UART_SetConfig+0x2b8>
 8008c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c6a:	d802      	bhi.n	8008c72 <UART_SetConfig+0x29e>
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d007      	beq.n	8008c80 <UART_SetConfig+0x2ac>
 8008c70:	e012      	b.n	8008c98 <UART_SetConfig+0x2c4>
 8008c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c76:	d006      	beq.n	8008c86 <UART_SetConfig+0x2b2>
 8008c78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c7c:	d009      	beq.n	8008c92 <UART_SetConfig+0x2be>
 8008c7e:	e00b      	b.n	8008c98 <UART_SetConfig+0x2c4>
 8008c80:	2300      	movs	r3, #0
 8008c82:	77fb      	strb	r3, [r7, #31]
 8008c84:	e04d      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008c86:	2302      	movs	r3, #2
 8008c88:	77fb      	strb	r3, [r7, #31]
 8008c8a:	e04a      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008c8c:	2304      	movs	r3, #4
 8008c8e:	77fb      	strb	r3, [r7, #31]
 8008c90:	e047      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008c92:	2308      	movs	r3, #8
 8008c94:	77fb      	strb	r3, [r7, #31]
 8008c96:	e044      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008c98:	2310      	movs	r3, #16
 8008c9a:	77fb      	strb	r3, [r7, #31]
 8008c9c:	bf00      	nop
 8008c9e:	e040      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a11      	ldr	r2, [pc, #68]	; (8008cec <UART_SetConfig+0x318>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d139      	bne.n	8008d1e <UART_SetConfig+0x34a>
 8008caa:	4b09      	ldr	r3, [pc, #36]	; (8008cd0 <UART_SetConfig+0x2fc>)
 8008cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cb8:	d027      	beq.n	8008d0a <UART_SetConfig+0x336>
 8008cba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cbe:	d817      	bhi.n	8008cf0 <UART_SetConfig+0x31c>
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d01c      	beq.n	8008cfe <UART_SetConfig+0x32a>
 8008cc4:	e027      	b.n	8008d16 <UART_SetConfig+0x342>
 8008cc6:	bf00      	nop
 8008cc8:	efff69f3 	.word	0xefff69f3
 8008ccc:	40011000 	.word	0x40011000
 8008cd0:	40023800 	.word	0x40023800
 8008cd4:	40004400 	.word	0x40004400
 8008cd8:	40004800 	.word	0x40004800
 8008cdc:	40004c00 	.word	0x40004c00
 8008ce0:	40005000 	.word	0x40005000
 8008ce4:	40011400 	.word	0x40011400
 8008ce8:	40007800 	.word	0x40007800
 8008cec:	40007c00 	.word	0x40007c00
 8008cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cf4:	d006      	beq.n	8008d04 <UART_SetConfig+0x330>
 8008cf6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008cfa:	d009      	beq.n	8008d10 <UART_SetConfig+0x33c>
 8008cfc:	e00b      	b.n	8008d16 <UART_SetConfig+0x342>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	77fb      	strb	r3, [r7, #31]
 8008d02:	e00e      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008d04:	2302      	movs	r3, #2
 8008d06:	77fb      	strb	r3, [r7, #31]
 8008d08:	e00b      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008d0a:	2304      	movs	r3, #4
 8008d0c:	77fb      	strb	r3, [r7, #31]
 8008d0e:	e008      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008d10:	2308      	movs	r3, #8
 8008d12:	77fb      	strb	r3, [r7, #31]
 8008d14:	e005      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008d16:	2310      	movs	r3, #16
 8008d18:	77fb      	strb	r3, [r7, #31]
 8008d1a:	bf00      	nop
 8008d1c:	e001      	b.n	8008d22 <UART_SetConfig+0x34e>
 8008d1e:	2310      	movs	r3, #16
 8008d20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d2a:	d17f      	bne.n	8008e2c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008d2c:	7ffb      	ldrb	r3, [r7, #31]
 8008d2e:	2b08      	cmp	r3, #8
 8008d30:	d85c      	bhi.n	8008dec <UART_SetConfig+0x418>
 8008d32:	a201      	add	r2, pc, #4	; (adr r2, 8008d38 <UART_SetConfig+0x364>)
 8008d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d38:	08008d5d 	.word	0x08008d5d
 8008d3c:	08008d7d 	.word	0x08008d7d
 8008d40:	08008d9d 	.word	0x08008d9d
 8008d44:	08008ded 	.word	0x08008ded
 8008d48:	08008db5 	.word	0x08008db5
 8008d4c:	08008ded 	.word	0x08008ded
 8008d50:	08008ded 	.word	0x08008ded
 8008d54:	08008ded 	.word	0x08008ded
 8008d58:	08008dd5 	.word	0x08008dd5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d5c:	f7fe fbe0 	bl	8007520 <HAL_RCC_GetPCLK1Freq>
 8008d60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	005a      	lsls	r2, r3, #1
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	085b      	lsrs	r3, r3, #1
 8008d6c:	441a      	add	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	61bb      	str	r3, [r7, #24]
        break;
 8008d7a:	e03a      	b.n	8008df2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d7c:	f7fe fbe4 	bl	8007548 <HAL_RCC_GetPCLK2Freq>
 8008d80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	005a      	lsls	r2, r3, #1
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	085b      	lsrs	r3, r3, #1
 8008d8c:	441a      	add	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	61bb      	str	r3, [r7, #24]
        break;
 8008d9a:	e02a      	b.n	8008df2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	085a      	lsrs	r2, r3, #1
 8008da2:	4b5f      	ldr	r3, [pc, #380]	; (8008f20 <UART_SetConfig+0x54c>)
 8008da4:	4413      	add	r3, r2
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	6852      	ldr	r2, [r2, #4]
 8008daa:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	61bb      	str	r3, [r7, #24]
        break;
 8008db2:	e01e      	b.n	8008df2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008db4:	f7fe fad0 	bl	8007358 <HAL_RCC_GetSysClockFreq>
 8008db8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	005a      	lsls	r2, r3, #1
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	085b      	lsrs	r3, r3, #1
 8008dc4:	441a      	add	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	61bb      	str	r3, [r7, #24]
        break;
 8008dd2:	e00e      	b.n	8008df2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	085b      	lsrs	r3, r3, #1
 8008dda:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	61bb      	str	r3, [r7, #24]
        break;
 8008dea:	e002      	b.n	8008df2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	75fb      	strb	r3, [r7, #23]
        break;
 8008df0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	2b0f      	cmp	r3, #15
 8008df6:	d916      	bls.n	8008e26 <UART_SetConfig+0x452>
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dfe:	d212      	bcs.n	8008e26 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	f023 030f 	bic.w	r3, r3, #15
 8008e08:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	085b      	lsrs	r3, r3, #1
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	f003 0307 	and.w	r3, r3, #7
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	897b      	ldrh	r3, [r7, #10]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	897a      	ldrh	r2, [r7, #10]
 8008e22:	60da      	str	r2, [r3, #12]
 8008e24:	e070      	b.n	8008f08 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	75fb      	strb	r3, [r7, #23]
 8008e2a:	e06d      	b.n	8008f08 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008e2c:	7ffb      	ldrb	r3, [r7, #31]
 8008e2e:	2b08      	cmp	r3, #8
 8008e30:	d859      	bhi.n	8008ee6 <UART_SetConfig+0x512>
 8008e32:	a201      	add	r2, pc, #4	; (adr r2, 8008e38 <UART_SetConfig+0x464>)
 8008e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e38:	08008e5d 	.word	0x08008e5d
 8008e3c:	08008e7b 	.word	0x08008e7b
 8008e40:	08008e99 	.word	0x08008e99
 8008e44:	08008ee7 	.word	0x08008ee7
 8008e48:	08008eb1 	.word	0x08008eb1
 8008e4c:	08008ee7 	.word	0x08008ee7
 8008e50:	08008ee7 	.word	0x08008ee7
 8008e54:	08008ee7 	.word	0x08008ee7
 8008e58:	08008ecf 	.word	0x08008ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e5c:	f7fe fb60 	bl	8007520 <HAL_RCC_GetPCLK1Freq>
 8008e60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	085a      	lsrs	r2, r3, #1
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	441a      	add	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	61bb      	str	r3, [r7, #24]
        break;
 8008e78:	e038      	b.n	8008eec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e7a:	f7fe fb65 	bl	8007548 <HAL_RCC_GetPCLK2Freq>
 8008e7e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	085a      	lsrs	r2, r3, #1
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	441a      	add	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	61bb      	str	r3, [r7, #24]
        break;
 8008e96:	e029      	b.n	8008eec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	085a      	lsrs	r2, r3, #1
 8008e9e:	4b21      	ldr	r3, [pc, #132]	; (8008f24 <UART_SetConfig+0x550>)
 8008ea0:	4413      	add	r3, r2
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	6852      	ldr	r2, [r2, #4]
 8008ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	61bb      	str	r3, [r7, #24]
        break;
 8008eae:	e01d      	b.n	8008eec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eb0:	f7fe fa52 	bl	8007358 <HAL_RCC_GetSysClockFreq>
 8008eb4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	085a      	lsrs	r2, r3, #1
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	441a      	add	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	61bb      	str	r3, [r7, #24]
        break;
 8008ecc:	e00e      	b.n	8008eec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	085b      	lsrs	r3, r3, #1
 8008ed4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	61bb      	str	r3, [r7, #24]
        break;
 8008ee4:	e002      	b.n	8008eec <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	75fb      	strb	r3, [r7, #23]
        break;
 8008eea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	2b0f      	cmp	r3, #15
 8008ef0:	d908      	bls.n	8008f04 <UART_SetConfig+0x530>
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ef8:	d204      	bcs.n	8008f04 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	69ba      	ldr	r2, [r7, #24]
 8008f00:	60da      	str	r2, [r3, #12]
 8008f02:	e001      	b.n	8008f08 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3720      	adds	r7, #32
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	01e84800 	.word	0x01e84800
 8008f24:	00f42400 	.word	0x00f42400

08008f28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	f003 0301 	and.w	r3, r3, #1
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00a      	beq.n	8008f52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f56:	f003 0302 	and.w	r3, r3, #2
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00a      	beq.n	8008f74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	430a      	orrs	r2, r1
 8008f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f78:	f003 0304 	and.w	r3, r3, #4
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00a      	beq.n	8008f96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	430a      	orrs	r2, r1
 8008f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9a:	f003 0308 	and.w	r3, r3, #8
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00a      	beq.n	8008fb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbc:	f003 0310 	and.w	r3, r3, #16
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00a      	beq.n	8008fda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fde:	f003 0320 	and.w	r3, r3, #32
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00a      	beq.n	8008ffc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009004:	2b00      	cmp	r3, #0
 8009006:	d01a      	beq.n	800903e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	430a      	orrs	r2, r1
 800901c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009026:	d10a      	bne.n	800903e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00a      	beq.n	8009060 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	430a      	orrs	r2, r1
 800905e:	605a      	str	r2, [r3, #4]
  }
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af02      	add	r7, sp, #8
 8009072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800907a:	f7fc fca3 	bl	80059c4 <HAL_GetTick>
 800907e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 0308 	and.w	r3, r3, #8
 800908a:	2b08      	cmp	r3, #8
 800908c:	d10e      	bne.n	80090ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800908e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2200      	movs	r2, #0
 8009098:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f82a 	bl	80090f6 <UART_WaitOnFlagUntilTimeout>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090a8:	2303      	movs	r3, #3
 80090aa:	e020      	b.n	80090ee <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 0304 	and.w	r3, r3, #4
 80090b6:	2b04      	cmp	r3, #4
 80090b8:	d10e      	bne.n	80090d8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f814 	bl	80090f6 <UART_WaitOnFlagUntilTimeout>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	e00a      	b.n	80090ee <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2220      	movs	r2, #32
 80090dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b084      	sub	sp, #16
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	60f8      	str	r0, [r7, #12]
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	603b      	str	r3, [r7, #0]
 8009102:	4613      	mov	r3, r2
 8009104:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009106:	e05d      	b.n	80091c4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910e:	d059      	beq.n	80091c4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009110:	f7fc fc58 	bl	80059c4 <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	69ba      	ldr	r2, [r7, #24]
 800911c:	429a      	cmp	r2, r3
 800911e:	d302      	bcc.n	8009126 <UART_WaitOnFlagUntilTimeout+0x30>
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d11b      	bne.n	800915e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009134:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	689a      	ldr	r2, [r3, #8]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f022 0201 	bic.w	r2, r2, #1
 8009144:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2220      	movs	r2, #32
 800914a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2220      	movs	r2, #32
 8009150:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e042      	b.n	80091e4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0304 	and.w	r3, r3, #4
 8009168:	2b00      	cmp	r3, #0
 800916a:	d02b      	beq.n	80091c4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	69db      	ldr	r3, [r3, #28]
 8009172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800917a:	d123      	bne.n	80091c4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009184:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009194:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	689a      	ldr	r2, [r3, #8]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 0201 	bic.w	r2, r2, #1
 80091a4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2220      	movs	r2, #32
 80091aa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2220      	movs	r2, #32
 80091b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2220      	movs	r2, #32
 80091b6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80091c0:	2303      	movs	r3, #3
 80091c2:	e00f      	b.n	80091e4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	69da      	ldr	r2, [r3, #28]
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	4013      	ands	r3, r2
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	bf0c      	ite	eq
 80091d4:	2301      	moveq	r3, #1
 80091d6:	2300      	movne	r3, #0
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	461a      	mov	r2, r3
 80091dc:	79fb      	ldrb	r3, [r7, #7]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d092      	beq.n	8009108 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009202:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2220      	movs	r2, #32
 8009208:	675a      	str	r2, [r3, #116]	; 0x74
}
 800920a:	bf00      	nop
 800920c:	370c      	adds	r7, #12
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009216:	b480      	push	{r7}
 8009218:	b083      	sub	sp, #12
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800922c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	689a      	ldr	r2, [r3, #8]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f022 0201 	bic.w	r2, r2, #1
 800923c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2220      	movs	r2, #32
 8009242:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	661a      	str	r2, [r3, #96]	; 0x60
}
 800924a:	bf00      	nop
 800924c:	370c      	adds	r7, #12
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr

08009256 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b084      	sub	sp, #16
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009262:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	69db      	ldr	r3, [r3, #28]
 8009268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800926c:	d01e      	beq.n	80092ac <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009284:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	689a      	ldr	r2, [r3, #8]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0201 	bic.w	r2, r2, #1
 8009294:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689a      	ldr	r2, [r3, #8]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092a4:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2220      	movs	r2, #32
 80092aa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f7f8 f9a1 	bl	80015f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092b2:	bf00      	nop
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f7ff fb6f 	bl	80089ac <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092ce:	bf00      	nop
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b086      	sub	sp, #24
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092e8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092fa:	2b80      	cmp	r3, #128	; 0x80
 80092fc:	d109      	bne.n	8009312 <UART_DMAError+0x3c>
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	2b21      	cmp	r3, #33	; 0x21
 8009302:	d106      	bne.n	8009312 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	2200      	movs	r2, #0
 8009308:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800930c:	6978      	ldr	r0, [r7, #20]
 800930e:	f7ff ff6d 	bl	80091ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800931c:	2b40      	cmp	r3, #64	; 0x40
 800931e:	d109      	bne.n	8009334 <UART_DMAError+0x5e>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b22      	cmp	r3, #34	; 0x22
 8009324:	d106      	bne.n	8009334 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	2200      	movs	r2, #0
 800932a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800932e:	6978      	ldr	r0, [r7, #20]
 8009330:	f7ff ff71 	bl	8009216 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009338:	f043 0210 	orr.w	r2, r3, #16
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009340:	6978      	ldr	r0, [r7, #20]
 8009342:	f7ff fb3d 	bl	80089c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009346:	bf00      	nop
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <__libc_init_array>:
 8009350:	b570      	push	{r4, r5, r6, lr}
 8009352:	4e0d      	ldr	r6, [pc, #52]	; (8009388 <__libc_init_array+0x38>)
 8009354:	4c0d      	ldr	r4, [pc, #52]	; (800938c <__libc_init_array+0x3c>)
 8009356:	1ba4      	subs	r4, r4, r6
 8009358:	10a4      	asrs	r4, r4, #2
 800935a:	2500      	movs	r5, #0
 800935c:	42a5      	cmp	r5, r4
 800935e:	d109      	bne.n	8009374 <__libc_init_array+0x24>
 8009360:	4e0b      	ldr	r6, [pc, #44]	; (8009390 <__libc_init_array+0x40>)
 8009362:	4c0c      	ldr	r4, [pc, #48]	; (8009394 <__libc_init_array+0x44>)
 8009364:	f000 f820 	bl	80093a8 <_init>
 8009368:	1ba4      	subs	r4, r4, r6
 800936a:	10a4      	asrs	r4, r4, #2
 800936c:	2500      	movs	r5, #0
 800936e:	42a5      	cmp	r5, r4
 8009370:	d105      	bne.n	800937e <__libc_init_array+0x2e>
 8009372:	bd70      	pop	{r4, r5, r6, pc}
 8009374:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009378:	4798      	blx	r3
 800937a:	3501      	adds	r5, #1
 800937c:	e7ee      	b.n	800935c <__libc_init_array+0xc>
 800937e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009382:	4798      	blx	r3
 8009384:	3501      	adds	r5, #1
 8009386:	e7f2      	b.n	800936e <__libc_init_array+0x1e>
 8009388:	08009960 	.word	0x08009960
 800938c:	08009960 	.word	0x08009960
 8009390:	08009960 	.word	0x08009960
 8009394:	08009964 	.word	0x08009964

08009398 <memset>:
 8009398:	4402      	add	r2, r0
 800939a:	4603      	mov	r3, r0
 800939c:	4293      	cmp	r3, r2
 800939e:	d100      	bne.n	80093a2 <memset+0xa>
 80093a0:	4770      	bx	lr
 80093a2:	f803 1b01 	strb.w	r1, [r3], #1
 80093a6:	e7f9      	b.n	800939c <memset+0x4>

080093a8 <_init>:
 80093a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093aa:	bf00      	nop
 80093ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ae:	bc08      	pop	{r3}
 80093b0:	469e      	mov	lr, r3
 80093b2:	4770      	bx	lr

080093b4 <_fini>:
 80093b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b6:	bf00      	nop
 80093b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ba:	bc08      	pop	{r3}
 80093bc:	469e      	mov	lr, r3
 80093be:	4770      	bx	lr
