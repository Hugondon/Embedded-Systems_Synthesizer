
EmbSynth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009314  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800950c  0800950c  0001950c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aa4  08009aa4  00023b9c  2**0
                  CONTENTS
  4 .ARM          00000008  08009aa4  08009aa4  00019aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009aac  08009aac  00023b9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aac  08009aac  00019aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ab0  08009ab0  00019ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003b9c  20000000  08009ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  20003b9c  0800d650  00023b9c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ee8  0800d650  00023ee8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00023b9c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128f7  00000000  00000000  00023bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023fb  00000000  00000000  000364c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001150  00000000  00000000  000388c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001050  00000000  00000000  00039a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027708  00000000  00000000  0003aa60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc82  00000000  00000000  00062168  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fcee4  00000000  00000000  0006edea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016bcce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049ac  00000000  00000000  0016bd4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20003b9c 	.word	0x20003b9c
 8000214:	00000000 	.word	0x00000000
 8000218:	080094f4 	.word	0x080094f4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20003ba0 	.word	0x20003ba0
 8000234:	080094f4 	.word	0x080094f4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800053e:	f005 fb28 	bl	8005b92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 fc59 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 fe81 	bl	800124c <MX_GPIO_Init>
  MX_DMA_Init();
 800054a:	f000 fe51 	bl	80011f0 <MX_DMA_Init>
  MX_UART4_Init();
 800054e:	f000 fdef 	bl	8001130 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000552:	f000 fe1d 	bl	8001190 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000556:	f000 fd67 	bl	8001028 <MX_TIM2_Init>
  MX_TIM1_Init();
 800055a:	f000 fd11 	bl	8000f80 <MX_TIM1_Init>
  MX_DAC_Init();
 800055e:	f000 fcdb 	bl	8000f18 <MX_DAC_Init>
  MX_TIM6_Init();
 8000562:	f000 fdaf 	bl	80010c4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000566:	484b      	ldr	r0, [pc, #300]	; (8000694 <main+0x15c>)
 8000568:	f007 fd8c 	bl	8008084 <HAL_TIM_Base_Start>
  HAL_UART_Receive_DMA(&huart4, rx_buffer, sizeof(rx_buffer)/sizeof(char));
 800056c:	2201      	movs	r2, #1
 800056e:	494a      	ldr	r1, [pc, #296]	; (8000698 <main+0x160>)
 8000570:	484a      	ldr	r0, [pc, #296]	; (800069c <main+0x164>)
 8000572:	f008 fa3d 	bl	80089f0 <HAL_UART_Receive_DMA>

  ID = readID();
 8000576:	f003 f88d 	bl	8003694 <readID>
 800057a:	4603      	mov	r3, r0
 800057c:	461a      	mov	r2, r3
 800057e:	4b48      	ldr	r3, [pc, #288]	; (80006a0 <main+0x168>)
 8000580:	801a      	strh	r2, [r3, #0]
  HAL_Delay(100);
 8000582:	2064      	movs	r0, #100	; 0x64
 8000584:	f005 fb62 	bl	8005c4c <HAL_Delay>
  tft_init(ID);
 8000588:	4b45      	ldr	r3, [pc, #276]	; (80006a0 <main+0x168>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f002 fd63 	bl	8003058 <tft_init>
  setRotation(3);
 8000592:	2003      	movs	r0, #3
 8000594:	f003 ff9c 	bl	80044d0 <setRotation>

  // LCD
  fillScreen((11)&BLUE | (((16)*2)<<5)&GREEN |  ((26)<<(5+6))&RED );
 8000598:	f24d 400b 	movw	r0, #54283	; 0xd40b
 800059c:	f004 fd66 	bl	800506c <fillScreen>
  fillRect(20 , 80, 280, 120, BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));		// Color de tablero
 80005a0:	f648 23ca 	movw	r3, #35530	; 0x8aca
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2378      	movs	r3, #120	; 0x78
 80005a8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80005ac:	2150      	movs	r1, #80	; 0x50
 80005ae:	2014      	movs	r0, #20
 80005b0:	f004 ff4c 	bl	800544c <fillRect>
  fillRect(20 , 20, 280, 50,BLUE_LEV(2) | GREEN_LEV(2) | RED_LEV(2));			// Color de señales
 80005b4:	f241 0382 	movw	r3, #4226	; 0x1082
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2332      	movs	r3, #50	; 0x32
 80005bc:	f44f 728c 	mov.w	r2, #280	; 0x118
 80005c0:	2114      	movs	r1, #20
 80005c2:	2014      	movs	r0, #20
 80005c4:	f004 ff42 	bl	800544c <fillRect>


  // PIANO
  fillRect(65 , 205, 190, 35,WHITE);
 80005c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2323      	movs	r3, #35	; 0x23
 80005d0:	22be      	movs	r2, #190	; 0xbe
 80005d2:	21cd      	movs	r1, #205	; 0xcd
 80005d4:	2041      	movs	r0, #65	; 0x41
 80005d6:	f004 ff39 	bl	800544c <fillRect>
  fillRect(85 , 205, 10 ,22,BLACK);
 80005da:	2300      	movs	r3, #0
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2316      	movs	r3, #22
 80005e0:	220a      	movs	r2, #10
 80005e2:	21cd      	movs	r1, #205	; 0xcd
 80005e4:	2055      	movs	r0, #85	; 0x55
 80005e6:	f004 ff31 	bl	800544c <fillRect>
  fillRect(115 , 205, 10 ,22,BLACK);
 80005ea:	2300      	movs	r3, #0
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2316      	movs	r3, #22
 80005f0:	220a      	movs	r2, #10
 80005f2:	21cd      	movs	r1, #205	; 0xcd
 80005f4:	2073      	movs	r0, #115	; 0x73
 80005f6:	f004 ff29 	bl	800544c <fillRect>
  fillRect(165 , 205, 10 ,22,BLACK);
 80005fa:	2300      	movs	r3, #0
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2316      	movs	r3, #22
 8000600:	220a      	movs	r2, #10
 8000602:	21cd      	movs	r1, #205	; 0xcd
 8000604:	20a5      	movs	r0, #165	; 0xa5
 8000606:	f004 ff21 	bl	800544c <fillRect>
  fillRect(195 , 205, 10 ,22,BLACK);
 800060a:	2300      	movs	r3, #0
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2316      	movs	r3, #22
 8000610:	220a      	movs	r2, #10
 8000612:	21cd      	movs	r1, #205	; 0xcd
 8000614:	20c3      	movs	r0, #195	; 0xc3
 8000616:	f004 ff19 	bl	800544c <fillRect>
  fillRect(225 , 205, 10 ,22,BLACK);
 800061a:	2300      	movs	r3, #0
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2316      	movs	r3, #22
 8000620:	220a      	movs	r2, #10
 8000622:	21cd      	movs	r1, #205	; 0xcd
 8000624:	20e1      	movs	r0, #225	; 0xe1
 8000626:	f004 ff11 	bl	800544c <fillRect>

  // CAJAS DE VOLUMEN
  	  // HORIZONTALES
  fillRect(130 , 95, 152, 3,BLACK);
 800062a:	2300      	movs	r3, #0
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2303      	movs	r3, #3
 8000630:	2298      	movs	r2, #152	; 0x98
 8000632:	215f      	movs	r1, #95	; 0x5f
 8000634:	2082      	movs	r0, #130	; 0x82
 8000636:	f004 ff09 	bl	800544c <fillRect>
  fillRect(130 , 112, 152, 3,BLACK);
 800063a:	2300      	movs	r3, #0
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2303      	movs	r3, #3
 8000640:	2298      	movs	r2, #152	; 0x98
 8000642:	2170      	movs	r1, #112	; 0x70
 8000644:	2082      	movs	r0, #130	; 0x82
 8000646:	f004 ff01 	bl	800544c <fillRect>
  fillRect(130 , 130, 152, 3,BLACK);
 800064a:	2300      	movs	r3, #0
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2303      	movs	r3, #3
 8000650:	2298      	movs	r2, #152	; 0x98
 8000652:	2182      	movs	r1, #130	; 0x82
 8000654:	2082      	movs	r0, #130	; 0x82
 8000656:	f004 fef9 	bl	800544c <fillRect>
  fillRect(130 , 147, 152, 3,BLACK);
 800065a:	2300      	movs	r3, #0
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2303      	movs	r3, #3
 8000660:	2298      	movs	r2, #152	; 0x98
 8000662:	2193      	movs	r1, #147	; 0x93
 8000664:	2082      	movs	r0, #130	; 0x82
 8000666:	f004 fef1 	bl	800544c <fillRect>
  fillRect(130 , 165, 152, 3,BLACK);
 800066a:	2300      	movs	r3, #0
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2303      	movs	r3, #3
 8000670:	2298      	movs	r2, #152	; 0x98
 8000672:	21a5      	movs	r1, #165	; 0xa5
 8000674:	2082      	movs	r0, #130	; 0x82
 8000676:	f004 fee9 	bl	800544c <fillRect>
  fillRect(130 , 182, 152, 3,BLACK);
 800067a:	2300      	movs	r3, #0
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2303      	movs	r3, #3
 8000680:	2298      	movs	r2, #152	; 0x98
 8000682:	21b6      	movs	r1, #182	; 0xb6
 8000684:	2082      	movs	r0, #130	; 0x82
 8000686:	f004 fee1 	bl	800544c <fillRect>

  	  // VERTICALES
  for(i = 0; i < 5; i++){
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <main+0x16c>)
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	e04b      	b.n	800072a <main+0x1f2>
 8000692:	bf00      	nop
 8000694:	20003d68 	.word	0x20003d68
 8000698:	20003bc0 	.word	0x20003bc0
 800069c:	20003da8 	.word	0x20003da8
 80006a0:	20003bb8 	.word	0x20003bb8
 80006a4:	20003bc8 	.word	0x20003bc8
  	fillRect(130+(i*38) , 95, 3, 20,BLACK);
 80006a8:	4bbb      	ldr	r3, [pc, #748]	; (8000998 <main+0x460>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	00d2      	lsls	r2, r2, #3
 80006b2:	441a      	add	r2, r3
 80006b4:	0052      	lsls	r2, r2, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	3382      	adds	r3, #130	; 0x82
 80006be:	b29b      	uxth	r3, r3
 80006c0:	b218      	sxth	r0, r3
 80006c2:	2300      	movs	r3, #0
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2314      	movs	r3, #20
 80006c8:	2203      	movs	r2, #3
 80006ca:	215f      	movs	r1, #95	; 0x5f
 80006cc:	f004 febe 	bl	800544c <fillRect>
  	fillRect(130+(i*38) , 130, 3, 20,BLACK);
 80006d0:	4bb1      	ldr	r3, [pc, #708]	; (8000998 <main+0x460>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	461a      	mov	r2, r3
 80006d8:	00d2      	lsls	r2, r2, #3
 80006da:	441a      	add	r2, r3
 80006dc:	0052      	lsls	r2, r2, #1
 80006de:	4413      	add	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	3382      	adds	r3, #130	; 0x82
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	b218      	sxth	r0, r3
 80006ea:	2300      	movs	r3, #0
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2314      	movs	r3, #20
 80006f0:	2203      	movs	r2, #3
 80006f2:	2182      	movs	r1, #130	; 0x82
 80006f4:	f004 feaa 	bl	800544c <fillRect>
  	fillRect(130+(i*38) , 165, 3, 20,BLACK);
 80006f8:	4ba7      	ldr	r3, [pc, #668]	; (8000998 <main+0x460>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	461a      	mov	r2, r3
 8000700:	00d2      	lsls	r2, r2, #3
 8000702:	441a      	add	r2, r3
 8000704:	0052      	lsls	r2, r2, #1
 8000706:	4413      	add	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	b29b      	uxth	r3, r3
 800070c:	3382      	adds	r3, #130	; 0x82
 800070e:	b29b      	uxth	r3, r3
 8000710:	b218      	sxth	r0, r3
 8000712:	2300      	movs	r3, #0
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2314      	movs	r3, #20
 8000718:	2203      	movs	r2, #3
 800071a:	21a5      	movs	r1, #165	; 0xa5
 800071c:	f004 fe96 	bl	800544c <fillRect>
  for(i = 0; i < 5; i++){
 8000720:	4b9d      	ldr	r3, [pc, #628]	; (8000998 <main+0x460>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	4a9c      	ldr	r2, [pc, #624]	; (8000998 <main+0x460>)
 8000728:	6013      	str	r3, [r2, #0]
 800072a:	4b9b      	ldr	r3, [pc, #620]	; (8000998 <main+0x460>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b04      	cmp	r3, #4
 8000730:	d9ba      	bls.n	80006a8 <main+0x170>
  }

  // Sine
  fillCircle(50, 44, 10 , WHITE);
 8000732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000736:	220a      	movs	r2, #10
 8000738:	212c      	movs	r1, #44	; 0x2c
 800073a:	2032      	movs	r0, #50	; 0x32
 800073c:	f004 fd87 	bl	800524e <fillCircle>
  fillCircle(50, 48, 10 , BLACK);
 8000740:	2300      	movs	r3, #0
 8000742:	220a      	movs	r2, #10
 8000744:	2130      	movs	r1, #48	; 0x30
 8000746:	2032      	movs	r0, #50	; 0x32
 8000748:	f004 fd81 	bl	800524e <fillCircle>

  fillCircle(70, 42, 10 , WHITE);
 800074c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000750:	220a      	movs	r2, #10
 8000752:	212a      	movs	r1, #42	; 0x2a
 8000754:	2046      	movs	r0, #70	; 0x46
 8000756:	f004 fd7a 	bl	800524e <fillCircle>
  fillCircle(70, 38, 10 , BLACK);
 800075a:	2300      	movs	r3, #0
 800075c:	220a      	movs	r2, #10
 800075e:	2126      	movs	r1, #38	; 0x26
 8000760:	2046      	movs	r0, #70	; 0x46
 8000762:	f004 fd74 	bl	800524e <fillCircle>

  // Square
  fillRect(97 ,60, 17, 3,WHITE);
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2303      	movs	r3, #3
 800076e:	2211      	movs	r2, #17
 8000770:	213c      	movs	r1, #60	; 0x3c
 8000772:	2061      	movs	r0, #97	; 0x61
 8000774:	f004 fe6a 	bl	800544c <fillRect>
  fillRect(117 ,26, 20, 3,WHITE);
 8000778:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2303      	movs	r3, #3
 8000780:	2214      	movs	r2, #20
 8000782:	211a      	movs	r1, #26
 8000784:	2075      	movs	r0, #117	; 0x75
 8000786:	f004 fe61 	bl	800544c <fillRect>
  fillRect(134 ,60, 17, 3,WHITE);
 800078a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2303      	movs	r3, #3
 8000792:	2211      	movs	r2, #17
 8000794:	213c      	movs	r1, #60	; 0x3c
 8000796:	2086      	movs	r0, #134	; 0x86
 8000798:	f004 fe58 	bl	800544c <fillRect>

  fillRect(114 ,26, 3, 37,WHITE);
 800079c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2325      	movs	r3, #37	; 0x25
 80007a4:	2203      	movs	r2, #3
 80007a6:	211a      	movs	r1, #26
 80007a8:	2072      	movs	r0, #114	; 0x72
 80007aa:	f004 fe4f 	bl	800544c <fillRect>
  fillRect(134 ,26, 3, 34,WHITE);
 80007ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2322      	movs	r3, #34	; 0x22
 80007b6:	2203      	movs	r2, #3
 80007b8:	211a      	movs	r1, #26
 80007ba:	2086      	movs	r0, #134	; 0x86
 80007bc:	f004 fe46 	bl	800544c <fillRect>
  fillRect(97 ,45, 3, 15,WHITE);
 80007c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	230f      	movs	r3, #15
 80007c8:	2203      	movs	r2, #3
 80007ca:	212d      	movs	r1, #45	; 0x2d
 80007cc:	2061      	movs	r0, #97	; 0x61
 80007ce:	f004 fe3d 	bl	800544c <fillRect>

  // Triangular
  fillTriangle(160, 44, 190, 44, 175, 25, WHITE);
 80007d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007d6:	9302      	str	r3, [sp, #8]
 80007d8:	2319      	movs	r3, #25
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	23af      	movs	r3, #175	; 0xaf
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	232c      	movs	r3, #44	; 0x2c
 80007e2:	22be      	movs	r2, #190	; 0xbe
 80007e4:	212c      	movs	r1, #44	; 0x2c
 80007e6:	20a0      	movs	r0, #160	; 0xa0
 80007e8:	f005 f84a 	bl	8005880 <fillTriangle>
  fillTriangle(160+3, 44, 190-3, 44, 175, 25+3, BLACK);
 80007ec:	2300      	movs	r3, #0
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	231c      	movs	r3, #28
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	23af      	movs	r3, #175	; 0xaf
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	232c      	movs	r3, #44	; 0x2c
 80007fa:	22bb      	movs	r2, #187	; 0xbb
 80007fc:	212c      	movs	r1, #44	; 0x2c
 80007fe:	20a3      	movs	r0, #163	; 0xa3
 8000800:	f005 f83e 	bl	8005880 <fillTriangle>
  fillTriangle(190, 44, 220, 44, 205, 63, WHITE);
 8000804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000808:	9302      	str	r3, [sp, #8]
 800080a:	233f      	movs	r3, #63	; 0x3f
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	23cd      	movs	r3, #205	; 0xcd
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	232c      	movs	r3, #44	; 0x2c
 8000814:	22dc      	movs	r2, #220	; 0xdc
 8000816:	212c      	movs	r1, #44	; 0x2c
 8000818:	20be      	movs	r0, #190	; 0xbe
 800081a:	f005 f831 	bl	8005880 <fillTriangle>
  fillTriangle(190+3, 44, 220-3, 44, 205, 63-3, BLACK);
 800081e:	2300      	movs	r3, #0
 8000820:	9302      	str	r3, [sp, #8]
 8000822:	233c      	movs	r3, #60	; 0x3c
 8000824:	9301      	str	r3, [sp, #4]
 8000826:	23cd      	movs	r3, #205	; 0xcd
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	232c      	movs	r3, #44	; 0x2c
 800082c:	22d9      	movs	r2, #217	; 0xd9
 800082e:	212c      	movs	r1, #44	; 0x2c
 8000830:	20c1      	movs	r0, #193	; 0xc1
 8000832:	f005 f825 	bl	8005880 <fillTriangle>

  // Sawtooth
  fillTriangle(230, 63, 275, 63, 275, 25, WHITE);
 8000836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083a:	9302      	str	r3, [sp, #8]
 800083c:	2319      	movs	r3, #25
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	f240 1313 	movw	r3, #275	; 0x113
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	233f      	movs	r3, #63	; 0x3f
 8000848:	f240 1213 	movw	r2, #275	; 0x113
 800084c:	213f      	movs	r1, #63	; 0x3f
 800084e:	20e6      	movs	r0, #230	; 0xe6
 8000850:	f005 f816 	bl	8005880 <fillTriangle>
  fillTriangle(230, 63+3, 275-2, 63, 275-2, 25+3, BLACK);
 8000854:	2300      	movs	r3, #0
 8000856:	9302      	str	r3, [sp, #8]
 8000858:	231c      	movs	r3, #28
 800085a:	9301      	str	r3, [sp, #4]
 800085c:	f240 1311 	movw	r3, #273	; 0x111
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	233f      	movs	r3, #63	; 0x3f
 8000864:	f240 1211 	movw	r2, #273	; 0x111
 8000868:	2142      	movs	r1, #66	; 0x42
 800086a:	20e6      	movs	r0, #230	; 0xe6
 800086c:	f005 f808 	bl	8005880 <fillTriangle>

  // Modulations
  // Square
  fillRect(50-15 ,105, 17, 3,WHITE);
 8000870:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2303      	movs	r3, #3
 8000878:	2211      	movs	r2, #17
 800087a:	2169      	movs	r1, #105	; 0x69
 800087c:	2023      	movs	r0, #35	; 0x23
 800087e:	f004 fde5 	bl	800544c <fillRect>
  fillRect(50 ,90, 3, 17,WHITE);
 8000882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2311      	movs	r3, #17
 800088a:	2203      	movs	r2, #3
 800088c:	215a      	movs	r1, #90	; 0x5a
 800088e:	2032      	movs	r0, #50	; 0x32
 8000890:	f004 fddc 	bl	800544c <fillRect>
  fillRect(50 ,90, 17, 3,WHITE);
 8000894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2303      	movs	r3, #3
 800089c:	2211      	movs	r2, #17
 800089e:	215a      	movs	r1, #90	; 0x5a
 80008a0:	2032      	movs	r0, #50	; 0x32
 80008a2:	f004 fdd3 	bl	800544c <fillRect>
  fillRect(67 ,90, 3, 17,WHITE);
 80008a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2311      	movs	r3, #17
 80008ae:	2203      	movs	r2, #3
 80008b0:	215a      	movs	r1, #90	; 0x5a
 80008b2:	2043      	movs	r0, #67	; 0x43
 80008b4:	f004 fdca 	bl	800544c <fillRect>
  fillRect(50+17 ,105, 17, 3,WHITE);
 80008b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2303      	movs	r3, #3
 80008c0:	2211      	movs	r2, #17
 80008c2:	2169      	movs	r1, #105	; 0x69
 80008c4:	2043      	movs	r0, #67	; 0x43
 80008c6:	f004 fdc1 	bl	800544c <fillRect>

  // Triangle
  fillTriangle(50-10, 145-2, 70-10, 145-2, 60-10, 135-2, WHITE);
 80008ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ce:	9302      	str	r3, [sp, #8]
 80008d0:	2385      	movs	r3, #133	; 0x85
 80008d2:	9301      	str	r3, [sp, #4]
 80008d4:	2332      	movs	r3, #50	; 0x32
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	238f      	movs	r3, #143	; 0x8f
 80008da:	223c      	movs	r2, #60	; 0x3c
 80008dc:	218f      	movs	r1, #143	; 0x8f
 80008de:	2028      	movs	r0, #40	; 0x28
 80008e0:	f004 ffce 	bl	8005880 <fillTriangle>
  fillTriangle(50+3-10, 145-2, 70-3-10, 145-2, 60-10, 135+3-2,  BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));
 80008e4:	f648 23ca 	movw	r3, #35530	; 0x8aca
 80008e8:	9302      	str	r3, [sp, #8]
 80008ea:	2388      	movs	r3, #136	; 0x88
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	2332      	movs	r3, #50	; 0x32
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	238f      	movs	r3, #143	; 0x8f
 80008f4:	2239      	movs	r2, #57	; 0x39
 80008f6:	218f      	movs	r1, #143	; 0x8f
 80008f8:	202b      	movs	r0, #43	; 0x2b
 80008fa:	f004 ffc1 	bl	8005880 <fillTriangle>

  fillTriangle(68-10, 145-2, 90-10, 145-2, 80-10, 155-2, WHITE);
 80008fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000902:	9302      	str	r3, [sp, #8]
 8000904:	2399      	movs	r3, #153	; 0x99
 8000906:	9301      	str	r3, [sp, #4]
 8000908:	2346      	movs	r3, #70	; 0x46
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	238f      	movs	r3, #143	; 0x8f
 800090e:	2250      	movs	r2, #80	; 0x50
 8000910:	218f      	movs	r1, #143	; 0x8f
 8000912:	203a      	movs	r0, #58	; 0x3a
 8000914:	f004 ffb4 	bl	8005880 <fillTriangle>
  fillTriangle(68+3-10, 145-2, 90-3-10, 145-2, 80-10, 155-3-2, BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));
 8000918:	f648 23ca 	movw	r3, #35530	; 0x8aca
 800091c:	9302      	str	r3, [sp, #8]
 800091e:	2396      	movs	r3, #150	; 0x96
 8000920:	9301      	str	r3, [sp, #4]
 8000922:	2346      	movs	r3, #70	; 0x46
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	238f      	movs	r3, #143	; 0x8f
 8000928:	224d      	movs	r2, #77	; 0x4d
 800092a:	218f      	movs	r1, #143	; 0x8f
 800092c:	203d      	movs	r0, #61	; 0x3d
 800092e:	f004 ffa7 	bl	8005880 <fillTriangle>

  // Sawtooth

  fillTriangle(50, 190, 80, 190, 80, 165, WHITE);
 8000932:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000936:	9302      	str	r3, [sp, #8]
 8000938:	23a5      	movs	r3, #165	; 0xa5
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	2350      	movs	r3, #80	; 0x50
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	23be      	movs	r3, #190	; 0xbe
 8000942:	2250      	movs	r2, #80	; 0x50
 8000944:	21be      	movs	r1, #190	; 0xbe
 8000946:	2032      	movs	r0, #50	; 0x32
 8000948:	f004 ff9a 	bl	8005880 <fillTriangle>
  fillTriangle(50+3, 190, 80-3, 190, 80-3, 170, BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));
 800094c:	f648 23ca 	movw	r3, #35530	; 0x8aca
 8000950:	9302      	str	r3, [sp, #8]
 8000952:	23aa      	movs	r3, #170	; 0xaa
 8000954:	9301      	str	r3, [sp, #4]
 8000956:	234d      	movs	r3, #77	; 0x4d
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	23be      	movs	r3, #190	; 0xbe
 800095c:	224d      	movs	r2, #77	; 0x4d
 800095e:	21be      	movs	r1, #190	; 0xbe
 8000960:	2035      	movs	r0, #53	; 0x35
 8000962:	f004 ff8d 	bl	8005880 <fillTriangle>
//  fillTriangle(160+3, 44, 190-3, 44, 175, 25+3, BLACK);
//  fillTriangle(190, 44, 220, 44, 205, 63, WHITE);
//  fillTriangle(190+3, 44, 220-3, 44, 205, 63-3, BLACK);


  HAL_TIM_Base_Start(&htim6);
 8000966:	480d      	ldr	r0, [pc, #52]	; (800099c <main+0x464>)
 8000968:	f007 fb8c 	bl	8008084 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		  if(!EXT_BTN_1_state){
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <main+0x468>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	f083 0301 	eor.w	r3, r3, #1
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d062      	beq.n	8000a42 <main+0x50a>
			  current_envelope_selection++;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <main+0x46c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	3301      	adds	r3, #1
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <main+0x46c>)
 8000986:	701a      	strb	r2, [r3, #0]
			  if(current_envelope_selection < 5){
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <main+0x46c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b04      	cmp	r3, #4
 800098e:	d82c      	bhi.n	80009ea <main+0x4b2>
				  for (i = 0; i < current_envelope_selection; i++) fillRect(133+(i*38), 168, 35,14,BLUE);
 8000990:	4b01      	ldr	r3, [pc, #4]	; (8000998 <main+0x460>)
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	e020      	b.n	80009da <main+0x4a2>
 8000998:	20003bc8 	.word	0x20003bc8
 800099c:	20003d28 	.word	0x20003d28
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20003bbc 	.word	0x20003bbc
 80009a8:	4b97      	ldr	r3, [pc, #604]	; (8000c08 <main+0x6d0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	461a      	mov	r2, r3
 80009b0:	00d2      	lsls	r2, r2, #3
 80009b2:	441a      	add	r2, r3
 80009b4:	0052      	lsls	r2, r2, #1
 80009b6:	4413      	add	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	3385      	adds	r3, #133	; 0x85
 80009be:	b29b      	uxth	r3, r3
 80009c0:	b218      	sxth	r0, r3
 80009c2:	231f      	movs	r3, #31
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	230e      	movs	r3, #14
 80009c8:	2223      	movs	r2, #35	; 0x23
 80009ca:	21a8      	movs	r1, #168	; 0xa8
 80009cc:	f004 fd3e 	bl	800544c <fillRect>
 80009d0:	4b8d      	ldr	r3, [pc, #564]	; (8000c08 <main+0x6d0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	3301      	adds	r3, #1
 80009d6:	4a8c      	ldr	r2, [pc, #560]	; (8000c08 <main+0x6d0>)
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	4b8c      	ldr	r3, [pc, #560]	; (8000c0c <main+0x6d4>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	4b89      	ldr	r3, [pc, #548]	; (8000c08 <main+0x6d0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d8df      	bhi.n	80009a8 <main+0x470>
 80009e8:	e024      	b.n	8000a34 <main+0x4fc>
			  }else{
				  for (i = 0; i < 4; i++) fillRect(133+(i*38), 168, 35,14,BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));
 80009ea:	4b87      	ldr	r3, [pc, #540]	; (8000c08 <main+0x6d0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	e019      	b.n	8000a26 <main+0x4ee>
 80009f2:	4b85      	ldr	r3, [pc, #532]	; (8000c08 <main+0x6d0>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	461a      	mov	r2, r3
 80009fa:	00d2      	lsls	r2, r2, #3
 80009fc:	441a      	add	r2, r3
 80009fe:	0052      	lsls	r2, r2, #1
 8000a00:	4413      	add	r3, r2
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	3385      	adds	r3, #133	; 0x85
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	b218      	sxth	r0, r3
 8000a0c:	f648 23ca 	movw	r3, #35530	; 0x8aca
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	230e      	movs	r3, #14
 8000a14:	2223      	movs	r2, #35	; 0x23
 8000a16:	21a8      	movs	r1, #168	; 0xa8
 8000a18:	f004 fd18 	bl	800544c <fillRect>
 8000a1c:	4b7a      	ldr	r3, [pc, #488]	; (8000c08 <main+0x6d0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	4a79      	ldr	r2, [pc, #484]	; (8000c08 <main+0x6d0>)
 8000a24:	6013      	str	r3, [r2, #0]
 8000a26:	4b78      	ldr	r3, [pc, #480]	; (8000c08 <main+0x6d0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d9e1      	bls.n	80009f2 <main+0x4ba>
				  current_envelope_selection = 0;
 8000a2e:	4b77      	ldr	r3, [pc, #476]	; (8000c0c <main+0x6d4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
			  }
			  selected_waveform = current_envelope_selection;
 8000a34:	4b75      	ldr	r3, [pc, #468]	; (8000c0c <main+0x6d4>)
 8000a36:	781a      	ldrb	r2, [r3, #0]
 8000a38:	4b75      	ldr	r3, [pc, #468]	; (8000c10 <main+0x6d8>)
 8000a3a:	701a      	strb	r2, [r3, #0]
			  EXT_BTN_1_state = true;
 8000a3c:	4b75      	ldr	r3, [pc, #468]	; (8000c14 <main+0x6dc>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_2_state){
 8000a42:	4b75      	ldr	r3, [pc, #468]	; (8000c18 <main+0x6e0>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	f083 0301 	eor.w	r3, r3, #1
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d05c      	beq.n	8000b0c <main+0x5d4>
			  current_fm_selection++;
 8000a52:	4b72      	ldr	r3, [pc, #456]	; (8000c1c <main+0x6e4>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b70      	ldr	r3, [pc, #448]	; (8000c1c <main+0x6e4>)
 8000a5c:	701a      	strb	r2, [r3, #0]
			  if(current_fm_selection < 5){
 8000a5e:	4b6f      	ldr	r3, [pc, #444]	; (8000c1c <main+0x6e4>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	d824      	bhi.n	8000ab0 <main+0x578>
				  for (i = 0; i < current_fm_selection; i++) fillRect(133+(i*38), 133, 35,14,BLUE);
 8000a66:	4b68      	ldr	r3, [pc, #416]	; (8000c08 <main+0x6d0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	e018      	b.n	8000aa0 <main+0x568>
 8000a6e:	4b66      	ldr	r3, [pc, #408]	; (8000c08 <main+0x6d0>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	461a      	mov	r2, r3
 8000a76:	00d2      	lsls	r2, r2, #3
 8000a78:	441a      	add	r2, r3
 8000a7a:	0052      	lsls	r2, r2, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	3385      	adds	r3, #133	; 0x85
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	b218      	sxth	r0, r3
 8000a88:	231f      	movs	r3, #31
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	230e      	movs	r3, #14
 8000a8e:	2223      	movs	r2, #35	; 0x23
 8000a90:	2185      	movs	r1, #133	; 0x85
 8000a92:	f004 fcdb 	bl	800544c <fillRect>
 8000a96:	4b5c      	ldr	r3, [pc, #368]	; (8000c08 <main+0x6d0>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	4a5a      	ldr	r2, [pc, #360]	; (8000c08 <main+0x6d0>)
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	4b5e      	ldr	r3, [pc, #376]	; (8000c1c <main+0x6e4>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b58      	ldr	r3, [pc, #352]	; (8000c08 <main+0x6d0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d8df      	bhi.n	8000a6e <main+0x536>
 8000aae:	e024      	b.n	8000afa <main+0x5c2>
			  }else{
				  for (i = 0; i < 4; i++) fillRect(133+(i*38), 133, 35,14,BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));
 8000ab0:	4b55      	ldr	r3, [pc, #340]	; (8000c08 <main+0x6d0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	e019      	b.n	8000aec <main+0x5b4>
 8000ab8:	4b53      	ldr	r3, [pc, #332]	; (8000c08 <main+0x6d0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	461a      	mov	r2, r3
 8000ac0:	00d2      	lsls	r2, r2, #3
 8000ac2:	441a      	add	r2, r3
 8000ac4:	0052      	lsls	r2, r2, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	3385      	adds	r3, #133	; 0x85
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b218      	sxth	r0, r3
 8000ad2:	f648 23ca 	movw	r3, #35530	; 0x8aca
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	230e      	movs	r3, #14
 8000ada:	2223      	movs	r2, #35	; 0x23
 8000adc:	2185      	movs	r1, #133	; 0x85
 8000ade:	f004 fcb5 	bl	800544c <fillRect>
 8000ae2:	4b49      	ldr	r3, [pc, #292]	; (8000c08 <main+0x6d0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	4a47      	ldr	r2, [pc, #284]	; (8000c08 <main+0x6d0>)
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	4b46      	ldr	r3, [pc, #280]	; (8000c08 <main+0x6d0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	d9e1      	bls.n	8000ab8 <main+0x580>
				  current_fm_selection = 0;
 8000af4:	4b49      	ldr	r3, [pc, #292]	; (8000c1c <main+0x6e4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
			  }
			  selected_waveform = current_fm_selection + 4;
 8000afa:	4b48      	ldr	r3, [pc, #288]	; (8000c1c <main+0x6e4>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	3304      	adds	r3, #4
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4b43      	ldr	r3, [pc, #268]	; (8000c10 <main+0x6d8>)
 8000b04:	701a      	strb	r2, [r3, #0]
			  EXT_BTN_2_state = true;
 8000b06:	4b44      	ldr	r3, [pc, #272]	; (8000c18 <main+0x6e0>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_3_state){
 8000b0c:	4b44      	ldr	r3, [pc, #272]	; (8000c20 <main+0x6e8>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	f083 0301 	eor.w	r3, r3, #1
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d05c      	beq.n	8000bd6 <main+0x69e>
			  current_am_selection++;
 8000b1c:	4b41      	ldr	r3, [pc, #260]	; (8000c24 <main+0x6ec>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	3301      	adds	r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b3f      	ldr	r3, [pc, #252]	; (8000c24 <main+0x6ec>)
 8000b26:	701a      	strb	r2, [r3, #0]
			  if(current_am_selection < 5){
 8000b28:	4b3e      	ldr	r3, [pc, #248]	; (8000c24 <main+0x6ec>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	d824      	bhi.n	8000b7a <main+0x642>
				  for (i = 0; i < current_am_selection; i++) fillRect(133+(i*38), 98, 35,14,BLUE);
 8000b30:	4b35      	ldr	r3, [pc, #212]	; (8000c08 <main+0x6d0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	e018      	b.n	8000b6a <main+0x632>
 8000b38:	4b33      	ldr	r3, [pc, #204]	; (8000c08 <main+0x6d0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	00d2      	lsls	r2, r2, #3
 8000b42:	441a      	add	r2, r3
 8000b44:	0052      	lsls	r2, r2, #1
 8000b46:	4413      	add	r3, r2
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	3385      	adds	r3, #133	; 0x85
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	b218      	sxth	r0, r3
 8000b52:	231f      	movs	r3, #31
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	230e      	movs	r3, #14
 8000b58:	2223      	movs	r2, #35	; 0x23
 8000b5a:	2162      	movs	r1, #98	; 0x62
 8000b5c:	f004 fc76 	bl	800544c <fillRect>
 8000b60:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <main+0x6d0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a28      	ldr	r2, [pc, #160]	; (8000c08 <main+0x6d0>)
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <main+0x6ec>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <main+0x6d0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d8df      	bhi.n	8000b38 <main+0x600>
 8000b78:	e024      	b.n	8000bc4 <main+0x68c>
			  }else{
			  		for (i = 0; i < 4; i++) fillRect(133+(i*38), 98, 35,14,BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));
 8000b7a:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <main+0x6d0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	e019      	b.n	8000bb6 <main+0x67e>
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <main+0x6d0>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	00d2      	lsls	r2, r2, #3
 8000b8c:	441a      	add	r2, r3
 8000b8e:	0052      	lsls	r2, r2, #1
 8000b90:	4413      	add	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	3385      	adds	r3, #133	; 0x85
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	b218      	sxth	r0, r3
 8000b9c:	f648 23ca 	movw	r3, #35530	; 0x8aca
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	230e      	movs	r3, #14
 8000ba4:	2223      	movs	r2, #35	; 0x23
 8000ba6:	2162      	movs	r1, #98	; 0x62
 8000ba8:	f004 fc50 	bl	800544c <fillRect>
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <main+0x6d0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	4a15      	ldr	r2, [pc, #84]	; (8000c08 <main+0x6d0>)
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <main+0x6d0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d9e1      	bls.n	8000b82 <main+0x64a>
			  		current_am_selection = 0;
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <main+0x6ec>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
			  }
			  selected_waveform = current_am_selection + 8;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <main+0x6ec>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	3308      	adds	r3, #8
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <main+0x6d8>)
 8000bce:	701a      	strb	r2, [r3, #0]
			  EXT_BTN_3_state = true;
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <main+0x6e8>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_4_state){
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <main+0x6f0>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	f083 0301 	eor.w	r3, r3, #1
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f43f aec2 	beq.w	800096c <main+0x434>
			  current_signal_selection++;
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <main+0x6f4>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	3301      	adds	r3, #1
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <main+0x6f4>)
 8000bf2:	701a      	strb	r2, [r3, #0]
			  if(current_signal_selection < 5){
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <main+0x6f4>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b04      	cmp	r3, #4
 8000bfa:	f200 80a2 	bhi.w	8000d42 <main+0x80a>
				  for (i=1; i <= current_signal_selection; i++){
 8000bfe:	4b02      	ldr	r3, [pc, #8]	; (8000c08 <main+0x6d0>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	e094      	b.n	8000d30 <main+0x7f8>
 8000c06:	bf00      	nop
 8000c08:	20003bc8 	.word	0x20003bc8
 8000c0c:	20003bbc 	.word	0x20003bbc
 8000c10:	20003bc7 	.word	0x20003bc7
 8000c14:	20000000 	.word	0x20000000
 8000c18:	20000001 	.word	0x20000001
 8000c1c:	20003bbb 	.word	0x20003bbb
 8000c20:	20000002 	.word	0x20000002
 8000c24:	20003bba 	.word	0x20003bba
 8000c28:	20000003 	.word	0x20000003
 8000c2c:	20003bbd 	.word	0x20003bbd
					  fillRect(24+((i-2)*65), 22, 3,46,BLACK);
 8000c30:	4b6d      	ldr	r3, [pc, #436]	; (8000de8 <main+0x8b0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	461a      	mov	r2, r3
 8000c38:	0192      	lsls	r2, r2, #6
 8000c3a:	4413      	add	r3, r2
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	3b6a      	subs	r3, #106	; 0x6a
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	b218      	sxth	r0, r3
 8000c44:	2300      	movs	r3, #0
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	232e      	movs	r3, #46	; 0x2e
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	2116      	movs	r1, #22
 8000c4e:	f004 fbfd 	bl	800544c <fillRect>
					  fillRect(24+((i-1)*65), 22, 3,46,YELLOW);
 8000c52:	4b65      	ldr	r3, [pc, #404]	; (8000de8 <main+0x8b0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	461a      	mov	r2, r3
 8000c5a:	0192      	lsls	r2, r2, #6
 8000c5c:	4413      	add	r3, r2
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	3b29      	subs	r3, #41	; 0x29
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	b218      	sxth	r0, r3
 8000c66:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	232e      	movs	r3, #46	; 0x2e
 8000c6e:	2203      	movs	r2, #3
 8000c70:	2116      	movs	r1, #22
 8000c72:	f004 fbeb 	bl	800544c <fillRect>
					  fillRect(89+((i-1)*65), 22, 3,46,YELLOW);
 8000c76:	4b5c      	ldr	r3, [pc, #368]	; (8000de8 <main+0x8b0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	0192      	lsls	r2, r2, #6
 8000c80:	4413      	add	r3, r2
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	3318      	adds	r3, #24
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	b218      	sxth	r0, r3
 8000c8a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	232e      	movs	r3, #46	; 0x2e
 8000c92:	2203      	movs	r2, #3
 8000c94:	2116      	movs	r1, #22
 8000c96:	f004 fbd9 	bl	800544c <fillRect>
					  fillRect(24+((i-2)*65), 22, 65,3,BLACK);
 8000c9a:	4b53      	ldr	r3, [pc, #332]	; (8000de8 <main+0x8b0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	0192      	lsls	r2, r2, #6
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	3b6a      	subs	r3, #106	; 0x6a
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	b218      	sxth	r0, r3
 8000cae:	2300      	movs	r3, #0
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	2241      	movs	r2, #65	; 0x41
 8000cb6:	2116      	movs	r1, #22
 8000cb8:	f004 fbc8 	bl	800544c <fillRect>
					  fillRect(24+((i-2)*65), 65, 65,3,BLACK);
 8000cbc:	4b4a      	ldr	r3, [pc, #296]	; (8000de8 <main+0x8b0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	0192      	lsls	r2, r2, #6
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	3b6a      	subs	r3, #106	; 0x6a
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	b218      	sxth	r0, r3
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	2241      	movs	r2, #65	; 0x41
 8000cd8:	2141      	movs	r1, #65	; 0x41
 8000cda:	f004 fbb7 	bl	800544c <fillRect>
					  fillRect(24+((i-1)*65), 22, 65,3,YELLOW);
 8000cde:	4b42      	ldr	r3, [pc, #264]	; (8000de8 <main+0x8b0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	0192      	lsls	r2, r2, #6
 8000ce8:	4413      	add	r3, r2
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	3b29      	subs	r3, #41	; 0x29
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	b218      	sxth	r0, r3
 8000cf2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	2241      	movs	r2, #65	; 0x41
 8000cfc:	2116      	movs	r1, #22
 8000cfe:	f004 fba5 	bl	800544c <fillRect>
					  fillRect(24+((i-1)*65), 65, 65,3,YELLOW);
 8000d02:	4b39      	ldr	r3, [pc, #228]	; (8000de8 <main+0x8b0>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	0192      	lsls	r2, r2, #6
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	3b29      	subs	r3, #41	; 0x29
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	b218      	sxth	r0, r3
 8000d16:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	2241      	movs	r2, #65	; 0x41
 8000d20:	2141      	movs	r1, #65	; 0x41
 8000d22:	f004 fb93 	bl	800544c <fillRect>
				  for (i=1; i <= current_signal_selection; i++){
 8000d26:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <main+0x8b0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	4a2e      	ldr	r2, [pc, #184]	; (8000de8 <main+0x8b0>)
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <main+0x8b4>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <main+0x8b0>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f4bf af78 	bcs.w	8000c30 <main+0x6f8>
 8000d40:	e047      	b.n	8000dd2 <main+0x89a>
				  }
			  }else{
				  fillRect(219, 22, 3,46,BLACK);
 8000d42:	2300      	movs	r3, #0
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	232e      	movs	r3, #46	; 0x2e
 8000d48:	2203      	movs	r2, #3
 8000d4a:	2116      	movs	r1, #22
 8000d4c:	20db      	movs	r0, #219	; 0xdb
 8000d4e:	f004 fb7d 	bl	800544c <fillRect>
				  fillRect(284, 22, 3,46,BLACK);
 8000d52:	2300      	movs	r3, #0
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	232e      	movs	r3, #46	; 0x2e
 8000d58:	2203      	movs	r2, #3
 8000d5a:	2116      	movs	r1, #22
 8000d5c:	f44f 708e 	mov.w	r0, #284	; 0x11c
 8000d60:	f004 fb74 	bl	800544c <fillRect>
				  fillRect(24, 22, 3,46,YELLOW);
 8000d64:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	232e      	movs	r3, #46	; 0x2e
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	2116      	movs	r1, #22
 8000d70:	2018      	movs	r0, #24
 8000d72:	f004 fb6b 	bl	800544c <fillRect>
				  fillRect(89, 22, 3,46,YELLOW);
 8000d76:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	232e      	movs	r3, #46	; 0x2e
 8000d7e:	2203      	movs	r2, #3
 8000d80:	2116      	movs	r1, #22
 8000d82:	2059      	movs	r0, #89	; 0x59
 8000d84:	f004 fb62 	bl	800544c <fillRect>
				  fillRect(219, 22, 65,3,BLACK);
 8000d88:	2300      	movs	r3, #0
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	2241      	movs	r2, #65	; 0x41
 8000d90:	2116      	movs	r1, #22
 8000d92:	20db      	movs	r0, #219	; 0xdb
 8000d94:	f004 fb5a 	bl	800544c <fillRect>
				  fillRect(219, 65, 65,3,BLACK);
 8000d98:	2300      	movs	r3, #0
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	2241      	movs	r2, #65	; 0x41
 8000da0:	2141      	movs	r1, #65	; 0x41
 8000da2:	20db      	movs	r0, #219	; 0xdb
 8000da4:	f004 fb52 	bl	800544c <fillRect>
				  fillRect(24, 22, 65,3,YELLOW);
 8000da8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2303      	movs	r3, #3
 8000db0:	2241      	movs	r2, #65	; 0x41
 8000db2:	2116      	movs	r1, #22
 8000db4:	2018      	movs	r0, #24
 8000db6:	f004 fb49 	bl	800544c <fillRect>
				  fillRect(24, 65, 65,3,YELLOW);
 8000dba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	2241      	movs	r2, #65	; 0x41
 8000dc4:	2141      	movs	r1, #65	; 0x41
 8000dc6:	2018      	movs	r0, #24
 8000dc8:	f004 fb40 	bl	800544c <fillRect>
				  current_signal_selection = 1;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <main+0x8b4>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
			  }
			  selected_waveform = current_signal_selection + 12;
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <main+0x8b4>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	330c      	adds	r3, #12
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <main+0x8b8>)
 8000ddc:	701a      	strb	r2, [r3, #0]
			  EXT_BTN_4_state = true;
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <main+0x8bc>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
		  if(!EXT_BTN_1_state){
 8000de4:	e5c2      	b.n	800096c <main+0x434>
 8000de6:	bf00      	nop
 8000de8:	20003bc8 	.word	0x20003bc8
 8000dec:	20003bbd 	.word	0x20003bbd
 8000df0:	20003bc7 	.word	0x20003bc7
 8000df4:	20000003 	.word	0x20000003

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0b8      	sub	sp, #224	; 0xe0
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e02:	2234      	movs	r2, #52	; 0x34
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f008 fb6c 	bl	80094e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	2290      	movs	r2, #144	; 0x90
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f008 fb5d 	bl	80094e4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e2a:	f006 f823 	bl	8006e74 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <SystemClock_Config+0x118>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a37      	ldr	r2, [pc, #220]	; (8000f10 <SystemClock_Config+0x118>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b35      	ldr	r3, [pc, #212]	; (8000f10 <SystemClock_Config+0x118>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <SystemClock_Config+0x11c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e4e:	4a31      	ldr	r2, [pc, #196]	; (8000f14 <SystemClock_Config+0x11c>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <SystemClock_Config+0x11c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e62:	2302      	movs	r3, #2
 8000e64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6e:	2310      	movs	r3, #16
 8000e70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e74:	2302      	movs	r3, #2
 8000e76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e80:	2308      	movs	r3, #8
 8000e82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000e86:	2390      	movs	r3, #144	; 0x90
 8000e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e92:	2304      	movs	r3, #4
 8000e94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f005 fff9 	bl	8006e94 <HAL_RCC_OscConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ea8:	f000 fdaa 	bl	8001a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eac:	230f      	movs	r3, #15
 8000eae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000ebe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000ec6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ece:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f006 fa8b 	bl	80073f0 <HAL_RCC_ClockConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000ee0:	f000 fd8e 	bl	8001a00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4;
 8000ee4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ee8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f006 fc72 	bl	80077e0 <HAL_RCCEx_PeriphCLKConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000f02:	f000 fd7d 	bl	8001a00 <Error_Handler>
  }
}
 8000f06:	bf00      	nop
 8000f08:	37e0      	adds	r7, #224	; 0xe0
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40007000 	.word	0x40007000

08000f18 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_DAC_Init+0x60>)
 8000f28:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <MX_DAC_Init+0x64>)
 8000f2a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f2c:	4812      	ldr	r0, [pc, #72]	; (8000f78 <MX_DAC_Init+0x60>)
 8000f2e:	f004 ffc0 	bl	8005eb2 <HAL_DAC_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f38:	f000 fd62 	bl	8001a00 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480b      	ldr	r0, [pc, #44]	; (8000f78 <MX_DAC_Init+0x60>)
 8000f4c:	f005 f8e1 	bl	8006112 <HAL_DAC_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f56:	f000 fd53 	bl	8001a00 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	2210      	movs	r2, #16
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_DAC_Init+0x60>)
 8000f62:	f005 f8d6 	bl	8006112 <HAL_DAC_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000f6c:	f000 fd48 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20003d14 	.word	0x20003d14
 8000f7c:	40007400 	.word	0x40007400

08000f80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f9e:	4b20      	ldr	r3, [pc, #128]	; (8001020 <MX_TIM1_Init+0xa0>)
 8000fa0:	4a20      	ldr	r2, [pc, #128]	; (8001024 <MX_TIM1_Init+0xa4>)
 8000fa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <MX_TIM1_Init+0xa0>)
 8000fa6:	2247      	movs	r2, #71	; 0x47
 8000fa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000faa:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <MX_TIM1_Init+0xa0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <MX_TIM1_Init+0xa0>)
 8000fb2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000fb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb8:	4b19      	ldr	r3, [pc, #100]	; (8001020 <MX_TIM1_Init+0xa0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_TIM1_Init+0xa0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_TIM1_Init+0xa0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fca:	4815      	ldr	r0, [pc, #84]	; (8001020 <MX_TIM1_Init+0xa0>)
 8000fcc:	f007 f82e 	bl	800802c <HAL_TIM_Base_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000fd6:	f000 fd13 	bl	8001a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480e      	ldr	r0, [pc, #56]	; (8001020 <MX_TIM1_Init+0xa0>)
 8000fe8:	f007 f9ec 	bl	80083c4 <HAL_TIM_ConfigClockSource>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ff2:	f000 fd05 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	4619      	mov	r1, r3
 8001006:	4806      	ldr	r0, [pc, #24]	; (8001020 <MX_TIM1_Init+0xa0>)
 8001008:	f007 fbf8 	bl	80087fc <HAL_TIMEx_MasterConfigSynchronization>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001012:	f000 fcf5 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20003d68 	.word	0x20003d68
 8001024:	40010000 	.word	0x40010000

08001028 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <MX_TIM2_Init+0x98>)
 8001048:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800104c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000-1;
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <MX_TIM2_Init+0x98>)
 8001050:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001054:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <MX_TIM2_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40-1;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_TIM2_Init+0x98>)
 800105e:	2227      	movs	r2, #39	; 0x27
 8001060:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_TIM2_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_TIM2_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800106e:	4814      	ldr	r0, [pc, #80]	; (80010c0 <MX_TIM2_Init+0x98>)
 8001070:	f006 ffdc 	bl	800802c <HAL_TIM_Base_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800107a:	f000 fcc1 	bl	8001a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001082:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	4619      	mov	r1, r3
 800108a:	480d      	ldr	r0, [pc, #52]	; (80010c0 <MX_TIM2_Init+0x98>)
 800108c:	f007 f99a 	bl	80083c4 <HAL_TIM_ConfigClockSource>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001096:	f000 fcb3 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <MX_TIM2_Init+0x98>)
 80010a8:	f007 fba8 	bl	80087fc <HAL_TIMEx_MasterConfigSynchronization>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010b2:	f000 fca5 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	3720      	adds	r7, #32
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20003e28 	.word	0x20003e28

080010c4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_TIM6_Init+0x64>)
 80010d6:	4a15      	ldr	r2, [pc, #84]	; (800112c <MX_TIM6_Init+0x68>)
 80010d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 55-1;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_TIM6_Init+0x64>)
 80010dc:	2236      	movs	r2, #54	; 0x36
 80010de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_TIM6_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 15-1;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <MX_TIM6_Init+0x64>)
 80010e8:	220e      	movs	r2, #14
 80010ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_TIM6_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_TIM6_Init+0x64>)
 80010f4:	f006 ff9a 	bl	800802c <HAL_TIM_Base_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80010fe:	f000 fc7f 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001102:	2320      	movs	r3, #32
 8001104:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <MX_TIM6_Init+0x64>)
 8001110:	f007 fb74 	bl	80087fc <HAL_TIMEx_MasterConfigSynchronization>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800111a:	f000 fc71 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20003d28 	.word	0x20003d28
 800112c:	40001000 	.word	0x40001000

08001130 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <MX_UART4_Init+0x58>)
 8001136:	4a15      	ldr	r2, [pc, #84]	; (800118c <MX_UART4_Init+0x5c>)
 8001138:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <MX_UART4_Init+0x58>)
 800113c:	f647 2212 	movw	r2, #31250	; 0x7a12
 8001140:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_UART4_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_UART4_Init+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_UART4_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_UART4_Init+0x58>)
 8001156:	220c      	movs	r2, #12
 8001158:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <MX_UART4_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_UART4_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <MX_UART4_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_UART4_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_UART4_Init+0x58>)
 8001174:	f007 fbee 	bl	8008954 <HAL_UART_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800117e:	f000 fc3f 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20003da8 	.word	0x20003da8
 800118c:	40004c00 	.word	0x40004c00

08001190 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_USART3_UART_Init+0x58>)
 8001196:	4a15      	ldr	r2, [pc, #84]	; (80011ec <MX_USART3_UART_Init+0x5c>)
 8001198:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_USART3_UART_Init+0x58>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_USART3_UART_Init+0x58>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_USART3_UART_Init+0x58>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_USART3_UART_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_USART3_UART_Init+0x58>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_USART3_UART_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_USART3_UART_Init+0x58>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <MX_USART3_UART_Init+0x58>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_USART3_UART_Init+0x58>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_USART3_UART_Init+0x58>)
 80011d4:	f007 fbbe 	bl	8008954 <HAL_UART_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011de:	f000 fc0f 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20003c34 	.word	0x20003c34
 80011ec:	40004800 	.word	0x40004800

080011f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_DMA_Init+0x58>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a13      	ldr	r2, [pc, #76]	; (8001248 <MX_DMA_Init+0x58>)
 80011fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_DMA_Init+0x58>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	200d      	movs	r0, #13
 8001214:	f004 fe17 	bl	8005e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001218:	200d      	movs	r0, #13
 800121a:	f004 fe30 	bl	8005e7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	2010      	movs	r0, #16
 8001224:	f004 fe0f 	bl	8005e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001228:	2010      	movs	r0, #16
 800122a:	f004 fe28 	bl	8005e7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	2011      	movs	r0, #17
 8001234:	f004 fe07 	bl	8005e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001238:	2011      	movs	r0, #17
 800123a:	f004 fe20 	bl	8005e7e <HAL_NVIC_EnableIRQ>

}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	; 0x38
 8001250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001262:	4bb3      	ldr	r3, [pc, #716]	; (8001530 <MX_GPIO_Init+0x2e4>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4ab2      	ldr	r2, [pc, #712]	; (8001530 <MX_GPIO_Init+0x2e4>)
 8001268:	f043 0310 	orr.w	r3, r3, #16
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4bb0      	ldr	r3, [pc, #704]	; (8001530 <MX_GPIO_Init+0x2e4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	623b      	str	r3, [r7, #32]
 8001278:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	4bad      	ldr	r3, [pc, #692]	; (8001530 <MX_GPIO_Init+0x2e4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4aac      	ldr	r2, [pc, #688]	; (8001530 <MX_GPIO_Init+0x2e4>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4baa      	ldr	r3, [pc, #680]	; (8001530 <MX_GPIO_Init+0x2e4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001292:	4ba7      	ldr	r3, [pc, #668]	; (8001530 <MX_GPIO_Init+0x2e4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4aa6      	ldr	r2, [pc, #664]	; (8001530 <MX_GPIO_Init+0x2e4>)
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4ba4      	ldr	r3, [pc, #656]	; (8001530 <MX_GPIO_Init+0x2e4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0320 	and.w	r3, r3, #32
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	4ba1      	ldr	r3, [pc, #644]	; (8001530 <MX_GPIO_Init+0x2e4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4aa0      	ldr	r2, [pc, #640]	; (8001530 <MX_GPIO_Init+0x2e4>)
 80012b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b9e      	ldr	r3, [pc, #632]	; (8001530 <MX_GPIO_Init+0x2e4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b9b      	ldr	r3, [pc, #620]	; (8001530 <MX_GPIO_Init+0x2e4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a9a      	ldr	r2, [pc, #616]	; (8001530 <MX_GPIO_Init+0x2e4>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b98      	ldr	r3, [pc, #608]	; (8001530 <MX_GPIO_Init+0x2e4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	4b95      	ldr	r3, [pc, #596]	; (8001530 <MX_GPIO_Init+0x2e4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a94      	ldr	r2, [pc, #592]	; (8001530 <MX_GPIO_Init+0x2e4>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b92      	ldr	r3, [pc, #584]	; (8001530 <MX_GPIO_Init+0x2e4>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012f2:	4b8f      	ldr	r3, [pc, #572]	; (8001530 <MX_GPIO_Init+0x2e4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a8e      	ldr	r2, [pc, #568]	; (8001530 <MX_GPIO_Init+0x2e4>)
 80012f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b8c      	ldr	r3, [pc, #560]	; (8001530 <MX_GPIO_Init+0x2e4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130a:	4b89      	ldr	r3, [pc, #548]	; (8001530 <MX_GPIO_Init+0x2e4>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a88      	ldr	r2, [pc, #544]	; (8001530 <MX_GPIO_Init+0x2e4>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b86      	ldr	r3, [pc, #536]	; (8001530 <MX_GPIO_Init+0x2e4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001322:	2200      	movs	r2, #0
 8001324:	f24c 0178 	movw	r1, #49272	; 0xc078
 8001328:	4882      	ldr	r0, [pc, #520]	; (8001534 <MX_GPIO_Init+0x2e8>)
 800132a:	f005 fd71 	bl	8006e10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001334:	4880      	ldr	r0, [pc, #512]	; (8001538 <MX_GPIO_Init+0x2ec>)
 8001336:	f005 fd6b 	bl	8006e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	f644 0181 	movw	r1, #18561	; 0x4881
 8001340:	487e      	ldr	r0, [pc, #504]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001342:	f005 fd65 	bl	8006e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	2142      	movs	r1, #66	; 0x42
 800134a:	487d      	ldr	r0, [pc, #500]	; (8001540 <MX_GPIO_Init+0x2f4>)
 800134c:	f005 fd60 	bl	8006e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001350:	f24c 0378 	movw	r3, #49272	; 0xc078
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	4872      	ldr	r0, [pc, #456]	; (8001534 <MX_GPIO_Init+0x2e8>)
 800136a:	f005 fb8f 	bl	8006a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800136e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001384:	4619      	mov	r1, r3
 8001386:	486c      	ldr	r0, [pc, #432]	; (8001538 <MX_GPIO_Init+0x2ec>)
 8001388:	f005 fb80 	bl	8006a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800138c:	2332      	movs	r3, #50	; 0x32
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800139c:	230b      	movs	r3, #11
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a4:	4619      	mov	r1, r3
 80013a6:	4867      	ldr	r0, [pc, #412]	; (8001544 <MX_GPIO_Init+0x2f8>)
 80013a8:	f005 fb70 	bl	8006a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013ac:	2386      	movs	r3, #134	; 0x86
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013bc:	230b      	movs	r3, #11
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	4860      	ldr	r0, [pc, #384]	; (8001548 <MX_GPIO_Init+0x2fc>)
 80013c8:	f005 fb60 	bl	8006a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB11 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin;
 80013cc:	f644 0381 	movw	r3, #18561	; 0x4881
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	4855      	ldr	r0, [pc, #340]	; (800153c <MX_GPIO_Init+0x2f0>)
 80013e6:	f005 fb51 	bl	8006a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_BTN_1_Pin EXT_BTN_4_Pin */
  GPIO_InitStruct.Pin = EXT_BTN_1_Pin|EXT_BTN_4_Pin;
 80013ea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013f0:	4b56      	ldr	r3, [pc, #344]	; (800154c <MX_GPIO_Init+0x300>)
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fc:	4619      	mov	r1, r3
 80013fe:	484e      	ldr	r0, [pc, #312]	; (8001538 <MX_GPIO_Init+0x2ec>)
 8001400:	f005 fb44 	bl	8006a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|USB_PowerSwitchOn_Pin;
 8001404:	2342      	movs	r3, #66	; 0x42
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	4619      	mov	r1, r3
 800141a:	4849      	ldr	r0, [pc, #292]	; (8001540 <MX_GPIO_Init+0x2f4>)
 800141c:	f005 fb36 	bl	8006a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_BTN_2_Pin EXT_BTN_3_Pin */
  GPIO_InitStruct.Pin = EXT_BTN_2_Pin|EXT_BTN_3_Pin;
 8001420:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001426:	4b49      	ldr	r3, [pc, #292]	; (800154c <MX_GPIO_Init+0x300>)
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142a:	2301      	movs	r3, #1
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800142e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001432:	4619      	mov	r1, r3
 8001434:	483f      	ldr	r0, [pc, #252]	; (8001534 <MX_GPIO_Init+0x2e8>)
 8001436:	f005 fb29 	bl	8006a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800143a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001440:	2300      	movs	r3, #0
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144c:	4619      	mov	r1, r3
 800144e:	4839      	ldr	r0, [pc, #228]	; (8001534 <MX_GPIO_Init+0x2e8>)
 8001450:	f005 fb1c 	bl	8006a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145a:	2303      	movs	r3, #3
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	4834      	ldr	r0, [pc, #208]	; (800153c <MX_GPIO_Init+0x2f0>)
 800146a:	f005 fb0f 	bl	8006a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800146e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001480:	230b      	movs	r3, #11
 8001482:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	482c      	ldr	r0, [pc, #176]	; (800153c <MX_GPIO_Init+0x2f0>)
 800148c:	f005 fafe 	bl	8006a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a0:	4619      	mov	r1, r3
 80014a2:	4827      	ldr	r0, [pc, #156]	; (8001540 <MX_GPIO_Init+0x2f4>)
 80014a4:	f005 faf2 	bl	8006a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014a8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014ba:	230a      	movs	r3, #10
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c2:	4619      	mov	r1, r3
 80014c4:	4820      	ldr	r0, [pc, #128]	; (8001548 <MX_GPIO_Init+0x2fc>)
 80014c6:	f005 fae1 	bl	8006a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014dc:	4619      	mov	r1, r3
 80014de:	481a      	ldr	r0, [pc, #104]	; (8001548 <MX_GPIO_Init+0x2fc>)
 80014e0:	f005 fad4 	bl	8006a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014f6:	230b      	movs	r3, #11
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	480f      	ldr	r0, [pc, #60]	; (8001540 <MX_GPIO_Init+0x2f4>)
 8001502:	f005 fac3 	bl	8006a8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	2017      	movs	r0, #23
 800150c:	f004 fc9b 	bl	8005e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001510:	2017      	movs	r0, #23
 8001512:	f004 fcb4 	bl	8005e7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2028      	movs	r0, #40	; 0x28
 800151c:	f004 fc93 	bl	8005e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001520:	2028      	movs	r0, #40	; 0x28
 8001522:	f004 fcac 	bl	8005e7e <HAL_NVIC_EnableIRQ>

}
 8001526:	bf00      	nop
 8001528:	3738      	adds	r7, #56	; 0x38
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40021000 	.word	0x40021000
 8001538:	40021400 	.word	0x40021400
 800153c:	40020400 	.word	0x40020400
 8001540:	40021800 	.word	0x40021800
 8001544:	40020800 	.word	0x40020800
 8001548:	40020000 	.word	0x40020000
 800154c:	10210000 	.word	0x10210000

08001550 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// Callback para GPIOs
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXT_BTN_1_Pin) HAL_TIM_Base_Start_IT(&htim2);
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001560:	d102      	bne.n	8001568 <HAL_GPIO_EXTI_Callback+0x18>
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001564:	f006 fde4 	bl	8008130 <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_2_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800156e:	d102      	bne.n	8001576 <HAL_GPIO_EXTI_Callback+0x26>
 8001570:	480a      	ldr	r0, [pc, #40]	; (800159c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001572:	f006 fddd 	bl	8008130 <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_3_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800157c:	d102      	bne.n	8001584 <HAL_GPIO_EXTI_Callback+0x34>
 800157e:	4807      	ldr	r0, [pc, #28]	; (800159c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001580:	f006 fdd6 	bl	8008130 <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_4_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800158a:	d102      	bne.n	8001592 <HAL_GPIO_EXTI_Callback+0x42>
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <HAL_GPIO_EXTI_Callback+0x4c>)
 800158e:	f006 fdcf 	bl	8008130 <HAL_TIM_Base_Start_IT>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20003e28 	.word	0x20003e28

080015a0 <HAL_TIM_PeriodElapsedCallback>:
// Callback para Timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(htim == &htim2){
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a1f      	ldr	r2, [pc, #124]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d137      	bne.n	8001620 <HAL_TIM_PeriodElapsedCallback+0x80>
	  // Ya pasaron 40ms y sigue en 0, es real esto.
	  if(!HAL_GPIO_ReadPin(EXT_BTN_1_GPIO_Port, EXT_BTN_1_Pin)){
 80015b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b4:	481d      	ldr	r0, [pc, #116]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80015b6:	f005 fc13 	bl	8006de0 <HAL_GPIO_ReadPin>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d105      	bne.n	80015cc <HAL_TIM_PeriodElapsedCallback+0x2c>
		  EXT_BTN_1_state = false;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 80015c6:	4818      	ldr	r0, [pc, #96]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80015c8:	f006 fd86 	bl	80080d8 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_2_GPIO_Port, EXT_BTN_2_Pin)){
 80015cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d0:	4818      	ldr	r0, [pc, #96]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80015d2:	f005 fc05 	bl	8006de0 <HAL_GPIO_ReadPin>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d105      	bne.n	80015e8 <HAL_TIM_PeriodElapsedCallback+0x48>
		  EXT_BTN_2_state = false;
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 80015e2:	4811      	ldr	r0, [pc, #68]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80015e4:	f006 fd78 	bl	80080d8 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_3_GPIO_Port, EXT_BTN_3_Pin)){
 80015e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ec:	4811      	ldr	r0, [pc, #68]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80015ee:	f005 fbf7 	bl	8006de0 <HAL_GPIO_ReadPin>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d105      	bne.n	8001604 <HAL_TIM_PeriodElapsedCallback+0x64>
		  EXT_BTN_3_state = false;
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 80015fe:	480a      	ldr	r0, [pc, #40]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001600:	f006 fd6a 	bl	80080d8 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_4_GPIO_Port, EXT_BTN_4_Pin)){
 8001604:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001608:	4808      	ldr	r0, [pc, #32]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800160a:	f005 fbe9 	bl	8006de0 <HAL_GPIO_ReadPin>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d105      	bne.n	8001620 <HAL_TIM_PeriodElapsedCallback+0x80>
		  EXT_BTN_4_state = false;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 800161a:	4803      	ldr	r0, [pc, #12]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800161c:	f006 fd5c 	bl	80080d8 <HAL_TIM_Base_Stop>
	  }
  }
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20003e28 	.word	0x20003e28
 800162c:	40021400 	.word	0x40021400
 8001630:	20000000 	.word	0x20000000
 8001634:	40021000 	.word	0x40021000
 8001638:	20000001 	.word	0x20000001
 800163c:	20000002 	.word	0x20000002
 8001640:	20000003 	.word	0x20000003

08001644 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af02      	add	r7, sp, #8
 800164a:	6078      	str	r0, [r7, #4]
	for(i = 0; i < RX_BUFFER_SIZE; i++){
 800164c:	4bb6      	ldr	r3, [pc, #728]	; (8001928 <HAL_UART_RxCpltCallback+0x2e4>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	e1c3      	b.n	80019dc <HAL_UART_RxCpltCallback+0x398>
		if(rx_buffer[i] >= C2 && rx_buffer[i] <= B5){
 8001654:	4bb4      	ldr	r3, [pc, #720]	; (8001928 <HAL_UART_RxCpltCallback+0x2e4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4ab4      	ldr	r2, [pc, #720]	; (800192c <HAL_UART_RxCpltCallback+0x2e8>)
 800165a:	5cd3      	ldrb	r3, [r2, r3]
 800165c:	2b23      	cmp	r3, #35	; 0x23
 800165e:	f240 81b7 	bls.w	80019d0 <HAL_UART_RxCpltCallback+0x38c>
 8001662:	4bb1      	ldr	r3, [pc, #708]	; (8001928 <HAL_UART_RxCpltCallback+0x2e4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4ab1      	ldr	r2, [pc, #708]	; (800192c <HAL_UART_RxCpltCallback+0x2e8>)
 8001668:	5cd3      	ldrb	r3, [r2, r3]
 800166a:	2b53      	cmp	r3, #83	; 0x53
 800166c:	f200 81b0 	bhi.w	80019d0 <HAL_UART_RxCpltCallback+0x38c>
//				if(played_notes_buffer[j] == rx_buffer[i]){
//					repeated_note_flag = true;
//				}
//			}

			note_buffer[note_cnt] = rx_buffer[i];
 8001670:	4bad      	ldr	r3, [pc, #692]	; (8001928 <HAL_UART_RxCpltCallback+0x2e4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4aae      	ldr	r2, [pc, #696]	; (8001930 <HAL_UART_RxCpltCallback+0x2ec>)
 8001676:	7812      	ldrb	r2, [r2, #0]
 8001678:	4611      	mov	r1, r2
 800167a:	4aac      	ldr	r2, [pc, #688]	; (800192c <HAL_UART_RxCpltCallback+0x2e8>)
 800167c:	5cd2      	ldrb	r2, [r2, r3]
 800167e:	4bad      	ldr	r3, [pc, #692]	; (8001934 <HAL_UART_RxCpltCallback+0x2f0>)
 8001680:	545a      	strb	r2, [r3, r1]
			note_cnt++;
 8001682:	4bab      	ldr	r3, [pc, #684]	; (8001930 <HAL_UART_RxCpltCallback+0x2ec>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4ba9      	ldr	r3, [pc, #676]	; (8001930 <HAL_UART_RxCpltCallback+0x2ec>)
 800168c:	701a      	strb	r2, [r3, #0]
			received_note_buffer = rx_buffer[i];
 800168e:	4ba6      	ldr	r3, [pc, #664]	; (8001928 <HAL_UART_RxCpltCallback+0x2e4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4aa6      	ldr	r2, [pc, #664]	; (800192c <HAL_UART_RxCpltCallback+0x2e8>)
 8001694:	5cd2      	ldrb	r2, [r2, r3]
 8001696:	4ba8      	ldr	r3, [pc, #672]	; (8001938 <HAL_UART_RxCpltCallback+0x2f4>)
 8001698:	701a      	strb	r2, [r3, #0]

			if(note_cnt >= NOTE_BUFFER_SIZE){
 800169a:	4ba5      	ldr	r3, [pc, #660]	; (8001930 <HAL_UART_RxCpltCallback+0x2ec>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <HAL_UART_RxCpltCallback+0x64>
				note_cnt = 0;
 80016a2:	4ba3      	ldr	r3, [pc, #652]	; (8001930 <HAL_UART_RxCpltCallback+0x2ec>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
			}

			HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80016a8:	2100      	movs	r1, #0
 80016aa:	48a4      	ldr	r0, [pc, #656]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 80016ac:	f004 fcd2 	bl	8006054 <HAL_DAC_Stop_DMA>
			HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_2);
 80016b0:	2110      	movs	r1, #16
 80016b2:	48a2      	ldr	r0, [pc, #648]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 80016b4:	f004 fcce 	bl	8006054 <HAL_DAC_Stop_DMA>
			htim6.Init.Prescaler = PSC_LUT[received_note_buffer - C2] - 1;
 80016b8:	4b9f      	ldr	r3, [pc, #636]	; (8001938 <HAL_UART_RxCpltCallback+0x2f4>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	3b24      	subs	r3, #36	; 0x24
 80016be:	4aa0      	ldr	r2, [pc, #640]	; (8001940 <HAL_UART_RxCpltCallback+0x2fc>)
 80016c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b9e      	ldr	r3, [pc, #632]	; (8001944 <HAL_UART_RxCpltCallback+0x300>)
 80016ca:	605a      	str	r2, [r3, #4]
			htim6.Init.Period = ARR_LUT[received_note_buffer - C2] - 1;
 80016cc:	4b9a      	ldr	r3, [pc, #616]	; (8001938 <HAL_UART_RxCpltCallback+0x2f4>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	3b24      	subs	r3, #36	; 0x24
 80016d2:	4a9d      	ldr	r2, [pc, #628]	; (8001948 <HAL_UART_RxCpltCallback+0x304>)
 80016d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016d8:	3b01      	subs	r3, #1
 80016da:	461a      	mov	r2, r3
 80016dc:	4b99      	ldr	r3, [pc, #612]	; (8001944 <HAL_UART_RxCpltCallback+0x300>)
 80016de:	60da      	str	r2, [r3, #12]
			HAL_TIM_Base_Init(&htim6);
 80016e0:	4898      	ldr	r0, [pc, #608]	; (8001944 <HAL_UART_RxCpltCallback+0x300>)
 80016e2:	f006 fca3 	bl	800802c <HAL_TIM_Base_Init>
			  switch(selected_waveform){
 80016e6:	4b99      	ldr	r3, [pc, #612]	; (800194c <HAL_UART_RxCpltCallback+0x308>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	2b0f      	cmp	r3, #15
 80016ee:	f200 815c 	bhi.w	80019aa <HAL_UART_RxCpltCallback+0x366>
 80016f2:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <HAL_UART_RxCpltCallback+0xb4>)
 80016f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f8:	08001739 	.word	0x08001739
 80016fc:	0800175f 	.word	0x0800175f
 8001700:	08001785 	.word	0x08001785
 8001704:	080019ab 	.word	0x080019ab
 8001708:	080017ab 	.word	0x080017ab
 800170c:	080017d1 	.word	0x080017d1
 8001710:	080017f7 	.word	0x080017f7
 8001714:	0800181d 	.word	0x0800181d
 8001718:	08001843 	.word	0x08001843
 800171c:	08001869 	.word	0x08001869
 8001720:	0800188f 	.word	0x0800188f
 8001724:	080018b5 	.word	0x080018b5
 8001728:	080019ab 	.word	0x080019ab
 800172c:	080018db 	.word	0x080018db
 8001730:	08001901 	.word	0x08001901
 8001734:	08001985 	.word	0x08001985
				  case 1:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sawtooth_to_sine_modulation, NS, DAC_ALIGN_12B_R);
 8001738:	2300      	movs	r3, #0
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001740:	4a83      	ldr	r2, [pc, #524]	; (8001950 <HAL_UART_RxCpltCallback+0x30c>)
 8001742:	2100      	movs	r1, #0
 8001744:	487d      	ldr	r0, [pc, #500]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 8001746:	f004 fbd7 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sawtooth_to_sine_modulation, NS, DAC_ALIGN_12B_R);
 800174a:	2300      	movs	r3, #0
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001752:	4a7f      	ldr	r2, [pc, #508]	; (8001950 <HAL_UART_RxCpltCallback+0x30c>)
 8001754:	2110      	movs	r1, #16
 8001756:	4879      	ldr	r0, [pc, #484]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 8001758:	f004 fbce 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  break;
 800175c:	e139      	b.n	80019d2 <HAL_UART_RxCpltCallback+0x38e>
				  case 2:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sawtooth_to_square_modulation, NS, DAC_ALIGN_12B_R);
 800175e:	2300      	movs	r3, #0
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001766:	4a7b      	ldr	r2, [pc, #492]	; (8001954 <HAL_UART_RxCpltCallback+0x310>)
 8001768:	2100      	movs	r1, #0
 800176a:	4874      	ldr	r0, [pc, #464]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 800176c:	f004 fbc4 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sawtooth_to_square_modulation, NS, DAC_ALIGN_12B_R);
 8001770:	2300      	movs	r3, #0
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001778:	4a76      	ldr	r2, [pc, #472]	; (8001954 <HAL_UART_RxCpltCallback+0x310>)
 800177a:	2110      	movs	r1, #16
 800177c:	486f      	ldr	r0, [pc, #444]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 800177e:	f004 fbbb 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  break;
 8001782:	e126      	b.n	80019d2 <HAL_UART_RxCpltCallback+0x38e>
				  case 3:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sawtooth_to_triangle_modulation, NS, DAC_ALIGN_12B_R);
 8001784:	2300      	movs	r3, #0
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800178c:	4a72      	ldr	r2, [pc, #456]	; (8001958 <HAL_UART_RxCpltCallback+0x314>)
 800178e:	2100      	movs	r1, #0
 8001790:	486a      	ldr	r0, [pc, #424]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 8001792:	f004 fbb1 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sawtooth_to_triangle_modulation, NS, DAC_ALIGN_12B_R);
 8001796:	2300      	movs	r3, #0
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800179e:	4a6e      	ldr	r2, [pc, #440]	; (8001958 <HAL_UART_RxCpltCallback+0x314>)
 80017a0:	2110      	movs	r1, #16
 80017a2:	4866      	ldr	r0, [pc, #408]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 80017a4:	f004 fba8 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  break;
 80017a8:	e113      	b.n	80019d2 <HAL_UART_RxCpltCallback+0x38e>
				  case 5:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, triangle_to_sine_modulation, NS, DAC_ALIGN_12B_R);
 80017aa:	2300      	movs	r3, #0
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017b2:	4a6a      	ldr	r2, [pc, #424]	; (800195c <HAL_UART_RxCpltCallback+0x318>)
 80017b4:	2100      	movs	r1, #0
 80017b6:	4861      	ldr	r0, [pc, #388]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 80017b8:	f004 fb9e 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, triangle_to_sine_modulation, NS, DAC_ALIGN_12B_R);
 80017bc:	2300      	movs	r3, #0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017c4:	4a65      	ldr	r2, [pc, #404]	; (800195c <HAL_UART_RxCpltCallback+0x318>)
 80017c6:	2110      	movs	r1, #16
 80017c8:	485c      	ldr	r0, [pc, #368]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 80017ca:	f004 fb95 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  break;
 80017ce:	e100      	b.n	80019d2 <HAL_UART_RxCpltCallback+0x38e>
				  case 6:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, triangle_to_square_modulation, NS, DAC_ALIGN_12B_R);
 80017d0:	2300      	movs	r3, #0
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017d8:	4a61      	ldr	r2, [pc, #388]	; (8001960 <HAL_UART_RxCpltCallback+0x31c>)
 80017da:	2100      	movs	r1, #0
 80017dc:	4857      	ldr	r0, [pc, #348]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 80017de:	f004 fb8b 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, triangle_to_square_modulation, NS, DAC_ALIGN_12B_R);
 80017e2:	2300      	movs	r3, #0
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017ea:	4a5d      	ldr	r2, [pc, #372]	; (8001960 <HAL_UART_RxCpltCallback+0x31c>)
 80017ec:	2110      	movs	r1, #16
 80017ee:	4853      	ldr	r0, [pc, #332]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 80017f0:	f004 fb82 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  break;
 80017f4:	e0ed      	b.n	80019d2 <HAL_UART_RxCpltCallback+0x38e>
				  case 7:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, triangle_to_triangle_modulation, NS, DAC_ALIGN_12B_R);
 80017f6:	2300      	movs	r3, #0
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017fe:	4a59      	ldr	r2, [pc, #356]	; (8001964 <HAL_UART_RxCpltCallback+0x320>)
 8001800:	2100      	movs	r1, #0
 8001802:	484e      	ldr	r0, [pc, #312]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 8001804:	f004 fb78 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, triangle_to_triangle_modulation, NS, DAC_ALIGN_12B_R);
 8001808:	2300      	movs	r3, #0
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001810:	4a54      	ldr	r2, [pc, #336]	; (8001964 <HAL_UART_RxCpltCallback+0x320>)
 8001812:	2110      	movs	r1, #16
 8001814:	4849      	ldr	r0, [pc, #292]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 8001816:	f004 fb6f 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  break;
 800181a:	e0da      	b.n	80019d2 <HAL_UART_RxCpltCallback+0x38e>
				  case 8:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, triangle_to_sawtooth_modulation, NS, DAC_ALIGN_12B_R);
 800181c:	2300      	movs	r3, #0
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001824:	4a50      	ldr	r2, [pc, #320]	; (8001968 <HAL_UART_RxCpltCallback+0x324>)
 8001826:	2100      	movs	r1, #0
 8001828:	4844      	ldr	r0, [pc, #272]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 800182a:	f004 fb65 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, triangle_to_sawtooth_modulation, NS, DAC_ALIGN_12B_R);
 800182e:	2300      	movs	r3, #0
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001836:	4a4c      	ldr	r2, [pc, #304]	; (8001968 <HAL_UART_RxCpltCallback+0x324>)
 8001838:	2110      	movs	r1, #16
 800183a:	4840      	ldr	r0, [pc, #256]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 800183c:	f004 fb5c 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  break;
 8001840:	e0c7      	b.n	80019d2 <HAL_UART_RxCpltCallback+0x38e>
				  case 9:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, square_to_sine_modulation, NS, DAC_ALIGN_12B_R);
 8001842:	2300      	movs	r3, #0
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800184a:	4a48      	ldr	r2, [pc, #288]	; (800196c <HAL_UART_RxCpltCallback+0x328>)
 800184c:	2100      	movs	r1, #0
 800184e:	483b      	ldr	r0, [pc, #236]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 8001850:	f004 fb52 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, square_to_sine_modulation, NS, DAC_ALIGN_12B_R);
 8001854:	2300      	movs	r3, #0
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800185c:	4a43      	ldr	r2, [pc, #268]	; (800196c <HAL_UART_RxCpltCallback+0x328>)
 800185e:	2110      	movs	r1, #16
 8001860:	4836      	ldr	r0, [pc, #216]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 8001862:	f004 fb49 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  break;
 8001866:	e0b4      	b.n	80019d2 <HAL_UART_RxCpltCallback+0x38e>
				  case 10:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, square_to_square_modulation, NS, DAC_ALIGN_12B_R);
 8001868:	2300      	movs	r3, #0
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001870:	4a3f      	ldr	r2, [pc, #252]	; (8001970 <HAL_UART_RxCpltCallback+0x32c>)
 8001872:	2100      	movs	r1, #0
 8001874:	4831      	ldr	r0, [pc, #196]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 8001876:	f004 fb3f 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, square_to_square_modulation, NS, DAC_ALIGN_12B_R);
 800187a:	2300      	movs	r3, #0
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001882:	4a3b      	ldr	r2, [pc, #236]	; (8001970 <HAL_UART_RxCpltCallback+0x32c>)
 8001884:	2110      	movs	r1, #16
 8001886:	482d      	ldr	r0, [pc, #180]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 8001888:	f004 fb36 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  break;
 800188c:	e0a1      	b.n	80019d2 <HAL_UART_RxCpltCallback+0x38e>
				  case 11:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, square_to_triangle_modulation, NS, DAC_ALIGN_12B_R);
 800188e:	2300      	movs	r3, #0
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001896:	4a37      	ldr	r2, [pc, #220]	; (8001974 <HAL_UART_RxCpltCallback+0x330>)
 8001898:	2100      	movs	r1, #0
 800189a:	4828      	ldr	r0, [pc, #160]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 800189c:	f004 fb2c 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, square_to_triangle_modulation, NS, DAC_ALIGN_12B_R);
 80018a0:	2300      	movs	r3, #0
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018a8:	4a32      	ldr	r2, [pc, #200]	; (8001974 <HAL_UART_RxCpltCallback+0x330>)
 80018aa:	2110      	movs	r1, #16
 80018ac:	4823      	ldr	r0, [pc, #140]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 80018ae:	f004 fb23 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  break;
 80018b2:	e08e      	b.n	80019d2 <HAL_UART_RxCpltCallback+0x38e>
				  case 12:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, square_to_sawtooth_modulation, NS, DAC_ALIGN_12B_R);
 80018b4:	2300      	movs	r3, #0
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018bc:	4a2e      	ldr	r2, [pc, #184]	; (8001978 <HAL_UART_RxCpltCallback+0x334>)
 80018be:	2100      	movs	r1, #0
 80018c0:	481e      	ldr	r0, [pc, #120]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 80018c2:	f004 fb19 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, square_to_sawtooth_modulation, NS, DAC_ALIGN_12B_R);
 80018c6:	2300      	movs	r3, #0
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018ce:	4a2a      	ldr	r2, [pc, #168]	; (8001978 <HAL_UART_RxCpltCallback+0x334>)
 80018d0:	2110      	movs	r1, #16
 80018d2:	481a      	ldr	r0, [pc, #104]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 80018d4:	f004 fb10 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  break;
 80018d8:	e07b      	b.n	80019d2 <HAL_UART_RxCpltCallback+0x38e>
				  case 14:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, square_LUT, NS, DAC_ALIGN_12B_R);
 80018da:	2300      	movs	r3, #0
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018e2:	4a26      	ldr	r2, [pc, #152]	; (800197c <HAL_UART_RxCpltCallback+0x338>)
 80018e4:	2100      	movs	r1, #0
 80018e6:	4815      	ldr	r0, [pc, #84]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 80018e8:	f004 fb06 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, square_LUT, NS, DAC_ALIGN_12B_R);
 80018ec:	2300      	movs	r3, #0
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018f4:	4a21      	ldr	r2, [pc, #132]	; (800197c <HAL_UART_RxCpltCallback+0x338>)
 80018f6:	2110      	movs	r1, #16
 80018f8:	4810      	ldr	r0, [pc, #64]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 80018fa:	f004 fafd 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  break;
 80018fe:	e068      	b.n	80019d2 <HAL_UART_RxCpltCallback+0x38e>
				  case 15:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, triangle_LUT, NS, DAC_ALIGN_12B_R);
 8001900:	2300      	movs	r3, #0
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001908:	4a1d      	ldr	r2, [pc, #116]	; (8001980 <HAL_UART_RxCpltCallback+0x33c>)
 800190a:	2100      	movs	r1, #0
 800190c:	480b      	ldr	r0, [pc, #44]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 800190e:	f004 faf3 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, triangle_LUT, NS, DAC_ALIGN_12B_R);
 8001912:	2300      	movs	r3, #0
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800191a:	4a19      	ldr	r2, [pc, #100]	; (8001980 <HAL_UART_RxCpltCallback+0x33c>)
 800191c:	2110      	movs	r1, #16
 800191e:	4807      	ldr	r0, [pc, #28]	; (800193c <HAL_UART_RxCpltCallback+0x2f8>)
 8001920:	f004 faea 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  break;
 8001924:	e055      	b.n	80019d2 <HAL_UART_RxCpltCallback+0x38e>
 8001926:	bf00      	nop
 8001928:	20003bc8 	.word	0x20003bc8
 800192c:	20003bc0 	.word	0x20003bc0
 8001930:	20003bc5 	.word	0x20003bc5
 8001934:	20003bc4 	.word	0x20003bc4
 8001938:	20003bc6 	.word	0x20003bc6
 800193c:	20003d14 	.word	0x20003d14
 8001940:	20000fa4 	.word	0x20000fa4
 8001944:	20003d28 	.word	0x20003d28
 8001948:	2000101c 	.word	0x2000101c
 800194c:	20003bc7 	.word	0x20003bc7
 8001950:	20002fd4 	.word	0x20002fd4
 8001954:	200033bc 	.word	0x200033bc
 8001958:	200037a4 	.word	0x200037a4
 800195c:	20002034 	.word	0x20002034
 8001960:	2000241c 	.word	0x2000241c
 8001964:	20002804 	.word	0x20002804
 8001968:	20002bec 	.word	0x20002bec
 800196c:	20001094 	.word	0x20001094
 8001970:	2000147c 	.word	0x2000147c
 8001974:	20001864 	.word	0x20001864
 8001978:	20001c4c 	.word	0x20001c4c
 800197c:	20000bbc 	.word	0x20000bbc
 8001980:	200007d4 	.word	0x200007d4
				  case 16:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sawtooth_LUT, NS, DAC_ALIGN_12B_R);
 8001984:	2300      	movs	r3, #0
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800198c:	4a18      	ldr	r2, [pc, #96]	; (80019f0 <HAL_UART_RxCpltCallback+0x3ac>)
 800198e:	2100      	movs	r1, #0
 8001990:	4818      	ldr	r0, [pc, #96]	; (80019f4 <HAL_UART_RxCpltCallback+0x3b0>)
 8001992:	f004 fab1 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sawtooth_LUT, NS, DAC_ALIGN_12B_R);
 8001996:	2300      	movs	r3, #0
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800199e:	4a14      	ldr	r2, [pc, #80]	; (80019f0 <HAL_UART_RxCpltCallback+0x3ac>)
 80019a0:	2110      	movs	r1, #16
 80019a2:	4814      	ldr	r0, [pc, #80]	; (80019f4 <HAL_UART_RxCpltCallback+0x3b0>)
 80019a4:	f004 faa8 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  break;
 80019a8:	e013      	b.n	80019d2 <HAL_UART_RxCpltCallback+0x38e>
				  default:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_LUT, NS, DAC_ALIGN_12B_R);
 80019aa:	2300      	movs	r3, #0
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019b2:	4a11      	ldr	r2, [pc, #68]	; (80019f8 <HAL_UART_RxCpltCallback+0x3b4>)
 80019b4:	2100      	movs	r1, #0
 80019b6:	480f      	ldr	r0, [pc, #60]	; (80019f4 <HAL_UART_RxCpltCallback+0x3b0>)
 80019b8:	f004 fa9e 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sine_LUT, NS, DAC_ALIGN_12B_R);
 80019bc:	2300      	movs	r3, #0
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019c4:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <HAL_UART_RxCpltCallback+0x3b4>)
 80019c6:	2110      	movs	r1, #16
 80019c8:	480a      	ldr	r0, [pc, #40]	; (80019f4 <HAL_UART_RxCpltCallback+0x3b0>)
 80019ca:	f004 fa95 	bl	8005ef8 <HAL_DAC_Start_DMA>
					  break;
 80019ce:	e000      	b.n	80019d2 <HAL_UART_RxCpltCallback+0x38e>
			  }
		}
 80019d0:	bf00      	nop
	for(i = 0; i < RX_BUFFER_SIZE; i++){
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_UART_RxCpltCallback+0x3b8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	4a08      	ldr	r2, [pc, #32]	; (80019fc <HAL_UART_RxCpltCallback+0x3b8>)
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_UART_RxCpltCallback+0x3b8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f43f ae37 	beq.w	8001654 <HAL_UART_RxCpltCallback+0x10>
	}
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200003ec 	.word	0x200003ec
 80019f4:	20003d14 	.word	0x20003d14
 80019f8:	20000004 	.word	0x20000004
 80019fc:	20003bc8 	.word	0x20003bc8

08001a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_MspInit+0x44>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <HAL_MspInit+0x44>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <HAL_MspInit+0x44>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_MspInit+0x44>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <HAL_MspInit+0x44>)
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_MspInit+0x44>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800

08001a58 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a47      	ldr	r2, [pc, #284]	; (8001b94 <HAL_DAC_MspInit+0x13c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	f040 8088 	bne.w	8001b8c <HAL_DAC_MspInit+0x134>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001a7c:	4b46      	ldr	r3, [pc, #280]	; (8001b98 <HAL_DAC_MspInit+0x140>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	4a45      	ldr	r2, [pc, #276]	; (8001b98 <HAL_DAC_MspInit+0x140>)
 8001a82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a86:	6413      	str	r3, [r2, #64]	; 0x40
 8001a88:	4b43      	ldr	r3, [pc, #268]	; (8001b98 <HAL_DAC_MspInit+0x140>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a94:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <HAL_DAC_MspInit+0x140>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	4a3f      	ldr	r2, [pc, #252]	; (8001b98 <HAL_DAC_MspInit+0x140>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa0:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <HAL_DAC_MspInit+0x140>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001aac:	2330      	movs	r3, #48	; 0x30
 8001aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4619      	mov	r1, r3
 8001abe:	4837      	ldr	r0, [pc, #220]	; (8001b9c <HAL_DAC_MspInit+0x144>)
 8001ac0:	f004 ffe4 	bl	8006a8c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001ac4:	4b36      	ldr	r3, [pc, #216]	; (8001ba0 <HAL_DAC_MspInit+0x148>)
 8001ac6:	4a37      	ldr	r2, [pc, #220]	; (8001ba4 <HAL_DAC_MspInit+0x14c>)
 8001ac8:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001aca:	4b35      	ldr	r3, [pc, #212]	; (8001ba0 <HAL_DAC_MspInit+0x148>)
 8001acc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001ad0:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ad2:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <HAL_DAC_MspInit+0x148>)
 8001ad4:	2240      	movs	r2, #64	; 0x40
 8001ad6:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad8:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <HAL_DAC_MspInit+0x148>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001ade:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <HAL_DAC_MspInit+0x148>)
 8001ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ae4:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ae6:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <HAL_DAC_MspInit+0x148>)
 8001ae8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aec:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001aee:	4b2c      	ldr	r3, [pc, #176]	; (8001ba0 <HAL_DAC_MspInit+0x148>)
 8001af0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001af4:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001af6:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <HAL_DAC_MspInit+0x148>)
 8001af8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001afc:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8001afe:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <HAL_DAC_MspInit+0x148>)
 8001b00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b04:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <HAL_DAC_MspInit+0x148>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001b0c:	4824      	ldr	r0, [pc, #144]	; (8001ba0 <HAL_DAC_MspInit+0x148>)
 8001b0e:	f004 fbd7 	bl	80062c0 <HAL_DMA_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_DAC_MspInit+0xc4>
    {
      Error_Handler();
 8001b18:	f7ff ff72 	bl	8001a00 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a20      	ldr	r2, [pc, #128]	; (8001ba0 <HAL_DAC_MspInit+0x148>)
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	4a1f      	ldr	r2, [pc, #124]	; (8001ba0 <HAL_DAC_MspInit+0x148>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8001b28:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <HAL_DAC_MspInit+0x150>)
 8001b2a:	4a20      	ldr	r2, [pc, #128]	; (8001bac <HAL_DAC_MspInit+0x154>)
 8001b2c:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <HAL_DAC_MspInit+0x150>)
 8001b30:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001b34:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b36:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <HAL_DAC_MspInit+0x150>)
 8001b38:	2240      	movs	r2, #64	; 0x40
 8001b3a:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <HAL_DAC_MspInit+0x150>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8001b42:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_DAC_MspInit+0x150>)
 8001b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b48:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_DAC_MspInit+0x150>)
 8001b4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b50:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_DAC_MspInit+0x150>)
 8001b54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b58:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <HAL_DAC_MspInit+0x150>)
 8001b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b60:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_HIGH;
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_DAC_MspInit+0x150>)
 8001b64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b68:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_DAC_MspInit+0x150>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8001b70:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <HAL_DAC_MspInit+0x150>)
 8001b72:	f004 fba5 	bl	80062c0 <HAL_DMA_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_DAC_MspInit+0x128>
    {
      Error_Handler();
 8001b7c:	f7ff ff40 	bl	8001a00 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <HAL_DAC_MspInit+0x150>)
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <HAL_DAC_MspInit+0x150>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001b8c:	bf00      	nop
 8001b8e:	3728      	adds	r7, #40	; 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40007400 	.word	0x40007400
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020000 	.word	0x40020000
 8001ba0:	20003cb4 	.word	0x20003cb4
 8001ba4:	40026088 	.word	0x40026088
 8001ba8:	20003e68 	.word	0x20003e68
 8001bac:	400260a0 	.word	0x400260a0

08001bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <HAL_TIM_Base_MspInit+0x8c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d10c      	bne.n	8001bdc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_TIM_Base_MspInit+0x90>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a1e      	ldr	r2, [pc, #120]	; (8001c40 <HAL_TIM_Base_MspInit+0x90>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <HAL_TIM_Base_MspInit+0x90>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001bda:	e02a      	b.n	8001c32 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be4:	d114      	bne.n	8001c10 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <HAL_TIM_Base_MspInit+0x90>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a15      	ldr	r2, [pc, #84]	; (8001c40 <HAL_TIM_Base_MspInit+0x90>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <HAL_TIM_Base_MspInit+0x90>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	201c      	movs	r0, #28
 8001c04:	f004 f91f 	bl	8005e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c08:	201c      	movs	r0, #28
 8001c0a:	f004 f938 	bl	8005e7e <HAL_NVIC_EnableIRQ>
}
 8001c0e:	e010      	b.n	8001c32 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <HAL_TIM_Base_MspInit+0x94>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d10b      	bne.n	8001c32 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_TIM_Base_MspInit+0x90>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_TIM_Base_MspInit+0x90>)
 8001c20:	f043 0310 	orr.w	r3, r3, #16
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_TIM_Base_MspInit+0x90>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40001000 	.word	0x40001000

08001c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08c      	sub	sp, #48	; 0x30
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a55      	ldr	r2, [pc, #340]	; (8001dbc <HAL_UART_MspInit+0x174>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d175      	bne.n	8001d56 <HAL_UART_MspInit+0x10e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c6a:	4b55      	ldr	r3, [pc, #340]	; (8001dc0 <HAL_UART_MspInit+0x178>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a54      	ldr	r2, [pc, #336]	; (8001dc0 <HAL_UART_MspInit+0x178>)
 8001c70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b52      	ldr	r3, [pc, #328]	; (8001dc0 <HAL_UART_MspInit+0x178>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c7e:	61bb      	str	r3, [r7, #24]
 8001c80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	4b4f      	ldr	r3, [pc, #316]	; (8001dc0 <HAL_UART_MspInit+0x178>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a4e      	ldr	r2, [pc, #312]	; (8001dc0 <HAL_UART_MspInit+0x178>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b4c      	ldr	r3, [pc, #304]	; (8001dc0 <HAL_UART_MspInit+0x178>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9a:	4b49      	ldr	r3, [pc, #292]	; (8001dc0 <HAL_UART_MspInit+0x178>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a48      	ldr	r2, [pc, #288]	; (8001dc0 <HAL_UART_MspInit+0x178>)
 8001ca0:	f043 0304 	orr.w	r3, r3, #4
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_UART_MspInit+0x178>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 031c 	add.w	r3, r7, #28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	483d      	ldr	r0, [pc, #244]	; (8001dc4 <HAL_UART_MspInit+0x17c>)
 8001cce:	f004 fedd 	bl	8006a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce8:	f107 031c 	add.w	r3, r7, #28
 8001cec:	4619      	mov	r1, r3
 8001cee:	4836      	ldr	r0, [pc, #216]	; (8001dc8 <HAL_UART_MspInit+0x180>)
 8001cf0:	f004 fecc 	bl	8006a8c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001cf4:	4b35      	ldr	r3, [pc, #212]	; (8001dcc <HAL_UART_MspInit+0x184>)
 8001cf6:	4a36      	ldr	r2, [pc, #216]	; (8001dd0 <HAL_UART_MspInit+0x188>)
 8001cf8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001cfa:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <HAL_UART_MspInit+0x184>)
 8001cfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d00:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d02:	4b32      	ldr	r3, [pc, #200]	; (8001dcc <HAL_UART_MspInit+0x184>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d08:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <HAL_UART_MspInit+0x184>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d0e:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <HAL_UART_MspInit+0x184>)
 8001d10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d14:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d16:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <HAL_UART_MspInit+0x184>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d1c:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <HAL_UART_MspInit+0x184>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001d22:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <HAL_UART_MspInit+0x184>)
 8001d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d28:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d2a:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <HAL_UART_MspInit+0x184>)
 8001d2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d30:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <HAL_UART_MspInit+0x184>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001d38:	4824      	ldr	r0, [pc, #144]	; (8001dcc <HAL_UART_MspInit+0x184>)
 8001d3a:	f004 fac1 	bl	80062c0 <HAL_DMA_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001d44:	f7ff fe5c 	bl	8001a00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a20      	ldr	r2, [pc, #128]	; (8001dcc <HAL_UART_MspInit+0x184>)
 8001d4c:	66da      	str	r2, [r3, #108]	; 0x6c
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <HAL_UART_MspInit+0x184>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d54:	e02d      	b.n	8001db2 <HAL_UART_MspInit+0x16a>
  else if(huart->Instance==USART3)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1e      	ldr	r2, [pc, #120]	; (8001dd4 <HAL_UART_MspInit+0x18c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d128      	bne.n	8001db2 <HAL_UART_MspInit+0x16a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d60:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <HAL_UART_MspInit+0x178>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	4a16      	ldr	r2, [pc, #88]	; (8001dc0 <HAL_UART_MspInit+0x178>)
 8001d66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_UART_MspInit+0x178>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_UART_MspInit+0x178>)
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <HAL_UART_MspInit+0x178>)
 8001d7e:	f043 0308 	orr.w	r3, r3, #8
 8001d82:	6313      	str	r3, [r2, #48]	; 0x30
 8001d84:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_UART_MspInit+0x178>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001da2:	2307      	movs	r3, #7
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da6:	f107 031c 	add.w	r3, r7, #28
 8001daa:	4619      	mov	r1, r3
 8001dac:	480a      	ldr	r0, [pc, #40]	; (8001dd8 <HAL_UART_MspInit+0x190>)
 8001dae:	f004 fe6d 	bl	8006a8c <HAL_GPIO_Init>
}
 8001db2:	bf00      	nop
 8001db4:	3730      	adds	r7, #48	; 0x30
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40004c00 	.word	0x40004c00
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	20003bd4 	.word	0x20003bd4
 8001dd0:	40026040 	.word	0x40026040
 8001dd4:	40004800 	.word	0x40004800
 8001dd8:	40020c00 	.word	0x40020c00

08001ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dee:	e7fe      	b.n	8001dee <HardFault_Handler+0x4>

08001df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <MemManage_Handler+0x4>

08001df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <BusFault_Handler+0x4>

08001dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <UsageFault_Handler+0x4>

08001e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e30:	f003 feec 	bl	8005c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <DMA1_Stream2_IRQHandler+0x10>)
 8001e3e:	f004 fbbd 	bl	80065bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20003bd4 	.word	0x20003bd4

08001e4c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <DMA1_Stream5_IRQHandler+0x10>)
 8001e52:	f004 fbb3 	bl	80065bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20003cb4 	.word	0x20003cb4

08001e60 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <DMA1_Stream6_IRQHandler+0x10>)
 8001e66:	f004 fba9 	bl	80065bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20003e68 	.word	0x20003e68

08001e74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001e78:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e7c:	f004 ffe2 	bl	8006e44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <TIM2_IRQHandler+0x10>)
 8001e8a:	f006 f97b 	bl	8008184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20003e28 	.word	0x20003e28

08001e98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001e9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ea0:	f004 ffd0 	bl	8006e44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ea4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ea8:	f004 ffcc 	bl	8006e44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001eac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001eb0:	f004 ffc8 	bl	8006e44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <SystemInit+0x28>)
 8001ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec2:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <SystemInit+0x28>)
 8001ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <SystemInit+0x28>)
 8001ece:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ed2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <delay+0x2c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8001ef4:	bf00      	nop
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <delay+0x2c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d8f9      	bhi.n	8001ef6 <delay+0x12>
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20003d68 	.word	0x20003d68

08001f14 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001f20:	887b      	ldrh	r3, [r7, #2]
 8001f22:	2200      	movs	r2, #0
 8001f24:	4619      	mov	r1, r3
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f004 ff72 	bl	8006e10 <HAL_GPIO_WritePin>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001f40:	887b      	ldrh	r3, [r7, #2]
 8001f42:	2201      	movs	r2, #1
 8001f44:	4619      	mov	r1, r3
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f004 ff62 	bl	8006e10 <HAL_GPIO_WritePin>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001f60:	887b      	ldrh	r3, [r7, #2]
 8001f62:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	4619      	mov	r1, r3
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f004 fd8a 	bl	8006a8c <HAL_GPIO_Init>
}
 8001f78:	bf00      	nop
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001f8c:	887b      	ldrh	r3, [r7, #2]
 8001f8e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f90:	2301      	movs	r3, #1
 8001f92:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f004 fd72 	bl	8006a8c <HAL_GPIO_Init>
}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <width+0x14>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20003b90 	.word	0x20003b90

08001fc8 <height>:

uint16_t height(void)
{ return _height; }
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <height+0x14>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20003b92 	.word	0x20003b92

08001fe0 <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8001fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001ffe:	b21b      	sxth	r3, r3
 8002000:	4313      	orrs	r3, r2
 8002002:	b21a      	sxth	r2, r3
 8002004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	b21b      	sxth	r3, r3
 800200e:	4313      	orrs	r3, r2
 8002010:	b21b      	sxth	r3, r3
 8002012:	b29b      	uxth	r3, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 800202a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800202e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002032:	b21a      	sxth	r2, r3
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	115b      	asrs	r3, r3, #5
 8002038:	b21b      	sxth	r3, r3
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	b21b      	sxth	r3, r3
 8002040:	4313      	orrs	r3, r2
 8002042:	b21a      	sxth	r2, r3
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	105b      	asrs	r3, r3, #1
 8002048:	b21b      	sxth	r3, r3
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	b21b      	sxth	r3, r3
 8002050:	4313      	orrs	r3, r2
 8002052:	b21b      	sxth	r3, r3
 8002054:	b29b      	uxth	r3, r3
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	121b      	asrs	r3, r3, #8
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f023 0307 	bic.w	r3, r3, #7
 8002076:	b2db      	uxtb	r3, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	10db      	asrs	r3, r3, #3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f023 0303 	bic.w	r3, r3, #3
 8002098:	b2db      	uxtb	r3, r3
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	b2db      	uxtb	r3, r3
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
 80020ce:	460b      	mov	r3, r1
 80020d0:	71bb      	strb	r3, [r7, #6]
 80020d2:	4613      	mov	r3, r2
 80020d4:	717b      	strb	r3, [r7, #5]
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	b21a      	sxth	r2, r3
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <color565+0x48>)
 80020de:	4013      	ands	r3, r2
 80020e0:	b21a      	sxth	r2, r3
 80020e2:	79bb      	ldrb	r3, [r7, #6]
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	797b      	ldrb	r3, [r7, #5]
 80020f4:	08db      	lsrs	r3, r3, #3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	b21b      	sxth	r3, r3
 80020fa:	4313      	orrs	r3, r2
 80020fc:	b21b      	sxth	r3, r3
 80020fe:	b29b      	uxth	r3, r3
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	fffff800 	.word	0xfffff800

08002110 <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af02      	add	r7, sp, #8
 8002116:	4603      	mov	r3, r0
 8002118:	460a      	mov	r2, r1
 800211a:	80fb      	strh	r3, [r7, #6]
 800211c:	4613      	mov	r3, r2
 800211e:	80bb      	strh	r3, [r7, #4]
 8002120:	f107 020e 	add.w	r2, r7, #14
 8002124:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002128:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800212c:	2301      	movs	r3, #1
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	2301      	movs	r3, #1
 8002132:	f001 fbef 	bl	8003914 <readGRAM>
 8002136:	89fb      	ldrh	r3, [r7, #14]
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	460a      	mov	r2, r1
 800214a:	80fb      	strh	r3, [r7, #6]
 800214c:	4613      	mov	r3, r2
 800214e:	80bb      	strh	r3, [r7, #4]
 8002150:	88ba      	ldrh	r2, [r7, #4]
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f964 	bl	8002424 <writecmddata>
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	80fb      	strh	r3, [r7, #6]
 8002170:	4613      	mov	r3, r2
 8002172:	717b      	strb	r3, [r7, #5]
 8002174:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f000 fa9d 	bl	80026bc <WriteCmdParamN>
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <setReadDir>:


//extern GFXfont *gfxFont;

void setReadDir (void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8002190:	2102      	movs	r1, #2
 8002192:	4811      	ldr	r0, [pc, #68]	; (80021d8 <setReadDir+0x4c>)
 8002194:	f7ff fede 	bl	8001f54 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8002198:	f44f 7100 	mov.w	r1, #512	; 0x200
 800219c:	480f      	ldr	r0, [pc, #60]	; (80021dc <setReadDir+0x50>)
 800219e:	f7ff fed9 	bl	8001f54 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 80021a2:	2180      	movs	r1, #128	; 0x80
 80021a4:	480d      	ldr	r0, [pc, #52]	; (80021dc <setReadDir+0x50>)
 80021a6:	f7ff fed5 	bl	8001f54 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 80021aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ae:	480b      	ldr	r0, [pc, #44]	; (80021dc <setReadDir+0x50>)
 80021b0:	f7ff fed0 	bl	8001f54 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 80021b4:	2108      	movs	r1, #8
 80021b6:	480a      	ldr	r0, [pc, #40]	; (80021e0 <setReadDir+0x54>)
 80021b8:	f7ff fecc 	bl	8001f54 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 80021bc:	2140      	movs	r1, #64	; 0x40
 80021be:	4808      	ldr	r0, [pc, #32]	; (80021e0 <setReadDir+0x54>)
 80021c0:	f7ff fec8 	bl	8001f54 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 80021c4:	2120      	movs	r1, #32
 80021c6:	4806      	ldr	r0, [pc, #24]	; (80021e0 <setReadDir+0x54>)
 80021c8:	f7ff fec4 	bl	8001f54 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 80021cc:	2110      	movs	r1, #16
 80021ce:	4804      	ldr	r0, [pc, #16]	; (80021e0 <setReadDir+0x54>)
 80021d0:	f7ff fec0 	bl	8001f54 <PIN_INPUT>
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021800 	.word	0x40021800
 80021dc:	40021400 	.word	0x40021400
 80021e0:	40021000 	.word	0x40021000

080021e4 <setWriteDir>:

void setWriteDir (void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 80021e8:	2102      	movs	r1, #2
 80021ea:	4811      	ldr	r0, [pc, #68]	; (8002230 <setWriteDir+0x4c>)
 80021ec:	f7ff fec8 	bl	8001f80 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 80021f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021f4:	480f      	ldr	r0, [pc, #60]	; (8002234 <setWriteDir+0x50>)
 80021f6:	f7ff fec3 	bl	8001f80 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 80021fa:	2180      	movs	r1, #128	; 0x80
 80021fc:	480d      	ldr	r0, [pc, #52]	; (8002234 <setWriteDir+0x50>)
 80021fe:	f7ff febf 	bl	8001f80 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8002202:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002206:	480b      	ldr	r0, [pc, #44]	; (8002234 <setWriteDir+0x50>)
 8002208:	f7ff feba 	bl	8001f80 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 800220c:	2108      	movs	r1, #8
 800220e:	480a      	ldr	r0, [pc, #40]	; (8002238 <setWriteDir+0x54>)
 8002210:	f7ff feb6 	bl	8001f80 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8002214:	2140      	movs	r1, #64	; 0x40
 8002216:	4808      	ldr	r0, [pc, #32]	; (8002238 <setWriteDir+0x54>)
 8002218:	f7ff feb2 	bl	8001f80 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 800221c:	2120      	movs	r1, #32
 800221e:	4806      	ldr	r0, [pc, #24]	; (8002238 <setWriteDir+0x54>)
 8002220:	f7ff feae 	bl	8001f80 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8002224:	2110      	movs	r1, #16
 8002226:	4804      	ldr	r0, [pc, #16]	; (8002238 <setWriteDir+0x54>)
 8002228:	f7ff feaa 	bl	8001f80 <PIN_OUTPUT>
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021800 	.word	0x40021800
 8002234:	40021400 	.word	0x40021400
 8002238:	40021000 	.word	0x40021000

0800223c <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff0a 	bl	8002062 <color565_to_r>
 800224e:	4603      	mov	r3, r0
 8002250:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 8002252:	88fb      	ldrh	r3, [r7, #6]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff15 	bl	8002084 <color565_to_g>
 800225a:	4603      	mov	r3, r0
 800225c:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff20 	bl	80020a6 <color565_to_b>
 8002266:	4603      	mov	r3, r0
 8002268:	737b      	strb	r3, [r7, #13]
    write8(r);
 800226a:	4b6b      	ldr	r3, [pc, #428]	; (8002418 <write24+0x1dc>)
 800226c:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002270:	619a      	str	r2, [r3, #24]
 8002272:	4b6a      	ldr	r3, [pc, #424]	; (800241c <write24+0x1e0>)
 8002274:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002278:	619a      	str	r2, [r3, #24]
 800227a:	4b69      	ldr	r3, [pc, #420]	; (8002420 <write24+0x1e4>)
 800227c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002280:	619a      	str	r2, [r3, #24]
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4a66      	ldr	r2, [pc, #408]	; (8002420 <write24+0x1e4>)
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	6193      	str	r3, [r2, #24]
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	015b      	lsls	r3, r3, #5
 800229a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229e:	431a      	orrs	r2, r3
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	015b      	lsls	r3, r3, #5
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	431a      	orrs	r2, r3
 80022aa:	4b5c      	ldr	r3, [pc, #368]	; (800241c <write24+0x1e0>)
 80022ac:	619a      	str	r2, [r3, #24]
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	105b      	asrs	r3, r3, #1
 80022b2:	f003 0208 	and.w	r2, r3, #8
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022be:	431a      	orrs	r2, r3
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	105b      	asrs	r3, r3, #1
 80022c4:	f003 0320 	and.w	r3, r3, #32
 80022c8:	431a      	orrs	r2, r3
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	10db      	asrs	r3, r3, #3
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	431a      	orrs	r2, r3
 80022d4:	4b50      	ldr	r3, [pc, #320]	; (8002418 <write24+0x1dc>)
 80022d6:	619a      	str	r2, [r3, #24]
 80022d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022dc:	484e      	ldr	r0, [pc, #312]	; (8002418 <write24+0x1dc>)
 80022de:	f7ff fe19 	bl	8001f14 <PIN_LOW>
 80022e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022e6:	484c      	ldr	r0, [pc, #304]	; (8002418 <write24+0x1dc>)
 80022e8:	f7ff fe24 	bl	8001f34 <PIN_HIGH>
 80022ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022f0:	4849      	ldr	r0, [pc, #292]	; (8002418 <write24+0x1dc>)
 80022f2:	f7ff fe1f 	bl	8001f34 <PIN_HIGH>
    write8(g);
 80022f6:	4b48      	ldr	r3, [pc, #288]	; (8002418 <write24+0x1dc>)
 80022f8:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80022fc:	619a      	str	r2, [r3, #24]
 80022fe:	4b47      	ldr	r3, [pc, #284]	; (800241c <write24+0x1e0>)
 8002300:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002304:	619a      	str	r2, [r3, #24]
 8002306:	4b46      	ldr	r3, [pc, #280]	; (8002420 <write24+0x1e4>)
 8002308:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800230c:	619a      	str	r2, [r3, #24]
 800230e:	7bbb      	ldrb	r3, [r7, #14]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4a43      	ldr	r2, [pc, #268]	; (8002420 <write24+0x1e4>)
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	6193      	str	r3, [r2, #24]
 800231a:	7bbb      	ldrb	r3, [r7, #14]
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002322:	7bbb      	ldrb	r3, [r7, #14]
 8002324:	015b      	lsls	r3, r3, #5
 8002326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232a:	431a      	orrs	r2, r3
 800232c:	7bbb      	ldrb	r3, [r7, #14]
 800232e:	015b      	lsls	r3, r3, #5
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	431a      	orrs	r2, r3
 8002336:	4b39      	ldr	r3, [pc, #228]	; (800241c <write24+0x1e0>)
 8002338:	619a      	str	r2, [r3, #24]
 800233a:	7bbb      	ldrb	r3, [r7, #14]
 800233c:	105b      	asrs	r3, r3, #1
 800233e:	f003 0208 	and.w	r2, r3, #8
 8002342:	7bbb      	ldrb	r3, [r7, #14]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	431a      	orrs	r2, r3
 800234c:	7bbb      	ldrb	r3, [r7, #14]
 800234e:	105b      	asrs	r3, r3, #1
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	431a      	orrs	r2, r3
 8002356:	7bbb      	ldrb	r3, [r7, #14]
 8002358:	10db      	asrs	r3, r3, #3
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	431a      	orrs	r2, r3
 8002360:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <write24+0x1dc>)
 8002362:	619a      	str	r2, [r3, #24]
 8002364:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002368:	482b      	ldr	r0, [pc, #172]	; (8002418 <write24+0x1dc>)
 800236a:	f7ff fdd3 	bl	8001f14 <PIN_LOW>
 800236e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002372:	4829      	ldr	r0, [pc, #164]	; (8002418 <write24+0x1dc>)
 8002374:	f7ff fdde 	bl	8001f34 <PIN_HIGH>
 8002378:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800237c:	4826      	ldr	r0, [pc, #152]	; (8002418 <write24+0x1dc>)
 800237e:	f7ff fdd9 	bl	8001f34 <PIN_HIGH>
    write8(b);
 8002382:	4b25      	ldr	r3, [pc, #148]	; (8002418 <write24+0x1dc>)
 8002384:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002388:	619a      	str	r2, [r3, #24]
 800238a:	4b24      	ldr	r3, [pc, #144]	; (800241c <write24+0x1e0>)
 800238c:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002390:	619a      	str	r2, [r3, #24]
 8002392:	4b23      	ldr	r3, [pc, #140]	; (8002420 <write24+0x1e4>)
 8002394:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002398:	619a      	str	r2, [r3, #24]
 800239a:	7b7b      	ldrb	r3, [r7, #13]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4a20      	ldr	r2, [pc, #128]	; (8002420 <write24+0x1e4>)
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	6193      	str	r3, [r2, #24]
 80023a6:	7b7b      	ldrb	r3, [r7, #13]
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80023ae:	7b7b      	ldrb	r3, [r7, #13]
 80023b0:	015b      	lsls	r3, r3, #5
 80023b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b6:	431a      	orrs	r2, r3
 80023b8:	7b7b      	ldrb	r3, [r7, #13]
 80023ba:	015b      	lsls	r3, r3, #5
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	431a      	orrs	r2, r3
 80023c2:	4b16      	ldr	r3, [pc, #88]	; (800241c <write24+0x1e0>)
 80023c4:	619a      	str	r2, [r3, #24]
 80023c6:	7b7b      	ldrb	r3, [r7, #13]
 80023c8:	105b      	asrs	r3, r3, #1
 80023ca:	f003 0208 	and.w	r2, r3, #8
 80023ce:	7b7b      	ldrb	r3, [r7, #13]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d6:	431a      	orrs	r2, r3
 80023d8:	7b7b      	ldrb	r3, [r7, #13]
 80023da:	105b      	asrs	r3, r3, #1
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	431a      	orrs	r2, r3
 80023e2:	7b7b      	ldrb	r3, [r7, #13]
 80023e4:	10db      	asrs	r3, r3, #3
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	431a      	orrs	r2, r3
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <write24+0x1dc>)
 80023ee:	619a      	str	r2, [r3, #24]
 80023f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023f4:	4808      	ldr	r0, [pc, #32]	; (8002418 <write24+0x1dc>)
 80023f6:	f7ff fd8d 	bl	8001f14 <PIN_LOW>
 80023fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023fe:	4806      	ldr	r0, [pc, #24]	; (8002418 <write24+0x1dc>)
 8002400:	f7ff fd98 	bl	8001f34 <PIN_HIGH>
 8002404:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002408:	4803      	ldr	r0, [pc, #12]	; (8002418 <write24+0x1dc>)
 800240a:	f7ff fd93 	bl	8001f34 <PIN_HIGH>
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	40021400 	.word	0x40021400
 8002420:	40021800 	.word	0x40021800

08002424 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	460a      	mov	r2, r1
 800242e:	80fb      	strh	r3, [r7, #6]
 8002430:	4613      	mov	r3, r2
 8002432:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 8002434:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002438:	489c      	ldr	r0, [pc, #624]	; (80026ac <writecmddata+0x288>)
 800243a:	f7ff fd6b 	bl	8001f14 <PIN_LOW>
    WriteCmd(cmd);
 800243e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002442:	489b      	ldr	r0, [pc, #620]	; (80026b0 <writecmddata+0x28c>)
 8002444:	f7ff fd66 	bl	8001f14 <PIN_LOW>
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	b29b      	uxth	r3, r3
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	73bb      	strb	r3, [r7, #14]
 8002454:	4b96      	ldr	r3, [pc, #600]	; (80026b0 <writecmddata+0x28c>)
 8002456:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800245a:	619a      	str	r2, [r3, #24]
 800245c:	4b95      	ldr	r3, [pc, #596]	; (80026b4 <writecmddata+0x290>)
 800245e:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002462:	619a      	str	r2, [r3, #24]
 8002464:	4b94      	ldr	r3, [pc, #592]	; (80026b8 <writecmddata+0x294>)
 8002466:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800246a:	619a      	str	r2, [r3, #24]
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4a91      	ldr	r2, [pc, #580]	; (80026b8 <writecmddata+0x294>)
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	6193      	str	r3, [r2, #24]
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	015b      	lsls	r3, r3, #5
 8002484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002488:	431a      	orrs	r2, r3
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	015b      	lsls	r3, r3, #5
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	431a      	orrs	r2, r3
 8002494:	4b87      	ldr	r3, [pc, #540]	; (80026b4 <writecmddata+0x290>)
 8002496:	619a      	str	r2, [r3, #24]
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	105b      	asrs	r3, r3, #1
 800249c:	f003 0208 	and.w	r2, r3, #8
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a8:	431a      	orrs	r2, r3
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	105b      	asrs	r3, r3, #1
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	431a      	orrs	r2, r3
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	10db      	asrs	r3, r3, #3
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	431a      	orrs	r2, r3
 80024be:	4b7c      	ldr	r3, [pc, #496]	; (80026b0 <writecmddata+0x28c>)
 80024c0:	619a      	str	r2, [r3, #24]
 80024c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024c6:	487a      	ldr	r0, [pc, #488]	; (80026b0 <writecmddata+0x28c>)
 80024c8:	f7ff fd24 	bl	8001f14 <PIN_LOW>
 80024cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024d0:	4877      	ldr	r0, [pc, #476]	; (80026b0 <writecmddata+0x28c>)
 80024d2:	f7ff fd2f 	bl	8001f34 <PIN_HIGH>
 80024d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024da:	4875      	ldr	r0, [pc, #468]	; (80026b0 <writecmddata+0x28c>)
 80024dc:	f7ff fd2a 	bl	8001f34 <PIN_HIGH>
 80024e0:	4b73      	ldr	r3, [pc, #460]	; (80026b0 <writecmddata+0x28c>)
 80024e2:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80024e6:	619a      	str	r2, [r3, #24]
 80024e8:	4b72      	ldr	r3, [pc, #456]	; (80026b4 <writecmddata+0x290>)
 80024ea:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80024ee:	619a      	str	r2, [r3, #24]
 80024f0:	4b71      	ldr	r3, [pc, #452]	; (80026b8 <writecmddata+0x294>)
 80024f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024f6:	619a      	str	r2, [r3, #24]
 80024f8:	7bbb      	ldrb	r3, [r7, #14]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4a6e      	ldr	r2, [pc, #440]	; (80026b8 <writecmddata+0x294>)
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	6193      	str	r3, [r2, #24]
 8002504:	7bbb      	ldrb	r3, [r7, #14]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800250c:	7bbb      	ldrb	r3, [r7, #14]
 800250e:	015b      	lsls	r3, r3, #5
 8002510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002514:	431a      	orrs	r2, r3
 8002516:	7bbb      	ldrb	r3, [r7, #14]
 8002518:	015b      	lsls	r3, r3, #5
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	431a      	orrs	r2, r3
 8002520:	4b64      	ldr	r3, [pc, #400]	; (80026b4 <writecmddata+0x290>)
 8002522:	619a      	str	r2, [r3, #24]
 8002524:	7bbb      	ldrb	r3, [r7, #14]
 8002526:	105b      	asrs	r3, r3, #1
 8002528:	f003 0208 	and.w	r2, r3, #8
 800252c:	7bbb      	ldrb	r3, [r7, #14]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002534:	431a      	orrs	r2, r3
 8002536:	7bbb      	ldrb	r3, [r7, #14]
 8002538:	105b      	asrs	r3, r3, #1
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	431a      	orrs	r2, r3
 8002540:	7bbb      	ldrb	r3, [r7, #14]
 8002542:	10db      	asrs	r3, r3, #3
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	431a      	orrs	r2, r3
 800254a:	4b59      	ldr	r3, [pc, #356]	; (80026b0 <writecmddata+0x28c>)
 800254c:	619a      	str	r2, [r3, #24]
 800254e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002552:	4857      	ldr	r0, [pc, #348]	; (80026b0 <writecmddata+0x28c>)
 8002554:	f7ff fcde 	bl	8001f14 <PIN_LOW>
 8002558:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800255c:	4854      	ldr	r0, [pc, #336]	; (80026b0 <writecmddata+0x28c>)
 800255e:	f7ff fce9 	bl	8001f34 <PIN_HIGH>
 8002562:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002566:	4852      	ldr	r0, [pc, #328]	; (80026b0 <writecmddata+0x28c>)
 8002568:	f7ff fce4 	bl	8001f34 <PIN_HIGH>
 800256c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002570:	484f      	ldr	r0, [pc, #316]	; (80026b0 <writecmddata+0x28c>)
 8002572:	f7ff fcdf 	bl	8001f34 <PIN_HIGH>
    WriteData(dat);
 8002576:	88bb      	ldrh	r3, [r7, #4]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	b29b      	uxth	r3, r3
 800257c:	737b      	strb	r3, [r7, #13]
 800257e:	88bb      	ldrh	r3, [r7, #4]
 8002580:	733b      	strb	r3, [r7, #12]
 8002582:	4b4b      	ldr	r3, [pc, #300]	; (80026b0 <writecmddata+0x28c>)
 8002584:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002588:	619a      	str	r2, [r3, #24]
 800258a:	4b4a      	ldr	r3, [pc, #296]	; (80026b4 <writecmddata+0x290>)
 800258c:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002590:	619a      	str	r2, [r3, #24]
 8002592:	4b49      	ldr	r3, [pc, #292]	; (80026b8 <writecmddata+0x294>)
 8002594:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002598:	619a      	str	r2, [r3, #24]
 800259a:	7b7b      	ldrb	r3, [r7, #13]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4a46      	ldr	r2, [pc, #280]	; (80026b8 <writecmddata+0x294>)
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	6193      	str	r3, [r2, #24]
 80025a6:	7b7b      	ldrb	r3, [r7, #13]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80025ae:	7b7b      	ldrb	r3, [r7, #13]
 80025b0:	015b      	lsls	r3, r3, #5
 80025b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b6:	431a      	orrs	r2, r3
 80025b8:	7b7b      	ldrb	r3, [r7, #13]
 80025ba:	015b      	lsls	r3, r3, #5
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	431a      	orrs	r2, r3
 80025c2:	4b3c      	ldr	r3, [pc, #240]	; (80026b4 <writecmddata+0x290>)
 80025c4:	619a      	str	r2, [r3, #24]
 80025c6:	7b7b      	ldrb	r3, [r7, #13]
 80025c8:	105b      	asrs	r3, r3, #1
 80025ca:	f003 0208 	and.w	r2, r3, #8
 80025ce:	7b7b      	ldrb	r3, [r7, #13]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	431a      	orrs	r2, r3
 80025d8:	7b7b      	ldrb	r3, [r7, #13]
 80025da:	105b      	asrs	r3, r3, #1
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	431a      	orrs	r2, r3
 80025e2:	7b7b      	ldrb	r3, [r7, #13]
 80025e4:	10db      	asrs	r3, r3, #3
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	431a      	orrs	r2, r3
 80025ec:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <writecmddata+0x28c>)
 80025ee:	619a      	str	r2, [r3, #24]
 80025f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025f4:	482e      	ldr	r0, [pc, #184]	; (80026b0 <writecmddata+0x28c>)
 80025f6:	f7ff fc8d 	bl	8001f14 <PIN_LOW>
 80025fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025fe:	482c      	ldr	r0, [pc, #176]	; (80026b0 <writecmddata+0x28c>)
 8002600:	f7ff fc98 	bl	8001f34 <PIN_HIGH>
 8002604:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002608:	4829      	ldr	r0, [pc, #164]	; (80026b0 <writecmddata+0x28c>)
 800260a:	f7ff fc93 	bl	8001f34 <PIN_HIGH>
 800260e:	4b28      	ldr	r3, [pc, #160]	; (80026b0 <writecmddata+0x28c>)
 8002610:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002614:	619a      	str	r2, [r3, #24]
 8002616:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <writecmddata+0x290>)
 8002618:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800261c:	619a      	str	r2, [r3, #24]
 800261e:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <writecmddata+0x294>)
 8002620:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002624:	619a      	str	r2, [r3, #24]
 8002626:	7b3b      	ldrb	r3, [r7, #12]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4a23      	ldr	r2, [pc, #140]	; (80026b8 <writecmddata+0x294>)
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	6193      	str	r3, [r2, #24]
 8002632:	7b3b      	ldrb	r3, [r7, #12]
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800263a:	7b3b      	ldrb	r3, [r7, #12]
 800263c:	015b      	lsls	r3, r3, #5
 800263e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002642:	431a      	orrs	r2, r3
 8002644:	7b3b      	ldrb	r3, [r7, #12]
 8002646:	015b      	lsls	r3, r3, #5
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	431a      	orrs	r2, r3
 800264e:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <writecmddata+0x290>)
 8002650:	619a      	str	r2, [r3, #24]
 8002652:	7b3b      	ldrb	r3, [r7, #12]
 8002654:	105b      	asrs	r3, r3, #1
 8002656:	f003 0208 	and.w	r2, r3, #8
 800265a:	7b3b      	ldrb	r3, [r7, #12]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002662:	431a      	orrs	r2, r3
 8002664:	7b3b      	ldrb	r3, [r7, #12]
 8002666:	105b      	asrs	r3, r3, #1
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	431a      	orrs	r2, r3
 800266e:	7b3b      	ldrb	r3, [r7, #12]
 8002670:	10db      	asrs	r3, r3, #3
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	431a      	orrs	r2, r3
 8002678:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <writecmddata+0x28c>)
 800267a:	619a      	str	r2, [r3, #24]
 800267c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002680:	480b      	ldr	r0, [pc, #44]	; (80026b0 <writecmddata+0x28c>)
 8002682:	f7ff fc47 	bl	8001f14 <PIN_LOW>
 8002686:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800268a:	4809      	ldr	r0, [pc, #36]	; (80026b0 <writecmddata+0x28c>)
 800268c:	f7ff fc52 	bl	8001f34 <PIN_HIGH>
 8002690:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002694:	4806      	ldr	r0, [pc, #24]	; (80026b0 <writecmddata+0x28c>)
 8002696:	f7ff fc4d 	bl	8001f34 <PIN_HIGH>
    CS_IDLE;
 800269a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800269e:	4803      	ldr	r0, [pc, #12]	; (80026ac <writecmddata+0x288>)
 80026a0:	f7ff fc48 	bl	8001f34 <PIN_HIGH>
}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40021400 	.word	0x40021400
 80026b8:	40021800 	.word	0x40021800

080026bc <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	603a      	str	r2, [r7, #0]
 80026c6:	80fb      	strh	r3, [r7, #6]
 80026c8:	460b      	mov	r3, r1
 80026ca:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 80026cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026d0:	484f      	ldr	r0, [pc, #316]	; (8002810 <WriteCmdParamN+0x154>)
 80026d2:	f7ff fc1f 	bl	8001f14 <PIN_LOW>
    WriteCmd(cmd);
 80026d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026da:	484e      	ldr	r0, [pc, #312]	; (8002814 <WriteCmdParamN+0x158>)
 80026dc:	f7ff fc1a 	bl	8001f14 <PIN_LOW>
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	0a1b      	lsrs	r3, r3, #8
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	88fb      	ldrh	r3, [r7, #6]
 80026ea:	73bb      	strb	r3, [r7, #14]
 80026ec:	4b49      	ldr	r3, [pc, #292]	; (8002814 <WriteCmdParamN+0x158>)
 80026ee:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80026f2:	619a      	str	r2, [r3, #24]
 80026f4:	4b48      	ldr	r3, [pc, #288]	; (8002818 <WriteCmdParamN+0x15c>)
 80026f6:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80026fa:	619a      	str	r2, [r3, #24]
 80026fc:	4b47      	ldr	r3, [pc, #284]	; (800281c <WriteCmdParamN+0x160>)
 80026fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002702:	619a      	str	r2, [r3, #24]
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4a44      	ldr	r2, [pc, #272]	; (800281c <WriteCmdParamN+0x160>)
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	6193      	str	r3, [r2, #24]
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	015b      	lsls	r3, r3, #5
 800271c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002720:	431a      	orrs	r2, r3
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	015b      	lsls	r3, r3, #5
 8002726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272a:	431a      	orrs	r2, r3
 800272c:	4b3a      	ldr	r3, [pc, #232]	; (8002818 <WriteCmdParamN+0x15c>)
 800272e:	619a      	str	r2, [r3, #24]
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	105b      	asrs	r3, r3, #1
 8002734:	f003 0208 	and.w	r2, r3, #8
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002740:	431a      	orrs	r2, r3
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	105b      	asrs	r3, r3, #1
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	431a      	orrs	r2, r3
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	10db      	asrs	r3, r3, #3
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	431a      	orrs	r2, r3
 8002756:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <WriteCmdParamN+0x158>)
 8002758:	619a      	str	r2, [r3, #24]
 800275a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800275e:	482d      	ldr	r0, [pc, #180]	; (8002814 <WriteCmdParamN+0x158>)
 8002760:	f7ff fbd8 	bl	8001f14 <PIN_LOW>
 8002764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002768:	482a      	ldr	r0, [pc, #168]	; (8002814 <WriteCmdParamN+0x158>)
 800276a:	f7ff fbe3 	bl	8001f34 <PIN_HIGH>
 800276e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002772:	4828      	ldr	r0, [pc, #160]	; (8002814 <WriteCmdParamN+0x158>)
 8002774:	f7ff fbde 	bl	8001f34 <PIN_HIGH>
 8002778:	4b26      	ldr	r3, [pc, #152]	; (8002814 <WriteCmdParamN+0x158>)
 800277a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800277e:	619a      	str	r2, [r3, #24]
 8002780:	4b25      	ldr	r3, [pc, #148]	; (8002818 <WriteCmdParamN+0x15c>)
 8002782:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002786:	619a      	str	r2, [r3, #24]
 8002788:	4b24      	ldr	r3, [pc, #144]	; (800281c <WriteCmdParamN+0x160>)
 800278a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800278e:	619a      	str	r2, [r3, #24]
 8002790:	7bbb      	ldrb	r3, [r7, #14]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4a21      	ldr	r2, [pc, #132]	; (800281c <WriteCmdParamN+0x160>)
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	6193      	str	r3, [r2, #24]
 800279c:	7bbb      	ldrb	r3, [r7, #14]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80027a4:	7bbb      	ldrb	r3, [r7, #14]
 80027a6:	015b      	lsls	r3, r3, #5
 80027a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ac:	431a      	orrs	r2, r3
 80027ae:	7bbb      	ldrb	r3, [r7, #14]
 80027b0:	015b      	lsls	r3, r3, #5
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	431a      	orrs	r2, r3
 80027b8:	4b17      	ldr	r3, [pc, #92]	; (8002818 <WriteCmdParamN+0x15c>)
 80027ba:	619a      	str	r2, [r3, #24]
 80027bc:	7bbb      	ldrb	r3, [r7, #14]
 80027be:	105b      	asrs	r3, r3, #1
 80027c0:	f003 0208 	and.w	r2, r3, #8
 80027c4:	7bbb      	ldrb	r3, [r7, #14]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027cc:	431a      	orrs	r2, r3
 80027ce:	7bbb      	ldrb	r3, [r7, #14]
 80027d0:	105b      	asrs	r3, r3, #1
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	431a      	orrs	r2, r3
 80027d8:	7bbb      	ldrb	r3, [r7, #14]
 80027da:	10db      	asrs	r3, r3, #3
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	431a      	orrs	r2, r3
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <WriteCmdParamN+0x158>)
 80027e4:	619a      	str	r2, [r3, #24]
 80027e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027ea:	480a      	ldr	r0, [pc, #40]	; (8002814 <WriteCmdParamN+0x158>)
 80027ec:	f7ff fb92 	bl	8001f14 <PIN_LOW>
 80027f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027f4:	4807      	ldr	r0, [pc, #28]	; (8002814 <WriteCmdParamN+0x158>)
 80027f6:	f7ff fb9d 	bl	8001f34 <PIN_HIGH>
 80027fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027fe:	4805      	ldr	r0, [pc, #20]	; (8002814 <WriteCmdParamN+0x158>)
 8002800:	f7ff fb98 	bl	8001f34 <PIN_HIGH>
 8002804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <WriteCmdParamN+0x158>)
 800280a:	f7ff fb93 	bl	8001f34 <PIN_HIGH>
    while (N-- > 0) {
 800280e:	e0fb      	b.n	8002a08 <WriteCmdParamN+0x34c>
 8002810:	40020400 	.word	0x40020400
 8002814:	40021000 	.word	0x40021000
 8002818:	40021400 	.word	0x40021400
 800281c:	40021800 	.word	0x40021800
        uint8_t u8 = *block++;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	603a      	str	r2, [r7, #0]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	737b      	strb	r3, [r7, #13]
        write8(u8);
 800282a:	4b80      	ldr	r3, [pc, #512]	; (8002a2c <WriteCmdParamN+0x370>)
 800282c:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002830:	619a      	str	r2, [r3, #24]
 8002832:	4b7f      	ldr	r3, [pc, #508]	; (8002a30 <WriteCmdParamN+0x374>)
 8002834:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002838:	619a      	str	r2, [r3, #24]
 800283a:	4b7e      	ldr	r3, [pc, #504]	; (8002a34 <WriteCmdParamN+0x378>)
 800283c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002840:	619a      	str	r2, [r3, #24]
 8002842:	7b7b      	ldrb	r3, [r7, #13]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4a7b      	ldr	r2, [pc, #492]	; (8002a34 <WriteCmdParamN+0x378>)
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	6193      	str	r3, [r2, #24]
 800284e:	7b7b      	ldrb	r3, [r7, #13]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002856:	7b7b      	ldrb	r3, [r7, #13]
 8002858:	015b      	lsls	r3, r3, #5
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	431a      	orrs	r2, r3
 8002860:	7b7b      	ldrb	r3, [r7, #13]
 8002862:	015b      	lsls	r3, r3, #5
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	431a      	orrs	r2, r3
 800286a:	4b71      	ldr	r3, [pc, #452]	; (8002a30 <WriteCmdParamN+0x374>)
 800286c:	619a      	str	r2, [r3, #24]
 800286e:	7b7b      	ldrb	r3, [r7, #13]
 8002870:	105b      	asrs	r3, r3, #1
 8002872:	f003 0208 	and.w	r2, r3, #8
 8002876:	7b7b      	ldrb	r3, [r7, #13]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287e:	431a      	orrs	r2, r3
 8002880:	7b7b      	ldrb	r3, [r7, #13]
 8002882:	105b      	asrs	r3, r3, #1
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	431a      	orrs	r2, r3
 800288a:	7b7b      	ldrb	r3, [r7, #13]
 800288c:	10db      	asrs	r3, r3, #3
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	431a      	orrs	r2, r3
 8002894:	4b65      	ldr	r3, [pc, #404]	; (8002a2c <WriteCmdParamN+0x370>)
 8002896:	619a      	str	r2, [r3, #24]
 8002898:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800289c:	4863      	ldr	r0, [pc, #396]	; (8002a2c <WriteCmdParamN+0x370>)
 800289e:	f7ff fb39 	bl	8001f14 <PIN_LOW>
 80028a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028a6:	4861      	ldr	r0, [pc, #388]	; (8002a2c <WriteCmdParamN+0x370>)
 80028a8:	f7ff fb44 	bl	8001f34 <PIN_HIGH>
 80028ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028b0:	485e      	ldr	r0, [pc, #376]	; (8002a2c <WriteCmdParamN+0x370>)
 80028b2:	f7ff fb3f 	bl	8001f34 <PIN_HIGH>
        if (N && is8347) {
 80028b6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80a4 	beq.w	8002a08 <WriteCmdParamN+0x34c>
 80028c0:	4b5d      	ldr	r3, [pc, #372]	; (8002a38 <WriteCmdParamN+0x37c>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 809f 	beq.w	8002a08 <WriteCmdParamN+0x34c>
            cmd++;
 80028ca:	88fb      	ldrh	r3, [r7, #6]
 80028cc:	3301      	adds	r3, #1
 80028ce:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 80028d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028d4:	4855      	ldr	r0, [pc, #340]	; (8002a2c <WriteCmdParamN+0x370>)
 80028d6:	f7ff fb1d 	bl	8001f14 <PIN_LOW>
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	b29b      	uxth	r3, r3
 80028e0:	733b      	strb	r3, [r7, #12]
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	72fb      	strb	r3, [r7, #11]
 80028e6:	4b51      	ldr	r3, [pc, #324]	; (8002a2c <WriteCmdParamN+0x370>)
 80028e8:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80028ec:	619a      	str	r2, [r3, #24]
 80028ee:	4b50      	ldr	r3, [pc, #320]	; (8002a30 <WriteCmdParamN+0x374>)
 80028f0:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80028f4:	619a      	str	r2, [r3, #24]
 80028f6:	4b4f      	ldr	r3, [pc, #316]	; (8002a34 <WriteCmdParamN+0x378>)
 80028f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028fc:	619a      	str	r2, [r3, #24]
 80028fe:	7b3b      	ldrb	r3, [r7, #12]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4a4c      	ldr	r2, [pc, #304]	; (8002a34 <WriteCmdParamN+0x378>)
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	6193      	str	r3, [r2, #24]
 800290a:	7b3b      	ldrb	r3, [r7, #12]
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002912:	7b3b      	ldrb	r3, [r7, #12]
 8002914:	015b      	lsls	r3, r3, #5
 8002916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291a:	431a      	orrs	r2, r3
 800291c:	7b3b      	ldrb	r3, [r7, #12]
 800291e:	015b      	lsls	r3, r3, #5
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	431a      	orrs	r2, r3
 8002926:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <WriteCmdParamN+0x374>)
 8002928:	619a      	str	r2, [r3, #24]
 800292a:	7b3b      	ldrb	r3, [r7, #12]
 800292c:	105b      	asrs	r3, r3, #1
 800292e:	f003 0208 	and.w	r2, r3, #8
 8002932:	7b3b      	ldrb	r3, [r7, #12]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293a:	431a      	orrs	r2, r3
 800293c:	7b3b      	ldrb	r3, [r7, #12]
 800293e:	105b      	asrs	r3, r3, #1
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	431a      	orrs	r2, r3
 8002946:	7b3b      	ldrb	r3, [r7, #12]
 8002948:	10db      	asrs	r3, r3, #3
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	431a      	orrs	r2, r3
 8002950:	4b36      	ldr	r3, [pc, #216]	; (8002a2c <WriteCmdParamN+0x370>)
 8002952:	619a      	str	r2, [r3, #24]
 8002954:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002958:	4834      	ldr	r0, [pc, #208]	; (8002a2c <WriteCmdParamN+0x370>)
 800295a:	f7ff fadb 	bl	8001f14 <PIN_LOW>
 800295e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002962:	4832      	ldr	r0, [pc, #200]	; (8002a2c <WriteCmdParamN+0x370>)
 8002964:	f7ff fae6 	bl	8001f34 <PIN_HIGH>
 8002968:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800296c:	482f      	ldr	r0, [pc, #188]	; (8002a2c <WriteCmdParamN+0x370>)
 800296e:	f7ff fae1 	bl	8001f34 <PIN_HIGH>
 8002972:	4b2e      	ldr	r3, [pc, #184]	; (8002a2c <WriteCmdParamN+0x370>)
 8002974:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002978:	619a      	str	r2, [r3, #24]
 800297a:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <WriteCmdParamN+0x374>)
 800297c:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002980:	619a      	str	r2, [r3, #24]
 8002982:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <WriteCmdParamN+0x378>)
 8002984:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002988:	619a      	str	r2, [r3, #24]
 800298a:	7afb      	ldrb	r3, [r7, #11]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4a29      	ldr	r2, [pc, #164]	; (8002a34 <WriteCmdParamN+0x378>)
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	6193      	str	r3, [r2, #24]
 8002996:	7afb      	ldrb	r3, [r7, #11]
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800299e:	7afb      	ldrb	r3, [r7, #11]
 80029a0:	015b      	lsls	r3, r3, #5
 80029a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a6:	431a      	orrs	r2, r3
 80029a8:	7afb      	ldrb	r3, [r7, #11]
 80029aa:	015b      	lsls	r3, r3, #5
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	431a      	orrs	r2, r3
 80029b2:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <WriteCmdParamN+0x374>)
 80029b4:	619a      	str	r2, [r3, #24]
 80029b6:	7afb      	ldrb	r3, [r7, #11]
 80029b8:	105b      	asrs	r3, r3, #1
 80029ba:	f003 0208 	and.w	r2, r3, #8
 80029be:	7afb      	ldrb	r3, [r7, #11]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c6:	431a      	orrs	r2, r3
 80029c8:	7afb      	ldrb	r3, [r7, #11]
 80029ca:	105b      	asrs	r3, r3, #1
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	431a      	orrs	r2, r3
 80029d2:	7afb      	ldrb	r3, [r7, #11]
 80029d4:	10db      	asrs	r3, r3, #3
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	431a      	orrs	r2, r3
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <WriteCmdParamN+0x370>)
 80029de:	619a      	str	r2, [r3, #24]
 80029e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029e4:	4811      	ldr	r0, [pc, #68]	; (8002a2c <WriteCmdParamN+0x370>)
 80029e6:	f7ff fa95 	bl	8001f14 <PIN_LOW>
 80029ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029ee:	480f      	ldr	r0, [pc, #60]	; (8002a2c <WriteCmdParamN+0x370>)
 80029f0:	f7ff faa0 	bl	8001f34 <PIN_HIGH>
 80029f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029f8:	480c      	ldr	r0, [pc, #48]	; (8002a2c <WriteCmdParamN+0x370>)
 80029fa:	f7ff fa9b 	bl	8001f34 <PIN_HIGH>
 80029fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a02:	480a      	ldr	r0, [pc, #40]	; (8002a2c <WriteCmdParamN+0x370>)
 8002a04:	f7ff fa96 	bl	8001f34 <PIN_HIGH>
    while (N-- > 0) {
 8002a08:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	3a01      	subs	r2, #1
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	717a      	strb	r2, [r7, #5]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f73f af03 	bgt.w	8002820 <WriteCmdParamN+0x164>
        }
    }
    CS_IDLE;
 8002a1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a1e:	4807      	ldr	r0, [pc, #28]	; (8002a3c <WriteCmdParamN+0x380>)
 8002a20:	f7ff fa88 	bl	8001f34 <PIN_HIGH>
}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40021400 	.word	0x40021400
 8002a34:	40021800 	.word	0x40021800
 8002a38:	20003bcd 	.word	0x20003bcd
 8002a3c:	40020400 	.word	0x40020400

08002a40 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4604      	mov	r4, r0
 8002a48:	4608      	mov	r0, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	71fb      	strb	r3, [r7, #7]
 8002a52:	4603      	mov	r3, r0
 8002a54:	71bb      	strb	r3, [r7, #6]
 8002a56:	460b      	mov	r3, r1
 8002a58:	717b      	strb	r3, [r7, #5]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8002a5e:	79bb      	ldrb	r3, [r7, #6]
 8002a60:	733b      	strb	r3, [r7, #12]
 8002a62:	797b      	ldrb	r3, [r7, #5]
 8002a64:	737b      	strb	r3, [r7, #13]
 8002a66:	793b      	ldrb	r3, [r7, #4]
 8002a68:	73bb      	strb	r3, [r7, #14]
 8002a6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a6e:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	f107 020c 	add.w	r2, r7, #12
 8002a78:	2104      	movs	r1, #4
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fe1e 	bl	80026bc <WriteCmdParamN>
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd90      	pop	{r4, r7, pc}

08002a88 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 8002a98:	e046      	b.n	8002b28 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	627a      	str	r2, [r7, #36]	; 0x24
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	627a      	str	r2, [r7, #36]	; 0x24
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 8002ab2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ab8:	d108      	bne.n	8002acc <init_table+0x44>
        {
            delay(len);
 8002aba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fa10 	bl	8001ee4 <delay>
            len = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aca:	e024      	b.n	8002b16 <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8002acc:	2300      	movs	r3, #0
 8002ace:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ad2:	e010      	b.n	8002af6 <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	627a      	str	r2, [r7, #36]	; 0x24
 8002ada:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002ade:	7819      	ldrb	r1, [r3, #0]
 8002ae0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ae4:	4413      	add	r3, r2
 8002ae6:	460a      	mov	r2, r1
 8002ae8:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 8002aec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002af0:	3301      	adds	r3, #1
 8002af2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002af6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002afa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d3e8      	bcc.n	8002ad4 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 8002b02:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8002b0c:	f107 0208 	add.w	r2, r7, #8
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fdd3 	bl	80026bc <WriteCmdParamN>
        }
        size -= len + 2;
 8002b16:	887a      	ldrh	r2, [r7, #2]
 8002b18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b02      	subs	r3, #2
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 8002b28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	dcb4      	bgt.n	8002a9a <init_table+0x12>
    }
}
 8002b30:	bf00      	nop
 8002b32:	3728      	adds	r7, #40	; 0x28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 8002b48:	e01d      	b.n	8002b86 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1c9a      	adds	r2, r3, #2
 8002b4e:	60fa      	str	r2, [r7, #12]
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1c9a      	adds	r2, r3, #2
 8002b58:	60fa      	str	r2, [r7, #12]
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8002b5e:	897b      	ldrh	r3, [r7, #10]
 8002b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d104      	bne.n	8002b72 <init_table16+0x3a>
            delay(d);
 8002b68:	893b      	ldrh	r3, [r7, #8]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff f9ba 	bl	8001ee4 <delay>
 8002b70:	e005      	b.n	8002b7e <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 8002b72:	893a      	ldrh	r2, [r7, #8]
 8002b74:	897b      	ldrh	r3, [r7, #10]
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fc53 	bl	8002424 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8002b7e:	887b      	ldrh	r3, [r7, #2]
 8002b80:	3b04      	subs	r3, #4
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 8002b86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	dcdd      	bgt.n	8002b4a <init_table16+0x12>
    }
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <reset>:



void reset(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
    done_reset = 1;
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <reset+0x9c>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8002ba2:	f7ff fb1f 	bl	80021e4 <setWriteDir>
    CTL_INIT();
 8002ba6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002baa:	4823      	ldr	r0, [pc, #140]	; (8002c38 <reset+0xa0>)
 8002bac:	f7ff f9e8 	bl	8001f80 <PIN_OUTPUT>
 8002bb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bb4:	4820      	ldr	r0, [pc, #128]	; (8002c38 <reset+0xa0>)
 8002bb6:	f7ff f9e3 	bl	8001f80 <PIN_OUTPUT>
 8002bba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bbe:	481e      	ldr	r0, [pc, #120]	; (8002c38 <reset+0xa0>)
 8002bc0:	f7ff f9de 	bl	8001f80 <PIN_OUTPUT>
 8002bc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bc8:	481c      	ldr	r0, [pc, #112]	; (8002c3c <reset+0xa4>)
 8002bca:	f7ff f9d9 	bl	8001f80 <PIN_OUTPUT>
 8002bce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bd2:	481a      	ldr	r0, [pc, #104]	; (8002c3c <reset+0xa4>)
 8002bd4:	f7ff f9d4 	bl	8001f80 <PIN_OUTPUT>
    CS_IDLE;
 8002bd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bdc:	4817      	ldr	r0, [pc, #92]	; (8002c3c <reset+0xa4>)
 8002bde:	f7ff f9a9 	bl	8001f34 <PIN_HIGH>
    RD_IDLE;
 8002be2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002be6:	4814      	ldr	r0, [pc, #80]	; (8002c38 <reset+0xa0>)
 8002be8:	f7ff f9a4 	bl	8001f34 <PIN_HIGH>
    WR_IDLE;
 8002bec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bf0:	4811      	ldr	r0, [pc, #68]	; (8002c38 <reset+0xa0>)
 8002bf2:	f7ff f99f 	bl	8001f34 <PIN_HIGH>
    RESET_IDLE;
 8002bf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bfa:	4810      	ldr	r0, [pc, #64]	; (8002c3c <reset+0xa4>)
 8002bfc:	f7ff f99a 	bl	8001f34 <PIN_HIGH>
    delay(50);
 8002c00:	2032      	movs	r0, #50	; 0x32
 8002c02:	f7ff f96f 	bl	8001ee4 <delay>
    RESET_ACTIVE;
 8002c06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c0a:	480c      	ldr	r0, [pc, #48]	; (8002c3c <reset+0xa4>)
 8002c0c:	f7ff f982 	bl	8001f14 <PIN_LOW>
    delay(100);
 8002c10:	2064      	movs	r0, #100	; 0x64
 8002c12:	f7ff f967 	bl	8001ee4 <delay>
    RESET_IDLE;
 8002c16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c1a:	4808      	ldr	r0, [pc, #32]	; (8002c3c <reset+0xa4>)
 8002c1c:	f7ff f98a 	bl	8001f34 <PIN_HIGH>
    delay(100);
 8002c20:	2064      	movs	r0, #100	; 0x64
 8002c22:	f7ff f95f 	bl	8001ee4 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8002c26:	2100      	movs	r1, #0
 8002c28:	20b0      	movs	r0, #176	; 0xb0
 8002c2a:	f7ff fa89 	bl	8002140 <WriteCmdData>
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20003bcc 	.word	0x20003bcc
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40020400 	.word	0x40020400

08002c40 <read16bits>:

static uint16_t read16bits(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8002c46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c4a:	4871      	ldr	r0, [pc, #452]	; (8002e10 <read16bits+0x1d0>)
 8002c4c:	f7ff f972 	bl	8001f34 <PIN_HIGH>
 8002c50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c54:	486e      	ldr	r0, [pc, #440]	; (8002e10 <read16bits+0x1d0>)
 8002c56:	f7ff f95d 	bl	8001f14 <PIN_LOW>
 8002c5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c5e:	486c      	ldr	r0, [pc, #432]	; (8002e10 <read16bits+0x1d0>)
 8002c60:	f7ff f958 	bl	8001f14 <PIN_LOW>
 8002c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c68:	4869      	ldr	r0, [pc, #420]	; (8002e10 <read16bits+0x1d0>)
 8002c6a:	f7ff f953 	bl	8001f14 <PIN_LOW>
 8002c6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c72:	4867      	ldr	r0, [pc, #412]	; (8002e10 <read16bits+0x1d0>)
 8002c74:	f7ff f94e 	bl	8001f14 <PIN_LOW>
 8002c78:	4b66      	ldr	r3, [pc, #408]	; (8002e14 <read16bits+0x1d4>)
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	085b      	lsrs	r3, r3, #1
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	4b64      	ldr	r3, [pc, #400]	; (8002e18 <read16bits+0x1d8>)
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	4313      	orrs	r3, r2
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	4b5f      	ldr	r3, [pc, #380]	; (8002e18 <read16bits+0x1d8>)
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	4b5b      	ldr	r3, [pc, #364]	; (8002e18 <read16bits+0x1d8>)
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	4b54      	ldr	r3, [pc, #336]	; (8002e10 <read16bits+0x1d0>)
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	4b4f      	ldr	r3, [pc, #316]	; (8002e10 <read16bits+0x1d0>)
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	4b4b      	ldr	r3, [pc, #300]	; (8002e10 <read16bits+0x1d0>)
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	4b46      	ldr	r3, [pc, #280]	; (8002e10 <read16bits+0x1d0>)
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	4313      	orrs	r3, r2
 8002d08:	80fb      	strh	r3, [r7, #6]
 8002d0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d0e:	4840      	ldr	r0, [pc, #256]	; (8002e10 <read16bits+0x1d0>)
 8002d10:	f7ff f910 	bl	8001f34 <PIN_HIGH>
 8002d14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d18:	483d      	ldr	r0, [pc, #244]	; (8002e10 <read16bits+0x1d0>)
 8002d1a:	f7ff f90b 	bl	8001f34 <PIN_HIGH>
    READ_8(lo);
 8002d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d22:	483b      	ldr	r0, [pc, #236]	; (8002e10 <read16bits+0x1d0>)
 8002d24:	f7ff f906 	bl	8001f34 <PIN_HIGH>
 8002d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d2c:	4838      	ldr	r0, [pc, #224]	; (8002e10 <read16bits+0x1d0>)
 8002d2e:	f7ff f8f1 	bl	8001f14 <PIN_LOW>
 8002d32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d36:	4836      	ldr	r0, [pc, #216]	; (8002e10 <read16bits+0x1d0>)
 8002d38:	f7ff f8ec 	bl	8001f14 <PIN_LOW>
 8002d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d40:	4833      	ldr	r0, [pc, #204]	; (8002e10 <read16bits+0x1d0>)
 8002d42:	f7ff f8e7 	bl	8001f14 <PIN_LOW>
 8002d46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d4a:	4831      	ldr	r0, [pc, #196]	; (8002e10 <read16bits+0x1d0>)
 8002d4c:	f7ff f8e2 	bl	8001f14 <PIN_LOW>
 8002d50:	4b30      	ldr	r3, [pc, #192]	; (8002e14 <read16bits+0x1d4>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4b2e      	ldr	r3, [pc, #184]	; (8002e18 <read16bits+0x1d8>)
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	4b29      	ldr	r3, [pc, #164]	; (8002e18 <read16bits+0x1d8>)
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <read16bits+0x1d8>)
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	4313      	orrs	r3, r2
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <read16bits+0x1d0>)
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	4313      	orrs	r3, r2
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <read16bits+0x1d0>)
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	085b      	lsrs	r3, r3, #1
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	4313      	orrs	r3, r2
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <read16bits+0x1d0>)
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <read16bits+0x1d0>)
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	4313      	orrs	r3, r2
 8002de0:	717b      	strb	r3, [r7, #5]
 8002de2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002de6:	480a      	ldr	r0, [pc, #40]	; (8002e10 <read16bits+0x1d0>)
 8002de8:	f7ff f8a4 	bl	8001f34 <PIN_HIGH>
 8002dec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002df0:	4807      	ldr	r0, [pc, #28]	; (8002e10 <read16bits+0x1d0>)
 8002df2:	f7ff f89f 	bl	8001f34 <PIN_HIGH>
    return (ret << 8) | lo;
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	b21a      	sxth	r2, r3
 8002dfc:	797b      	ldrb	r3, [r7, #5]
 8002dfe:	b21b      	sxth	r3, r3
 8002e00:	4313      	orrs	r3, r2
 8002e02:	b21b      	sxth	r3, r3
 8002e04:	b29b      	uxth	r3, r3
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40021800 	.word	0x40021800
 8002e18:	40021400 	.word	0x40021400

08002e1c <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	460a      	mov	r2, r1
 8002e26:	80fb      	strh	r3, [r7, #6]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8002e2c:	4b64      	ldr	r3, [pc, #400]	; (8002fc0 <readReg+0x1a4>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <readReg+0x1c>
        reset();
 8002e34:	f7ff feb0 	bl	8002b98 <reset>
    CS_ACTIVE;
 8002e38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e3c:	4861      	ldr	r0, [pc, #388]	; (8002fc4 <readReg+0x1a8>)
 8002e3e:	f7ff f869 	bl	8001f14 <PIN_LOW>
    WriteCmd(reg);
 8002e42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e46:	4860      	ldr	r0, [pc, #384]	; (8002fc8 <readReg+0x1ac>)
 8002e48:	f7ff f864 	bl	8001f14 <PIN_LOW>
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	73fb      	strb	r3, [r7, #15]
 8002e54:	88fb      	ldrh	r3, [r7, #6]
 8002e56:	73bb      	strb	r3, [r7, #14]
 8002e58:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <readReg+0x1ac>)
 8002e5a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002e5e:	619a      	str	r2, [r3, #24]
 8002e60:	4b5a      	ldr	r3, [pc, #360]	; (8002fcc <readReg+0x1b0>)
 8002e62:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002e66:	619a      	str	r2, [r3, #24]
 8002e68:	4b59      	ldr	r3, [pc, #356]	; (8002fd0 <readReg+0x1b4>)
 8002e6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e6e:	619a      	str	r2, [r3, #24]
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4a56      	ldr	r2, [pc, #344]	; (8002fd0 <readReg+0x1b4>)
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	6193      	str	r3, [r2, #24]
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	015b      	lsls	r3, r3, #5
 8002e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	015b      	lsls	r3, r3, #5
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	431a      	orrs	r2, r3
 8002e98:	4b4c      	ldr	r3, [pc, #304]	; (8002fcc <readReg+0x1b0>)
 8002e9a:	619a      	str	r2, [r3, #24]
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	105b      	asrs	r3, r3, #1
 8002ea0:	f003 0208 	and.w	r2, r3, #8
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eac:	431a      	orrs	r2, r3
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	105b      	asrs	r3, r3, #1
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	10db      	asrs	r3, r3, #3
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	4b41      	ldr	r3, [pc, #260]	; (8002fc8 <readReg+0x1ac>)
 8002ec4:	619a      	str	r2, [r3, #24]
 8002ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002eca:	483f      	ldr	r0, [pc, #252]	; (8002fc8 <readReg+0x1ac>)
 8002ecc:	f7ff f822 	bl	8001f14 <PIN_LOW>
 8002ed0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ed4:	483c      	ldr	r0, [pc, #240]	; (8002fc8 <readReg+0x1ac>)
 8002ed6:	f7ff f82d 	bl	8001f34 <PIN_HIGH>
 8002eda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ede:	483a      	ldr	r0, [pc, #232]	; (8002fc8 <readReg+0x1ac>)
 8002ee0:	f7ff f828 	bl	8001f34 <PIN_HIGH>
 8002ee4:	4b38      	ldr	r3, [pc, #224]	; (8002fc8 <readReg+0x1ac>)
 8002ee6:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002eea:	619a      	str	r2, [r3, #24]
 8002eec:	4b37      	ldr	r3, [pc, #220]	; (8002fcc <readReg+0x1b0>)
 8002eee:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002ef2:	619a      	str	r2, [r3, #24]
 8002ef4:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <readReg+0x1b4>)
 8002ef6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002efa:	619a      	str	r2, [r3, #24]
 8002efc:	7bbb      	ldrb	r3, [r7, #14]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4a33      	ldr	r2, [pc, #204]	; (8002fd0 <readReg+0x1b4>)
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	6193      	str	r3, [r2, #24]
 8002f08:	7bbb      	ldrb	r3, [r7, #14]
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002f10:	7bbb      	ldrb	r3, [r7, #14]
 8002f12:	015b      	lsls	r3, r3, #5
 8002f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	7bbb      	ldrb	r3, [r7, #14]
 8002f1c:	015b      	lsls	r3, r3, #5
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	431a      	orrs	r2, r3
 8002f24:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <readReg+0x1b0>)
 8002f26:	619a      	str	r2, [r3, #24]
 8002f28:	7bbb      	ldrb	r3, [r7, #14]
 8002f2a:	105b      	asrs	r3, r3, #1
 8002f2c:	f003 0208 	and.w	r2, r3, #8
 8002f30:	7bbb      	ldrb	r3, [r7, #14]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	7bbb      	ldrb	r3, [r7, #14]
 8002f3c:	105b      	asrs	r3, r3, #1
 8002f3e:	f003 0320 	and.w	r3, r3, #32
 8002f42:	431a      	orrs	r2, r3
 8002f44:	7bbb      	ldrb	r3, [r7, #14]
 8002f46:	10db      	asrs	r3, r3, #3
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	4b1e      	ldr	r3, [pc, #120]	; (8002fc8 <readReg+0x1ac>)
 8002f50:	619a      	str	r2, [r3, #24]
 8002f52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f56:	481c      	ldr	r0, [pc, #112]	; (8002fc8 <readReg+0x1ac>)
 8002f58:	f7fe ffdc 	bl	8001f14 <PIN_LOW>
 8002f5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f60:	4819      	ldr	r0, [pc, #100]	; (8002fc8 <readReg+0x1ac>)
 8002f62:	f7fe ffe7 	bl	8001f34 <PIN_HIGH>
 8002f66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f6a:	4817      	ldr	r0, [pc, #92]	; (8002fc8 <readReg+0x1ac>)
 8002f6c:	f7fe ffe2 	bl	8001f34 <PIN_HIGH>
 8002f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f74:	4814      	ldr	r0, [pc, #80]	; (8002fc8 <readReg+0x1ac>)
 8002f76:	f7fe ffdd 	bl	8001f34 <PIN_HIGH>
    setReadDir();
 8002f7a:	f7ff f907 	bl	800218c <setReadDir>
    delay(1);    //1us should be adequate
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f7fe ffb0 	bl	8001ee4 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8002f84:	f7ff fe5c 	bl	8002c40 <read16bits>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	81bb      	strh	r3, [r7, #12]
 8002f8c:	797b      	ldrb	r3, [r7, #5]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	717b      	strb	r3, [r7, #5]
 8002f94:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	daf3      	bge.n	8002f84 <readReg+0x168>
    RD_IDLE;
 8002f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fa0:	4809      	ldr	r0, [pc, #36]	; (8002fc8 <readReg+0x1ac>)
 8002fa2:	f7fe ffc7 	bl	8001f34 <PIN_HIGH>
    CS_IDLE;
 8002fa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002faa:	4806      	ldr	r0, [pc, #24]	; (8002fc4 <readReg+0x1a8>)
 8002fac:	f7fe ffc2 	bl	8001f34 <PIN_HIGH>
    setWriteDir();
 8002fb0:	f7ff f918 	bl	80021e4 <setWriteDir>
    return ret;
 8002fb4:	89bb      	ldrh	r3, [r7, #12]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20003bcc 	.word	0x20003bcc
 8002fc4:	40020400 	.word	0x40020400
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40021400 	.word	0x40021400
 8002fd0:	40021800 	.word	0x40021800

08002fd4 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff ff1a 	bl	8002e1c <readReg>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	2101      	movs	r1, #1
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff13 	bl	8002e1c <readReg>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 8002ffa:	89fb      	ldrh	r3, [r7, #14]
 8002ffc:	041a      	lsls	r2, r3, #16
 8002ffe:	89bb      	ldrh	r3, [r7, #12]
 8003000:	4313      	orrs	r3, r2
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	4603      	mov	r3, r0
 8003012:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff feff 	bl	8002e1c <readReg>
 800301e:	4603      	mov	r3, r0
 8003020:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	2101      	movs	r1, #1
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fef8 	bl	8002e1c <readReg>
 800302c:	4603      	mov	r3, r0
 800302e:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	2102      	movs	r1, #2
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fef1 	bl	8002e1c <readReg>
 800303a:	4603      	mov	r3, r0
 800303c:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 800303e:	89fb      	ldrh	r3, [r7, #14]
 8003040:	061b      	lsls	r3, r3, #24
 8003042:	89ba      	ldrh	r2, [r7, #12]
 8003044:	0212      	lsls	r2, r2, #8
 8003046:	4313      	orrs	r3, r2
 8003048:	897a      	ldrh	r2, [r7, #10]
 800304a:	0a12      	lsrs	r2, r2, #8
 800304c:	b292      	uxth	r2, r2
 800304e:	4313      	orrs	r3, r2
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <tft_init>:


void tft_init(uint16_t ID)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 800306a:	4bc4      	ldr	r3, [pc, #784]	; (800337c <tft_init+0x324>)
 800306c:	2200      	movs	r2, #0
 800306e:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 8003070:	4ac3      	ldr	r2, [pc, #780]	; (8003380 <tft_init+0x328>)
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	8013      	strh	r3, [r2, #0]
 8003076:	4bc2      	ldr	r3, [pc, #776]	; (8003380 <tft_init+0x328>)
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	f249 0290 	movw	r2, #37008	; 0x9090
 800307e:	4293      	cmp	r3, r2
 8003080:	f000 8164 	beq.w	800334c <tft_init+0x2f4>
 8003084:	f249 0290 	movw	r2, #37008	; 0x9090
 8003088:	4293      	cmp	r3, r2
 800308a:	dc7f      	bgt.n	800318c <tft_init+0x134>
 800308c:	f244 7247 	movw	r2, #18247	; 0x4747
 8003090:	4293      	cmp	r3, r2
 8003092:	f000 8145 	beq.w	8003320 <tft_init+0x2c8>
 8003096:	f244 7247 	movw	r2, #18247	; 0x4747
 800309a:	4293      	cmp	r3, r2
 800309c:	dc34      	bgt.n	8003108 <tft_init+0xb0>
 800309e:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80030a2:	f000 8104 	beq.w	80032ae <tft_init+0x256>
 80030a6:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80030aa:	dc13      	bgt.n	80030d4 <tft_init+0x7c>
 80030ac:	2b99      	cmp	r3, #153	; 0x99
 80030ae:	f000 8181 	beq.w	80033b4 <tft_init+0x35c>
 80030b2:	2b99      	cmp	r3, #153	; 0x99
 80030b4:	dc03      	bgt.n	80030be <tft_init+0x66>
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	f000 8191 	beq.w	80033de <tft_init+0x386>
 80030bc:	e268      	b.n	8003590 <tft_init+0x538>
 80030be:	f241 5205 	movw	r2, #5381	; 0x1505
 80030c2:	4293      	cmp	r3, r2
 80030c4:	f000 8195 	beq.w	80033f2 <tft_init+0x39a>
 80030c8:	f241 5211 	movw	r2, #5393	; 0x1511
 80030cc:	4293      	cmp	r3, r2
 80030ce:	f000 80da 	beq.w	8003286 <tft_init+0x22e>
 80030d2:	e25d      	b.n	8003590 <tft_init+0x538>
 80030d4:	f241 5281 	movw	r2, #5505	; 0x1581
 80030d8:	4293      	cmp	r3, r2
 80030da:	f000 81f4 	beq.w	80034c6 <tft_init+0x46e>
 80030de:	f241 5281 	movw	r2, #5505	; 0x1581
 80030e2:	4293      	cmp	r3, r2
 80030e4:	dc05      	bgt.n	80030f2 <tft_init+0x9a>
 80030e6:	f241 5226 	movw	r2, #5414	; 0x1526
 80030ea:	4293      	cmp	r3, r2
 80030ec:	f000 80e8 	beq.w	80032c0 <tft_init+0x268>
 80030f0:	e24e      	b.n	8003590 <tft_init+0x538>
 80030f2:	f241 6202 	movw	r2, #5634	; 0x1602
 80030f6:	4293      	cmp	r3, r2
 80030f8:	f000 81af 	beq.w	800345a <tft_init+0x402>
 80030fc:	f242 0253 	movw	r2, #8275	; 0x2053
 8003100:	4293      	cmp	r3, r2
 8003102:	f000 81b3 	beq.w	800346c <tft_init+0x414>
 8003106:	e243      	b.n	8003590 <tft_init+0x538>
 8003108:	f247 5275 	movw	r2, #30069	; 0x7575
 800310c:	4293      	cmp	r3, r2
 800310e:	f000 810c 	beq.w	800332a <tft_init+0x2d2>
 8003112:	f247 5275 	movw	r2, #30069	; 0x7575
 8003116:	4293      	cmp	r3, r2
 8003118:	dc19      	bgt.n	800314e <tft_init+0xf6>
 800311a:	f245 4208 	movw	r2, #21512	; 0x5408
 800311e:	4293      	cmp	r3, r2
 8003120:	f000 8162 	beq.w	80033e8 <tft_init+0x390>
 8003124:	f245 4208 	movw	r2, #21512	; 0x5408
 8003128:	4293      	cmp	r3, r2
 800312a:	dc05      	bgt.n	8003138 <tft_init+0xe0>
 800312c:	f245 3210 	movw	r2, #21264	; 0x5310
 8003130:	4293      	cmp	r3, r2
 8003132:	f000 80ce 	beq.w	80032d2 <tft_init+0x27a>
 8003136:	e22b      	b.n	8003590 <tft_init+0x538>
 8003138:	f246 7267 	movw	r2, #26471	; 0x6767
 800313c:	4293      	cmp	r3, r2
 800313e:	f000 80f4 	beq.w	800332a <tft_init+0x2d2>
 8003142:	f646 0209 	movw	r2, #26633	; 0x6809
 8003146:	4293      	cmp	r3, r2
 8003148:	f000 815e 	beq.w	8003408 <tft_init+0x3b0>
 800314c:	e220      	b.n	8003590 <tft_init+0x538>
 800314e:	f247 7296 	movw	r2, #30614	; 0x7796
 8003152:	4293      	cmp	r3, r2
 8003154:	f000 81e8 	beq.w	8003528 <tft_init+0x4d0>
 8003158:	f247 7296 	movw	r2, #30614	; 0x7796
 800315c:	4293      	cmp	r3, r2
 800315e:	dc0a      	bgt.n	8003176 <tft_init+0x11e>
 8003160:	f247 7289 	movw	r2, #30601	; 0x7789
 8003164:	4293      	cmp	r3, r2
 8003166:	f000 80c9 	beq.w	80032fc <tft_init+0x2a4>
 800316a:	f247 7293 	movw	r2, #30611	; 0x7793
 800316e:	4293      	cmp	r3, r2
 8003170:	f000 81ff 	beq.w	8003572 <tft_init+0x51a>
 8003174:	e20c      	b.n	8003590 <tft_init+0x538>
 8003176:	f248 0231 	movw	r2, #32817	; 0x8031
 800317a:	4293      	cmp	r3, r2
 800317c:	f000 80c7 	beq.w	800330e <tft_init+0x2b6>
 8003180:	f248 3257 	movw	r2, #33623	; 0x8357
 8003184:	4293      	cmp	r3, r2
 8003186:	f000 80dc 	beq.w	8003342 <tft_init+0x2ea>
 800318a:	e201      	b.n	8003590 <tft_init+0x538>
 800318c:	f249 3240 	movw	r2, #37696	; 0x9340
 8003190:	4293      	cmp	r3, r2
 8003192:	f000 818a 	beq.w	80034aa <tft_init+0x452>
 8003196:	f249 3240 	movw	r2, #37696	; 0x9340
 800319a:	4293      	cmp	r3, r2
 800319c:	dc3c      	bgt.n	8003218 <tft_init+0x1c0>
 800319e:	f249 3228 	movw	r2, #37672	; 0x9328
 80031a2:	4293      	cmp	r3, r2
 80031a4:	f000 8135 	beq.w	8003412 <tft_init+0x3ba>
 80031a8:	f249 3228 	movw	r2, #37672	; 0x9328
 80031ac:	4293      	cmp	r3, r2
 80031ae:	dc19      	bgt.n	80031e4 <tft_init+0x18c>
 80031b0:	f249 3220 	movw	r2, #37664	; 0x9320
 80031b4:	4293      	cmp	r3, r2
 80031b6:	f000 811c 	beq.w	80033f2 <tft_init+0x39a>
 80031ba:	f249 3220 	movw	r2, #37664	; 0x9320
 80031be:	4293      	cmp	r3, r2
 80031c0:	dc05      	bgt.n	80031ce <tft_init+0x176>
 80031c2:	f249 3202 	movw	r2, #37634	; 0x9302
 80031c6:	4293      	cmp	r3, r2
 80031c8:	f000 815a 	beq.w	8003480 <tft_init+0x428>
 80031cc:	e1e0      	b.n	8003590 <tft_init+0x538>
 80031ce:	f249 3225 	movw	r2, #37669	; 0x9325
 80031d2:	4293      	cmp	r3, r2
 80031d4:	f000 811d 	beq.w	8003412 <tft_init+0x3ba>
 80031d8:	f249 3227 	movw	r2, #37671	; 0x9327
 80031dc:	4293      	cmp	r3, r2
 80031de:	f000 8128 	beq.w	8003432 <tft_init+0x3da>
 80031e2:	e1d5      	b.n	8003590 <tft_init+0x538>
 80031e4:	f249 3231 	movw	r2, #37681	; 0x9331
 80031e8:	4293      	cmp	r3, r2
 80031ea:	f000 8117 	beq.w	800341c <tft_init+0x3c4>
 80031ee:	f249 3231 	movw	r2, #37681	; 0x9331
 80031f2:	4293      	cmp	r3, r2
 80031f4:	dc05      	bgt.n	8003202 <tft_init+0x1aa>
 80031f6:	f249 3229 	movw	r2, #37673	; 0x9329
 80031fa:	4293      	cmp	r3, r2
 80031fc:	f000 814a 	beq.w	8003494 <tft_init+0x43c>
 8003200:	e1c6      	b.n	8003590 <tft_init+0x538>
 8003202:	f249 3235 	movw	r2, #37685	; 0x9335
 8003206:	4293      	cmp	r3, r2
 8003208:	f000 8108 	beq.w	800341c <tft_init+0x3c4>
 800320c:	f249 3238 	movw	r2, #37688	; 0x9338
 8003210:	4293      	cmp	r3, r2
 8003212:	f000 813a 	beq.w	800348a <tft_init+0x432>
 8003216:	e1bb      	b.n	8003590 <tft_init+0x538>
 8003218:	f249 4288 	movw	r2, #38024	; 0x9488
 800321c:	4293      	cmp	r3, r2
 800321e:	dc14      	bgt.n	800324a <tft_init+0x1f2>
 8003220:	f249 4287 	movw	r2, #38023	; 0x9487
 8003224:	4293      	cmp	r3, r2
 8003226:	f280 8184 	bge.w	8003532 <tft_init+0x4da>
 800322a:	f249 4281 	movw	r2, #38017	; 0x9481
 800322e:	4293      	cmp	r3, r2
 8003230:	f000 814e 	beq.w	80034d0 <tft_init+0x478>
 8003234:	f249 4286 	movw	r2, #38022	; 0x9486
 8003238:	4293      	cmp	r3, r2
 800323a:	f000 8160 	beq.w	80034fe <tft_init+0x4a6>
 800323e:	f249 3241 	movw	r2, #37697	; 0x9341
 8003242:	4293      	cmp	r3, r2
 8003244:	f000 8136 	beq.w	80034b4 <tft_init+0x45c>
 8003248:	e1a2      	b.n	8003590 <tft_init+0x538>
 800324a:	f24b 5205 	movw	r2, #46341	; 0xb505
 800324e:	4293      	cmp	r3, r2
 8003250:	f000 8186 	beq.w	8003560 <tft_init+0x508>
 8003254:	f24b 5205 	movw	r2, #46341	; 0xb505
 8003258:	4293      	cmp	r3, r2
 800325a:	dc09      	bgt.n	8003270 <tft_init+0x218>
 800325c:	f249 5295 	movw	r2, #38293	; 0x9595
 8003260:	4293      	cmp	r3, r2
 8003262:	d062      	beq.n	800332a <tft_init+0x2d2>
 8003264:	f64a 4211 	movw	r2, #44049	; 0xac11
 8003268:	4293      	cmp	r3, r2
 800326a:	f000 8104 	beq.w	8003476 <tft_init+0x41e>
 800326e:	e18f      	b.n	8003590 <tft_init+0x538>
 8003270:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003274:	4293      	cmp	r3, r2
 8003276:	f000 817c 	beq.w	8003572 <tft_init+0x51a>
 800327a:	f24c 5205 	movw	r2, #50437	; 0xc505
 800327e:	4293      	cmp	r3, r2
 8003280:	f000 816e 	beq.w	8003560 <tft_init+0x508>
 8003284:	e184      	b.n	8003590 <tft_init+0x538>
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8003286:	4b3f      	ldr	r3, [pc, #252]	; (8003384 <tft_init+0x32c>)
 8003288:	2203      	movs	r2, #3
 800328a:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 800328c:	4b3e      	ldr	r3, [pc, #248]	; (8003388 <tft_init+0x330>)
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	2303      	movs	r3, #3
 8003292:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003294:	4b3d      	ldr	r3, [pc, #244]	; (800338c <tft_init+0x334>)
 8003296:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800329e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80032a0:	4b3b      	ldr	r3, [pc, #236]	; (8003390 <tft_init+0x338>)
 80032a2:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032aa:	801a      	strh	r2, [r3, #0]
        break;
 80032ac:	e176      	b.n	800359c <tft_init+0x544>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80032ae:	4b35      	ldr	r3, [pc, #212]	; (8003384 <tft_init+0x32c>)
 80032b0:	f240 4213 	movw	r2, #1043	; 0x413
 80032b4:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 80032b6:	4b37      	ldr	r3, [pc, #220]	; (8003394 <tft_init+0x33c>)
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	2306      	movs	r3, #6
 80032bc:	837b      	strh	r3, [r7, #26]
        break;
 80032be:	e16d      	b.n	800359c <tft_init+0x544>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80032c0:	4b30      	ldr	r3, [pc, #192]	; (8003384 <tft_init+0x32c>)
 80032c2:	f240 4213 	movw	r2, #1043	; 0x413
 80032c6:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 80032c8:	4b33      	ldr	r3, [pc, #204]	; (8003398 <tft_init+0x340>)
 80032ca:	61fb      	str	r3, [r7, #28]
 80032cc:	230c      	movs	r3, #12
 80032ce:	837b      	strh	r3, [r7, #26]
        break;
 80032d0:	e164      	b.n	800359c <tft_init+0x544>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 80032d2:	4b2c      	ldr	r3, [pc, #176]	; (8003384 <tft_init+0x32c>)
 80032d4:	f640 6213 	movw	r2, #3603	; 0xe13
 80032d8:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <tft_init+0x344>)
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	2302      	movs	r3, #2
 80032e0:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80032e2:	4b2a      	ldr	r3, [pc, #168]	; (800338c <tft_init+0x334>)
 80032e4:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80032ec:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80032ee:	4b28      	ldr	r3, [pc, #160]	; (8003390 <tft_init+0x338>)
 80032f0:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032f8:	801a      	strh	r2, [r3, #0]
        break;
 80032fa:	e14f      	b.n	800359c <tft_init+0x544>
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80032fc:	4b21      	ldr	r3, [pc, #132]	; (8003384 <tft_init+0x32c>)
 80032fe:	f240 4213 	movw	r2, #1043	; 0x413
 8003302:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 8003304:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <tft_init+0x348>)
 8003306:	61fb      	str	r3, [r7, #28]
 8003308:	2341      	movs	r3, #65	; 0x41
 800330a:	837b      	strh	r3, [r7, #26]
        break;
 800330c:	e146      	b.n	800359c <tft_init+0x544>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 800330e:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <tft_init+0x32c>)
 8003310:	f241 4213 	movw	r2, #5139	; 0x1413
 8003314:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 8003316:	4b23      	ldr	r3, [pc, #140]	; (80033a4 <tft_init+0x34c>)
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	2312      	movs	r3, #18
 800331c:	837b      	strh	r3, [r7, #26]
        break;
 800331e:	e13d      	b.n	800359c <tft_init+0x544>

#ifdef SUPPORT_8347D
    case 0x4747:       //HX8347-D
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | AUTO_READINC | READ_24BITS;
 8003320:	4b18      	ldr	r3, [pc, #96]	; (8003384 <tft_init+0x32c>)
 8003322:	f241 6213 	movw	r2, #5651	; 0x1613
 8003326:	801a      	strh	r2, [r3, #0]
		goto common_8347DGI;
 8003328:	e003      	b.n	8003332 <tft_init+0x2da>
    case 0x6767:       //HX8367-A
	case 0x7575:       //HX8347-G
	case 0x9595:       //HX8347-I
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS;
 800332a:	4b16      	ldr	r3, [pc, #88]	; (8003384 <tft_init+0x32c>)
 800332c:	f241 4201 	movw	r2, #5121	; 0x1401
 8003330:	801a      	strh	r2, [r3, #0]
      common_8347DGI:
		is8347 = 1;
 8003332:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <tft_init+0x350>)
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
            TFTLCD_DELAY8, 40,
            0x28, 1, 0x3F,      //GON=1, DTE=1, D=1100

            0x16, 1, 0x18,
        };
        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
 8003338:	2170      	movs	r1, #112	; 0x70
 800333a:	481c      	ldr	r0, [pc, #112]	; (80033ac <tft_init+0x354>)
 800333c:	f7ff fba4 	bl	8002a88 <init_table>
        break;
 8003340:	e12c      	b.n	800359c <tft_init+0x544>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <tft_init+0x32c>)
 8003344:	f241 4203 	movw	r2, #5123	; 0x1403
 8003348:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 800334a:	e003      	b.n	8003354 <tft_init+0x2fc>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 800334c:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <tft_init+0x32c>)
 800334e:	f241 4213 	movw	r2, #5139	; 0x1413
 8003352:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 8003354:	2301      	movs	r3, #1
 8003356:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 8003358:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <tft_init+0x358>)
 800335a:	61fb      	str	r3, [r7, #28]
 800335c:	2302      	movs	r3, #2
 800335e:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003360:	4b0a      	ldr	r3, [pc, #40]	; (800338c <tft_init+0x334>)
 8003362:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800336a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <tft_init+0x338>)
 800336e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003376:	801a      	strh	r2, [r3, #0]
        break;
 8003378:	e110      	b.n	800359c <tft_init+0x544>
 800337a:	bf00      	nop
 800337c:	20003edc 	.word	0x20003edc
 8003380:	20003eda 	.word	0x20003eda
 8003384:	20003ecc 	.word	0x20003ecc
 8003388:	08009528 	.word	0x08009528
 800338c:	08001fc9 	.word	0x08001fc9
 8003390:	08001fb1 	.word	0x08001fb1
 8003394:	0800952c 	.word	0x0800952c
 8003398:	08009534 	.word	0x08009534
 800339c:	08009540 	.word	0x08009540
 80033a0:	08009544 	.word	0x08009544
 80033a4:	08009588 	.word	0x08009588
 80033a8:	20003bcd 	.word	0x20003bcd
 80033ac:	0800959c 	.word	0x0800959c
 80033b0:	0800960c 	.word	0x0800960c

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80033b4:	4ba3      	ldr	r3, [pc, #652]	; (8003644 <tft_init+0x5ec>)
 80033b6:	f241 4213 	movw	r2, #5139	; 0x1413
 80033ba:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 80033bc:	4ba2      	ldr	r3, [pc, #648]	; (8003648 <tft_init+0x5f0>)
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	231d      	movs	r3, #29
 80033c2:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80033c4:	4ba1      	ldr	r3, [pc, #644]	; (800364c <tft_init+0x5f4>)
 80033c6:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80033ce:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80033d0:	4b9f      	ldr	r3, [pc, #636]	; (8003650 <tft_init+0x5f8>)
 80033d2:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80033da:	801a      	strh	r2, [r3, #0]
        break;
 80033dc:	e0de      	b.n	800359c <tft_init+0x544>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 80033de:	4b99      	ldr	r3, [pc, #612]	; (8003644 <tft_init+0x5ec>)
 80033e0:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 80033e4:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 80033e6:	e008      	b.n	80033fa <tft_init+0x3a2>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 80033e8:	4b96      	ldr	r3, [pc, #600]	; (8003644 <tft_init+0x5ec>)
 80033ea:	f241 0204 	movw	r2, #4100	; 0x1004
 80033ee:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 80033f0:	e003      	b.n	80033fa <tft_init+0x3a2>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 80033f2:	4b94      	ldr	r3, [pc, #592]	; (8003644 <tft_init+0x5ec>)
 80033f4:	f241 0204 	movw	r2, #4100	; 0x1004
 80033f8:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 80033fa:	2301      	movs	r3, #1
 80033fc:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 80033fe:	21d8      	movs	r1, #216	; 0xd8
 8003400:	4894      	ldr	r0, [pc, #592]	; (8003654 <tft_init+0x5fc>)
 8003402:	f7ff fb99 	bl	8002b38 <init_table16>
        break;
 8003406:	e0c9      	b.n	800359c <tft_init+0x544>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8003408:	4b8e      	ldr	r3, [pc, #568]	; (8003644 <tft_init+0x5ec>)
 800340a:	f241 1202 	movw	r2, #4354	; 0x1102
 800340e:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8003410:	e008      	b.n	8003424 <tft_init+0x3cc>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 8003412:	4b8c      	ldr	r3, [pc, #560]	; (8003644 <tft_init+0x5ec>)
 8003414:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8003418:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 800341a:	e003      	b.n	8003424 <tft_init+0x3cc>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 800341c:	4b89      	ldr	r3, [pc, #548]	; (8003644 <tft_init+0x5ec>)
 800341e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003422:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 8003424:	2301      	movs	r3, #1
 8003426:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8003428:	21cc      	movs	r1, #204	; 0xcc
 800342a:	488b      	ldr	r0, [pc, #556]	; (8003658 <tft_init+0x600>)
 800342c:	f7ff fb84 	bl	8002b38 <init_table16>
        break;
 8003430:	e0b4      	b.n	800359c <tft_init+0x544>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8003432:	4b84      	ldr	r3, [pc, #528]	; (8003644 <tft_init+0x5ec>)
 8003434:	f240 4203 	movw	r2, #1027	; 0x403
 8003438:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 800343a:	4b88      	ldr	r3, [pc, #544]	; (800365c <tft_init+0x604>)
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	231e      	movs	r3, #30
 8003440:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003442:	4b82      	ldr	r3, [pc, #520]	; (800364c <tft_init+0x5f4>)
 8003444:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800344c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800344e:	4b80      	ldr	r3, [pc, #512]	; (8003650 <tft_init+0x5f8>)
 8003450:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	22f0      	movs	r2, #240	; 0xf0
 8003456:	801a      	strh	r2, [r3, #0]
        break;
 8003458:	e0a0      	b.n	800359c <tft_init+0x544>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 800345a:	4b7a      	ldr	r3, [pc, #488]	; (8003644 <tft_init+0x5ec>)
 800345c:	f240 4203 	movw	r2, #1027	; 0x403
 8003460:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 8003462:	4b7f      	ldr	r3, [pc, #508]	; (8003660 <tft_init+0x608>)
 8003464:	61fb      	str	r3, [r7, #28]
 8003466:	2306      	movs	r3, #6
 8003468:	837b      	strh	r3, [r7, #26]
        break;
 800346a:	e097      	b.n	800359c <tft_init+0x544>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 800346c:	4b75      	ldr	r3, [pc, #468]	; (8003644 <tft_init+0x5ec>)
 800346e:	f241 4217 	movw	r2, #5143	; 0x1417
 8003472:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003474:	e012      	b.n	800349c <tft_init+0x444>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 8003476:	4b73      	ldr	r3, [pc, #460]	; (8003644 <tft_init+0x5ec>)
 8003478:	f241 4213 	movw	r2, #5139	; 0x1413
 800347c:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800347e:	e00d      	b.n	800349c <tft_init+0x444>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8003480:	4b70      	ldr	r3, [pc, #448]	; (8003644 <tft_init+0x5ec>)
 8003482:	f240 4203 	movw	r2, #1027	; 0x403
 8003486:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003488:	e008      	b.n	800349c <tft_init+0x444>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800348a:	4b6e      	ldr	r3, [pc, #440]	; (8003644 <tft_init+0x5ec>)
 800348c:	f240 4213 	movw	r2, #1043	; 0x413
 8003490:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003492:	e003      	b.n	800349c <tft_init+0x444>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 8003494:	4b6b      	ldr	r3, [pc, #428]	; (8003644 <tft_init+0x5ec>)
 8003496:	f241 6203 	movw	r2, #5635	; 0x1603
 800349a:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 800349c:	2301      	movs	r3, #1
 800349e:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 80034a0:	4b70      	ldr	r3, [pc, #448]	; (8003664 <tft_init+0x60c>)
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	2303      	movs	r3, #3
 80034a6:	837b      	strh	r3, [r7, #26]
        break;
 80034a8:	e078      	b.n	800359c <tft_init+0x544>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 80034aa:	4b66      	ldr	r3, [pc, #408]	; (8003644 <tft_init+0x5ec>)
 80034ac:	f241 4213 	movw	r2, #5139	; 0x1413
 80034b0:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 80034b2:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80034b4:	4b63      	ldr	r3, [pc, #396]	; (8003644 <tft_init+0x5ec>)
 80034b6:	f240 4213 	movw	r2, #1043	; 0x413
 80034ba:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 80034bc:	4b6a      	ldr	r3, [pc, #424]	; (8003668 <tft_init+0x610>)
 80034be:	61fb      	str	r3, [r7, #28]
 80034c0:	2365      	movs	r3, #101	; 0x65
 80034c2:	837b      	strh	r3, [r7, #26]
        break;
 80034c4:	e06a      	b.n	800359c <tft_init+0x544>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 80034c6:	4b5f      	ldr	r3, [pc, #380]	; (8003644 <tft_init+0x5ec>)
 80034c8:	f240 4213 	movw	r2, #1043	; 0x413
 80034cc:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 80034ce:	e003      	b.n	80034d8 <tft_init+0x480>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 80034d0:	4b5c      	ldr	r3, [pc, #368]	; (8003644 <tft_init+0x5ec>)
 80034d2:	f240 4207 	movw	r2, #1031	; 0x407
 80034d6:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 80034d8:	2301      	movs	r3, #1
 80034da:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 80034dc:	4b63      	ldr	r3, [pc, #396]	; (800366c <tft_init+0x614>)
 80034de:	61fb      	str	r3, [r7, #28]
 80034e0:	2345      	movs	r3, #69	; 0x45
 80034e2:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 80034e4:	4b59      	ldr	r3, [pc, #356]	; (800364c <tft_init+0x5f4>)
 80034e6:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80034ee:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80034f0:	4b57      	ldr	r3, [pc, #348]	; (8003650 <tft_init+0x5f8>)
 80034f2:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80034fa:	801a      	strh	r2, [r3, #0]
        break;
 80034fc:	e04e      	b.n	800359c <tft_init+0x544>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 80034fe:	4b51      	ldr	r3, [pc, #324]	; (8003644 <tft_init+0x5ec>)
 8003500:	f240 4203 	movw	r2, #1027	; 0x403
 8003504:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 8003506:	4b5a      	ldr	r3, [pc, #360]	; (8003670 <tft_init+0x618>)
 8003508:	61fb      	str	r3, [r7, #28]
 800350a:	233b      	movs	r3, #59	; 0x3b
 800350c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800350e:	4b4f      	ldr	r3, [pc, #316]	; (800364c <tft_init+0x5f4>)
 8003510:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003518:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800351a:	4b4d      	ldr	r3, [pc, #308]	; (8003650 <tft_init+0x5f8>)
 800351c:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003524:	801a      	strh	r2, [r3, #0]
        break;
 8003526:	e039      	b.n	800359c <tft_init+0x544>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 8003528:	4b46      	ldr	r3, [pc, #280]	; (8003644 <tft_init+0x5ec>)
 800352a:	f240 4203 	movw	r2, #1027	; 0x403
 800352e:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 8003530:	e003      	b.n	800353a <tft_init+0x4e2>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003532:	4b44      	ldr	r3, [pc, #272]	; (8003644 <tft_init+0x5ec>)
 8003534:	f240 4213 	movw	r2, #1043	; 0x413
 8003538:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 800353a:	2301      	movs	r3, #1
 800353c:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 800353e:	4b4d      	ldr	r3, [pc, #308]	; (8003674 <tft_init+0x61c>)
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	232b      	movs	r3, #43	; 0x2b
 8003544:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003546:	4b41      	ldr	r3, [pc, #260]	; (800364c <tft_init+0x5f4>)
 8003548:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003550:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003552:	4b3f      	ldr	r3, [pc, #252]	; (8003650 <tft_init+0x5f8>)
 8003554:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800355c:	801a      	strh	r2, [r3, #0]
        break;
 800355e:	e01d      	b.n	800359c <tft_init+0x544>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 8003560:	4b38      	ldr	r3, [pc, #224]	; (8003644 <tft_init+0x5ec>)
 8003562:	f241 0208 	movw	r2, #4104	; 0x1008
 8003566:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8003568:	21b0      	movs	r1, #176	; 0xb0
 800356a:	4843      	ldr	r0, [pc, #268]	; (8003678 <tft_init+0x620>)
 800356c:	f7ff fae4 	bl	8002b38 <init_table16>
        break;
 8003570:	e014      	b.n	800359c <tft_init+0x544>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 8003572:	4b34      	ldr	r3, [pc, #208]	; (8003644 <tft_init+0x5ec>)
 8003574:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003578:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 800357a:	21c0      	movs	r1, #192	; 0xc0
 800357c:	483f      	ldr	r0, [pc, #252]	; (800367c <tft_init+0x624>)
 800357e:	f7ff fadb 	bl	8002b38 <init_table16>
        p16 = (int16_t *) & height;
 8003582:	4b32      	ldr	r3, [pc, #200]	; (800364c <tft_init+0x5f4>)
 8003584:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800358c:	801a      	strh	r2, [r3, #0]
        break;
 800358e:	e005      	b.n	800359c <tft_init+0x544>
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 8003590:	4b2f      	ldr	r3, [pc, #188]	; (8003650 <tft_init+0x5f8>)
 8003592:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	2200      	movs	r2, #0
 8003598:	801a      	strh	r2, [r3, #0]
        break;
 800359a:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 800359c:	4b29      	ldr	r3, [pc, #164]	; (8003644 <tft_init+0x5ec>)
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	4b33      	ldr	r3, [pc, #204]	; (8003680 <tft_init+0x628>)
 80035b2:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00d      	beq.n	80035d6 <tft_init+0x57e>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 80035ba:	2109      	movs	r1, #9
 80035bc:	4831      	ldr	r0, [pc, #196]	; (8003684 <tft_init+0x62c>)
 80035be:	f7ff fa63 	bl	8002a88 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 80035c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80035c6:	4619      	mov	r1, r3
 80035c8:	69f8      	ldr	r0, [r7, #28]
 80035ca:	f7ff fa5d 	bl	8002a88 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 80035ce:	2106      	movs	r1, #6
 80035d0:	482d      	ldr	r0, [pc, #180]	; (8003688 <tft_init+0x630>)
 80035d2:	f7ff fa59 	bl	8002a88 <init_table>
    }
    setRotation(0);             //PORTRAIT
 80035d6:	2000      	movs	r0, #0
 80035d8:	f000 ff7a 	bl	80044d0 <setRotation>
    invertDisplay(false);
 80035dc:	2000      	movs	r0, #0
 80035de:	f001 fd5f 	bl	80050a0 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 80035e2:	4b2a      	ldr	r3, [pc, #168]	; (800368c <tft_init+0x634>)
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	f249 4288 	movw	r2, #38024	; 0x9488
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d125      	bne.n	800363a <tft_init+0x5e2>
		is555 = 0;
 80035ee:	4b28      	ldr	r3, [pc, #160]	; (8003690 <tft_init+0x638>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 80035f4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80035f8:	2100      	movs	r1, #0
 80035fa:	2000      	movs	r0, #0
 80035fc:	f001 f9e8 	bl	80049d0 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 8003600:	2100      	movs	r1, #0
 8003602:	2000      	movs	r0, #0
 8003604:	f7fe fd84 	bl	8002110 <readPixel>
 8003608:	4603      	mov	r3, r0
 800360a:	461a      	mov	r2, r3
 800360c:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8003610:	429a      	cmp	r2, r3
 8003612:	d112      	bne.n	800363a <tft_init+0x5e2>
			uint8_t pixfmt = 0x06;
 8003614:	2306      	movs	r3, #6
 8003616:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8003618:	f107 030f 	add.w	r3, r7, #15
 800361c:	2201      	movs	r2, #1
 800361e:	4619      	mov	r1, r3
 8003620:	203a      	movs	r0, #58	; 0x3a
 8003622:	f7fe fd9f 	bl	8002164 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <tft_init+0x5ec>)
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	f023 0310 	bic.w	r3, r3, #16
 800362e:	b29a      	uxth	r2, r3
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <tft_init+0x5ec>)
 8003632:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 8003634:	4b16      	ldr	r3, [pc, #88]	; (8003690 <tft_init+0x638>)
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 800363a:	bf00      	nop
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20003ecc 	.word	0x20003ecc
 8003648:	08009610 	.word	0x08009610
 800364c:	08001fc9 	.word	0x08001fc9
 8003650:	08001fb1 	.word	0x08001fb1
 8003654:	08009630 	.word	0x08009630
 8003658:	08009708 	.word	0x08009708
 800365c:	080097d4 	.word	0x080097d4
 8003660:	080097f4 	.word	0x080097f4
 8003664:	080097fc 	.word	0x080097fc
 8003668:	08009800 	.word	0x08009800
 800366c:	08009868 	.word	0x08009868
 8003670:	080098b0 	.word	0x080098b0
 8003674:	080098ec 	.word	0x080098ec
 8003678:	08009918 	.word	0x08009918
 800367c:	080099c8 	.word	0x080099c8
 8003680:	20003ed0 	.word	0x20003ed0
 8003684:	08009a88 	.word	0x08009a88
 8003688:	08009a94 	.word	0x08009a94
 800368c:	20003eda 	.word	0x20003eda
 8003690:	20003bce 	.word	0x20003bce

08003694 <readID>:




uint16_t readID(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 800369a:	2100      	movs	r1, #0
 800369c:	2000      	movs	r0, #0
 800369e:	f7ff fbbd 	bl	8002e1c <readReg>
 80036a2:	4603      	mov	r3, r0
 80036a4:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 80036a6:	89fb      	ldrh	r3, [r7, #14]
 80036a8:	f245 4208 	movw	r2, #21512	; 0x5408
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d102      	bne.n	80036b6 <readID+0x22>
        return 0x5408;
 80036b0:	f245 4308 	movw	r3, #21512	; 0x5408
 80036b4:	e128      	b.n	8003908 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 80036b6:	89fb      	ldrh	r3, [r7, #14]
 80036b8:	f245 4220 	movw	r2, #21536	; 0x5420
 80036bc:	4293      	cmp	r3, r2
 80036be:	d102      	bne.n	80036c6 <readID+0x32>
        return 0x5420;
 80036c0:	f245 4320 	movw	r3, #21536	; 0x5420
 80036c4:	e120      	b.n	8003908 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 80036c6:	89fb      	ldrh	r3, [r7, #14]
 80036c8:	f648 1289 	movw	r2, #35209	; 0x8989
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d102      	bne.n	80036d6 <readID+0x42>
        return 0x1289;
 80036d0:	f241 2389 	movw	r3, #4745	; 0x1289
 80036d4:	e118      	b.n	8003908 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 80036d6:	2100      	movs	r1, #0
 80036d8:	2067      	movs	r0, #103	; 0x67
 80036da:	f7ff fb9f 	bl	8002e1c <readReg>
 80036de:	4603      	mov	r3, r0
 80036e0:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 80036e2:	89fb      	ldrh	r3, [r7, #14]
 80036e4:	f244 7247 	movw	r2, #18247	; 0x4747
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d102      	bne.n	80036f2 <readID+0x5e>
        return 0x8347;
 80036ec:	f248 3347 	movw	r3, #33607	; 0x8347
 80036f0:	e10a      	b.n	8003908 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 80036f2:	20a1      	movs	r0, #161	; 0xa1
 80036f4:	f7ff fc6e 	bl	8002fd4 <readReg32>
 80036f8:	4603      	mov	r3, r0
 80036fa:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 80036fc:	89fb      	ldrh	r3, [r7, #14]
 80036fe:	f246 1201 	movw	r2, #24833	; 0x6101
 8003702:	4293      	cmp	r3, r2
 8003704:	d102      	bne.n	800370c <readID+0x78>
        return 0x1963;
 8003706:	f641 1363 	movw	r3, #6499	; 0x1963
 800370a:	e0fd      	b.n	8003908 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 800370c:	89fb      	ldrh	r3, [r7, #14]
 800370e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003712:	4293      	cmp	r3, r2
 8003714:	d102      	bne.n	800371c <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8003716:	f241 5326 	movw	r3, #5414	; 0x1526
 800371a:	e0f5      	b.n	8003908 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 800371c:	20bf      	movs	r0, #191	; 0xbf
 800371e:	f7ff fc74 	bl	800300a <readReg40>
 8003722:	4603      	mov	r3, r0
 8003724:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8003726:	89fb      	ldrh	r3, [r7, #14]
 8003728:	f248 3257 	movw	r2, #33623	; 0x8357
 800372c:	4293      	cmp	r3, r2
 800372e:	d102      	bne.n	8003736 <readID+0xa2>
        return 0x8357;
 8003730:	f248 3357 	movw	r3, #33623	; 0x8357
 8003734:	e0e8      	b.n	8003908 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8003736:	89fb      	ldrh	r3, [r7, #14]
 8003738:	f249 4281 	movw	r2, #38017	; 0x9481
 800373c:	4293      	cmp	r3, r2
 800373e:	d102      	bne.n	8003746 <readID+0xb2>
        return 0x9481;
 8003740:	f249 4381 	movw	r3, #38017	; 0x9481
 8003744:	e0e0      	b.n	8003908 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8003746:	89fb      	ldrh	r3, [r7, #14]
 8003748:	f241 5211 	movw	r2, #5393	; 0x1511
 800374c:	4293      	cmp	r3, r2
 800374e:	d102      	bne.n	8003756 <readID+0xc2>
        return 0x1511;
 8003750:	f241 5311 	movw	r3, #5393	; 0x1511
 8003754:	e0d8      	b.n	8003908 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8003756:	89fb      	ldrh	r3, [r7, #14]
 8003758:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 800375c:	d102      	bne.n	8003764 <readID+0xd0>
        return 0x1520;
 800375e:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 8003762:	e0d1      	b.n	8003908 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8003764:	89fb      	ldrh	r3, [r7, #14]
 8003766:	f241 5226 	movw	r2, #5414	; 0x1526
 800376a:	4293      	cmp	r3, r2
 800376c:	d102      	bne.n	8003774 <readID+0xe0>
        return 0x1526;
 800376e:	f241 5326 	movw	r3, #5414	; 0x1526
 8003772:	e0c9      	b.n	8003908 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8003774:	89fb      	ldrh	r3, [r7, #14]
 8003776:	f241 5281 	movw	r2, #5505	; 0x1581
 800377a:	4293      	cmp	r3, r2
 800377c:	d102      	bne.n	8003784 <readID+0xf0>
        return 0x1581;
 800377e:	f241 5381 	movw	r3, #5505	; 0x1581
 8003782:	e0c1      	b.n	8003908 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8003784:	89fb      	ldrh	r3, [r7, #14]
 8003786:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800378a:	d102      	bne.n	8003792 <readID+0xfe>
        return 0x6814;
 800378c:	f646 0314 	movw	r3, #26644	; 0x6814
 8003790:	e0ba      	b.n	8003908 <readID+0x274>
    ret = readReg32(0xD4);
 8003792:	20d4      	movs	r0, #212	; 0xd4
 8003794:	f7ff fc1e 	bl	8002fd4 <readReg32>
 8003798:	4603      	mov	r3, r0
 800379a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 800379c:	89fb      	ldrh	r3, [r7, #14]
 800379e:	f245 3210 	movw	r2, #21264	; 0x5310
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d102      	bne.n	80037ac <readID+0x118>
        return 0x5310;
 80037a6:	f245 3310 	movw	r3, #21264	; 0x5310
 80037aa:	e0ad      	b.n	8003908 <readID+0x274>
    ret = readReg32(0xD7);
 80037ac:	20d7      	movs	r0, #215	; 0xd7
 80037ae:	f7ff fc11 	bl	8002fd4 <readReg32>
 80037b2:	4603      	mov	r3, r0
 80037b4:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 80037b6:	89fb      	ldrh	r3, [r7, #14]
 80037b8:	f248 0231 	movw	r2, #32817	; 0x8031
 80037bc:	4293      	cmp	r3, r2
 80037be:	d102      	bne.n	80037c6 <readID+0x132>
        return 0x8031;
 80037c0:	f248 0331 	movw	r3, #32817	; 0x8031
 80037c4:	e0a0      	b.n	8003908 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 80037c6:	20ef      	movs	r0, #239	; 0xef
 80037c8:	f7ff fc1f 	bl	800300a <readReg40>
 80037cc:	4603      	mov	r3, r0
 80037ce:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 80037d0:	89fb      	ldrh	r3, [r7, #14]
 80037d2:	f249 3227 	movw	r2, #37671	; 0x9327
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d102      	bne.n	80037e0 <readID+0x14c>
        return 0x9327;
 80037da:	f249 3327 	movw	r3, #37671	; 0x9327
 80037de:	e093      	b.n	8003908 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 80037e0:	20fe      	movs	r0, #254	; 0xfe
 80037e2:	f7ff fbf7 	bl	8002fd4 <readReg32>
 80037e6:	4603      	mov	r3, r0
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 80037ec:	89fb      	ldrh	r3, [r7, #14]
 80037ee:	f242 0253 	movw	r2, #8275	; 0x2053
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d102      	bne.n	80037fc <readID+0x168>
        return 0x2053;
 80037f6:	f242 0353 	movw	r3, #8275	; 0x2053
 80037fa:	e085      	b.n	8003908 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 80037fc:	2004      	movs	r0, #4
 80037fe:	f7ff fbe9 	bl	8002fd4 <readReg32>
 8003802:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	0c1b      	lsrs	r3, r3, #16
 8003808:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d122      	bne.n	800385a <readID+0x1c6>
 8003814:	89fb      	ldrh	r3, [r7, #14]
 8003816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800381a:	d11e      	bne.n	800385a <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 800381c:	4a3c      	ldr	r2, [pc, #240]	; (8003910 <readID+0x27c>)
 800381e:	1d3b      	adds	r3, r7, #4
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	4611      	mov	r1, r2
 8003824:	8019      	strh	r1, [r3, #0]
 8003826:	3302      	adds	r3, #2
 8003828:	0c12      	lsrs	r2, r2, #16
 800382a:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 800382c:	1d3b      	adds	r3, r7, #4
 800382e:	2203      	movs	r2, #3
 8003830:	4619      	mov	r1, r3
 8003832:	20b9      	movs	r0, #185	; 0xb9
 8003834:	f7fe fc96 	bl	8002164 <pushCommand>
        msb = readReg(0xD0,0);
 8003838:	2100      	movs	r1, #0
 800383a:	20d0      	movs	r0, #208	; 0xd0
 800383c:	f7ff faee 	bl	8002e1c <readReg>
 8003840:	4603      	mov	r3, r0
 8003842:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	2b99      	cmp	r3, #153	; 0x99
 8003848:	d101      	bne.n	800384e <readID+0x1ba>
 800384a:	2399      	movs	r3, #153	; 0x99
 800384c:	e05c      	b.n	8003908 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	2b90      	cmp	r3, #144	; 0x90
 8003852:	d102      	bne.n	800385a <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8003854:	f249 0390 	movw	r3, #37008	; 0x9090
 8003858:	e056      	b.n	8003908 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 800385a:	89fb      	ldrh	r3, [r7, #14]
 800385c:	f241 5226 	movw	r2, #5414	; 0x1526
 8003860:	4293      	cmp	r3, r2
 8003862:	d102      	bne.n	800386a <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8003864:	f241 5326 	movw	r3, #5414	; 0x1526
 8003868:	e04e      	b.n	8003908 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 800386a:	89fb      	ldrh	r3, [r7, #14]
 800386c:	f648 12f0 	movw	r2, #35312	; 0x89f0
 8003870:	4293      	cmp	r3, r2
 8003872:	d102      	bne.n	800387a <readID+0x1e6>
        return 0x7735;
 8003874:	f247 7335 	movw	r3, #30517	; 0x7735
 8003878:	e046      	b.n	8003908 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 800387a:	89fb      	ldrh	r3, [r7, #14]
 800387c:	f248 5252 	movw	r2, #34130	; 0x8552
 8003880:	4293      	cmp	r3, r2
 8003882:	d102      	bne.n	800388a <readID+0x1f6>
        return 0x7789;
 8003884:	f247 7389 	movw	r3, #30601	; 0x7789
 8003888:	e03e      	b.n	8003908 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 800388a:	89fb      	ldrh	r3, [r7, #14]
 800388c:	f64a 4211 	movw	r2, #44049	; 0xac11
 8003890:	4293      	cmp	r3, r2
 8003892:	d102      	bne.n	800389a <readID+0x206>
        return 0xAC11;
 8003894:	f64a 4311 	movw	r3, #44049	; 0xac11
 8003898:	e036      	b.n	8003908 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 800389a:	20d3      	movs	r0, #211	; 0xd3
 800389c:	f7ff fb9a 	bl	8002fd4 <readReg32>
 80038a0:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 80038a8:	89fb      	ldrh	r3, [r7, #14]
 80038aa:	f249 1263 	movw	r2, #37219	; 0x9163
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <readID+0x222>
 80038b2:	89fb      	ldrh	r3, [r7, #14]
 80038b4:	e028      	b.n	8003908 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 80038b6:	20d3      	movs	r0, #211	; 0xd3
 80038b8:	f7ff fb8c 	bl	8002fd4 <readReg32>
 80038bc:	4603      	mov	r3, r0
 80038be:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 80038c0:	89fb      	ldrh	r3, [r7, #14]
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	2b93      	cmp	r3, #147	; 0x93
 80038cc:	d00b      	beq.n	80038e6 <readID+0x252>
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	2b94      	cmp	r3, #148	; 0x94
 80038d2:	d008      	beq.n	80038e6 <readID+0x252>
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	2b98      	cmp	r3, #152	; 0x98
 80038d8:	d005      	beq.n	80038e6 <readID+0x252>
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	2b77      	cmp	r3, #119	; 0x77
 80038de:	d002      	beq.n	80038e6 <readID+0x252>
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	2b16      	cmp	r3, #22
 80038e4:	d101      	bne.n	80038ea <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 80038e6:	89fb      	ldrh	r3, [r7, #14]
 80038e8:	e00e      	b.n	8003908 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 80038ea:	89fb      	ldrh	r3, [r7, #14]
 80038ec:	2bd3      	cmp	r3, #211	; 0xd3
 80038ee:	d004      	beq.n	80038fa <readID+0x266>
 80038f0:	89fb      	ldrh	r3, [r7, #14]
 80038f2:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <readID+0x26a>
        return ret;             //16-bit write-only bus
 80038fa:	89fb      	ldrh	r3, [r7, #14]
 80038fc:	e004      	b.n	8003908 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 80038fe:	2100      	movs	r1, #0
 8003900:	2000      	movs	r0, #0
 8003902:	f7ff fa8b 	bl	8002e1c <readReg>
 8003906:	4603      	mov	r3, r0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	0800950c 	.word	0x0800950c

08003914 <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b08b      	sub	sp, #44	; 0x2c
 8003918:	af00      	add	r7, sp, #0
 800391a:	60ba      	str	r2, [r7, #8]
 800391c:	461a      	mov	r2, r3
 800391e:	4603      	mov	r3, r0
 8003920:	81fb      	strh	r3, [r7, #14]
 8003922:	460b      	mov	r3, r1
 8003924:	81bb      	strh	r3, [r7, #12]
 8003926:	4613      	mov	r3, r2
 8003928:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 800392a:	4b1c      	ldr	r3, [pc, #112]	; (800399c <readGRAM+0x88>)
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 8003930:	88fa      	ldrh	r2, [r7, #6]
 8003932:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003934:	fb12 f303 	smulbb	r3, r2, r3
 8003938:	b29b      	uxth	r3, r3
 800393a:	847b      	strh	r3, [r7, #34]	; 0x22
 800393c:	2300      	movs	r3, #0
 800393e:	843b      	strh	r3, [r7, #32]
 8003940:	2300      	movs	r3, #0
 8003942:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8003944:	4b16      	ldr	r3, [pc, #88]	; (80039a0 <readGRAM+0x8c>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d107      	bne.n	800395c <readGRAM+0x48>
 800394c:	4b15      	ldr	r3, [pc, #84]	; (80039a4 <readGRAM+0x90>)
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <readGRAM+0x48>
        _MR = 0x2E;
 8003958:	232e      	movs	r3, #46	; 0x2e
 800395a:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 800395c:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <readGRAM+0x94>)
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	f241 6202 	movw	r2, #5634	; 0x1602
 8003964:	4293      	cmp	r3, r2
 8003966:	d101      	bne.n	800396c <readGRAM+0x58>
 8003968:	232e      	movs	r3, #46	; 0x2e
 800396a:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 800396c:	89fa      	ldrh	r2, [r7, #14]
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	4413      	add	r3, r2
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29b      	uxth	r3, r3
 8003978:	b21c      	sxth	r4, r3
 800397a:	89ba      	ldrh	r2, [r7, #12]
 800397c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800397e:	4413      	add	r3, r2
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29b      	uxth	r3, r3
 8003986:	b21b      	sxth	r3, r3
 8003988:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800398c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003990:	4622      	mov	r2, r4
 8003992:	f001 f921 	bl	8004bd8 <setAddrWindow>
    while (n > 0) {
 8003996:	f000 bd74 	b.w	8004482 <readGRAM+0xb6e>
 800399a:	bf00      	nop
 800399c:	20003eca 	.word	0x20003eca
 80039a0:	20003bcd 	.word	0x20003bcd
 80039a4:	20003ecc 	.word	0x20003ecc
 80039a8:	20003eda 	.word	0x20003eda
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 80039ac:	4b9d      	ldr	r3, [pc, #628]	; (8003c24 <readGRAM+0x310>)
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d111      	bne.n	80039dc <readGRAM+0xc8>
            WriteCmdData(_MC, x + col);
 80039b8:	4b9b      	ldr	r3, [pc, #620]	; (8003c28 <readGRAM+0x314>)
 80039ba:	8818      	ldrh	r0, [r3, #0]
 80039bc:	89fa      	ldrh	r2, [r7, #14]
 80039be:	8bfb      	ldrh	r3, [r7, #30]
 80039c0:	4413      	add	r3, r2
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	4619      	mov	r1, r3
 80039c6:	f7fe fbbb 	bl	8002140 <WriteCmdData>
            WriteCmdData(_MP, y + row);
 80039ca:	4b98      	ldr	r3, [pc, #608]	; (8003c2c <readGRAM+0x318>)
 80039cc:	8818      	ldrh	r0, [r3, #0]
 80039ce:	89ba      	ldrh	r2, [r7, #12]
 80039d0:	8c3b      	ldrh	r3, [r7, #32]
 80039d2:	4413      	add	r3, r2
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	4619      	mov	r1, r3
 80039d8:	f7fe fbb2 	bl	8002140 <WriteCmdData>
        }
        CS_ACTIVE;
 80039dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039e0:	4893      	ldr	r0, [pc, #588]	; (8003c30 <readGRAM+0x31c>)
 80039e2:	f7fe fa97 	bl	8001f14 <PIN_LOW>
        WriteCmd(_MR);
 80039e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039ea:	4892      	ldr	r0, [pc, #584]	; (8003c34 <readGRAM+0x320>)
 80039ec:	f7fe fa92 	bl	8001f14 <PIN_LOW>
 80039f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	777b      	strb	r3, [r7, #29]
 80039f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039fa:	773b      	strb	r3, [r7, #28]
 80039fc:	4b8d      	ldr	r3, [pc, #564]	; (8003c34 <readGRAM+0x320>)
 80039fe:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8003a02:	619a      	str	r2, [r3, #24]
 8003a04:	4b8c      	ldr	r3, [pc, #560]	; (8003c38 <readGRAM+0x324>)
 8003a06:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8003a0a:	619a      	str	r2, [r3, #24]
 8003a0c:	4b8b      	ldr	r3, [pc, #556]	; (8003c3c <readGRAM+0x328>)
 8003a0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a12:	619a      	str	r2, [r3, #24]
 8003a14:	7f7b      	ldrb	r3, [r7, #29]
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	4a88      	ldr	r2, [pc, #544]	; (8003c3c <readGRAM+0x328>)
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	6193      	str	r3, [r2, #24]
 8003a20:	7f7b      	ldrb	r3, [r7, #29]
 8003a22:	021b      	lsls	r3, r3, #8
 8003a24:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8003a28:	7f7b      	ldrb	r3, [r7, #29]
 8003a2a:	015b      	lsls	r3, r3, #5
 8003a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a30:	431a      	orrs	r2, r3
 8003a32:	7f7b      	ldrb	r3, [r7, #29]
 8003a34:	015b      	lsls	r3, r3, #5
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	4b7e      	ldr	r3, [pc, #504]	; (8003c38 <readGRAM+0x324>)
 8003a3e:	619a      	str	r2, [r3, #24]
 8003a40:	7f7b      	ldrb	r3, [r7, #29]
 8003a42:	105b      	asrs	r3, r3, #1
 8003a44:	f003 0208 	and.w	r2, r3, #8
 8003a48:	7f7b      	ldrb	r3, [r7, #29]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a50:	431a      	orrs	r2, r3
 8003a52:	7f7b      	ldrb	r3, [r7, #29]
 8003a54:	105b      	asrs	r3, r3, #1
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	7f7b      	ldrb	r3, [r7, #29]
 8003a5e:	10db      	asrs	r3, r3, #3
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	431a      	orrs	r2, r3
 8003a66:	4b73      	ldr	r3, [pc, #460]	; (8003c34 <readGRAM+0x320>)
 8003a68:	619a      	str	r2, [r3, #24]
 8003a6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a6e:	4871      	ldr	r0, [pc, #452]	; (8003c34 <readGRAM+0x320>)
 8003a70:	f7fe fa50 	bl	8001f14 <PIN_LOW>
 8003a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a78:	486e      	ldr	r0, [pc, #440]	; (8003c34 <readGRAM+0x320>)
 8003a7a:	f7fe fa5b 	bl	8001f34 <PIN_HIGH>
 8003a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a82:	486c      	ldr	r0, [pc, #432]	; (8003c34 <readGRAM+0x320>)
 8003a84:	f7fe fa56 	bl	8001f34 <PIN_HIGH>
 8003a88:	4b6a      	ldr	r3, [pc, #424]	; (8003c34 <readGRAM+0x320>)
 8003a8a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8003a8e:	619a      	str	r2, [r3, #24]
 8003a90:	4b69      	ldr	r3, [pc, #420]	; (8003c38 <readGRAM+0x324>)
 8003a92:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8003a96:	619a      	str	r2, [r3, #24]
 8003a98:	4b68      	ldr	r3, [pc, #416]	; (8003c3c <readGRAM+0x328>)
 8003a9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a9e:	619a      	str	r2, [r3, #24]
 8003aa0:	7f3b      	ldrb	r3, [r7, #28]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4a65      	ldr	r2, [pc, #404]	; (8003c3c <readGRAM+0x328>)
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	6193      	str	r3, [r2, #24]
 8003aac:	7f3b      	ldrb	r3, [r7, #28]
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8003ab4:	7f3b      	ldrb	r3, [r7, #28]
 8003ab6:	015b      	lsls	r3, r3, #5
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	431a      	orrs	r2, r3
 8003abe:	7f3b      	ldrb	r3, [r7, #28]
 8003ac0:	015b      	lsls	r3, r3, #5
 8003ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	4b5b      	ldr	r3, [pc, #364]	; (8003c38 <readGRAM+0x324>)
 8003aca:	619a      	str	r2, [r3, #24]
 8003acc:	7f3b      	ldrb	r3, [r7, #28]
 8003ace:	105b      	asrs	r3, r3, #1
 8003ad0:	f003 0208 	and.w	r2, r3, #8
 8003ad4:	7f3b      	ldrb	r3, [r7, #28]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	431a      	orrs	r2, r3
 8003ade:	7f3b      	ldrb	r3, [r7, #28]
 8003ae0:	105b      	asrs	r3, r3, #1
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	7f3b      	ldrb	r3, [r7, #28]
 8003aea:	10db      	asrs	r3, r3, #3
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	431a      	orrs	r2, r3
 8003af2:	4b50      	ldr	r3, [pc, #320]	; (8003c34 <readGRAM+0x320>)
 8003af4:	619a      	str	r2, [r3, #24]
 8003af6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003afa:	484e      	ldr	r0, [pc, #312]	; (8003c34 <readGRAM+0x320>)
 8003afc:	f7fe fa0a 	bl	8001f14 <PIN_LOW>
 8003b00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b04:	484b      	ldr	r0, [pc, #300]	; (8003c34 <readGRAM+0x320>)
 8003b06:	f7fe fa15 	bl	8001f34 <PIN_HIGH>
 8003b0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b0e:	4849      	ldr	r0, [pc, #292]	; (8003c34 <readGRAM+0x320>)
 8003b10:	f7fe fa10 	bl	8001f34 <PIN_HIGH>
 8003b14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b18:	4846      	ldr	r0, [pc, #280]	; (8003c34 <readGRAM+0x320>)
 8003b1a:	f7fe fa0b 	bl	8001f34 <PIN_HIGH>
        setReadDir();
 8003b1e:	f7fe fb35 	bl	800218c <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 8003b22:	4b40      	ldr	r3, [pc, #256]	; (8003c24 <readGRAM+0x310>)
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f040 816a 	bne.w	8003e04 <readGRAM+0x4f0>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8003b30:	4b3c      	ldr	r3, [pc, #240]	; (8003c24 <readGRAM+0x310>)
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d105      	bne.n	8003b48 <readGRAM+0x234>
 8003b3c:	4b40      	ldr	r3, [pc, #256]	; (8003c40 <readGRAM+0x32c>)
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	f241 2289 	movw	r2, #4745	; 0x1289
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d17d      	bne.n	8003c44 <readGRAM+0x330>
            READ_8(r);
 8003b48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b4c:	4839      	ldr	r0, [pc, #228]	; (8003c34 <readGRAM+0x320>)
 8003b4e:	f7fe f9f1 	bl	8001f34 <PIN_HIGH>
 8003b52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b56:	4837      	ldr	r0, [pc, #220]	; (8003c34 <readGRAM+0x320>)
 8003b58:	f7fe f9dc 	bl	8001f14 <PIN_LOW>
 8003b5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b60:	4834      	ldr	r0, [pc, #208]	; (8003c34 <readGRAM+0x320>)
 8003b62:	f7fe f9d7 	bl	8001f14 <PIN_LOW>
 8003b66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b6a:	4832      	ldr	r0, [pc, #200]	; (8003c34 <readGRAM+0x320>)
 8003b6c:	f7fe f9d2 	bl	8001f14 <PIN_LOW>
 8003b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b74:	482f      	ldr	r0, [pc, #188]	; (8003c34 <readGRAM+0x320>)
 8003b76:	f7fe f9cd 	bl	8001f14 <PIN_LOW>
 8003b7a:	4b30      	ldr	r3, [pc, #192]	; (8003c3c <readGRAM+0x328>)
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <readGRAM+0x324>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	0a1b      	lsrs	r3, r3, #8
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	4313      	orrs	r3, r2
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	4b27      	ldr	r3, [pc, #156]	; (8003c38 <readGRAM+0x324>)
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	4b22      	ldr	r3, [pc, #136]	; (8003c38 <readGRAM+0x324>)
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <readGRAM+0x320>)
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <readGRAM+0x320>)
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	4313      	orrs	r3, r2
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <readGRAM+0x320>)
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <readGRAM+0x320>)
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	75fb      	strb	r3, [r7, #23]
 8003c0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c10:	4808      	ldr	r0, [pc, #32]	; (8003c34 <readGRAM+0x320>)
 8003c12:	f7fe f98f 	bl	8001f34 <PIN_HIGH>
 8003c16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c1a:	4806      	ldr	r0, [pc, #24]	; (8003c34 <readGRAM+0x320>)
 8003c1c:	f7fe f98a 	bl	8001f34 <PIN_HIGH>
 8003c20:	e0f0      	b.n	8003e04 <readGRAM+0x4f0>
 8003c22:	bf00      	nop
 8003c24:	20003ecc 	.word	0x20003ecc
 8003c28:	20003ed4 	.word	0x20003ed4
 8003c2c:	20003ed2 	.word	0x20003ed2
 8003c30:	40020400 	.word	0x40020400
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40021400 	.word	0x40021400
 8003c3c:	40021800 	.word	0x40021800
 8003c40:	20003eda 	.word	0x20003eda
        } else {
            READ_16(dummy);
 8003c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c48:	48a8      	ldr	r0, [pc, #672]	; (8003eec <readGRAM+0x5d8>)
 8003c4a:	f7fe f973 	bl	8001f34 <PIN_HIGH>
 8003c4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c52:	48a6      	ldr	r0, [pc, #664]	; (8003eec <readGRAM+0x5d8>)
 8003c54:	f7fe f95e 	bl	8001f14 <PIN_LOW>
 8003c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c5c:	48a3      	ldr	r0, [pc, #652]	; (8003eec <readGRAM+0x5d8>)
 8003c5e:	f7fe f959 	bl	8001f14 <PIN_LOW>
 8003c62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c66:	48a1      	ldr	r0, [pc, #644]	; (8003eec <readGRAM+0x5d8>)
 8003c68:	f7fe f954 	bl	8001f14 <PIN_LOW>
 8003c6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c70:	489e      	ldr	r0, [pc, #632]	; (8003eec <readGRAM+0x5d8>)
 8003c72:	f7fe f94f 	bl	8001f14 <PIN_LOW>
 8003c76:	4b9e      	ldr	r3, [pc, #632]	; (8003ef0 <readGRAM+0x5dc>)
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	085b      	lsrs	r3, r3, #1
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	4b9b      	ldr	r3, [pc, #620]	; (8003ef4 <readGRAM+0x5e0>)
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	0a1b      	lsrs	r3, r3, #8
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	4313      	orrs	r3, r2
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4b97      	ldr	r3, [pc, #604]	; (8003ef4 <readGRAM+0x5e0>)
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	4b92      	ldr	r3, [pc, #584]	; (8003ef4 <readGRAM+0x5e0>)
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4b8c      	ldr	r3, [pc, #560]	; (8003eec <readGRAM+0x5d8>)
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	4b87      	ldr	r3, [pc, #540]	; (8003eec <readGRAM+0x5d8>)
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	4b82      	ldr	r3, [pc, #520]	; (8003eec <readGRAM+0x5d8>)
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	4b7d      	ldr	r3, [pc, #500]	; (8003eec <readGRAM+0x5d8>)
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	4313      	orrs	r3, r2
 8003d06:	76fb      	strb	r3, [r7, #27]
 8003d08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d0c:	4877      	ldr	r0, [pc, #476]	; (8003eec <readGRAM+0x5d8>)
 8003d0e:	f7fe f911 	bl	8001f34 <PIN_HIGH>
 8003d12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d16:	4875      	ldr	r0, [pc, #468]	; (8003eec <readGRAM+0x5d8>)
 8003d18:	f7fe f90c 	bl	8001f34 <PIN_HIGH>
 8003d1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d20:	4872      	ldr	r0, [pc, #456]	; (8003eec <readGRAM+0x5d8>)
 8003d22:	f7fe f907 	bl	8001f34 <PIN_HIGH>
 8003d26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d2a:	4870      	ldr	r0, [pc, #448]	; (8003eec <readGRAM+0x5d8>)
 8003d2c:	f7fe f8f2 	bl	8001f14 <PIN_LOW>
 8003d30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d34:	486d      	ldr	r0, [pc, #436]	; (8003eec <readGRAM+0x5d8>)
 8003d36:	f7fe f8ed 	bl	8001f14 <PIN_LOW>
 8003d3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d3e:	486b      	ldr	r0, [pc, #428]	; (8003eec <readGRAM+0x5d8>)
 8003d40:	f7fe f8e8 	bl	8001f14 <PIN_LOW>
 8003d44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d48:	4868      	ldr	r0, [pc, #416]	; (8003eec <readGRAM+0x5d8>)
 8003d4a:	f7fe f8e3 	bl	8001f14 <PIN_LOW>
 8003d4e:	4b68      	ldr	r3, [pc, #416]	; (8003ef0 <readGRAM+0x5dc>)
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	085b      	lsrs	r3, r3, #1
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	4b65      	ldr	r3, [pc, #404]	; (8003ef4 <readGRAM+0x5e0>)
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	0a1b      	lsrs	r3, r3, #8
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	4b61      	ldr	r3, [pc, #388]	; (8003ef4 <readGRAM+0x5e0>)
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	4b5c      	ldr	r3, [pc, #368]	; (8003ef4 <readGRAM+0x5e0>)
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	4b56      	ldr	r3, [pc, #344]	; (8003eec <readGRAM+0x5d8>)
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	4313      	orrs	r3, r2
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	4b51      	ldr	r3, [pc, #324]	; (8003eec <readGRAM+0x5d8>)
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	4313      	orrs	r3, r2
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	4b4c      	ldr	r3, [pc, #304]	; (8003eec <readGRAM+0x5d8>)
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	4b47      	ldr	r3, [pc, #284]	; (8003eec <readGRAM+0x5d8>)
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	833b      	strh	r3, [r7, #24]
 8003de0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003de4:	4841      	ldr	r0, [pc, #260]	; (8003eec <readGRAM+0x5d8>)
 8003de6:	f7fe f8a5 	bl	8001f34 <PIN_HIGH>
 8003dea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dee:	483f      	ldr	r0, [pc, #252]	; (8003eec <readGRAM+0x5d8>)
 8003df0:	f7fe f8a0 	bl	8001f34 <PIN_HIGH>
 8003df4:	7efb      	ldrb	r3, [r7, #27]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	b21a      	sxth	r2, r3
 8003dfa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	b21b      	sxth	r3, r3
 8003e02:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8003e04:	4b3c      	ldr	r3, [pc, #240]	; (8003ef8 <readGRAM+0x5e4>)
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	f241 5211 	movw	r2, #5393	; 0x1511
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	f040 8302 	bne.w	8004416 <readGRAM+0xb02>
 8003e12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e16:	4835      	ldr	r0, [pc, #212]	; (8003eec <readGRAM+0x5d8>)
 8003e18:	f7fe f88c 	bl	8001f34 <PIN_HIGH>
 8003e1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e20:	4832      	ldr	r0, [pc, #200]	; (8003eec <readGRAM+0x5d8>)
 8003e22:	f7fe f877 	bl	8001f14 <PIN_LOW>
 8003e26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e2a:	4830      	ldr	r0, [pc, #192]	; (8003eec <readGRAM+0x5d8>)
 8003e2c:	f7fe f872 	bl	8001f14 <PIN_LOW>
 8003e30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e34:	482d      	ldr	r0, [pc, #180]	; (8003eec <readGRAM+0x5d8>)
 8003e36:	f7fe f86d 	bl	8001f14 <PIN_LOW>
 8003e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e3e:	482b      	ldr	r0, [pc, #172]	; (8003eec <readGRAM+0x5d8>)
 8003e40:	f7fe f868 	bl	8001f14 <PIN_LOW>
 8003e44:	4b2a      	ldr	r3, [pc, #168]	; (8003ef0 <readGRAM+0x5dc>)
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	4b28      	ldr	r3, [pc, #160]	; (8003ef4 <readGRAM+0x5e0>)
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	0a1b      	lsrs	r3, r3, #8
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	4313      	orrs	r3, r2
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	4b23      	ldr	r3, [pc, #140]	; (8003ef4 <readGRAM+0x5e0>)
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	4313      	orrs	r3, r2
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	4b1f      	ldr	r3, [pc, #124]	; (8003ef4 <readGRAM+0x5e0>)
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	4313      	orrs	r3, r2
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	4b18      	ldr	r3, [pc, #96]	; (8003eec <readGRAM+0x5d8>)
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	4b13      	ldr	r3, [pc, #76]	; (8003eec <readGRAM+0x5d8>)
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	085b      	lsrs	r3, r3, #1
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <readGRAM+0x5d8>)
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <readGRAM+0x5d8>)
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	75fb      	strb	r3, [r7, #23]
 8003ed6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003eda:	4804      	ldr	r0, [pc, #16]	; (8003eec <readGRAM+0x5d8>)
 8003edc:	f7fe f82a 	bl	8001f34 <PIN_HIGH>
 8003ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ee4:	4801      	ldr	r0, [pc, #4]	; (8003eec <readGRAM+0x5d8>)
 8003ee6:	f7fe f825 	bl	8001f34 <PIN_HIGH>
        while (n)
 8003eea:	e294      	b.n	8004416 <readGRAM+0xb02>
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	40021800 	.word	0x40021800
 8003ef4:	40021400 	.word	0x40021400
 8003ef8:	20003eda 	.word	0x20003eda
        {
            if (_lcd_capable & READ_24BITS)
 8003efc:	4bac      	ldr	r3, [pc, #688]	; (80041b0 <readGRAM+0x89c>)
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8164 	beq.w	80041d2 <readGRAM+0x8be>
            {
                READ_8(r);
 8003f0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f0e:	48a9      	ldr	r0, [pc, #676]	; (80041b4 <readGRAM+0x8a0>)
 8003f10:	f7fe f810 	bl	8001f34 <PIN_HIGH>
 8003f14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f18:	48a6      	ldr	r0, [pc, #664]	; (80041b4 <readGRAM+0x8a0>)
 8003f1a:	f7fd fffb 	bl	8001f14 <PIN_LOW>
 8003f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f22:	48a4      	ldr	r0, [pc, #656]	; (80041b4 <readGRAM+0x8a0>)
 8003f24:	f7fd fff6 	bl	8001f14 <PIN_LOW>
 8003f28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f2c:	48a1      	ldr	r0, [pc, #644]	; (80041b4 <readGRAM+0x8a0>)
 8003f2e:	f7fd fff1 	bl	8001f14 <PIN_LOW>
 8003f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f36:	489f      	ldr	r0, [pc, #636]	; (80041b4 <readGRAM+0x8a0>)
 8003f38:	f7fd ffec 	bl	8001f14 <PIN_LOW>
 8003f3c:	4b9e      	ldr	r3, [pc, #632]	; (80041b8 <readGRAM+0x8a4>)
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	085b      	lsrs	r3, r3, #1
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	4b9c      	ldr	r3, [pc, #624]	; (80041bc <readGRAM+0x8a8>)
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	0a1b      	lsrs	r3, r3, #8
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	4b97      	ldr	r3, [pc, #604]	; (80041bc <readGRAM+0x8a8>)
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	095b      	lsrs	r3, r3, #5
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4b93      	ldr	r3, [pc, #588]	; (80041bc <readGRAM+0x8a8>)
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	4b8c      	ldr	r3, [pc, #560]	; (80041b4 <readGRAM+0x8a0>)
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	4313      	orrs	r3, r2
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	4b87      	ldr	r3, [pc, #540]	; (80041b4 <readGRAM+0x8a0>)
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	4b83      	ldr	r3, [pc, #524]	; (80041b4 <readGRAM+0x8a0>)
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	4b7e      	ldr	r3, [pc, #504]	; (80041b4 <readGRAM+0x8a0>)
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	75fb      	strb	r3, [r7, #23]
 8003fce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fd2:	4878      	ldr	r0, [pc, #480]	; (80041b4 <readGRAM+0x8a0>)
 8003fd4:	f7fd ffae 	bl	8001f34 <PIN_HIGH>
 8003fd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fdc:	4875      	ldr	r0, [pc, #468]	; (80041b4 <readGRAM+0x8a0>)
 8003fde:	f7fd ffa9 	bl	8001f34 <PIN_HIGH>
                READ_8(g);
 8003fe2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fe6:	4873      	ldr	r0, [pc, #460]	; (80041b4 <readGRAM+0x8a0>)
 8003fe8:	f7fd ffa4 	bl	8001f34 <PIN_HIGH>
 8003fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ff0:	4870      	ldr	r0, [pc, #448]	; (80041b4 <readGRAM+0x8a0>)
 8003ff2:	f7fd ff8f 	bl	8001f14 <PIN_LOW>
 8003ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ffa:	486e      	ldr	r0, [pc, #440]	; (80041b4 <readGRAM+0x8a0>)
 8003ffc:	f7fd ff8a 	bl	8001f14 <PIN_LOW>
 8004000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004004:	486b      	ldr	r0, [pc, #428]	; (80041b4 <readGRAM+0x8a0>)
 8004006:	f7fd ff85 	bl	8001f14 <PIN_LOW>
 800400a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800400e:	4869      	ldr	r0, [pc, #420]	; (80041b4 <readGRAM+0x8a0>)
 8004010:	f7fd ff80 	bl	8001f14 <PIN_LOW>
 8004014:	4b68      	ldr	r3, [pc, #416]	; (80041b8 <readGRAM+0x8a4>)
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	b2db      	uxtb	r3, r3
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	b2da      	uxtb	r2, r3
 8004022:	4b66      	ldr	r3, [pc, #408]	; (80041bc <readGRAM+0x8a8>)
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	0a1b      	lsrs	r3, r3, #8
 8004028:	b2db      	uxtb	r3, r3
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	b2db      	uxtb	r3, r3
 8004030:	4313      	orrs	r3, r2
 8004032:	b2da      	uxtb	r2, r3
 8004034:	4b61      	ldr	r3, [pc, #388]	; (80041bc <readGRAM+0x8a8>)
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	b2db      	uxtb	r3, r3
 8004042:	4313      	orrs	r3, r2
 8004044:	b2da      	uxtb	r2, r3
 8004046:	4b5d      	ldr	r3, [pc, #372]	; (80041bc <readGRAM+0x8a8>)
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	b2db      	uxtb	r3, r3
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	b2db      	uxtb	r3, r3
 8004054:	4313      	orrs	r3, r2
 8004056:	b2da      	uxtb	r2, r3
 8004058:	4b56      	ldr	r3, [pc, #344]	; (80041b4 <readGRAM+0x8a0>)
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	b2db      	uxtb	r3, r3
 8004068:	4313      	orrs	r3, r2
 800406a:	b2da      	uxtb	r2, r3
 800406c:	4b51      	ldr	r3, [pc, #324]	; (80041b4 <readGRAM+0x8a0>)
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	b2db      	uxtb	r3, r3
 800407a:	4313      	orrs	r3, r2
 800407c:	b2da      	uxtb	r2, r3
 800407e:	4b4d      	ldr	r3, [pc, #308]	; (80041b4 <readGRAM+0x8a0>)
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	b2db      	uxtb	r3, r3
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	b2db      	uxtb	r3, r3
 800408e:	4313      	orrs	r3, r2
 8004090:	b2da      	uxtb	r2, r3
 8004092:	4b48      	ldr	r3, [pc, #288]	; (80041b4 <readGRAM+0x8a0>)
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	4313      	orrs	r3, r2
 80040a4:	757b      	strb	r3, [r7, #21]
 80040a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040aa:	4842      	ldr	r0, [pc, #264]	; (80041b4 <readGRAM+0x8a0>)
 80040ac:	f7fd ff42 	bl	8001f34 <PIN_HIGH>
 80040b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040b4:	483f      	ldr	r0, [pc, #252]	; (80041b4 <readGRAM+0x8a0>)
 80040b6:	f7fd ff3d 	bl	8001f34 <PIN_HIGH>
                READ_8(b);
 80040ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040be:	483d      	ldr	r0, [pc, #244]	; (80041b4 <readGRAM+0x8a0>)
 80040c0:	f7fd ff38 	bl	8001f34 <PIN_HIGH>
 80040c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040c8:	483a      	ldr	r0, [pc, #232]	; (80041b4 <readGRAM+0x8a0>)
 80040ca:	f7fd ff23 	bl	8001f14 <PIN_LOW>
 80040ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040d2:	4838      	ldr	r0, [pc, #224]	; (80041b4 <readGRAM+0x8a0>)
 80040d4:	f7fd ff1e 	bl	8001f14 <PIN_LOW>
 80040d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040dc:	4835      	ldr	r0, [pc, #212]	; (80041b4 <readGRAM+0x8a0>)
 80040de:	f7fd ff19 	bl	8001f14 <PIN_LOW>
 80040e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040e6:	4833      	ldr	r0, [pc, #204]	; (80041b4 <readGRAM+0x8a0>)
 80040e8:	f7fd ff14 	bl	8001f14 <PIN_LOW>
 80040ec:	4b32      	ldr	r3, [pc, #200]	; (80041b8 <readGRAM+0x8a4>)
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	4b30      	ldr	r3, [pc, #192]	; (80041bc <readGRAM+0x8a8>)
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	0a1b      	lsrs	r3, r3, #8
 8004100:	b2db      	uxtb	r3, r3
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	b2db      	uxtb	r3, r3
 8004108:	4313      	orrs	r3, r2
 800410a:	b2da      	uxtb	r2, r3
 800410c:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <readGRAM+0x8a8>)
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	b2db      	uxtb	r3, r3
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	b2db      	uxtb	r3, r3
 800411a:	4313      	orrs	r3, r2
 800411c:	b2da      	uxtb	r2, r3
 800411e:	4b27      	ldr	r3, [pc, #156]	; (80041bc <readGRAM+0x8a8>)
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	b2db      	uxtb	r3, r3
 800412c:	4313      	orrs	r3, r2
 800412e:	b2da      	uxtb	r2, r3
 8004130:	4b20      	ldr	r3, [pc, #128]	; (80041b4 <readGRAM+0x8a0>)
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f003 0310 	and.w	r3, r3, #16
 800413e:	b2db      	uxtb	r3, r3
 8004140:	4313      	orrs	r3, r2
 8004142:	b2da      	uxtb	r2, r3
 8004144:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <readGRAM+0x8a0>)
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	085b      	lsrs	r3, r3, #1
 800414a:	b2db      	uxtb	r3, r3
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	b2db      	uxtb	r3, r3
 8004152:	4313      	orrs	r3, r2
 8004154:	b2da      	uxtb	r2, r3
 8004156:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <readGRAM+0x8a0>)
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	b2db      	uxtb	r3, r3
 8004166:	4313      	orrs	r3, r2
 8004168:	b2da      	uxtb	r2, r3
 800416a:	4b12      	ldr	r3, [pc, #72]	; (80041b4 <readGRAM+0x8a0>)
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004178:	b2db      	uxtb	r3, r3
 800417a:	4313      	orrs	r3, r2
 800417c:	753b      	strb	r3, [r7, #20]
 800417e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004182:	480c      	ldr	r0, [pc, #48]	; (80041b4 <readGRAM+0x8a0>)
 8004184:	f7fd fed6 	bl	8001f34 <PIN_HIGH>
 8004188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800418c:	4809      	ldr	r0, [pc, #36]	; (80041b4 <readGRAM+0x8a0>)
 800418e:	f7fd fed1 	bl	8001f34 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8004192:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <readGRAM+0x89c>)
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d010      	beq.n	80041c0 <readGRAM+0x8ac>
                    ret = color565(b, g, r);
 800419e:	7dfa      	ldrb	r2, [r7, #23]
 80041a0:	7d79      	ldrb	r1, [r7, #21]
 80041a2:	7d3b      	ldrb	r3, [r7, #20]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fd ff8d 	bl	80020c4 <color565>
 80041aa:	4603      	mov	r3, r0
 80041ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 80041ae:	e117      	b.n	80043e0 <readGRAM+0xacc>
 80041b0:	20003ecc 	.word	0x20003ecc
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40021800 	.word	0x40021800
 80041bc:	40021400 	.word	0x40021400
                else
                    ret = color565(r, g, b);
 80041c0:	7d3a      	ldrb	r2, [r7, #20]
 80041c2:	7d79      	ldrb	r1, [r7, #21]
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fd ff7c 	bl	80020c4 <color565>
 80041cc:	4603      	mov	r3, r0
 80041ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80041d0:	e106      	b.n	80043e0 <readGRAM+0xacc>
            } else
            {
                READ_16(ret);
 80041d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041d6:	4893      	ldr	r0, [pc, #588]	; (8004424 <readGRAM+0xb10>)
 80041d8:	f7fd feac 	bl	8001f34 <PIN_HIGH>
 80041dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041e0:	4890      	ldr	r0, [pc, #576]	; (8004424 <readGRAM+0xb10>)
 80041e2:	f7fd fe97 	bl	8001f14 <PIN_LOW>
 80041e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041ea:	488e      	ldr	r0, [pc, #568]	; (8004424 <readGRAM+0xb10>)
 80041ec:	f7fd fe92 	bl	8001f14 <PIN_LOW>
 80041f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041f4:	488b      	ldr	r0, [pc, #556]	; (8004424 <readGRAM+0xb10>)
 80041f6:	f7fd fe8d 	bl	8001f14 <PIN_LOW>
 80041fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041fe:	4889      	ldr	r0, [pc, #548]	; (8004424 <readGRAM+0xb10>)
 8004200:	f7fd fe88 	bl	8001f14 <PIN_LOW>
 8004204:	4b88      	ldr	r3, [pc, #544]	; (8004428 <readGRAM+0xb14>)
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	085b      	lsrs	r3, r3, #1
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	b2da      	uxtb	r2, r3
 8004212:	4b86      	ldr	r3, [pc, #536]	; (800442c <readGRAM+0xb18>)
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	b2db      	uxtb	r3, r3
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	b2db      	uxtb	r3, r3
 8004220:	4313      	orrs	r3, r2
 8004222:	b2da      	uxtb	r2, r3
 8004224:	4b81      	ldr	r3, [pc, #516]	; (800442c <readGRAM+0xb18>)
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	b2db      	uxtb	r3, r3
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	b2db      	uxtb	r3, r3
 8004232:	4313      	orrs	r3, r2
 8004234:	b2da      	uxtb	r2, r3
 8004236:	4b7d      	ldr	r3, [pc, #500]	; (800442c <readGRAM+0xb18>)
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	b2db      	uxtb	r3, r3
 8004244:	4313      	orrs	r3, r2
 8004246:	b2da      	uxtb	r2, r3
 8004248:	4b76      	ldr	r3, [pc, #472]	; (8004424 <readGRAM+0xb10>)
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	b2db      	uxtb	r3, r3
 8004258:	4313      	orrs	r3, r2
 800425a:	b2da      	uxtb	r2, r3
 800425c:	4b71      	ldr	r3, [pc, #452]	; (8004424 <readGRAM+0xb10>)
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	085b      	lsrs	r3, r3, #1
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	b2db      	uxtb	r3, r3
 800426a:	4313      	orrs	r3, r2
 800426c:	b2da      	uxtb	r2, r3
 800426e:	4b6d      	ldr	r3, [pc, #436]	; (8004424 <readGRAM+0xb10>)
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	b2db      	uxtb	r3, r3
 8004278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427c:	b2db      	uxtb	r3, r3
 800427e:	4313      	orrs	r3, r2
 8004280:	b2da      	uxtb	r2, r3
 8004282:	4b68      	ldr	r3, [pc, #416]	; (8004424 <readGRAM+0xb10>)
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004290:	b2db      	uxtb	r3, r3
 8004292:	4313      	orrs	r3, r2
 8004294:	75bb      	strb	r3, [r7, #22]
 8004296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800429a:	4862      	ldr	r0, [pc, #392]	; (8004424 <readGRAM+0xb10>)
 800429c:	f7fd fe4a 	bl	8001f34 <PIN_HIGH>
 80042a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042a4:	485f      	ldr	r0, [pc, #380]	; (8004424 <readGRAM+0xb10>)
 80042a6:	f7fd fe45 	bl	8001f34 <PIN_HIGH>
 80042aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042ae:	485d      	ldr	r0, [pc, #372]	; (8004424 <readGRAM+0xb10>)
 80042b0:	f7fd fe40 	bl	8001f34 <PIN_HIGH>
 80042b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042b8:	485a      	ldr	r0, [pc, #360]	; (8004424 <readGRAM+0xb10>)
 80042ba:	f7fd fe2b 	bl	8001f14 <PIN_LOW>
 80042be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042c2:	4858      	ldr	r0, [pc, #352]	; (8004424 <readGRAM+0xb10>)
 80042c4:	f7fd fe26 	bl	8001f14 <PIN_LOW>
 80042c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042cc:	4855      	ldr	r0, [pc, #340]	; (8004424 <readGRAM+0xb10>)
 80042ce:	f7fd fe21 	bl	8001f14 <PIN_LOW>
 80042d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042d6:	4853      	ldr	r0, [pc, #332]	; (8004424 <readGRAM+0xb10>)
 80042d8:	f7fd fe1c 	bl	8001f14 <PIN_LOW>
 80042dc:	4b52      	ldr	r3, [pc, #328]	; (8004428 <readGRAM+0xb14>)
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	4b50      	ldr	r3, [pc, #320]	; (800442c <readGRAM+0xb18>)
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	4313      	orrs	r3, r2
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	4b4b      	ldr	r3, [pc, #300]	; (800442c <readGRAM+0xb18>)
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	b29b      	uxth	r3, r3
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	b29b      	uxth	r3, r3
 800430a:	4313      	orrs	r3, r2
 800430c:	b29a      	uxth	r2, r3
 800430e:	4b47      	ldr	r3, [pc, #284]	; (800442c <readGRAM+0xb18>)
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	b29b      	uxth	r3, r3
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	b29b      	uxth	r3, r3
 800431c:	4313      	orrs	r3, r2
 800431e:	b29a      	uxth	r2, r3
 8004320:	4b40      	ldr	r3, [pc, #256]	; (8004424 <readGRAM+0xb10>)
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	b29b      	uxth	r3, r3
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	b29b      	uxth	r3, r3
 800432a:	f003 0310 	and.w	r3, r3, #16
 800432e:	b29b      	uxth	r3, r3
 8004330:	4313      	orrs	r3, r2
 8004332:	b29a      	uxth	r2, r3
 8004334:	4b3b      	ldr	r3, [pc, #236]	; (8004424 <readGRAM+0xb10>)
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	b29b      	uxth	r3, r3
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	b29b      	uxth	r3, r3
 8004342:	4313      	orrs	r3, r2
 8004344:	b29a      	uxth	r2, r3
 8004346:	4b37      	ldr	r3, [pc, #220]	; (8004424 <readGRAM+0xb10>)
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	b29b      	uxth	r3, r3
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	b29b      	uxth	r3, r3
 8004350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004354:	b29b      	uxth	r3, r3
 8004356:	4313      	orrs	r3, r2
 8004358:	b29a      	uxth	r2, r3
 800435a:	4b32      	ldr	r3, [pc, #200]	; (8004424 <readGRAM+0xb10>)
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	b29b      	uxth	r3, r3
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	b29b      	uxth	r3, r3
 8004364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004368:	b29b      	uxth	r3, r3
 800436a:	4313      	orrs	r3, r2
 800436c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800436e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004372:	482c      	ldr	r0, [pc, #176]	; (8004424 <readGRAM+0xb10>)
 8004374:	f7fd fdde 	bl	8001f34 <PIN_HIGH>
 8004378:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800437c:	4829      	ldr	r0, [pc, #164]	; (8004424 <readGRAM+0xb10>)
 800437e:	f7fd fdd9 	bl	8001f34 <PIN_HIGH>
 8004382:	7dbb      	ldrb	r3, [r7, #22]
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	b21a      	sxth	r2, r3
 8004388:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800438c:	4313      	orrs	r3, r2
 800438e:	b21b      	sxth	r3, r3
 8004390:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 8004392:	4b27      	ldr	r3, [pc, #156]	; (8004430 <readGRAM+0xb1c>)
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <readGRAM+0xa9e>
                    ret = (ret >> 8) | (ret << 8);
 800439e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043a0:	0a1b      	lsrs	r3, r3, #8
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	b21a      	sxth	r2, r3
 80043a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	b21b      	sxth	r3, r3
 80043ac:	4313      	orrs	r3, r2
 80043ae:	b21b      	sxth	r3, r3
 80043b0:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 80043b2:	4b1f      	ldr	r3, [pc, #124]	; (8004430 <readGRAM+0xb1c>)
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d010      	beq.n	80043e0 <readGRAM+0xacc>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 80043be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80043c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80043c6:	b21a      	sxth	r2, r3
 80043c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043ca:	0adb      	lsrs	r3, r3, #11
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	b21b      	sxth	r3, r3
 80043d0:	4313      	orrs	r3, r2
 80043d2:	b21a      	sxth	r2, r3
 80043d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043d6:	02db      	lsls	r3, r3, #11
 80043d8:	b21b      	sxth	r3, r3
 80043da:	4313      	orrs	r3, r2
 80043dc:	b21b      	sxth	r3, r3
 80043de:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 80043e0:	4b14      	ldr	r3, [pc, #80]	; (8004434 <readGRAM+0xb20>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <readGRAM+0xae0>
 80043e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fd fe18 	bl	8002020 <color555_to_565>
 80043f0:	4603      	mov	r3, r0
 80043f2:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	1c9a      	adds	r2, r3, #2
 80043f8:	60ba      	str	r2, [r7, #8]
 80043fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80043fc:	801a      	strh	r2, [r3, #0]
            n--;
 80043fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29b      	uxth	r3, r3
 8004408:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 800440a:	4b09      	ldr	r3, [pc, #36]	; (8004430 <readGRAM+0xb1c>)
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d010      	beq.n	8004438 <readGRAM+0xb24>
        while (n)
 8004416:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800441a:	2b00      	cmp	r3, #0
 800441c:	f47f ad6e 	bne.w	8003efc <readGRAM+0x5e8>
 8004420:	e00b      	b.n	800443a <readGRAM+0xb26>
 8004422:	bf00      	nop
 8004424:	40021000 	.word	0x40021000
 8004428:	40021800 	.word	0x40021800
 800442c:	40021400 	.word	0x40021400
 8004430:	20003ecc 	.word	0x20003ecc
 8004434:	20003bce 	.word	0x20003bce
                break;
 8004438:	bf00      	nop
        }
        if (++col >= w) {
 800443a:	8bfb      	ldrh	r3, [r7, #30]
 800443c:	3301      	adds	r3, #1
 800443e:	b29b      	uxth	r3, r3
 8004440:	83fb      	strh	r3, [r7, #30]
 8004442:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800444a:	429a      	cmp	r2, r3
 800444c:	db0d      	blt.n	800446a <readGRAM+0xb56>
            col = 0;
 800444e:	2300      	movs	r3, #0
 8004450:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 8004452:	8c3b      	ldrh	r3, [r7, #32]
 8004454:	3301      	adds	r3, #1
 8004456:	b29b      	uxth	r3, r3
 8004458:	843b      	strh	r3, [r7, #32]
 800445a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800445e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8004462:	429a      	cmp	r2, r3
 8004464:	db01      	blt.n	800446a <readGRAM+0xb56>
                row = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 800446a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800446e:	4815      	ldr	r0, [pc, #84]	; (80044c4 <readGRAM+0xbb0>)
 8004470:	f7fd fd60 	bl	8001f34 <PIN_HIGH>
        CS_IDLE;
 8004474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004478:	4813      	ldr	r0, [pc, #76]	; (80044c8 <readGRAM+0xbb4>)
 800447a:	f7fd fd5b 	bl	8001f34 <PIN_HIGH>
        setWriteDir();
 800447e:	f7fd feb1 	bl	80021e4 <setWriteDir>
    while (n > 0) {
 8004482:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004486:	2b00      	cmp	r3, #0
 8004488:	f73f aa90 	bgt.w	80039ac <readGRAM+0x98>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 800448c:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <readGRAM+0xbb8>)
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d110      	bne.n	80044ba <readGRAM+0xba6>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8004498:	f7fd fd8a 	bl	8001fb0 <width>
 800449c:	4603      	mov	r3, r0
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	b21c      	sxth	r4, r3
 80044a4:	f7fd fd90 	bl	8001fc8 <height>
 80044a8:	4603      	mov	r3, r0
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	b21b      	sxth	r3, r3
 80044b0:	4622      	mov	r2, r4
 80044b2:	2100      	movs	r1, #0
 80044b4:	2000      	movs	r0, #0
 80044b6:	f000 fb8f 	bl	8004bd8 <setAddrWindow>
    return 0;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	372c      	adds	r7, #44	; 0x2c
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd90      	pop	{r4, r7, pc}
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40020400 	.word	0x40020400
 80044cc:	20003ecc 	.word	0x20003ecc

080044d0 <setRotation>:

void setRotation(uint8_t r)
{
 80044d0:	b590      	push	{r4, r7, lr}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 80044da:	4bab      	ldr	r3, [pc, #684]	; (8004788 <setRotation+0x2b8>)
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	4ba8      	ldr	r3, [pc, #672]	; (800478c <setRotation+0x2bc>)
 80044ea:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 80044ec:	4ba7      	ldr	r3, [pc, #668]	; (800478c <setRotation+0x2bc>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <setRotation+0x2e>
 80044f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80044fc:	e000      	b.n	8004500 <setRotation+0x30>
 80044fe:	22f0      	movs	r2, #240	; 0xf0
 8004500:	4ba3      	ldr	r3, [pc, #652]	; (8004790 <setRotation+0x2c0>)
 8004502:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8004504:	4ba1      	ldr	r3, [pc, #644]	; (800478c <setRotation+0x2bc>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <setRotation+0x44>
 8004510:	22f0      	movs	r2, #240	; 0xf0
 8004512:	e001      	b.n	8004518 <setRotation+0x48>
 8004514:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004518:	4b9e      	ldr	r3, [pc, #632]	; (8004794 <setRotation+0x2c4>)
 800451a:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 800451c:	4b9b      	ldr	r3, [pc, #620]	; (800478c <setRotation+0x2bc>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b03      	cmp	r3, #3
 8004522:	d817      	bhi.n	8004554 <setRotation+0x84>
 8004524:	a201      	add	r2, pc, #4	; (adr r2, 800452c <setRotation+0x5c>)
 8004526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452a:	bf00      	nop
 800452c:	0800453d 	.word	0x0800453d
 8004530:	08004543 	.word	0x08004543
 8004534:	08004549 	.word	0x08004549
 8004538:	0800454f 	.word	0x0800454f
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 800453c:	2348      	movs	r3, #72	; 0x48
 800453e:	72fb      	strb	r3, [r7, #11]
       break;
 8004540:	e008      	b.n	8004554 <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8004542:	2328      	movs	r3, #40	; 0x28
 8004544:	72fb      	strb	r3, [r7, #11]
       break;
 8004546:	e005      	b.n	8004554 <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8004548:	2398      	movs	r3, #152	; 0x98
 800454a:	72fb      	strb	r3, [r7, #11]
       break;
 800454c:	e002      	b.n	8004554 <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 800454e:	23f8      	movs	r3, #248	; 0xf8
 8004550:	72fb      	strb	r3, [r7, #11]
       break;
 8004552:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8004554:	4b90      	ldr	r3, [pc, #576]	; (8004798 <setRotation+0x2c8>)
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <setRotation+0x9c>
       val ^= 0x80;
 8004560:	7afa      	ldrb	r2, [r7, #11]
 8004562:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8004566:	4053      	eors	r3, r2
 8004568:	b2db      	uxtb	r3, r3
 800456a:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 800456c:	4b8a      	ldr	r3, [pc, #552]	; (8004798 <setRotation+0x2c8>)
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <setRotation+0xb2>
       val ^= 0x40;
 8004578:	7afb      	ldrb	r3, [r7, #11]
 800457a:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800457e:	b2db      	uxtb	r3, r3
 8004580:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 8004582:	4b85      	ldr	r3, [pc, #532]	; (8004798 <setRotation+0x2c8>)
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800458a:	2b00      	cmp	r3, #0
 800458c:	d004      	beq.n	8004598 <setRotation+0xc8>
       val ^= 0x08;
 800458e:	7afb      	ldrb	r3, [r7, #11]
 8004590:	f083 0308 	eor.w	r3, r3, #8
 8004594:	b2db      	uxtb	r3, r3
 8004596:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8004598:	4b7f      	ldr	r3, [pc, #508]	; (8004798 <setRotation+0x2c8>)
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8119 	beq.w	80047d8 <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 80045a6:	4b7d      	ldr	r3, [pc, #500]	; (800479c <setRotation+0x2cc>)
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	f646 0214 	movw	r2, #26644	; 0x6814
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d128      	bne.n	8004604 <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 80045b2:	7afb      	ldrb	r3, [r7, #11]
 80045b4:	b25b      	sxtb	r3, r3
 80045b6:	105b      	asrs	r3, r3, #1
 80045b8:	b25b      	sxtb	r3, r3
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c0:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 80045c2:	7afb      	ldrb	r3, [r7, #11]
 80045c4:	105b      	asrs	r3, r3, #1
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 80045ce:	7afb      	ldrb	r3, [r7, #11]
 80045d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 80045dc:	8a3b      	ldrh	r3, [r7, #16]
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	89fb      	ldrh	r3, [r7, #14]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	4313      	orrs	r3, r2
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f043 0302 	orr.w	r3, r3, #2
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 80045f0:	233b      	movs	r3, #59	; 0x3b
 80045f2:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 80045f4:	f107 0308 	add.w	r3, r7, #8
 80045f8:	461a      	mov	r2, r3
 80045fa:	2103      	movs	r1, #3
 80045fc:	20b6      	movs	r0, #182	; 0xb6
 80045fe:	f7fe f85d 	bl	80026bc <WriteCmdParamN>
           goto common_MC;
 8004602:	e0a4      	b.n	800474e <setRotation+0x27e>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8004604:	4b65      	ldr	r3, [pc, #404]	; (800479c <setRotation+0x2cc>)
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	f641 1263 	movw	r2, #6499	; 0x1963
 800460c:	4293      	cmp	r3, r2
 800460e:	d00b      	beq.n	8004628 <setRotation+0x158>
 8004610:	4b62      	ldr	r3, [pc, #392]	; (800479c <setRotation+0x2cc>)
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	f249 4281 	movw	r2, #38017	; 0x9481
 8004618:	4293      	cmp	r3, r2
 800461a:	d005      	beq.n	8004628 <setRotation+0x158>
 800461c:	4b5f      	ldr	r3, [pc, #380]	; (800479c <setRotation+0x2cc>)
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	f241 5211 	movw	r2, #5393	; 0x1511
 8004624:	4293      	cmp	r3, r2
 8004626:	d139      	bne.n	800469c <setRotation+0x1cc>
           if (val & 0x80)
 8004628:	7afb      	ldrb	r3, [r7, #11]
 800462a:	b25b      	sxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	da04      	bge.n	800463a <setRotation+0x16a>
               val |= 0x01;    //GS
 8004630:	7afb      	ldrb	r3, [r7, #11]
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	b2db      	uxtb	r3, r3
 8004638:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 800463a:	7afb      	ldrb	r3, [r7, #11]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b00      	cmp	r3, #0
 8004642:	d004      	beq.n	800464e <setRotation+0x17e>
               val |= 0x02;    //SS
 8004644:	7afb      	ldrb	r3, [r7, #11]
 8004646:	f043 0302 	orr.w	r3, r3, #2
 800464a:	b2db      	uxtb	r3, r3
 800464c:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 800464e:	4b53      	ldr	r3, [pc, #332]	; (800479c <setRotation+0x2cc>)
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	f641 1263 	movw	r2, #6499	; 0x1963
 8004656:	4293      	cmp	r3, r2
 8004658:	d104      	bne.n	8004664 <setRotation+0x194>
 800465a:	7afb      	ldrb	r3, [r7, #11]
 800465c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004660:	b2db      	uxtb	r3, r3
 8004662:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8004664:	4b4d      	ldr	r3, [pc, #308]	; (800479c <setRotation+0x2cc>)
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	f249 4281 	movw	r2, #38017	; 0x9481
 800466c:	4293      	cmp	r3, r2
 800466e:	d104      	bne.n	800467a <setRotation+0x1aa>
 8004670:	7afb      	ldrb	r3, [r7, #11]
 8004672:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 8004676:	b2db      	uxtb	r3, r3
 8004678:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 800467a:	4b48      	ldr	r3, [pc, #288]	; (800479c <setRotation+0x2cc>)
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	f241 5211 	movw	r2, #5393	; 0x1511
 8004682:	4293      	cmp	r3, r2
 8004684:	d160      	bne.n	8004748 <setRotation+0x278>
               val &= ~0x10;   //remove ML
 8004686:	7afb      	ldrb	r3, [r7, #11]
 8004688:	f023 0310 	bic.w	r3, r3, #16
 800468c:	b2db      	uxtb	r3, r3
 800468e:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 8004690:	7afb      	ldrb	r3, [r7, #11]
 8004692:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004696:	b2db      	uxtb	r3, r3
 8004698:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 800469a:	e055      	b.n	8004748 <setRotation+0x278>
      }
       else if (is8347) {
 800469c:	4b40      	ldr	r3, [pc, #256]	; (80047a0 <setRotation+0x2d0>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d053      	beq.n	800474c <setRotation+0x27c>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 80046a4:	4b3f      	ldr	r3, [pc, #252]	; (80047a4 <setRotation+0x2d4>)
 80046a6:	2202      	movs	r2, #2
 80046a8:	801a      	strh	r2, [r3, #0]
 80046aa:	4b3f      	ldr	r3, [pc, #252]	; (80047a8 <setRotation+0x2d8>)
 80046ac:	2206      	movs	r2, #6
 80046ae:	801a      	strh	r2, [r3, #0]
 80046b0:	4b3e      	ldr	r3, [pc, #248]	; (80047ac <setRotation+0x2dc>)
 80046b2:	2222      	movs	r2, #34	; 0x22
 80046b4:	801a      	strh	r2, [r3, #0]
 80046b6:	4b3e      	ldr	r3, [pc, #248]	; (80047b0 <setRotation+0x2e0>)
 80046b8:	2202      	movs	r2, #2
 80046ba:	801a      	strh	r2, [r3, #0]
 80046bc:	4b3d      	ldr	r3, [pc, #244]	; (80047b4 <setRotation+0x2e4>)
 80046be:	2204      	movs	r2, #4
 80046c0:	801a      	strh	r2, [r3, #0]
 80046c2:	4b3d      	ldr	r3, [pc, #244]	; (80047b8 <setRotation+0x2e8>)
 80046c4:	2206      	movs	r2, #6
 80046c6:	801a      	strh	r2, [r3, #0]
 80046c8:	4b3c      	ldr	r3, [pc, #240]	; (80047bc <setRotation+0x2ec>)
 80046ca:	2208      	movs	r2, #8
 80046cc:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 80046ce:	4b33      	ldr	r3, [pc, #204]	; (800479c <setRotation+0x2cc>)
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	2b65      	cmp	r3, #101	; 0x65
 80046d4:	d121      	bne.n	800471a <setRotation+0x24a>
               val |= 0x01;    //GS=1
 80046d6:	7afb      	ldrb	r3, [r7, #11]
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 80046e0:	7afb      	ldrb	r3, [r7, #11]
 80046e2:	f003 0310 	and.w	r3, r3, #16
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <setRotation+0x226>
 80046ea:	7afa      	ldrb	r2, [r7, #11]
 80046ec:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 80046f0:	4053      	eors	r3, r2
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d006      	beq.n	800470e <setRotation+0x23e>
 8004700:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <setRotation+0x2d4>)
 8004702:	2282      	movs	r2, #130	; 0x82
 8004704:	801a      	strh	r2, [r3, #0]
 8004706:	4b28      	ldr	r3, [pc, #160]	; (80047a8 <setRotation+0x2d8>)
 8004708:	2280      	movs	r2, #128	; 0x80
 800470a:	801a      	strh	r2, [r3, #0]
 800470c:	e005      	b.n	800471a <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 800470e:	4b25      	ldr	r3, [pc, #148]	; (80047a4 <setRotation+0x2d4>)
 8004710:	2280      	movs	r2, #128	; 0x80
 8004712:	801a      	strh	r2, [r3, #0]
 8004714:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <setRotation+0x2d8>)
 8004716:	2282      	movs	r2, #130	; 0x82
 8004718:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 800471a:	4b20      	ldr	r3, [pc, #128]	; (800479c <setRotation+0x2cc>)
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	f245 2252 	movw	r2, #21074	; 0x5252
 8004722:	4293      	cmp	r3, r2
 8004724:	d129      	bne.n	800477a <setRotation+0x2aa>
               val |= 0x02;   //VERT_SCROLLON
 8004726:	7afb      	ldrb	r3, [r7, #11]
 8004728:	f043 0302 	orr.w	r3, r3, #2
 800472c:	b2db      	uxtb	r3, r3
 800472e:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 8004730:	7afb      	ldrb	r3, [r7, #11]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b00      	cmp	r3, #0
 8004738:	d01f      	beq.n	800477a <setRotation+0x2aa>
 800473a:	7afa      	ldrb	r2, [r7, #11]
 800473c:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8004740:	4053      	eors	r3, r2
 8004742:	b2db      	uxtb	r3, r3
 8004744:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 8004746:	e018      	b.n	800477a <setRotation+0x2aa>
           goto common_MC;
 8004748:	bf00      	nop
 800474a:	e000      	b.n	800474e <setRotation+0x27e>
       }
     common_MC:
 800474c:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 800474e:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <setRotation+0x2d4>)
 8004750:	222a      	movs	r2, #42	; 0x2a
 8004752:	801a      	strh	r2, [r3, #0]
 8004754:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <setRotation+0x2d8>)
 8004756:	222b      	movs	r2, #43	; 0x2b
 8004758:	801a      	strh	r2, [r3, #0]
 800475a:	4b14      	ldr	r3, [pc, #80]	; (80047ac <setRotation+0x2dc>)
 800475c:	222c      	movs	r2, #44	; 0x2c
 800475e:	801a      	strh	r2, [r3, #0]
 8004760:	4b13      	ldr	r3, [pc, #76]	; (80047b0 <setRotation+0x2e0>)
 8004762:	222a      	movs	r2, #42	; 0x2a
 8004764:	801a      	strh	r2, [r3, #0]
 8004766:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <setRotation+0x2e4>)
 8004768:	222a      	movs	r2, #42	; 0x2a
 800476a:	801a      	strh	r2, [r3, #0]
 800476c:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <setRotation+0x2e8>)
 800476e:	222b      	movs	r2, #43	; 0x2b
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	4b12      	ldr	r3, [pc, #72]	; (80047bc <setRotation+0x2ec>)
 8004774:	222b      	movs	r2, #43	; 0x2b
 8004776:	801a      	strh	r2, [r3, #0]
 8004778:	e000      	b.n	800477c <setRotation+0x2ac>
			goto common_BGR;
 800477a:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 800477c:	4b08      	ldr	r3, [pc, #32]	; (80047a0 <setRotation+0x2d0>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01d      	beq.n	80047c0 <setRotation+0x2f0>
 8004784:	2316      	movs	r3, #22
 8004786:	e01c      	b.n	80047c2 <setRotation+0x2f2>
 8004788:	20003ed0 	.word	0x20003ed0
 800478c:	20003bd0 	.word	0x20003bd0
 8004790:	20003b90 	.word	0x20003b90
 8004794:	20003b92 	.word	0x20003b92
 8004798:	20003ecc 	.word	0x20003ecc
 800479c:	20003eda 	.word	0x20003eda
 80047a0:	20003bcd 	.word	0x20003bcd
 80047a4:	20003ed4 	.word	0x20003ed4
 80047a8:	20003ed2 	.word	0x20003ed2
 80047ac:	20003eca 	.word	0x20003eca
 80047b0:	20003ed6 	.word	0x20003ed6
 80047b4:	20003ede 	.word	0x20003ede
 80047b8:	20003ece 	.word	0x20003ece
 80047bc:	20003ed8 	.word	0x20003ed8
 80047c0:	2336      	movs	r3, #54	; 0x36
 80047c2:	f107 020b 	add.w	r2, r7, #11
 80047c6:	2101      	movs	r1, #1
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fd ff77 	bl	80026bc <WriteCmdParamN>
       _lcd_madctl = val;
 80047ce:	7afb      	ldrb	r3, [r7, #11]
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	4b73      	ldr	r3, [pc, #460]	; (80049a0 <setRotation+0x4d0>)
 80047d4:	801a      	strh	r2, [r3, #0]
 80047d6:	e09e      	b.n	8004916 <setRotation+0x446>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 80047d8:	4b72      	ldr	r3, [pc, #456]	; (80049a4 <setRotation+0x4d4>)
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	f247 7293 	movw	r2, #30611	; 0x7793
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d010      	beq.n	8004806 <setRotation+0x336>
 80047e4:	f247 7293 	movw	r2, #30611	; 0x7793
 80047e8:	4293      	cmp	r3, r2
 80047ea:	dc04      	bgt.n	80047f6 <setRotation+0x326>
 80047ec:	f245 4220 	movw	r2, #21536	; 0x5420
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d008      	beq.n	8004806 <setRotation+0x336>
 80047f4:	e045      	b.n	8004882 <setRotation+0x3b2>
 80047f6:	f249 3226 	movw	r2, #37670	; 0x9326
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <setRotation+0x336>
 80047fe:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004802:	4293      	cmp	r3, r2
 8004804:	d13d      	bne.n	8004882 <setRotation+0x3b2>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8004806:	4b68      	ldr	r3, [pc, #416]	; (80049a8 <setRotation+0x4d8>)
 8004808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800480c:	801a      	strh	r2, [r3, #0]
 800480e:	4b67      	ldr	r3, [pc, #412]	; (80049ac <setRotation+0x4dc>)
 8004810:	f240 2201 	movw	r2, #513	; 0x201
 8004814:	801a      	strh	r2, [r3, #0]
 8004816:	4b66      	ldr	r3, [pc, #408]	; (80049b0 <setRotation+0x4e0>)
 8004818:	f240 2202 	movw	r2, #514	; 0x202
 800481c:	801a      	strh	r2, [r3, #0]
 800481e:	4b65      	ldr	r3, [pc, #404]	; (80049b4 <setRotation+0x4e4>)
 8004820:	f44f 7204 	mov.w	r2, #528	; 0x210
 8004824:	801a      	strh	r2, [r3, #0]
 8004826:	4b64      	ldr	r3, [pc, #400]	; (80049b8 <setRotation+0x4e8>)
 8004828:	f240 2211 	movw	r2, #529	; 0x211
 800482c:	801a      	strh	r2, [r3, #0]
 800482e:	4b63      	ldr	r3, [pc, #396]	; (80049bc <setRotation+0x4ec>)
 8004830:	f240 2212 	movw	r2, #530	; 0x212
 8004834:	801a      	strh	r2, [r3, #0]
 8004836:	4b62      	ldr	r3, [pc, #392]	; (80049c0 <setRotation+0x4f0>)
 8004838:	f240 2213 	movw	r2, #531	; 0x213
 800483c:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 800483e:	7afb      	ldrb	r3, [r7, #11]
 8004840:	b25b      	sxtb	r3, r3
 8004842:	b29a      	uxth	r2, r3
 8004844:	4b5f      	ldr	r3, [pc, #380]	; (80049c4 <setRotation+0x4f4>)
 8004846:	4013      	ands	r3, r2
 8004848:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 800484a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800484e:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8004850:	4b54      	ldr	r3, [pc, #336]	; (80049a4 <setRotation+0x4d4>)
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	f249 3226 	movw	r2, #37670	; 0x9326
 8004858:	4293      	cmp	r3, r2
 800485a:	d005      	beq.n	8004868 <setRotation+0x398>
 800485c:	4b51      	ldr	r3, [pc, #324]	; (80049a4 <setRotation+0x4d4>)
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	f245 4220 	movw	r2, #21536	; 0x5420
 8004864:	4293      	cmp	r3, r2
 8004866:	d102      	bne.n	800486e <setRotation+0x39e>
 8004868:	8abb      	ldrh	r3, [r7, #20]
 800486a:	085b      	lsrs	r3, r3, #1
 800486c:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 800486e:	8a3a      	ldrh	r2, [r7, #16]
 8004870:	8abb      	ldrh	r3, [r7, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	b29b      	uxth	r3, r3
 8004876:	4619      	mov	r1, r3
 8004878:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800487c:	f7fd fc60 	bl	8002140 <WriteCmdData>
           goto common_SS;
 8004880:	e022      	b.n	80048c8 <setRotation+0x3f8>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8004882:	4b49      	ldr	r3, [pc, #292]	; (80049a8 <setRotation+0x4d8>)
 8004884:	2220      	movs	r2, #32
 8004886:	801a      	strh	r2, [r3, #0]
 8004888:	4b48      	ldr	r3, [pc, #288]	; (80049ac <setRotation+0x4dc>)
 800488a:	2221      	movs	r2, #33	; 0x21
 800488c:	801a      	strh	r2, [r3, #0]
 800488e:	4b48      	ldr	r3, [pc, #288]	; (80049b0 <setRotation+0x4e0>)
 8004890:	2222      	movs	r2, #34	; 0x22
 8004892:	801a      	strh	r2, [r3, #0]
 8004894:	4b47      	ldr	r3, [pc, #284]	; (80049b4 <setRotation+0x4e4>)
 8004896:	2250      	movs	r2, #80	; 0x50
 8004898:	801a      	strh	r2, [r3, #0]
 800489a:	4b47      	ldr	r3, [pc, #284]	; (80049b8 <setRotation+0x4e8>)
 800489c:	2251      	movs	r2, #81	; 0x51
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	4b46      	ldr	r3, [pc, #280]	; (80049bc <setRotation+0x4ec>)
 80048a2:	2252      	movs	r2, #82	; 0x52
 80048a4:	801a      	strh	r2, [r3, #0]
 80048a6:	4b46      	ldr	r3, [pc, #280]	; (80049c0 <setRotation+0x4f0>)
 80048a8:	2253      	movs	r2, #83	; 0x53
 80048aa:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 80048ac:	7afb      	ldrb	r3, [r7, #11]
 80048ae:	b25b      	sxtb	r3, r3
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	4b44      	ldr	r3, [pc, #272]	; (80049c4 <setRotation+0x4f4>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 80048b8:	8a3b      	ldrh	r3, [r7, #16]
 80048ba:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 80048be:	b29b      	uxth	r3, r3
 80048c0:	4619      	mov	r1, r3
 80048c2:	2060      	movs	r0, #96	; 0x60
 80048c4:	f7fd fc3c 	bl	8002140 <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 80048c8:	7afb      	ldrb	r3, [r7, #11]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 80048d4:	89fb      	ldrh	r3, [r7, #14]
 80048d6:	4619      	mov	r1, r3
 80048d8:	2001      	movs	r0, #1
 80048da:	f7fd fc31 	bl	8002140 <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 80048de:	7afb      	ldrb	r3, [r7, #11]
 80048e0:	109b      	asrs	r3, r3, #2
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 80048ea:	7afb      	ldrb	r3, [r7, #11]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <setRotation+0x42c>
               ORG |= 0x1000;  //BGR
 80048f4:	8afb      	ldrh	r3, [r7, #22]
 80048f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048fa:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 80048fc:	8afb      	ldrh	r3, [r7, #22]
 80048fe:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004902:	b29a      	uxth	r2, r3
 8004904:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <setRotation+0x4d0>)
 8004906:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8004908:	4b25      	ldr	r3, [pc, #148]	; (80049a0 <setRotation+0x4d0>)
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	4619      	mov	r1, r3
 800490e:	2003      	movs	r0, #3
 8004910:	f7fd fc16 	bl	8002140 <WriteCmdData>
           break;
 8004914:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8004916:	4b2c      	ldr	r3, [pc, #176]	; (80049c8 <setRotation+0x4f8>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d023      	beq.n	800496a <setRotation+0x49a>
 8004922:	4b2a      	ldr	r3, [pc, #168]	; (80049cc <setRotation+0x4fc>)
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800492a:	2b00      	cmp	r3, #0
 800492c:	d11d      	bne.n	800496a <setRotation+0x49a>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 800492e:	4b1e      	ldr	r3, [pc, #120]	; (80049a8 <setRotation+0x4d8>)
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	81bb      	strh	r3, [r7, #12]
 8004934:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <setRotation+0x4dc>)
 8004936:	881a      	ldrh	r2, [r3, #0]
 8004938:	4b1b      	ldr	r3, [pc, #108]	; (80049a8 <setRotation+0x4d8>)
 800493a:	801a      	strh	r2, [r3, #0]
 800493c:	4a1b      	ldr	r2, [pc, #108]	; (80049ac <setRotation+0x4dc>)
 800493e:	89bb      	ldrh	r3, [r7, #12]
 8004940:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8004942:	4b1c      	ldr	r3, [pc, #112]	; (80049b4 <setRotation+0x4e4>)
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	81bb      	strh	r3, [r7, #12]
 8004948:	4b1c      	ldr	r3, [pc, #112]	; (80049bc <setRotation+0x4ec>)
 800494a:	881a      	ldrh	r2, [r3, #0]
 800494c:	4b19      	ldr	r3, [pc, #100]	; (80049b4 <setRotation+0x4e4>)
 800494e:	801a      	strh	r2, [r3, #0]
 8004950:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <setRotation+0x4ec>)
 8004952:	89bb      	ldrh	r3, [r7, #12]
 8004954:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8004956:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <setRotation+0x4e8>)
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	81bb      	strh	r3, [r7, #12]
 800495c:	4b18      	ldr	r3, [pc, #96]	; (80049c0 <setRotation+0x4f0>)
 800495e:	881a      	ldrh	r2, [r3, #0]
 8004960:	4b15      	ldr	r3, [pc, #84]	; (80049b8 <setRotation+0x4e8>)
 8004962:	801a      	strh	r2, [r3, #0]
 8004964:	4a16      	ldr	r2, [pc, #88]	; (80049c0 <setRotation+0x4f0>)
 8004966:	89bb      	ldrh	r3, [r7, #12]
 8004968:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 800496a:	f7fd fb21 	bl	8001fb0 <width>
 800496e:	4603      	mov	r3, r0
 8004970:	3b01      	subs	r3, #1
 8004972:	b29b      	uxth	r3, r3
 8004974:	b21c      	sxth	r4, r3
 8004976:	f7fd fb27 	bl	8001fc8 <height>
 800497a:	4603      	mov	r3, r0
 800497c:	3b01      	subs	r3, #1
 800497e:	b29b      	uxth	r3, r3
 8004980:	b21b      	sxth	r3, r3
 8004982:	4622      	mov	r2, r4
 8004984:	2100      	movs	r1, #0
 8004986:	2000      	movs	r0, #0
 8004988:	f000 f926 	bl	8004bd8 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 800498c:	2200      	movs	r2, #0
 800498e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004992:	2000      	movs	r0, #0
 8004994:	f000 fa44 	bl	8004e20 <vertScroll>
}
 8004998:	bf00      	nop
 800499a:	371c      	adds	r7, #28
 800499c:	46bd      	mov	sp, r7
 800499e:	bd90      	pop	{r4, r7, pc}
 80049a0:	20003ee0 	.word	0x20003ee0
 80049a4:	20003eda 	.word	0x20003eda
 80049a8:	20003ed4 	.word	0x20003ed4
 80049ac:	20003ed2 	.word	0x20003ed2
 80049b0:	20003eca 	.word	0x20003eca
 80049b4:	20003ed6 	.word	0x20003ed6
 80049b8:	20003ede 	.word	0x20003ede
 80049bc:	20003ece 	.word	0x20003ece
 80049c0:	20003ed8 	.word	0x20003ed8
 80049c4:	ffff8000 	.word	0xffff8000
 80049c8:	20003bd0 	.word	0x20003bd0
 80049cc:	20003ecc 	.word	0x20003ecc

080049d0 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80049d0:	b590      	push	{r4, r7, lr}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	80fb      	strh	r3, [r7, #6]
 80049da:	460b      	mov	r3, r1
 80049dc:	80bb      	strh	r3, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 80049e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f2c0 80e3 	blt.w	8004bb2 <drawPixel+0x1e2>
 80049ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f2c0 80de 	blt.w	8004bb2 <drawPixel+0x1e2>
 80049f6:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80049fa:	f7fd fad9 	bl	8001fb0 <width>
 80049fe:	4603      	mov	r3, r0
 8004a00:	429c      	cmp	r4, r3
 8004a02:	f280 80d6 	bge.w	8004bb2 <drawPixel+0x1e2>
 8004a06:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8004a0a:	f7fd fadd 	bl	8001fc8 <height>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	429c      	cmp	r4, r3
 8004a12:	f280 80ce 	bge.w	8004bb2 <drawPixel+0x1e2>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 8004a16:	4b69      	ldr	r3, [pc, #420]	; (8004bbc <drawPixel+0x1ec>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <drawPixel+0x5a>
 8004a1e:	887b      	ldrh	r3, [r7, #2]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fd fadd 	bl	8001fe0 <color565_to_555>
 8004a26:	4603      	mov	r3, r0
 8004a28:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 8004a2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004a2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a32:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004a36:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004a3a:	f000 f8cd 	bl	8004bd8 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8004a3e:	4b60      	ldr	r3, [pc, #384]	; (8004bc0 <drawPixel+0x1f0>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80ad 	beq.w	8004ba2 <drawPixel+0x1d2>
 8004a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a4c:	485d      	ldr	r0, [pc, #372]	; (8004bc4 <drawPixel+0x1f4>)
 8004a4e:	f7fd fa61 	bl	8001f14 <PIN_LOW>
 8004a52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a56:	485c      	ldr	r0, [pc, #368]	; (8004bc8 <drawPixel+0x1f8>)
 8004a58:	f7fd fa5c 	bl	8001f14 <PIN_LOW>
 8004a5c:	4b5b      	ldr	r3, [pc, #364]	; (8004bcc <drawPixel+0x1fc>)
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	0a1b      	lsrs	r3, r3, #8
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	73fb      	strb	r3, [r7, #15]
 8004a66:	4b59      	ldr	r3, [pc, #356]	; (8004bcc <drawPixel+0x1fc>)
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	73bb      	strb	r3, [r7, #14]
 8004a6c:	4b56      	ldr	r3, [pc, #344]	; (8004bc8 <drawPixel+0x1f8>)
 8004a6e:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8004a72:	619a      	str	r2, [r3, #24]
 8004a74:	4b56      	ldr	r3, [pc, #344]	; (8004bd0 <drawPixel+0x200>)
 8004a76:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8004a7a:	619a      	str	r2, [r3, #24]
 8004a7c:	4b55      	ldr	r3, [pc, #340]	; (8004bd4 <drawPixel+0x204>)
 8004a7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a82:	619a      	str	r2, [r3, #24]
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	4a52      	ldr	r2, [pc, #328]	; (8004bd4 <drawPixel+0x204>)
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	6193      	str	r3, [r2, #24]
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	021b      	lsls	r3, r3, #8
 8004a94:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	015b      	lsls	r3, r3, #5
 8004a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	015b      	lsls	r3, r3, #5
 8004aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	4b48      	ldr	r3, [pc, #288]	; (8004bd0 <drawPixel+0x200>)
 8004aae:	619a      	str	r2, [r3, #24]
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	105b      	asrs	r3, r3, #1
 8004ab4:	f003 0208 	and.w	r2, r3, #8
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	105b      	asrs	r3, r3, #1
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	431a      	orrs	r2, r3
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	10db      	asrs	r3, r3, #3
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	4b3c      	ldr	r3, [pc, #240]	; (8004bc8 <drawPixel+0x1f8>)
 8004ad8:	619a      	str	r2, [r3, #24]
 8004ada:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ade:	483a      	ldr	r0, [pc, #232]	; (8004bc8 <drawPixel+0x1f8>)
 8004ae0:	f7fd fa18 	bl	8001f14 <PIN_LOW>
 8004ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ae8:	4837      	ldr	r0, [pc, #220]	; (8004bc8 <drawPixel+0x1f8>)
 8004aea:	f7fd fa23 	bl	8001f34 <PIN_HIGH>
 8004aee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004af2:	4835      	ldr	r0, [pc, #212]	; (8004bc8 <drawPixel+0x1f8>)
 8004af4:	f7fd fa1e 	bl	8001f34 <PIN_HIGH>
 8004af8:	4b33      	ldr	r3, [pc, #204]	; (8004bc8 <drawPixel+0x1f8>)
 8004afa:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8004afe:	619a      	str	r2, [r3, #24]
 8004b00:	4b33      	ldr	r3, [pc, #204]	; (8004bd0 <drawPixel+0x200>)
 8004b02:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8004b06:	619a      	str	r2, [r3, #24]
 8004b08:	4b32      	ldr	r3, [pc, #200]	; (8004bd4 <drawPixel+0x204>)
 8004b0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b0e:	619a      	str	r2, [r3, #24]
 8004b10:	7bbb      	ldrb	r3, [r7, #14]
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	4a2f      	ldr	r2, [pc, #188]	; (8004bd4 <drawPixel+0x204>)
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	6193      	str	r3, [r2, #24]
 8004b1c:	7bbb      	ldrb	r3, [r7, #14]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8004b24:	7bbb      	ldrb	r3, [r7, #14]
 8004b26:	015b      	lsls	r3, r3, #5
 8004b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	7bbb      	ldrb	r3, [r7, #14]
 8004b30:	015b      	lsls	r3, r3, #5
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	431a      	orrs	r2, r3
 8004b38:	4b25      	ldr	r3, [pc, #148]	; (8004bd0 <drawPixel+0x200>)
 8004b3a:	619a      	str	r2, [r3, #24]
 8004b3c:	7bbb      	ldrb	r3, [r7, #14]
 8004b3e:	105b      	asrs	r3, r3, #1
 8004b40:	f003 0208 	and.w	r2, r3, #8
 8004b44:	7bbb      	ldrb	r3, [r7, #14]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	7bbb      	ldrb	r3, [r7, #14]
 8004b50:	105b      	asrs	r3, r3, #1
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	431a      	orrs	r2, r3
 8004b58:	7bbb      	ldrb	r3, [r7, #14]
 8004b5a:	10db      	asrs	r3, r3, #3
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	431a      	orrs	r2, r3
 8004b62:	4b19      	ldr	r3, [pc, #100]	; (8004bc8 <drawPixel+0x1f8>)
 8004b64:	619a      	str	r2, [r3, #24]
 8004b66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b6a:	4817      	ldr	r0, [pc, #92]	; (8004bc8 <drawPixel+0x1f8>)
 8004b6c:	f7fd f9d2 	bl	8001f14 <PIN_LOW>
 8004b70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b74:	4814      	ldr	r0, [pc, #80]	; (8004bc8 <drawPixel+0x1f8>)
 8004b76:	f7fd f9dd 	bl	8001f34 <PIN_HIGH>
 8004b7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b7e:	4812      	ldr	r0, [pc, #72]	; (8004bc8 <drawPixel+0x1f8>)
 8004b80:	f7fd f9d8 	bl	8001f34 <PIN_HIGH>
 8004b84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b88:	480f      	ldr	r0, [pc, #60]	; (8004bc8 <drawPixel+0x1f8>)
 8004b8a:	f7fd f9d3 	bl	8001f34 <PIN_HIGH>
 8004b8e:	887b      	ldrh	r3, [r7, #2]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fd fb53 	bl	800223c <write24>
 8004b96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b9a:	480a      	ldr	r0, [pc, #40]	; (8004bc4 <drawPixel+0x1f4>)
 8004b9c:	f7fd f9ca 	bl	8001f34 <PIN_HIGH>
 8004ba0:	e008      	b.n	8004bb4 <drawPixel+0x1e4>
   WriteCmdData(_MW, color);
 8004ba2:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <drawPixel+0x1fc>)
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	887a      	ldrh	r2, [r7, #2]
 8004ba8:	4611      	mov	r1, r2
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fd fac8 	bl	8002140 <WriteCmdData>
 8004bb0:	e000      	b.n	8004bb4 <drawPixel+0x1e4>
       return;
 8004bb2:	bf00      	nop
}
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd90      	pop	{r4, r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20003bce 	.word	0x20003bce
 8004bc0:	20003bcf 	.word	0x20003bcf
 8004bc4:	40020400 	.word	0x40020400
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	20003eca 	.word	0x20003eca
 8004bd0:	40021400 	.word	0x40021400
 8004bd4:	40021800 	.word	0x40021800

08004bd8 <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8004bd8:	b590      	push	{r4, r7, lr}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	4604      	mov	r4, r0
 8004be0:	4608      	mov	r0, r1
 8004be2:	4611      	mov	r1, r2
 8004be4:	461a      	mov	r2, r3
 8004be6:	4623      	mov	r3, r4
 8004be8:	80fb      	strh	r3, [r7, #6]
 8004bea:	4603      	mov	r3, r0
 8004bec:	80bb      	strh	r3, [r7, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	807b      	strh	r3, [r7, #2]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8004bf6:	4b80      	ldr	r3, [pc, #512]	; (8004df8 <setAddrWindow+0x220>)
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	f249 3227 	movw	r2, #37671	; 0x9327
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d117      	bne.n	8004c32 <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 8004c02:	4b7e      	ldr	r3, [pc, #504]	; (8004dfc <setAddrWindow+0x224>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d107      	bne.n	8004c1a <setAddrWindow+0x42>
 8004c0a:	88bb      	ldrh	r3, [r7, #4]
 8004c0c:	3320      	adds	r3, #32
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	80bb      	strh	r3, [r7, #4]
 8004c12:	883b      	ldrh	r3, [r7, #0]
 8004c14:	3320      	adds	r3, #32
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8004c1a:	4b78      	ldr	r3, [pc, #480]	; (8004dfc <setAddrWindow+0x224>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d107      	bne.n	8004c32 <setAddrWindow+0x5a>
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	3320      	adds	r3, #32
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	80fb      	strh	r3, [r7, #6]
 8004c2a:	887b      	ldrh	r3, [r7, #2]
 8004c2c:	3320      	adds	r3, #32
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 8004c32:	4b71      	ldr	r3, [pc, #452]	; (8004df8 <setAddrWindow+0x220>)
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	f241 5226 	movw	r2, #5414	; 0x1526
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d128      	bne.n	8004c90 <setAddrWindow+0xb8>
 8004c3e:	4b6f      	ldr	r3, [pc, #444]	; (8004dfc <setAddrWindow+0x224>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d022      	beq.n	8004c90 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8004c4a:	887a      	ldrh	r2, [r7, #2]
 8004c4c:	88fb      	ldrh	r3, [r7, #6]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	81fb      	strh	r3, [r7, #14]
 8004c54:	883a      	ldrh	r2, [r7, #0]
 8004c56:	88bb      	ldrh	r3, [r7, #4]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8004c5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <setAddrWindow+0x9c>
 8004c66:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	803b      	strh	r3, [r7, #0]
 8004c72:	e00d      	b.n	8004c90 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8004c74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d109      	bne.n	8004c90 <setAddrWindow+0xb8>
 8004c7c:	887a      	ldrh	r2, [r7, #2]
 8004c7e:	89bb      	ldrh	r3, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	807b      	strh	r3, [r7, #2]
 8004c86:	883a      	ldrh	r2, [r7, #0]
 8004c88:	89bb      	ldrh	r3, [r7, #12]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8004c90:	4b5b      	ldr	r3, [pc, #364]	; (8004e00 <setAddrWindow+0x228>)
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d054      	beq.n	8004d46 <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8004c9c:	4b59      	ldr	r3, [pc, #356]	; (8004e04 <setAddrWindow+0x22c>)
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b2d8      	uxtb	r0, r3
 8004ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ca6:	121b      	asrs	r3, r3, #8
 8004ca8:	b21b      	sxth	r3, r3
 8004caa:	b2d9      	uxtb	r1, r3
 8004cac:	88fb      	ldrh	r3, [r7, #6]
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004cb4:	121b      	asrs	r3, r3, #8
 8004cb6:	b21b      	sxth	r3, r3
 8004cb8:	b2dc      	uxtb	r4, r3
 8004cba:	887b      	ldrh	r3, [r7, #2]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	4623      	mov	r3, r4
 8004cc2:	f7fd febd 	bl	8002a40 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8004cc6:	4b50      	ldr	r3, [pc, #320]	; (8004e08 <setAddrWindow+0x230>)
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	b2d8      	uxtb	r0, r3
 8004ccc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004cd0:	121b      	asrs	r3, r3, #8
 8004cd2:	b21b      	sxth	r3, r3
 8004cd4:	b2d9      	uxtb	r1, r3
 8004cd6:	88bb      	ldrh	r3, [r7, #4]
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004cde:	121b      	asrs	r3, r3, #8
 8004ce0:	b21b      	sxth	r3, r3
 8004ce2:	b2dc      	uxtb	r4, r3
 8004ce4:	883b      	ldrh	r3, [r7, #0]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	4623      	mov	r3, r4
 8004cec:	f7fd fea8 	bl	8002a40 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8004cf0:	4b46      	ldr	r3, [pc, #280]	; (8004e0c <setAddrWindow+0x234>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d07b      	beq.n	8004df0 <setAddrWindow+0x218>
 8004cf8:	4b3f      	ldr	r3, [pc, #252]	; (8004df8 <setAddrWindow+0x220>)
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	2b65      	cmp	r3, #101	; 0x65
 8004cfe:	d177      	bne.n	8004df0 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8004d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d04:	121b      	asrs	r3, r3, #8
 8004d06:	b21b      	sxth	r3, r3
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	723b      	strb	r3, [r7, #8]
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8004d12:	4b3f      	ldr	r3, [pc, #252]	; (8004e10 <setAddrWindow+0x238>)
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	f107 0208 	add.w	r2, r7, #8
 8004d1a:	2102      	movs	r1, #2
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fd fccd 	bl	80026bc <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 8004d22:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004d26:	121b      	asrs	r3, r3, #8
 8004d28:	b21b      	sxth	r3, r3
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	723b      	strb	r3, [r7, #8]
 8004d2e:	88bb      	ldrh	r3, [r7, #4]
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8004d34:	4b37      	ldr	r3, [pc, #220]	; (8004e14 <setAddrWindow+0x23c>)
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	f107 0208 	add.w	r2, r7, #8
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fd fcbc 	bl	80026bc <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8004d44:	e054      	b.n	8004df0 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 8004d46:	4b32      	ldr	r3, [pc, #200]	; (8004e10 <setAddrWindow+0x238>)
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	88fa      	ldrh	r2, [r7, #6]
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fd f9f6 	bl	8002140 <WriteCmdData>
       WriteCmdData(_MP, y);
 8004d54:	4b2f      	ldr	r3, [pc, #188]	; (8004e14 <setAddrWindow+0x23c>)
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	88ba      	ldrh	r2, [r7, #4]
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fd f9ef 	bl	8002140 <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8004d62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d105      	bne.n	8004d7a <setAddrWindow+0x1a2>
 8004d6e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004d72:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d03a      	beq.n	8004df0 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8004d7a:	4b21      	ldr	r3, [pc, #132]	; (8004e00 <setAddrWindow+0x228>)
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d018      	beq.n	8004db8 <setAddrWindow+0x1e0>
               if (rotation & 1)
 8004d86:	4b1d      	ldr	r3, [pc, #116]	; (8004dfc <setAddrWindow+0x224>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d009      	beq.n	8004da6 <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 8004d92:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	b21a      	sxth	r2, r3
 8004d9a:	88bb      	ldrh	r3, [r7, #4]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	80bb      	strh	r3, [r7, #4]
 8004da0:	88bb      	ldrh	r3, [r7, #4]
 8004da2:	803b      	strh	r3, [r7, #0]
 8004da4:	e008      	b.n	8004db8 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 8004da6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	b21a      	sxth	r2, r3
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	80fb      	strh	r3, [r7, #6]
 8004db4:	88fb      	ldrh	r3, [r7, #6]
 8004db6:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8004db8:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <setAddrWindow+0x22c>)
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	88fa      	ldrh	r2, [r7, #6]
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fd f9bd 	bl	8002140 <WriteCmdData>
           WriteCmdData(_SP, y);
 8004dc6:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <setAddrWindow+0x230>)
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	88ba      	ldrh	r2, [r7, #4]
 8004dcc:	4611      	mov	r1, r2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fd f9b6 	bl	8002140 <WriteCmdData>
           WriteCmdData(_EC, x1);
 8004dd4:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <setAddrWindow+0x240>)
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	887a      	ldrh	r2, [r7, #2]
 8004dda:	4611      	mov	r1, r2
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fd f9af 	bl	8002140 <WriteCmdData>
           WriteCmdData(_EP, y1);
 8004de2:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <setAddrWindow+0x244>)
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	883a      	ldrh	r2, [r7, #0]
 8004de8:	4611      	mov	r1, r2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fd f9a8 	bl	8002140 <WriteCmdData>
}
 8004df0:	bf00      	nop
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd90      	pop	{r4, r7, pc}
 8004df8:	20003eda 	.word	0x20003eda
 8004dfc:	20003bd0 	.word	0x20003bd0
 8004e00:	20003ecc 	.word	0x20003ecc
 8004e04:	20003ed6 	.word	0x20003ed6
 8004e08:	20003ece 	.word	0x20003ece
 8004e0c:	20003bcd 	.word	0x20003bcd
 8004e10:	20003ed4 	.word	0x20003ed4
 8004e14:	20003ed2 	.word	0x20003ed2
 8004e18:	20003ede 	.word	0x20003ede
 8004e1c:	20003ed8 	.word	0x20003ed8

08004e20 <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	80fb      	strh	r3, [r7, #6]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	80bb      	strh	r3, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8004e32:	4b89      	ldr	r3, [pc, #548]	; (8005058 <vertScroll+0x238>)
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	f249 3227 	movw	r2, #37671	; 0x9327
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d10b      	bne.n	8004e56 <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8004e3e:	4b87      	ldr	r3, [pc, #540]	; (800505c <vertScroll+0x23c>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d003      	beq.n	8004e4e <vertScroll+0x2e>
 8004e46:	4b85      	ldr	r3, [pc, #532]	; (800505c <vertScroll+0x23c>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d103      	bne.n	8004e56 <vertScroll+0x36>
 8004e4e:	88fb      	ldrh	r3, [r7, #6]
 8004e50:	3320      	adds	r3, #32
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8004e56:	88fb      	ldrh	r3, [r7, #6]
 8004e58:	425b      	negs	r3, r3
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	88bb      	ldrh	r3, [r7, #4]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 8004e6a:	88fb      	ldrh	r3, [r7, #6]
 8004e6c:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8004e6e:	4b7a      	ldr	r3, [pc, #488]	; (8005058 <vertScroll+0x238>)
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	f249 3227 	movw	r2, #37671	; 0x9327
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d103      	bne.n	8004e82 <vertScroll+0x62>
 8004e7a:	8afb      	ldrh	r3, [r7, #22]
 8004e7c:	3320      	adds	r3, #32
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8004e82:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004e86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e8a:	425b      	negs	r3, r3
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	dd05      	ble.n	8004e9c <vertScroll+0x7c>
 8004e90:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004e94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	db01      	blt.n	8004ea0 <vertScroll+0x80>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8004ea0:	88fa      	ldrh	r2, [r7, #6]
 8004ea2:	887b      	ldrh	r3, [r7, #2]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 8004eaa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	da04      	bge.n	8004ebc <vertScroll+0x9c>
        vsp += scrollines;          //keep in unsigned range
 8004eb2:	8aba      	ldrh	r2, [r7, #20]
 8004eb4:	88bb      	ldrh	r3, [r7, #4]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 8004ebc:	88fa      	ldrh	r2, [r7, #6]
 8004ebe:	88bb      	ldrh	r3, [r7, #4]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8004eca:	4b65      	ldr	r3, [pc, #404]	; (8005060 <vertScroll+0x240>)
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d072      	beq.n	8004fbc <vertScroll+0x19c>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8004ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eda:	121b      	asrs	r3, r3, #8
 8004edc:	b21b      	sxth	r3, r3
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 8004ee8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004eec:	121b      	asrs	r3, r3, #8
 8004eee:	b21b      	sxth	r3, r3
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 8004ef4:	88bb      	ldrh	r3, [r7, #4]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 8004efa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004efe:	121b      	asrs	r3, r3, #8
 8004f00:	b21b      	sxth	r3, r3
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 8004f06:	8afb      	ldrh	r3, [r7, #22]
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8004f0c:	4b55      	ldr	r3, [pc, #340]	; (8005064 <vertScroll+0x244>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <vertScroll+0xf8>
 8004f14:	230e      	movs	r3, #14
 8004f16:	e000      	b.n	8004f1a <vertScroll+0xfa>
 8004f18:	2333      	movs	r3, #51	; 0x33
 8004f1a:	f107 020c 	add.w	r2, r7, #12
 8004f1e:	2106      	movs	r1, #6
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fd fbcb 	bl	80026bc <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 8004f26:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f2a:	121b      	asrs	r3, r3, #8
 8004f2c:	b21b      	sxth	r3, r3
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 8004f32:	8abb      	ldrh	r3, [r7, #20]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8004f38:	4b4a      	ldr	r3, [pc, #296]	; (8005064 <vertScroll+0x244>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <vertScroll+0x124>
 8004f40:	2314      	movs	r3, #20
 8004f42:	e000      	b.n	8004f46 <vertScroll+0x126>
 8004f44:	2337      	movs	r3, #55	; 0x37
 8004f46:	f107 020c 	add.w	r2, r7, #12
 8004f4a:	2102      	movs	r1, #2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fd fbb5 	bl	80026bc <WriteCmdParamN>
		if (is8347) {
 8004f52:	4b44      	ldr	r3, [pc, #272]	; (8005064 <vertScroll+0x244>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d01f      	beq.n	8004f9a <vertScroll+0x17a>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8004f5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <vertScroll+0x156>
 8004f62:	4b3d      	ldr	r3, [pc, #244]	; (8005058 <vertScroll+0x238>)
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	f248 3247 	movw	r2, #33607	; 0x8347
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d101      	bne.n	8004f72 <vertScroll+0x152>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e002      	b.n	8004f78 <vertScroll+0x158>
 8004f72:	2308      	movs	r3, #8
 8004f74:	e000      	b.n	8004f78 <vertScroll+0x158>
 8004f76:	2300      	movs	r3, #0
 8004f78:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8004f7a:	4b37      	ldr	r3, [pc, #220]	; (8005058 <vertScroll+0x238>)
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	f248 3247 	movw	r2, #33607	; 0x8347
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d101      	bne.n	8004f8a <vertScroll+0x16a>
 8004f86:	2318      	movs	r3, #24
 8004f88:	e000      	b.n	8004f8c <vertScroll+0x16c>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f107 020c 	add.w	r2, r7, #12
 8004f90:	2101      	movs	r1, #1
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fd fb92 	bl	80026bc <WriteCmdParamN>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
		}
		return;
 8004f98:	e059      	b.n	800504e <vertScroll+0x22e>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8004f9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d155      	bne.n	800504e <vertScroll+0x22e>
 8004fa2:	4b2f      	ldr	r3, [pc, #188]	; (8005060 <vertScroll+0x240>)
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d04f      	beq.n	800504e <vertScroll+0x22e>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	2013      	movs	r0, #19
 8004fb4:	f7fd fb82 	bl	80026bc <WriteCmdParamN>
		return;
 8004fb8:	bf00      	nop
 8004fba:	e048      	b.n	800504e <vertScroll+0x22e>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8004fbc:	4b26      	ldr	r3, [pc, #152]	; (8005058 <vertScroll+0x238>)
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	f247 7293 	movw	r2, #30611	; 0x7793
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d021      	beq.n	800500c <vertScroll+0x1ec>
 8004fc8:	f247 7293 	movw	r2, #30611	; 0x7793
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	dc08      	bgt.n	8004fe2 <vertScroll+0x1c2>
 8004fd0:	f245 4220 	movw	r2, #21536	; 0x5420
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d019      	beq.n	800500c <vertScroll+0x1ec>
 8004fd8:	f247 7283 	movw	r2, #30595	; 0x7783
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d009      	beq.n	8004ff4 <vertScroll+0x1d4>
 8004fe0:	e025      	b.n	800502e <vertScroll+0x20e>
 8004fe2:	f249 3226 	movw	r2, #37670	; 0x9326
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d010      	beq.n	800500c <vertScroll+0x1ec>
 8004fea:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00c      	beq.n	800500c <vertScroll+0x1ec>
 8004ff2:	e01c      	b.n	800502e <vertScroll+0x20e>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 8004ff4:	4b1c      	ldr	r3, [pc, #112]	; (8005068 <vertScroll+0x248>)
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	2061      	movs	r0, #97	; 0x61
 8004ffc:	f7fd f8a0 	bl	8002140 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8005000:	8abb      	ldrh	r3, [r7, #20]
 8005002:	4619      	mov	r1, r3
 8005004:	206a      	movs	r0, #106	; 0x6a
 8005006:	f7fd f89b 	bl	8002140 <WriteCmdData>
        break;
 800500a:	e021      	b.n	8005050 <vertScroll+0x230>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 800500c:	4b16      	ldr	r3, [pc, #88]	; (8005068 <vertScroll+0x248>)
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	f043 0302 	orr.w	r3, r3, #2
 8005014:	b29b      	uxth	r3, r3
 8005016:	4619      	mov	r1, r3
 8005018:	f240 4001 	movw	r0, #1025	; 0x401
 800501c:	f7fd f890 	bl	8002140 <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 8005020:	8abb      	ldrh	r3, [r7, #20]
 8005022:	4619      	mov	r1, r3
 8005024:	f240 4004 	movw	r0, #1028	; 0x404
 8005028:	f7fd f88a 	bl	8002140 <WriteCmdData>
        break;
 800502c:	e010      	b.n	8005050 <vertScroll+0x230>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 800502e:	4b0e      	ldr	r3, [pc, #56]	; (8005068 <vertScroll+0x248>)
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	f043 0302 	orr.w	r3, r3, #2
 8005036:	b29b      	uxth	r3, r3
 8005038:	4619      	mov	r1, r3
 800503a:	2061      	movs	r0, #97	; 0x61
 800503c:	f7fd f880 	bl	8002140 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8005040:	8abb      	ldrh	r3, [r7, #20]
 8005042:	4619      	mov	r1, r3
 8005044:	206a      	movs	r0, #106	; 0x6a
 8005046:	f7fd f87b 	bl	8002140 <WriteCmdData>
        break;
 800504a:	bf00      	nop
 800504c:	e000      	b.n	8005050 <vertScroll+0x230>
		return;
 800504e:	bf00      	nop
    }
}
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20003eda 	.word	0x20003eda
 800505c:	20003bd0 	.word	0x20003bd0
 8005060:	20003ecc 	.word	0x20003ecc
 8005064:	20003bcd 	.word	0x20003bcd
 8005068:	20003ed0 	.word	0x20003ed0

0800506c <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af02      	add	r7, sp, #8
 8005072:	4603      	mov	r3, r0
 8005074:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8005076:	4b08      	ldr	r3, [pc, #32]	; (8005098 <fillScreen+0x2c>)
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	b21a      	sxth	r2, r3
 800507c:	4b07      	ldr	r3, [pc, #28]	; (800509c <fillScreen+0x30>)
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b219      	sxth	r1, r3
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	460b      	mov	r3, r1
 8005088:	2100      	movs	r1, #0
 800508a:	2000      	movs	r0, #0
 800508c:	f000 f9de 	bl	800544c <fillRect>
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20003b90 	.word	0x20003b90
 800509c:	20003b92 	.word	0x20003b92

080050a0 <invertDisplay>:

void invertDisplay(uint8_t i)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 80050aa:	4b46      	ldr	r3, [pc, #280]	; (80051c4 <invertDisplay+0x124>)
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	bf14      	ite	ne
 80050b6:	2301      	movne	r3, #1
 80050b8:	2300      	moveq	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	b21a      	sxth	r2, r3
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	b21b      	sxth	r3, r3
 80050c2:	4053      	eors	r3, r2
 80050c4:	b21b      	sxth	r3, r3
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	4b3f      	ldr	r3, [pc, #252]	; (80051c8 <invertDisplay+0x128>)
 80050ca:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 80050cc:	4b3d      	ldr	r3, [pc, #244]	; (80051c4 <invertDisplay+0x124>)
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d035      	beq.n	8005144 <invertDisplay+0xa4>
        if (is8347) {
 80050d8:	4b3c      	ldr	r3, [pc, #240]	; (80051cc <invertDisplay+0x12c>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d024      	beq.n	800512a <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 80050e0:	4b3b      	ldr	r3, [pc, #236]	; (80051d0 <invertDisplay+0x130>)
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	f248 3247 	movw	r2, #33607	; 0x8347
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d005      	beq.n	80050f8 <invertDisplay+0x58>
 80050ec:	4b38      	ldr	r3, [pc, #224]	; (80051d0 <invertDisplay+0x130>)
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	f245 2252 	movw	r2, #21074	; 0x5252
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d108      	bne.n	800510a <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 80050f8:	4b33      	ldr	r3, [pc, #204]	; (80051c8 <invertDisplay+0x128>)
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <invertDisplay+0x64>
 8005100:	2306      	movs	r3, #6
 8005102:	e000      	b.n	8005106 <invertDisplay+0x66>
 8005104:	2302      	movs	r3, #2
 8005106:	73fb      	strb	r3, [r7, #15]
 8005108:	e007      	b.n	800511a <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 800510a:	4b2f      	ldr	r3, [pc, #188]	; (80051c8 <invertDisplay+0x128>)
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <invertDisplay+0x76>
 8005112:	2308      	movs	r3, #8
 8005114:	e000      	b.n	8005118 <invertDisplay+0x78>
 8005116:	230a      	movs	r3, #10
 8005118:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 800511a:	f107 030f 	add.w	r3, r7, #15
 800511e:	461a      	mov	r2, r3
 8005120:	2101      	movs	r1, #1
 8005122:	2001      	movs	r0, #1
 8005124:	f7fd faca 	bl	80026bc <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 8005128:	e049      	b.n	80051be <invertDisplay+0x11e>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 800512a:	4b27      	ldr	r3, [pc, #156]	; (80051c8 <invertDisplay+0x128>)
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <invertDisplay+0x96>
 8005132:	2321      	movs	r3, #33	; 0x21
 8005134:	e000      	b.n	8005138 <invertDisplay+0x98>
 8005136:	2320      	movs	r3, #32
 8005138:	2200      	movs	r2, #0
 800513a:	2100      	movs	r1, #0
 800513c:	4618      	mov	r0, r3
 800513e:	f7fd fabd 	bl	80026bc <WriteCmdParamN>
 8005142:	e03c      	b.n	80051be <invertDisplay+0x11e>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8005144:	4b22      	ldr	r3, [pc, #136]	; (80051d0 <invertDisplay+0x130>)
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	f247 7293 	movw	r2, #30611	; 0x7793
 800514c:	4293      	cmp	r3, r2
 800514e:	d024      	beq.n	800519a <invertDisplay+0xfa>
 8005150:	f247 7293 	movw	r2, #30611	; 0x7793
 8005154:	4293      	cmp	r3, r2
 8005156:	dc07      	bgt.n	8005168 <invertDisplay+0xc8>
 8005158:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800515c:	d010      	beq.n	8005180 <invertDisplay+0xe0>
 800515e:	f245 4220 	movw	r2, #21536	; 0x5420
 8005162:	4293      	cmp	r3, r2
 8005164:	d019      	beq.n	800519a <invertDisplay+0xfa>
 8005166:	e023      	b.n	80051b0 <invertDisplay+0x110>
 8005168:	f249 3226 	movw	r2, #37670	; 0x9326
 800516c:	4293      	cmp	r3, r2
 800516e:	d014      	beq.n	800519a <invertDisplay+0xfa>
 8005170:	f24b 5209 	movw	r2, #46345	; 0xb509
 8005174:	4293      	cmp	r3, r2
 8005176:	d010      	beq.n	800519a <invertDisplay+0xfa>
 8005178:	f249 2225 	movw	r2, #37413	; 0x9225
 800517c:	4293      	cmp	r3, r2
 800517e:	d117      	bne.n	80051b0 <invertDisplay+0x110>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8005180:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <invertDisplay+0x128>)
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	b21b      	sxth	r3, r3
 8005188:	f043 0313 	orr.w	r3, r3, #19
 800518c:	b21b      	sxth	r3, r3
 800518e:	b29b      	uxth	r3, r3
 8005190:	4619      	mov	r1, r3
 8005192:	2007      	movs	r0, #7
 8005194:	f7fc ffd4 	bl	8002140 <WriteCmdData>
        break;
 8005198:	e011      	b.n	80051be <invertDisplay+0x11e>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 800519a:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <invertDisplay+0x128>)
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	f043 0302 	orr.w	r3, r3, #2
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	4619      	mov	r1, r3
 80051a6:	f240 4001 	movw	r0, #1025	; 0x401
 80051aa:	f7fc ffc9 	bl	8002140 <WriteCmdData>
        break;
 80051ae:	e006      	b.n	80051be <invertDisplay+0x11e>
    default:
        WriteCmdData(0x61, _lcd_rev);
 80051b0:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <invertDisplay+0x128>)
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	4619      	mov	r1, r3
 80051b6:	2061      	movs	r0, #97	; 0x61
 80051b8:	f7fc ffc2 	bl	8002140 <WriteCmdData>
        break;
 80051bc:	bf00      	nop
    }
}
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20003ecc 	.word	0x20003ecc
 80051c8:	20003ed0 	.word	0x20003ed0
 80051cc:	20003bcd 	.word	0x20003bcd
 80051d0:	20003eda 	.word	0x20003eda

080051d4 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80051d4:	b590      	push	{r4, r7, lr}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af02      	add	r7, sp, #8
 80051da:	4604      	mov	r4, r0
 80051dc:	4608      	mov	r0, r1
 80051de:	4611      	mov	r1, r2
 80051e0:	461a      	mov	r2, r3
 80051e2:	4623      	mov	r3, r4
 80051e4:	80fb      	strh	r3, [r7, #6]
 80051e6:	4603      	mov	r3, r0
 80051e8:	80bb      	strh	r3, [r7, #4]
 80051ea:	460b      	mov	r3, r1
 80051ec:	807b      	strh	r3, [r7, #2]
 80051ee:	4613      	mov	r3, r2
 80051f0:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, 1, h, color);
 80051f2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80051f6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80051fa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80051fe:	883b      	ldrh	r3, [r7, #0]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	4613      	mov	r3, r2
 8005204:	2201      	movs	r2, #1
 8005206:	f000 f921 	bl	800544c <fillRect>
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	bd90      	pop	{r4, r7, pc}

08005212 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8005212:	b590      	push	{r4, r7, lr}
 8005214:	b085      	sub	sp, #20
 8005216:	af02      	add	r7, sp, #8
 8005218:	4604      	mov	r4, r0
 800521a:	4608      	mov	r0, r1
 800521c:	4611      	mov	r1, r2
 800521e:	461a      	mov	r2, r3
 8005220:	4623      	mov	r3, r4
 8005222:	80fb      	strh	r3, [r7, #6]
 8005224:	4603      	mov	r3, r0
 8005226:	80bb      	strh	r3, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	807b      	strh	r3, [r7, #2]
 800522c:	4613      	mov	r3, r2
 800522e:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, w, 1, color);
 8005230:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005234:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005238:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800523c:	883b      	ldrh	r3, [r7, #0]
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	2301      	movs	r3, #1
 8005242:	f000 f903 	bl	800544c <fillRect>
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	bd90      	pop	{r4, r7, pc}

0800524e <fillCircle>:
        }
    }
}

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800524e:	b590      	push	{r4, r7, lr}
 8005250:	b085      	sub	sp, #20
 8005252:	af02      	add	r7, sp, #8
 8005254:	4604      	mov	r4, r0
 8005256:	4608      	mov	r0, r1
 8005258:	4611      	mov	r1, r2
 800525a:	461a      	mov	r2, r3
 800525c:	4623      	mov	r3, r4
 800525e:	80fb      	strh	r3, [r7, #6]
 8005260:	4603      	mov	r3, r0
 8005262:	80bb      	strh	r3, [r7, #4]
 8005264:	460b      	mov	r3, r1
 8005266:	807b      	strh	r3, [r7, #2]
 8005268:	4613      	mov	r3, r2
 800526a:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 800526c:	88ba      	ldrh	r2, [r7, #4]
 800526e:	887b      	ldrh	r3, [r7, #2]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	b29b      	uxth	r3, r3
 8005274:	b219      	sxth	r1, r3
 8005276:	887b      	ldrh	r3, [r7, #2]
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	b29b      	uxth	r3, r3
 800527c:	3301      	adds	r3, #1
 800527e:	b29b      	uxth	r3, r3
 8005280:	b21a      	sxth	r2, r3
 8005282:	883b      	ldrh	r3, [r7, #0]
 8005284:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005288:	f7ff ffa4 	bl	80051d4 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 800528c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005290:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005294:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005298:	883b      	ldrh	r3, [r7, #0]
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	2300      	movs	r3, #0
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	2303      	movs	r3, #3
 80052a2:	f000 f804 	bl	80052ae <fillCircleHelper>
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd90      	pop	{r4, r7, pc}

080052ae <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 80052ae:	b590      	push	{r4, r7, lr}
 80052b0:	b087      	sub	sp, #28
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	4604      	mov	r4, r0
 80052b6:	4608      	mov	r0, r1
 80052b8:	4611      	mov	r1, r2
 80052ba:	461a      	mov	r2, r3
 80052bc:	4623      	mov	r3, r4
 80052be:	80fb      	strh	r3, [r7, #6]
 80052c0:	4603      	mov	r3, r0
 80052c2:	80bb      	strh	r3, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	807b      	strh	r3, [r7, #2]
 80052c8:	4613      	mov	r3, r2
 80052ca:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 80052cc:	887b      	ldrh	r3, [r7, #2]
 80052ce:	f1c3 0301 	rsb	r3, r3, #1
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80052d6:	2301      	movs	r3, #1
 80052d8:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80052da:	887b      	ldrh	r3, [r7, #2]
 80052dc:	461a      	mov	r2, r3
 80052de:	03d2      	lsls	r2, r2, #15
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 80052ec:	887b      	ldrh	r3, [r7, #2]
 80052ee:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 80052f0:	8a3b      	ldrh	r3, [r7, #16]
 80052f2:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 80052f4:	89fb      	ldrh	r3, [r7, #14]
 80052f6:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 80052f8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	3301      	adds	r3, #1
 8005300:	b29b      	uxth	r3, r3
 8005302:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 8005304:	e096      	b.n	8005434 <fillCircleHelper+0x186>
        if (f >= 0) {
 8005306:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800530a:	2b00      	cmp	r3, #0
 800530c:	db0e      	blt.n	800532c <fillCircleHelper+0x7e>
            y--;
 800530e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29b      	uxth	r3, r3
 8005318:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800531a:	8a7b      	ldrh	r3, [r7, #18]
 800531c:	3302      	adds	r3, #2
 800531e:	b29b      	uxth	r3, r3
 8005320:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8005322:	8afa      	ldrh	r2, [r7, #22]
 8005324:	8a7b      	ldrh	r3, [r7, #18]
 8005326:	4413      	add	r3, r2
 8005328:	b29b      	uxth	r3, r3
 800532a:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800532c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005330:	b29b      	uxth	r3, r3
 8005332:	3301      	adds	r3, #1
 8005334:	b29b      	uxth	r3, r3
 8005336:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8005338:	8abb      	ldrh	r3, [r7, #20]
 800533a:	3302      	adds	r3, #2
 800533c:	b29b      	uxth	r3, r3
 800533e:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8005340:	8afa      	ldrh	r2, [r7, #22]
 8005342:	8abb      	ldrh	r3, [r7, #20]
 8005344:	4413      	add	r3, r2
 8005346:	b29b      	uxth	r3, r3
 8005348:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 800534a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800534e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005352:	3301      	adds	r3, #1
 8005354:	429a      	cmp	r2, r3
 8005356:	da31      	bge.n	80053bc <fillCircleHelper+0x10e>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8005358:	787b      	ldrb	r3, [r7, #1]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d013      	beq.n	800538a <fillCircleHelper+0xdc>
 8005362:	88fa      	ldrh	r2, [r7, #6]
 8005364:	8a3b      	ldrh	r3, [r7, #16]
 8005366:	4413      	add	r3, r2
 8005368:	b29b      	uxth	r3, r3
 800536a:	b218      	sxth	r0, r3
 800536c:	88ba      	ldrh	r2, [r7, #4]
 800536e:	89fb      	ldrh	r3, [r7, #14]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	b29b      	uxth	r3, r3
 8005374:	b219      	sxth	r1, r3
 8005376:	89fb      	ldrh	r3, [r7, #14]
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800537e:	4413      	add	r3, r2
 8005380:	b29b      	uxth	r3, r3
 8005382:	b21a      	sxth	r2, r3
 8005384:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005386:	f7ff ff25 	bl	80051d4 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 800538a:	787b      	ldrb	r3, [r7, #1]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d013      	beq.n	80053bc <fillCircleHelper+0x10e>
 8005394:	88fa      	ldrh	r2, [r7, #6]
 8005396:	8a3b      	ldrh	r3, [r7, #16]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	b29b      	uxth	r3, r3
 800539c:	b218      	sxth	r0, r3
 800539e:	88ba      	ldrh	r2, [r7, #4]
 80053a0:	89fb      	ldrh	r3, [r7, #14]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	b219      	sxth	r1, r3
 80053a8:	89fb      	ldrh	r3, [r7, #14]
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80053b0:	4413      	add	r3, r2
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	b21a      	sxth	r2, r3
 80053b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80053b8:	f7ff ff0c 	bl	80051d4 <drawFastVLine>
        }
        if(y != py) {
 80053bc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80053c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d033      	beq.n	8005430 <fillCircleHelper+0x182>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 80053c8:	787b      	ldrb	r3, [r7, #1]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d013      	beq.n	80053fa <fillCircleHelper+0x14c>
 80053d2:	88fa      	ldrh	r2, [r7, #6]
 80053d4:	897b      	ldrh	r3, [r7, #10]
 80053d6:	4413      	add	r3, r2
 80053d8:	b29b      	uxth	r3, r3
 80053da:	b218      	sxth	r0, r3
 80053dc:	88ba      	ldrh	r2, [r7, #4]
 80053de:	89bb      	ldrh	r3, [r7, #12]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	b219      	sxth	r1, r3
 80053e6:	89bb      	ldrh	r3, [r7, #12]
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80053ee:	4413      	add	r3, r2
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	b21a      	sxth	r2, r3
 80053f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80053f6:	f7ff feed 	bl	80051d4 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 80053fa:	787b      	ldrb	r3, [r7, #1]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d013      	beq.n	800542c <fillCircleHelper+0x17e>
 8005404:	88fa      	ldrh	r2, [r7, #6]
 8005406:	897b      	ldrh	r3, [r7, #10]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	b29b      	uxth	r3, r3
 800540c:	b218      	sxth	r0, r3
 800540e:	88ba      	ldrh	r2, [r7, #4]
 8005410:	89bb      	ldrh	r3, [r7, #12]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	b29b      	uxth	r3, r3
 8005416:	b219      	sxth	r1, r3
 8005418:	89bb      	ldrh	r3, [r7, #12]
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005420:	4413      	add	r3, r2
 8005422:	b29b      	uxth	r3, r3
 8005424:	b21a      	sxth	r2, r3
 8005426:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005428:	f7ff fed4 	bl	80051d4 <drawFastVLine>
            py = y;
 800542c:	89fb      	ldrh	r3, [r7, #14]
 800542e:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8005430:	8a3b      	ldrh	r3, [r7, #16]
 8005432:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8005434:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005438:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800543c:	429a      	cmp	r2, r3
 800543e:	f6ff af62 	blt.w	8005306 <fillCircleHelper+0x58>
    }
}
 8005442:	bf00      	nop
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	bd90      	pop	{r4, r7, pc}
	...

0800544c <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800544c:	b590      	push	{r4, r7, lr}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	4604      	mov	r4, r0
 8005454:	4608      	mov	r0, r1
 8005456:	4611      	mov	r1, r2
 8005458:	461a      	mov	r2, r3
 800545a:	4623      	mov	r3, r4
 800545c:	80fb      	strh	r3, [r7, #6]
 800545e:	4603      	mov	r3, r0
 8005460:	80bb      	strh	r3, [r7, #4]
 8005462:	460b      	mov	r3, r1
 8005464:	807b      	strh	r3, [r7, #2]
 8005466:	4613      	mov	r3, r2
 8005468:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 800546a:	4b92      	ldr	r3, [pc, #584]	; (80056b4 <fillRect+0x268>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <fillRect+0x32>
 8005472:	8c3b      	ldrh	r3, [r7, #32]
 8005474:	4618      	mov	r0, r3
 8005476:	f7fc fdb3 	bl	8001fe0 <color565_to_555>
 800547a:	4603      	mov	r3, r0
 800547c:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 800547e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005482:	2b00      	cmp	r3, #0
 8005484:	da08      	bge.n	8005498 <fillRect+0x4c>
        w = -w;
 8005486:	887b      	ldrh	r3, [r7, #2]
 8005488:	425b      	negs	r3, r3
 800548a:	b29b      	uxth	r3, r3
 800548c:	807b      	strh	r3, [r7, #2]
        x -= w;
 800548e:	88fa      	ldrh	r2, [r7, #6]
 8005490:	887b      	ldrh	r3, [r7, #2]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	b29b      	uxth	r3, r3
 8005496:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8005498:	88fa      	ldrh	r2, [r7, #6]
 800549a:	887b      	ldrh	r3, [r7, #2]
 800549c:	4413      	add	r3, r2
 800549e:	b29b      	uxth	r3, r3
 80054a0:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 80054a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	da01      	bge.n	80054ae <fillRect+0x62>
        x = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 80054ae:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80054b2:	f7fc fd7d 	bl	8001fb0 <width>
 80054b6:	4603      	mov	r3, r0
 80054b8:	429c      	cmp	r4, r3
 80054ba:	dd03      	ble.n	80054c4 <fillRect+0x78>
        end = width();
 80054bc:	f7fc fd78 	bl	8001fb0 <width>
 80054c0:	4603      	mov	r3, r0
 80054c2:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 80054c4:	89fa      	ldrh	r2, [r7, #14]
 80054c6:	88fb      	ldrh	r3, [r7, #6]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 80054ce:	f9b7 3000 	ldrsh.w	r3, [r7]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	da08      	bge.n	80054e8 <fillRect+0x9c>
        h = -h;
 80054d6:	883b      	ldrh	r3, [r7, #0]
 80054d8:	425b      	negs	r3, r3
 80054da:	b29b      	uxth	r3, r3
 80054dc:	803b      	strh	r3, [r7, #0]
        y -= h;
 80054de:	88ba      	ldrh	r2, [r7, #4]
 80054e0:	883b      	ldrh	r3, [r7, #0]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 80054e8:	88ba      	ldrh	r2, [r7, #4]
 80054ea:	883b      	ldrh	r3, [r7, #0]
 80054ec:	4413      	add	r3, r2
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 80054f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	da01      	bge.n	80054fe <fillRect+0xb2>
        y = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 80054fe:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8005502:	f7fc fd61 	bl	8001fc8 <height>
 8005506:	4603      	mov	r3, r0
 8005508:	429c      	cmp	r4, r3
 800550a:	dd03      	ble.n	8005514 <fillRect+0xc8>
        end = height();
 800550c:	f7fc fd5c 	bl	8001fc8 <height>
 8005510:	4603      	mov	r3, r0
 8005512:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 8005514:	89fa      	ldrh	r2, [r7, #14]
 8005516:	88bb      	ldrh	r3, [r7, #4]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	b29b      	uxth	r3, r3
 800551c:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 800551e:	88fa      	ldrh	r2, [r7, #6]
 8005520:	887b      	ldrh	r3, [r7, #2]
 8005522:	4413      	add	r3, r2
 8005524:	b29b      	uxth	r3, r3
 8005526:	3b01      	subs	r3, #1
 8005528:	b29b      	uxth	r3, r3
 800552a:	b21c      	sxth	r4, r3
 800552c:	88ba      	ldrh	r2, [r7, #4]
 800552e:	883b      	ldrh	r3, [r7, #0]
 8005530:	4413      	add	r3, r2
 8005532:	b29b      	uxth	r3, r3
 8005534:	3b01      	subs	r3, #1
 8005536:	b29b      	uxth	r3, r3
 8005538:	b21b      	sxth	r3, r3
 800553a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800553e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005542:	4622      	mov	r2, r4
 8005544:	f7ff fb48 	bl	8004bd8 <setAddrWindow>
    CS_ACTIVE;
 8005548:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800554c:	485a      	ldr	r0, [pc, #360]	; (80056b8 <fillRect+0x26c>)
 800554e:	f7fc fce1 	bl	8001f14 <PIN_LOW>
    WriteCmd(_MW);
 8005552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005556:	4859      	ldr	r0, [pc, #356]	; (80056bc <fillRect+0x270>)
 8005558:	f7fc fcdc 	bl	8001f14 <PIN_LOW>
 800555c:	4b58      	ldr	r3, [pc, #352]	; (80056c0 <fillRect+0x274>)
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	0a1b      	lsrs	r3, r3, #8
 8005562:	b29b      	uxth	r3, r3
 8005564:	737b      	strb	r3, [r7, #13]
 8005566:	4b56      	ldr	r3, [pc, #344]	; (80056c0 <fillRect+0x274>)
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	733b      	strb	r3, [r7, #12]
 800556c:	4b53      	ldr	r3, [pc, #332]	; (80056bc <fillRect+0x270>)
 800556e:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8005572:	619a      	str	r2, [r3, #24]
 8005574:	4b53      	ldr	r3, [pc, #332]	; (80056c4 <fillRect+0x278>)
 8005576:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800557a:	619a      	str	r2, [r3, #24]
 800557c:	4b52      	ldr	r3, [pc, #328]	; (80056c8 <fillRect+0x27c>)
 800557e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005582:	619a      	str	r2, [r3, #24]
 8005584:	7b7b      	ldrb	r3, [r7, #13]
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	4a4f      	ldr	r2, [pc, #316]	; (80056c8 <fillRect+0x27c>)
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	6193      	str	r3, [r2, #24]
 8005590:	7b7b      	ldrb	r3, [r7, #13]
 8005592:	021b      	lsls	r3, r3, #8
 8005594:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8005598:	7b7b      	ldrb	r3, [r7, #13]
 800559a:	015b      	lsls	r3, r3, #5
 800559c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a0:	431a      	orrs	r2, r3
 80055a2:	7b7b      	ldrb	r3, [r7, #13]
 80055a4:	015b      	lsls	r3, r3, #5
 80055a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055aa:	431a      	orrs	r2, r3
 80055ac:	4b45      	ldr	r3, [pc, #276]	; (80056c4 <fillRect+0x278>)
 80055ae:	619a      	str	r2, [r3, #24]
 80055b0:	7b7b      	ldrb	r3, [r7, #13]
 80055b2:	105b      	asrs	r3, r3, #1
 80055b4:	f003 0208 	and.w	r2, r3, #8
 80055b8:	7b7b      	ldrb	r3, [r7, #13]
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c0:	431a      	orrs	r2, r3
 80055c2:	7b7b      	ldrb	r3, [r7, #13]
 80055c4:	105b      	asrs	r3, r3, #1
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	431a      	orrs	r2, r3
 80055cc:	7b7b      	ldrb	r3, [r7, #13]
 80055ce:	10db      	asrs	r3, r3, #3
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	431a      	orrs	r2, r3
 80055d6:	4b39      	ldr	r3, [pc, #228]	; (80056bc <fillRect+0x270>)
 80055d8:	619a      	str	r2, [r3, #24]
 80055da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055de:	4837      	ldr	r0, [pc, #220]	; (80056bc <fillRect+0x270>)
 80055e0:	f7fc fc98 	bl	8001f14 <PIN_LOW>
 80055e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055e8:	4834      	ldr	r0, [pc, #208]	; (80056bc <fillRect+0x270>)
 80055ea:	f7fc fca3 	bl	8001f34 <PIN_HIGH>
 80055ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055f2:	4832      	ldr	r0, [pc, #200]	; (80056bc <fillRect+0x270>)
 80055f4:	f7fc fc9e 	bl	8001f34 <PIN_HIGH>
 80055f8:	4b30      	ldr	r3, [pc, #192]	; (80056bc <fillRect+0x270>)
 80055fa:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80055fe:	619a      	str	r2, [r3, #24]
 8005600:	4b30      	ldr	r3, [pc, #192]	; (80056c4 <fillRect+0x278>)
 8005602:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8005606:	619a      	str	r2, [r3, #24]
 8005608:	4b2f      	ldr	r3, [pc, #188]	; (80056c8 <fillRect+0x27c>)
 800560a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800560e:	619a      	str	r2, [r3, #24]
 8005610:	7b3b      	ldrb	r3, [r7, #12]
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	4a2c      	ldr	r2, [pc, #176]	; (80056c8 <fillRect+0x27c>)
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	6193      	str	r3, [r2, #24]
 800561c:	7b3b      	ldrb	r3, [r7, #12]
 800561e:	021b      	lsls	r3, r3, #8
 8005620:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8005624:	7b3b      	ldrb	r3, [r7, #12]
 8005626:	015b      	lsls	r3, r3, #5
 8005628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562c:	431a      	orrs	r2, r3
 800562e:	7b3b      	ldrb	r3, [r7, #12]
 8005630:	015b      	lsls	r3, r3, #5
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	431a      	orrs	r2, r3
 8005638:	4b22      	ldr	r3, [pc, #136]	; (80056c4 <fillRect+0x278>)
 800563a:	619a      	str	r2, [r3, #24]
 800563c:	7b3b      	ldrb	r3, [r7, #12]
 800563e:	105b      	asrs	r3, r3, #1
 8005640:	f003 0208 	and.w	r2, r3, #8
 8005644:	7b3b      	ldrb	r3, [r7, #12]
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564c:	431a      	orrs	r2, r3
 800564e:	7b3b      	ldrb	r3, [r7, #12]
 8005650:	105b      	asrs	r3, r3, #1
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	431a      	orrs	r2, r3
 8005658:	7b3b      	ldrb	r3, [r7, #12]
 800565a:	10db      	asrs	r3, r3, #3
 800565c:	f003 0310 	and.w	r3, r3, #16
 8005660:	431a      	orrs	r2, r3
 8005662:	4b16      	ldr	r3, [pc, #88]	; (80056bc <fillRect+0x270>)
 8005664:	619a      	str	r2, [r3, #24]
 8005666:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800566a:	4814      	ldr	r0, [pc, #80]	; (80056bc <fillRect+0x270>)
 800566c:	f7fc fc52 	bl	8001f14 <PIN_LOW>
 8005670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005674:	4811      	ldr	r0, [pc, #68]	; (80056bc <fillRect+0x270>)
 8005676:	f7fc fc5d 	bl	8001f34 <PIN_HIGH>
 800567a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800567e:	480f      	ldr	r0, [pc, #60]	; (80056bc <fillRect+0x270>)
 8005680:	f7fc fc58 	bl	8001f34 <PIN_HIGH>
 8005684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005688:	480c      	ldr	r0, [pc, #48]	; (80056bc <fillRect+0x270>)
 800568a:	f7fc fc53 	bl	8001f34 <PIN_HIGH>
    if (h > w) {
 800568e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005692:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005696:	429a      	cmp	r2, r3
 8005698:	dd05      	ble.n	80056a6 <fillRect+0x25a>
        end = h;
 800569a:	883b      	ldrh	r3, [r7, #0]
 800569c:	81fb      	strh	r3, [r7, #14]
        h = w;
 800569e:	887b      	ldrh	r3, [r7, #2]
 80056a0:	803b      	strh	r3, [r7, #0]
        w = end;
 80056a2:	89fb      	ldrh	r3, [r7, #14]
 80056a4:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 80056a6:	8c3b      	ldrh	r3, [r7, #32]
 80056a8:	0a1b      	lsrs	r3, r3, #8
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	72fb      	strb	r3, [r7, #11]
 80056ae:	8c3b      	ldrh	r3, [r7, #32]
 80056b0:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 80056b2:	e0a2      	b.n	80057fa <fillRect+0x3ae>
 80056b4:	20003bce 	.word	0x20003bce
 80056b8:	40020400 	.word	0x40020400
 80056bc:	40021000 	.word	0x40021000
 80056c0:	20003eca 	.word	0x20003eca
 80056c4:	40021400 	.word	0x40021400
 80056c8:	40021800 	.word	0x40021800
        end = w;
 80056cc:	887b      	ldrh	r3, [r7, #2]
 80056ce:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 80056d0:	4b64      	ldr	r3, [pc, #400]	; (8005864 <fillRect+0x418>)
 80056d2:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80056d6:	619a      	str	r2, [r3, #24]
 80056d8:	4b63      	ldr	r3, [pc, #396]	; (8005868 <fillRect+0x41c>)
 80056da:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80056de:	619a      	str	r2, [r3, #24]
 80056e0:	4b62      	ldr	r3, [pc, #392]	; (800586c <fillRect+0x420>)
 80056e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056e6:	619a      	str	r2, [r3, #24]
 80056e8:	7afb      	ldrb	r3, [r7, #11]
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	4a5f      	ldr	r2, [pc, #380]	; (800586c <fillRect+0x420>)
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	6193      	str	r3, [r2, #24]
 80056f4:	7afb      	ldrb	r3, [r7, #11]
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80056fc:	7afb      	ldrb	r3, [r7, #11]
 80056fe:	015b      	lsls	r3, r3, #5
 8005700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005704:	431a      	orrs	r2, r3
 8005706:	7afb      	ldrb	r3, [r7, #11]
 8005708:	015b      	lsls	r3, r3, #5
 800570a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570e:	431a      	orrs	r2, r3
 8005710:	4b55      	ldr	r3, [pc, #340]	; (8005868 <fillRect+0x41c>)
 8005712:	619a      	str	r2, [r3, #24]
 8005714:	7afb      	ldrb	r3, [r7, #11]
 8005716:	105b      	asrs	r3, r3, #1
 8005718:	f003 0208 	and.w	r2, r3, #8
 800571c:	7afb      	ldrb	r3, [r7, #11]
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005724:	431a      	orrs	r2, r3
 8005726:	7afb      	ldrb	r3, [r7, #11]
 8005728:	105b      	asrs	r3, r3, #1
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	431a      	orrs	r2, r3
 8005730:	7afb      	ldrb	r3, [r7, #11]
 8005732:	10db      	asrs	r3, r3, #3
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	431a      	orrs	r2, r3
 800573a:	4b4a      	ldr	r3, [pc, #296]	; (8005864 <fillRect+0x418>)
 800573c:	619a      	str	r2, [r3, #24]
 800573e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005742:	4848      	ldr	r0, [pc, #288]	; (8005864 <fillRect+0x418>)
 8005744:	f7fc fbe6 	bl	8001f14 <PIN_LOW>
 8005748:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800574c:	4845      	ldr	r0, [pc, #276]	; (8005864 <fillRect+0x418>)
 800574e:	f7fc fbf1 	bl	8001f34 <PIN_HIGH>
 8005752:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005756:	4843      	ldr	r0, [pc, #268]	; (8005864 <fillRect+0x418>)
 8005758:	f7fc fbec 	bl	8001f34 <PIN_HIGH>
            write8(lo);
 800575c:	4b41      	ldr	r3, [pc, #260]	; (8005864 <fillRect+0x418>)
 800575e:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8005762:	619a      	str	r2, [r3, #24]
 8005764:	4b40      	ldr	r3, [pc, #256]	; (8005868 <fillRect+0x41c>)
 8005766:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800576a:	619a      	str	r2, [r3, #24]
 800576c:	4b3f      	ldr	r3, [pc, #252]	; (800586c <fillRect+0x420>)
 800576e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005772:	619a      	str	r2, [r3, #24]
 8005774:	7abb      	ldrb	r3, [r7, #10]
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	4a3c      	ldr	r2, [pc, #240]	; (800586c <fillRect+0x420>)
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	6193      	str	r3, [r2, #24]
 8005780:	7abb      	ldrb	r3, [r7, #10]
 8005782:	021b      	lsls	r3, r3, #8
 8005784:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8005788:	7abb      	ldrb	r3, [r7, #10]
 800578a:	015b      	lsls	r3, r3, #5
 800578c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005790:	431a      	orrs	r2, r3
 8005792:	7abb      	ldrb	r3, [r7, #10]
 8005794:	015b      	lsls	r3, r3, #5
 8005796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579a:	431a      	orrs	r2, r3
 800579c:	4b32      	ldr	r3, [pc, #200]	; (8005868 <fillRect+0x41c>)
 800579e:	619a      	str	r2, [r3, #24]
 80057a0:	7abb      	ldrb	r3, [r7, #10]
 80057a2:	105b      	asrs	r3, r3, #1
 80057a4:	f003 0208 	and.w	r2, r3, #8
 80057a8:	7abb      	ldrb	r3, [r7, #10]
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b0:	431a      	orrs	r2, r3
 80057b2:	7abb      	ldrb	r3, [r7, #10]
 80057b4:	105b      	asrs	r3, r3, #1
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	431a      	orrs	r2, r3
 80057bc:	7abb      	ldrb	r3, [r7, #10]
 80057be:	10db      	asrs	r3, r3, #3
 80057c0:	f003 0310 	and.w	r3, r3, #16
 80057c4:	431a      	orrs	r2, r3
 80057c6:	4b27      	ldr	r3, [pc, #156]	; (8005864 <fillRect+0x418>)
 80057c8:	619a      	str	r2, [r3, #24]
 80057ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057ce:	4825      	ldr	r0, [pc, #148]	; (8005864 <fillRect+0x418>)
 80057d0:	f7fc fba0 	bl	8001f14 <PIN_LOW>
 80057d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057d8:	4822      	ldr	r0, [pc, #136]	; (8005864 <fillRect+0x418>)
 80057da:	f7fc fbab 	bl	8001f34 <PIN_HIGH>
 80057de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057e2:	4820      	ldr	r0, [pc, #128]	; (8005864 <fillRect+0x418>)
 80057e4:	f7fc fba6 	bl	8001f34 <PIN_HIGH>
        } while (--end != 0);
 80057e8:	89fb      	ldrh	r3, [r7, #14]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	81fb      	strh	r3, [r7, #14]
 80057f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f47f af6b 	bne.w	80056d0 <fillRect+0x284>
    while (h-- > 0) {
 80057fa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80057fe:	b29a      	uxth	r2, r3
 8005800:	3a01      	subs	r2, #1
 8005802:	b292      	uxth	r2, r2
 8005804:	803a      	strh	r2, [r7, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	f73f af60 	bgt.w	80056cc <fillRect+0x280>
#endif
    }
    CS_IDLE;
 800580c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005810:	4817      	ldr	r0, [pc, #92]	; (8005870 <fillRect+0x424>)
 8005812:	f7fc fb8f 	bl	8001f34 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8005816:	4b17      	ldr	r3, [pc, #92]	; (8005874 <fillRect+0x428>)
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <fillRect+0x3ee>
 8005822:	4b15      	ldr	r3, [pc, #84]	; (8005878 <fillRect+0x42c>)
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	f241 5226 	movw	r2, #5414	; 0x1526
 800582a:	4293      	cmp	r3, r2
 800582c:	d116      	bne.n	800585c <fillRect+0x410>
 800582e:	4b13      	ldr	r3, [pc, #76]	; (800587c <fillRect+0x430>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d010      	beq.n	800585c <fillRect+0x410>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 800583a:	f7fc fbb9 	bl	8001fb0 <width>
 800583e:	4603      	mov	r3, r0
 8005840:	3b01      	subs	r3, #1
 8005842:	b29b      	uxth	r3, r3
 8005844:	b21c      	sxth	r4, r3
 8005846:	f7fc fbbf 	bl	8001fc8 <height>
 800584a:	4603      	mov	r3, r0
 800584c:	3b01      	subs	r3, #1
 800584e:	b29b      	uxth	r3, r3
 8005850:	b21b      	sxth	r3, r3
 8005852:	4622      	mov	r2, r4
 8005854:	2100      	movs	r1, #0
 8005856:	2000      	movs	r0, #0
 8005858:	f7ff f9be 	bl	8004bd8 <setAddrWindow>
}
 800585c:	bf00      	nop
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	bd90      	pop	{r4, r7, pc}
 8005864:	40021000 	.word	0x40021000
 8005868:	40021400 	.word	0x40021400
 800586c:	40021800 	.word	0x40021800
 8005870:	40020400 	.word	0x40020400
 8005874:	20003ecc 	.word	0x20003ecc
 8005878:	20003eda 	.word	0x20003eda
 800587c:	20003bd0 	.word	0x20003bd0

08005880 <fillTriangle>:
    drawLine(x2, y2, x0, y0, color);
}


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8005880:	b590      	push	{r4, r7, lr}
 8005882:	b08f      	sub	sp, #60	; 0x3c
 8005884:	af00      	add	r7, sp, #0
 8005886:	4604      	mov	r4, r0
 8005888:	4608      	mov	r0, r1
 800588a:	4611      	mov	r1, r2
 800588c:	461a      	mov	r2, r3
 800588e:	4623      	mov	r3, r4
 8005890:	80fb      	strh	r3, [r7, #6]
 8005892:	4603      	mov	r3, r0
 8005894:	80bb      	strh	r3, [r7, #4]
 8005896:	460b      	mov	r3, r1
 8005898:	807b      	strh	r3, [r7, #2]
 800589a:	4613      	mov	r3, r2
 800589c:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 800589e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80058a2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	dd0b      	ble.n	80058c2 <fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80058aa:	88bb      	ldrh	r3, [r7, #4]
 80058ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 80058ae:	883b      	ldrh	r3, [r7, #0]
 80058b0:	80bb      	strh	r3, [r7, #4]
 80058b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058b4:	803b      	strh	r3, [r7, #0]
 80058b6:	88fb      	ldrh	r3, [r7, #6]
 80058b8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80058ba:	887b      	ldrh	r3, [r7, #2]
 80058bc:	80fb      	strh	r3, [r7, #6]
 80058be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058c0:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 80058c2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80058c6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80058ca:	429a      	cmp	r2, r3
 80058cc:	dd0f      	ble.n	80058ee <fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 80058ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80058d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80058d4:	883b      	ldrh	r3, [r7, #0]
 80058d6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80058da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058dc:	803b      	strh	r3, [r7, #0]
 80058de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80058e2:	843b      	strh	r3, [r7, #32]
 80058e4:	887b      	ldrh	r3, [r7, #2]
 80058e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80058ea:	8c3b      	ldrh	r3, [r7, #32]
 80058ec:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 80058ee:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80058f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	dd0b      	ble.n	8005912 <fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80058fa:	88bb      	ldrh	r3, [r7, #4]
 80058fc:	83fb      	strh	r3, [r7, #30]
 80058fe:	883b      	ldrh	r3, [r7, #0]
 8005900:	80bb      	strh	r3, [r7, #4]
 8005902:	8bfb      	ldrh	r3, [r7, #30]
 8005904:	803b      	strh	r3, [r7, #0]
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	83bb      	strh	r3, [r7, #28]
 800590a:	887b      	ldrh	r3, [r7, #2]
 800590c:	80fb      	strh	r3, [r7, #6]
 800590e:	8bbb      	ldrh	r3, [r7, #28]
 8005910:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8005912:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005916:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800591a:	429a      	cmp	r2, r3
 800591c:	d137      	bne.n	800598e <fillTriangle+0x10e>
        a = b = x0;
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005922:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005924:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8005926:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800592a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800592e:	429a      	cmp	r2, r3
 8005930:	da02      	bge.n	8005938 <fillTriangle+0xb8>
 8005932:	887b      	ldrh	r3, [r7, #2]
 8005934:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005936:	e007      	b.n	8005948 <fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8005938:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800593c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005940:	429a      	cmp	r2, r3
 8005942:	dd01      	ble.n	8005948 <fillTriangle+0xc8>
 8005944:	887b      	ldrh	r3, [r7, #2]
 8005946:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8005948:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800594c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005950:	429a      	cmp	r2, r3
 8005952:	da03      	bge.n	800595c <fillTriangle+0xdc>
 8005954:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005958:	86fb      	strh	r3, [r7, #54]	; 0x36
 800595a:	e008      	b.n	800596e <fillTriangle+0xee>
        else if(x2 > b) b = x2;
 800595c:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005960:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005964:	429a      	cmp	r2, r3
 8005966:	dd02      	ble.n	800596e <fillTriangle+0xee>
 8005968:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800596c:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y0, b-a+1, color);
 800596e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005970:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	b29b      	uxth	r3, r3
 8005976:	3301      	adds	r3, #1
 8005978:	b29b      	uxth	r3, r3
 800597a:	b21a      	sxth	r2, r3
 800597c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005980:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005984:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005988:	f7ff fc43 	bl	8005212 <drawFastHLine>
        return;
 800598c:	e0d4      	b.n	8005b38 <fillTriangle+0x2b8>
    }

    int16_t
    dx01 = x1 - x0,
 800598e:	887a      	ldrh	r2, [r7, #2]
 8005990:	88fb      	ldrh	r3, [r7, #6]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	b29b      	uxth	r3, r3
 8005996:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8005998:	883a      	ldrh	r2, [r7, #0]
 800599a:	88bb      	ldrh	r3, [r7, #4]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	b29b      	uxth	r3, r3
 80059a0:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 80059a2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80059a6:	88fb      	ldrh	r3, [r7, #6]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 80059ae:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80059b2:	88bb      	ldrh	r3, [r7, #4]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 80059ba:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80059be:	887b      	ldrh	r3, [r7, #2]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 80059c6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80059ca:	883b      	ldrh	r3, [r7, #0]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 80059d2:	2300      	movs	r3, #0
 80059d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 80059d6:	2300      	movs	r3, #0
 80059d8:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80059da:	f9b7 2000 	ldrsh.w	r2, [r7]
 80059de:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d102      	bne.n	80059ec <fillTriangle+0x16c>
 80059e6:	883b      	ldrh	r3, [r7, #0]
 80059e8:	863b      	strh	r3, [r7, #48]	; 0x30
 80059ea:	e003      	b.n	80059f4 <fillTriangle+0x174>
    else         last = y1-1; // Skip it
 80059ec:	883b      	ldrh	r3, [r7, #0]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 80059f4:	88bb      	ldrh	r3, [r7, #4]
 80059f6:	867b      	strh	r3, [r7, #50]	; 0x32
 80059f8:	e03e      	b.n	8005a78 <fillTriangle+0x1f8>
        a   = x0 + sa / dy01;
 80059fa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80059fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a00:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	4413      	add	r3, r2
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005a0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a14:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8005a22:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a28:	4413      	add	r3, r2
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005a2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a32:	4413      	add	r3, r2
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005a36:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005a3a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	dd05      	ble.n	8005a4e <fillTriangle+0x1ce>
 8005a42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a44:	81bb      	strh	r3, [r7, #12]
 8005a46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005a48:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005a4a:	89bb      	ldrh	r3, [r7, #12]
 8005a4c:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 8005a4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005a50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3301      	adds	r3, #1
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	b21a      	sxth	r2, r3
 8005a5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005a60:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005a64:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005a68:	f7ff fbd3 	bl	8005212 <drawFastHLine>
    for(y=y0; y<=last; y++) {
 8005a6c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3301      	adds	r3, #1
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	867b      	strh	r3, [r7, #50]	; 0x32
 8005a78:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005a7c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005a80:	429a      	cmp	r2, r3
 8005a82:	ddba      	ble.n	80059fa <fillTriangle+0x17a>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8005a84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005a88:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005a8c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005a90:	1a8a      	subs	r2, r1, r2
 8005a92:	fb02 f303 	mul.w	r3, r2, r3
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8005a98:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005a9c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005aa0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005aa4:	1a8a      	subs	r2, r1, r2
 8005aa6:	fb02 f303 	mul.w	r3, r2, r3
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8005aac:	e03e      	b.n	8005b2c <fillTriangle+0x2ac>
        a   = x1 + sa / dy12;
 8005aae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ab4:	fb92 f3f3 	sdiv	r3, r2, r3
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	887b      	ldrh	r3, [r7, #2]
 8005abc:	4413      	add	r3, r2
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005ac2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ac8:	fb92 f3f3 	sdiv	r3, r2, r3
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	88fb      	ldrh	r3, [r7, #6]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8005ad6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005adc:	4413      	add	r3, r2
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005ae0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ae6:	4413      	add	r3, r2
 8005ae8:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005aea:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005aee:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005af2:	429a      	cmp	r2, r3
 8005af4:	dd05      	ble.n	8005b02 <fillTriangle+0x282>
 8005af6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005af8:	81fb      	strh	r3, [r7, #14]
 8005afa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005afc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005afe:	89fb      	ldrh	r3, [r7, #14]
 8005b00:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 8005b02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005b04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	b21a      	sxth	r2, r3
 8005b10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005b14:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005b18:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005b1c:	f7ff fb79 	bl	8005212 <drawFastHLine>
    for(; y<=y2; y++) {
 8005b20:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3301      	adds	r3, #1
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	867b      	strh	r3, [r7, #50]	; 0x32
 8005b2c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005b30:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005b34:	429a      	cmp	r2, r3
 8005b36:	ddba      	ble.n	8005aae <fillTriangle+0x22e>
    }
}
 8005b38:	373c      	adds	r7, #60	; 0x3c
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd90      	pop	{r4, r7, pc}
	...

08005b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005b44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005b46:	e003      	b.n	8005b50 <LoopCopyDataInit>

08005b48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005b48:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005b4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005b4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005b4e:	3104      	adds	r1, #4

08005b50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005b50:	480b      	ldr	r0, [pc, #44]	; (8005b80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005b52:	4b0c      	ldr	r3, [pc, #48]	; (8005b84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005b54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005b56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005b58:	d3f6      	bcc.n	8005b48 <CopyDataInit>
  ldr  r2, =_sbss
 8005b5a:	4a0b      	ldr	r2, [pc, #44]	; (8005b88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005b5c:	e002      	b.n	8005b64 <LoopFillZerobss>

08005b5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005b5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005b60:	f842 3b04 	str.w	r3, [r2], #4

08005b64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005b64:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005b66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005b68:	d3f9      	bcc.n	8005b5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005b6a:	f7fc f9a5 	bl	8001eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b6e:	f003 fc95 	bl	800949c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b72:	f7fa fce1 	bl	8000538 <main>
  bx  lr    
 8005b76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005b78:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8005b7c:	08009ab4 	.word	0x08009ab4
  ldr  r0, =_sdata
 8005b80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005b84:	20003b9c 	.word	0x20003b9c
  ldr  r2, =_sbss
 8005b88:	20003b9c 	.word	0x20003b9c
  ldr  r3, = _ebss
 8005b8c:	20003ee8 	.word	0x20003ee8

08005b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b90:	e7fe      	b.n	8005b90 <ADC_IRQHandler>

08005b92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b96:	2003      	movs	r0, #3
 8005b98:	f000 f94a 	bl	8005e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	f000 f805 	bl	8005bac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005ba2:	f7fb ff35 	bl	8001a10 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005bb4:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <HAL_InitTick+0x54>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	4b12      	ldr	r3, [pc, #72]	; (8005c04 <HAL_InitTick+0x58>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 f965 	bl	8005e9a <HAL_SYSTICK_Config>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e00e      	b.n	8005bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b0f      	cmp	r3, #15
 8005bde:	d80a      	bhi.n	8005bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005be0:	2200      	movs	r2, #0
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	f04f 30ff 	mov.w	r0, #4294967295
 8005be8:	f000 f92d 	bl	8005e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005bec:	4a06      	ldr	r2, [pc, #24]	; (8005c08 <HAL_InitTick+0x5c>)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e000      	b.n	8005bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20003b8c 	.word	0x20003b8c
 8005c04:	20003b98 	.word	0x20003b98
 8005c08:	20003b94 	.word	0x20003b94

08005c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c10:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <HAL_IncTick+0x20>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	461a      	mov	r2, r3
 8005c16:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <HAL_IncTick+0x24>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	4a04      	ldr	r2, [pc, #16]	; (8005c30 <HAL_IncTick+0x24>)
 8005c1e:	6013      	str	r3, [r2, #0]
}
 8005c20:	bf00      	nop
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	20003b98 	.word	0x20003b98
 8005c30:	20003ee4 	.word	0x20003ee4

08005c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  return uwTick;
 8005c38:	4b03      	ldr	r3, [pc, #12]	; (8005c48 <HAL_GetTick+0x14>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	20003ee4 	.word	0x20003ee4

08005c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c54:	f7ff ffee 	bl	8005c34 <HAL_GetTick>
 8005c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c64:	d005      	beq.n	8005c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c66:	4b09      	ldr	r3, [pc, #36]	; (8005c8c <HAL_Delay+0x40>)
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c72:	bf00      	nop
 8005c74:	f7ff ffde 	bl	8005c34 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d8f7      	bhi.n	8005c74 <HAL_Delay+0x28>
  {
  }
}
 8005c84:	bf00      	nop
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	20003b98 	.word	0x20003b98

08005c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <__NVIC_SetPriorityGrouping+0x40>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cac:	4013      	ands	r3, r2
 8005cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005cb8:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cbe:	4a04      	ldr	r2, [pc, #16]	; (8005cd0 <__NVIC_SetPriorityGrouping+0x40>)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	60d3      	str	r3, [r2, #12]
}
 8005cc4:	bf00      	nop
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	e000ed00 	.word	0xe000ed00
 8005cd4:	05fa0000 	.word	0x05fa0000

08005cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cdc:	4b04      	ldr	r3, [pc, #16]	; (8005cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	0a1b      	lsrs	r3, r3, #8
 8005ce2:	f003 0307 	and.w	r3, r3, #7
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	e000ed00 	.word	0xe000ed00

08005cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	db0b      	blt.n	8005d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d06:	79fb      	ldrb	r3, [r7, #7]
 8005d08:	f003 021f 	and.w	r2, r3, #31
 8005d0c:	4907      	ldr	r1, [pc, #28]	; (8005d2c <__NVIC_EnableIRQ+0x38>)
 8005d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d12:	095b      	lsrs	r3, r3, #5
 8005d14:	2001      	movs	r0, #1
 8005d16:	fa00 f202 	lsl.w	r2, r0, r2
 8005d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	e000e100 	.word	0xe000e100

08005d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	4603      	mov	r3, r0
 8005d38:	6039      	str	r1, [r7, #0]
 8005d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	db0a      	blt.n	8005d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	490c      	ldr	r1, [pc, #48]	; (8005d7c <__NVIC_SetPriority+0x4c>)
 8005d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d4e:	0112      	lsls	r2, r2, #4
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	440b      	add	r3, r1
 8005d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d58:	e00a      	b.n	8005d70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	4908      	ldr	r1, [pc, #32]	; (8005d80 <__NVIC_SetPriority+0x50>)
 8005d60:	79fb      	ldrb	r3, [r7, #7]
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	3b04      	subs	r3, #4
 8005d68:	0112      	lsls	r2, r2, #4
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	761a      	strb	r2, [r3, #24]
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	e000e100 	.word	0xe000e100
 8005d80:	e000ed00 	.word	0xe000ed00

08005d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b089      	sub	sp, #36	; 0x24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	f1c3 0307 	rsb	r3, r3, #7
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	bf28      	it	cs
 8005da2:	2304      	movcs	r3, #4
 8005da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	3304      	adds	r3, #4
 8005daa:	2b06      	cmp	r3, #6
 8005dac:	d902      	bls.n	8005db4 <NVIC_EncodePriority+0x30>
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	3b03      	subs	r3, #3
 8005db2:	e000      	b.n	8005db6 <NVIC_EncodePriority+0x32>
 8005db4:	2300      	movs	r3, #0
 8005db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005db8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	43da      	mvns	r2, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	401a      	ands	r2, r3
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd6:	43d9      	mvns	r1, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ddc:	4313      	orrs	r3, r2
         );
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3724      	adds	r7, #36	; 0x24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
	...

08005dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dfc:	d301      	bcc.n	8005e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e00f      	b.n	8005e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e02:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <SysTick_Config+0x40>)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e0a:	210f      	movs	r1, #15
 8005e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e10:	f7ff ff8e 	bl	8005d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e14:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <SysTick_Config+0x40>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e1a:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <SysTick_Config+0x40>)
 8005e1c:	2207      	movs	r2, #7
 8005e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	e000e010 	.word	0xe000e010

08005e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff ff29 	bl	8005c90 <__NVIC_SetPriorityGrouping>
}
 8005e3e:	bf00      	nop
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b086      	sub	sp, #24
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	607a      	str	r2, [r7, #4]
 8005e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e58:	f7ff ff3e 	bl	8005cd8 <__NVIC_GetPriorityGrouping>
 8005e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	68b9      	ldr	r1, [r7, #8]
 8005e62:	6978      	ldr	r0, [r7, #20]
 8005e64:	f7ff ff8e 	bl	8005d84 <NVIC_EncodePriority>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e6e:	4611      	mov	r1, r2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff ff5d 	bl	8005d30 <__NVIC_SetPriority>
}
 8005e76:	bf00      	nop
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	4603      	mov	r3, r0
 8005e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff ff31 	bl	8005cf4 <__NVIC_EnableIRQ>
}
 8005e92:	bf00      	nop
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b082      	sub	sp, #8
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff ffa2 	bl	8005dec <SysTick_Config>
 8005ea8:	4603      	mov	r3, r0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e014      	b.n	8005eee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	791b      	ldrb	r3, [r3, #4]
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d105      	bne.n	8005eda <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7fb fdbf 	bl	8001a58 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2202      	movs	r2, #2
 8005ede:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	795b      	ldrb	r3, [r3, #5]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_DAC_Start_DMA+0x1e>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e08e      	b.n	8006034 <HAL_DAC_Start_DMA+0x13c>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d12a      	bne.n	8005f7e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	4a43      	ldr	r2, [pc, #268]	; (800603c <HAL_DAC_Start_DMA+0x144>)
 8005f2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	4a42      	ldr	r2, [pc, #264]	; (8006040 <HAL_DAC_Start_DMA+0x148>)
 8005f36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	4a41      	ldr	r2, [pc, #260]	; (8006044 <HAL_DAC_Start_DMA+0x14c>)
 8005f3e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f4e:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d009      	beq.n	8005f6a <HAL_DAC_Start_DMA+0x72>
 8005f56:	2b08      	cmp	r3, #8
 8005f58:	d00c      	beq.n	8005f74 <HAL_DAC_Start_DMA+0x7c>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d000      	beq.n	8005f60 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8005f5e:	e039      	b.n	8005fd4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3308      	adds	r3, #8
 8005f66:	617b      	str	r3, [r7, #20]
        break;
 8005f68:	e034      	b.n	8005fd4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	330c      	adds	r3, #12
 8005f70:	617b      	str	r3, [r7, #20]
        break;
 8005f72:	e02f      	b.n	8005fd4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3310      	adds	r3, #16
 8005f7a:	617b      	str	r3, [r7, #20]
        break;
 8005f7c:	e02a      	b.n	8005fd4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	4a31      	ldr	r2, [pc, #196]	; (8006048 <HAL_DAC_Start_DMA+0x150>)
 8005f84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	4a30      	ldr	r2, [pc, #192]	; (800604c <HAL_DAC_Start_DMA+0x154>)
 8005f8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	4a2f      	ldr	r2, [pc, #188]	; (8006050 <HAL_DAC_Start_DMA+0x158>)
 8005f94:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005fa4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	d009      	beq.n	8005fc0 <HAL_DAC_Start_DMA+0xc8>
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d00c      	beq.n	8005fca <HAL_DAC_Start_DMA+0xd2>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d000      	beq.n	8005fb6 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8005fb4:	e00e      	b.n	8005fd4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3314      	adds	r3, #20
 8005fbc:	617b      	str	r3, [r7, #20]
        break;
 8005fbe:	e009      	b.n	8005fd4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3318      	adds	r3, #24
 8005fc6:	617b      	str	r3, [r7, #20]
        break;
 8005fc8:	e004      	b.n	8005fd4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	331c      	adds	r3, #28
 8005fd0:	617b      	str	r3, [r7, #20]
        break;
 8005fd2:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10f      	bne.n	8005ffa <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fe8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6898      	ldr	r0, [r3, #8]
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	f000 fa12 	bl	800641c <HAL_DMA_Start_IT>
 8005ff8:	e00e      	b.n	8006018 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006008:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	68d8      	ldr	r0, [r3, #12]
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	f000 fa02 	bl	800641c <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6819      	ldr	r1, [r3, #0]
 800601e:	2201      	movs	r2, #1
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	409a      	lsls	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3718      	adds	r7, #24
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	080061ad 	.word	0x080061ad
 8006040:	080061cf 	.word	0x080061cf
 8006044:	080061eb 	.word	0x080061eb
 8006048:	08006255 	.word	0x08006255
 800604c:	08006277 	.word	0x08006277
 8006050:	08006293 	.word	0x08006293

08006054 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6819      	ldr	r1, [r3, #0]
 8006068:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	43da      	mvns	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	400a      	ands	r2, r1
 800607a:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6819      	ldr	r1, [r3, #0]
 8006082:	2201      	movs	r2, #1
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	fa02 f303 	lsl.w	r3, r2, r3
 800608a:	43da      	mvns	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	400a      	ands	r2, r1
 8006092:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d107      	bne.n	80060aa <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fa1c 	bl	80064dc <HAL_DMA_Abort>
 80060a4:	4603      	mov	r3, r0
 80060a6:	73fb      	strb	r3, [r7, #15]
 80060a8:	e006      	b.n	80060b8 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fa14 	bl	80064dc <HAL_DMA_Abort>
 80060b4:	4603      	mov	r3, r0
 80060b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2204      	movs	r2, #4
 80060c2:	711a      	strb	r2, [r3, #4]
 80060c4:	e002      	b.n	80060cc <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
   
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8006112:	b480      	push	{r7}
 8006114:	b087      	sub	sp, #28
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800611e:	2300      	movs	r3, #0
 8006120:	617b      	str	r3, [r7, #20]
 8006122:	2300      	movs	r3, #0
 8006124:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	795b      	ldrb	r3, [r3, #5]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <HAL_DAC_ConfigChannel+0x20>
 800612e:	2302      	movs	r3, #2
 8006130:	e036      	b.n	80061a0 <HAL_DAC_ConfigChannel+0x8e>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2201      	movs	r2, #1
 8006136:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2202      	movs	r2, #2
 800613c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8006146:	f640 72fe 	movw	r2, #4094	; 0xffe
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	43db      	mvns	r3, r3
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4013      	ands	r3, r2
 8006156:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6819      	ldr	r1, [r3, #0]
 8006180:	22c0      	movs	r2, #192	; 0xc0
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	fa02 f303 	lsl.w	r3, r2, r3
 8006188:	43da      	mvns	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	400a      	ands	r2, r1
 8006190:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	371c      	adds	r7, #28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <DAC_DMAConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b8:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f7ff ff8b 	bl	80060d6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	711a      	strb	r2, [r3, #4]
}
 80061c6:	bf00      	nop
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061da:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f7ff ff84 	bl	80060ea <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80061e2:	bf00      	nop
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <DAC_DMAErrorCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	f043 0204 	orr.w	r2, r3, #4
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff ff7a 	bl	80060fe <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2201      	movs	r2, #1
 800620e:	711a      	strb	r2, [r3, #4]
}
 8006210:	bf00      	nop
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <DAC_DMAConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7ff ffd8 	bl	8006218 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2201      	movs	r2, #1
 800626c:	711a      	strb	r2, [r3, #4]
}
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff ffd1 	bl	800622c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800628a:	bf00      	nop
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <DAC_DMAErrorCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	f043 0204 	orr.w	r2, r3, #4
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f7ff ffc7 	bl	8006240 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	711a      	strb	r2, [r3, #4]
}
 80062b8:	bf00      	nop
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80062cc:	f7ff fcb2 	bl	8005c34 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e099      	b.n	8006410 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0201 	bic.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062fc:	e00f      	b.n	800631e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062fe:	f7ff fc99 	bl	8005c34 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b05      	cmp	r3, #5
 800630a:	d908      	bls.n	800631e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2220      	movs	r2, #32
 8006310:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2203      	movs	r2, #3
 8006316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e078      	b.n	8006410 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e8      	bne.n	80062fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4b38      	ldr	r3, [pc, #224]	; (8006418 <HAL_DMA_Init+0x158>)
 8006338:	4013      	ands	r3, r2
 800633a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800634a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006356:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006362:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	2b04      	cmp	r3, #4
 8006376:	d107      	bne.n	8006388 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006380:	4313      	orrs	r3, r2
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f023 0307 	bic.w	r3, r3, #7
 800639e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d117      	bne.n	80063e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00e      	beq.n	80063e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fae7 	bl	8006998 <DMA_CheckFifoParam>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d008      	beq.n	80063e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2240      	movs	r2, #64	; 0x40
 80063d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80063de:	2301      	movs	r3, #1
 80063e0:	e016      	b.n	8006410 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fa9e 	bl	800692c <DMA_CalcBaseAndBitshift>
 80063f0:	4603      	mov	r3, r0
 80063f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f8:	223f      	movs	r2, #63	; 0x3f
 80063fa:	409a      	lsls	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	e010803f 	.word	0xe010803f

0800641c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006432:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800643a:	2b01      	cmp	r3, #1
 800643c:	d101      	bne.n	8006442 <HAL_DMA_Start_IT+0x26>
 800643e:	2302      	movs	r3, #2
 8006440:	e048      	b.n	80064d4 <HAL_DMA_Start_IT+0xb8>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b01      	cmp	r3, #1
 8006454:	d137      	bne.n	80064c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2202      	movs	r2, #2
 800645a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 fa30 	bl	80068d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006474:	223f      	movs	r2, #63	; 0x3f
 8006476:	409a      	lsls	r2, r3
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0216 	orr.w	r2, r2, #22
 800648a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695a      	ldr	r2, [r3, #20]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800649a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d007      	beq.n	80064b4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0208 	orr.w	r2, r2, #8
 80064b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	e005      	b.n	80064d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80064ce:	2302      	movs	r3, #2
 80064d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80064d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80064ea:	f7ff fba3 	bl	8005c34 <HAL_GetTick>
 80064ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d008      	beq.n	800650e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2280      	movs	r2, #128	; 0x80
 8006500:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e052      	b.n	80065b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0216 	bic.w	r2, r2, #22
 800651c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695a      	ldr	r2, [r3, #20]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800652c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	d103      	bne.n	800653e <HAL_DMA_Abort+0x62>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800653a:	2b00      	cmp	r3, #0
 800653c:	d007      	beq.n	800654e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f022 0208 	bic.w	r2, r2, #8
 800654c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0201 	bic.w	r2, r2, #1
 800655c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800655e:	e013      	b.n	8006588 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006560:	f7ff fb68 	bl	8005c34 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b05      	cmp	r3, #5
 800656c:	d90c      	bls.n	8006588 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2203      	movs	r2, #3
 8006580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e015      	b.n	80065b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1e4      	bne.n	8006560 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659a:	223f      	movs	r2, #63	; 0x3f
 800659c:	409a      	lsls	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80065c8:	4b92      	ldr	r3, [pc, #584]	; (8006814 <HAL_DMA_IRQHandler+0x258>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a92      	ldr	r2, [pc, #584]	; (8006818 <HAL_DMA_IRQHandler+0x25c>)
 80065ce:	fba2 2303 	umull	r2, r3, r2, r3
 80065d2:	0a9b      	lsrs	r3, r3, #10
 80065d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e6:	2208      	movs	r2, #8
 80065e8:	409a      	lsls	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4013      	ands	r3, r2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01a      	beq.n	8006628 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d013      	beq.n	8006628 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0204 	bic.w	r2, r2, #4
 800660e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006614:	2208      	movs	r2, #8
 8006616:	409a      	lsls	r2, r3
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006620:	f043 0201 	orr.w	r2, r3, #1
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662c:	2201      	movs	r2, #1
 800662e:	409a      	lsls	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4013      	ands	r3, r2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d012      	beq.n	800665e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00b      	beq.n	800665e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664a:	2201      	movs	r2, #1
 800664c:	409a      	lsls	r2, r3
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006656:	f043 0202 	orr.w	r2, r3, #2
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006662:	2204      	movs	r2, #4
 8006664:	409a      	lsls	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4013      	ands	r3, r2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d012      	beq.n	8006694 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00b      	beq.n	8006694 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006680:	2204      	movs	r2, #4
 8006682:	409a      	lsls	r2, r3
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668c:	f043 0204 	orr.w	r2, r3, #4
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006698:	2210      	movs	r2, #16
 800669a:	409a      	lsls	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4013      	ands	r3, r2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d043      	beq.n	800672c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0308 	and.w	r3, r3, #8
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d03c      	beq.n	800672c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b6:	2210      	movs	r2, #16
 80066b8:	409a      	lsls	r2, r3
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d018      	beq.n	80066fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d108      	bne.n	80066ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d024      	beq.n	800672c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	4798      	blx	r3
 80066ea:	e01f      	b.n	800672c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d01b      	beq.n	800672c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	4798      	blx	r3
 80066fc:	e016      	b.n	800672c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006708:	2b00      	cmp	r3, #0
 800670a:	d107      	bne.n	800671c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0208 	bic.w	r2, r2, #8
 800671a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006730:	2220      	movs	r2, #32
 8006732:	409a      	lsls	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4013      	ands	r3, r2
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 808e 	beq.w	800685a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 8086 	beq.w	800685a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006752:	2220      	movs	r2, #32
 8006754:	409a      	lsls	r2, r3
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b05      	cmp	r3, #5
 8006764:	d136      	bne.n	80067d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0216 	bic.w	r2, r2, #22
 8006774:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695a      	ldr	r2, [r3, #20]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006784:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d103      	bne.n	8006796 <HAL_DMA_IRQHandler+0x1da>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006792:	2b00      	cmp	r3, #0
 8006794:	d007      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f022 0208 	bic.w	r2, r2, #8
 80067a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067aa:	223f      	movs	r2, #63	; 0x3f
 80067ac:	409a      	lsls	r2, r3
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d07d      	beq.n	80068c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	4798      	blx	r3
        }
        return;
 80067d2:	e078      	b.n	80068c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d01c      	beq.n	800681c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d108      	bne.n	8006802 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d030      	beq.n	800685a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	4798      	blx	r3
 8006800:	e02b      	b.n	800685a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d027      	beq.n	800685a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	4798      	blx	r3
 8006812:	e022      	b.n	800685a <HAL_DMA_IRQHandler+0x29e>
 8006814:	20003b8c 	.word	0x20003b8c
 8006818:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10f      	bne.n	800684a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0210 	bic.w	r2, r2, #16
 8006838:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685e:	2b00      	cmp	r3, #0
 8006860:	d032      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d022      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2205      	movs	r2, #5
 8006872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0201 	bic.w	r2, r2, #1
 8006884:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	3301      	adds	r3, #1
 800688a:	60bb      	str	r3, [r7, #8]
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	429a      	cmp	r2, r3
 8006890:	d307      	bcc.n	80068a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1f2      	bne.n	8006886 <HAL_DMA_IRQHandler+0x2ca>
 80068a0:	e000      	b.n	80068a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80068a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d005      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	4798      	blx	r3
 80068c4:	e000      	b.n	80068c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80068c6:	bf00      	nop
    }
  }
}
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop

080068d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	2b40      	cmp	r3, #64	; 0x40
 80068fc:	d108      	bne.n	8006910 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800690e:	e007      	b.n	8006920 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	60da      	str	r2, [r3, #12]
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	3b10      	subs	r3, #16
 800693c:	4a13      	ldr	r2, [pc, #76]	; (800698c <DMA_CalcBaseAndBitshift+0x60>)
 800693e:	fba2 2303 	umull	r2, r3, r2, r3
 8006942:	091b      	lsrs	r3, r3, #4
 8006944:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006946:	4a12      	ldr	r2, [pc, #72]	; (8006990 <DMA_CalcBaseAndBitshift+0x64>)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b03      	cmp	r3, #3
 8006958:	d908      	bls.n	800696c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	4b0c      	ldr	r3, [pc, #48]	; (8006994 <DMA_CalcBaseAndBitshift+0x68>)
 8006962:	4013      	ands	r3, r2
 8006964:	1d1a      	adds	r2, r3, #4
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	659a      	str	r2, [r3, #88]	; 0x58
 800696a:	e006      	b.n	800697a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	461a      	mov	r2, r3
 8006972:	4b08      	ldr	r3, [pc, #32]	; (8006994 <DMA_CalcBaseAndBitshift+0x68>)
 8006974:	4013      	ands	r3, r2
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	aaaaaaab 	.word	0xaaaaaaab
 8006990:	08009a9c 	.word	0x08009a9c
 8006994:	fffffc00 	.word	0xfffffc00

08006998 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069a0:	2300      	movs	r3, #0
 80069a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d11f      	bne.n	80069f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d855      	bhi.n	8006a64 <DMA_CheckFifoParam+0xcc>
 80069b8:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <DMA_CheckFifoParam+0x28>)
 80069ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069be:	bf00      	nop
 80069c0:	080069d1 	.word	0x080069d1
 80069c4:	080069e3 	.word	0x080069e3
 80069c8:	080069d1 	.word	0x080069d1
 80069cc:	08006a65 	.word	0x08006a65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d045      	beq.n	8006a68 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069e0:	e042      	b.n	8006a68 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80069ea:	d13f      	bne.n	8006a6c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069f0:	e03c      	b.n	8006a6c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069fa:	d121      	bne.n	8006a40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d836      	bhi.n	8006a70 <DMA_CheckFifoParam+0xd8>
 8006a02:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <DMA_CheckFifoParam+0x70>)
 8006a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a08:	08006a19 	.word	0x08006a19
 8006a0c:	08006a1f 	.word	0x08006a1f
 8006a10:	08006a19 	.word	0x08006a19
 8006a14:	08006a31 	.word	0x08006a31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a1c:	e02f      	b.n	8006a7e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d024      	beq.n	8006a74 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a2e:	e021      	b.n	8006a74 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006a38:	d11e      	bne.n	8006a78 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006a3e:	e01b      	b.n	8006a78 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d902      	bls.n	8006a4c <DMA_CheckFifoParam+0xb4>
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d003      	beq.n	8006a52 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006a4a:	e018      	b.n	8006a7e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a50:	e015      	b.n	8006a7e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00e      	beq.n	8006a7c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	73fb      	strb	r3, [r7, #15]
      break;
 8006a62:	e00b      	b.n	8006a7c <DMA_CheckFifoParam+0xe4>
      break;
 8006a64:	bf00      	nop
 8006a66:	e00a      	b.n	8006a7e <DMA_CheckFifoParam+0xe6>
      break;
 8006a68:	bf00      	nop
 8006a6a:	e008      	b.n	8006a7e <DMA_CheckFifoParam+0xe6>
      break;
 8006a6c:	bf00      	nop
 8006a6e:	e006      	b.n	8006a7e <DMA_CheckFifoParam+0xe6>
      break;
 8006a70:	bf00      	nop
 8006a72:	e004      	b.n	8006a7e <DMA_CheckFifoParam+0xe6>
      break;
 8006a74:	bf00      	nop
 8006a76:	e002      	b.n	8006a7e <DMA_CheckFifoParam+0xe6>
      break;   
 8006a78:	bf00      	nop
 8006a7a:	e000      	b.n	8006a7e <DMA_CheckFifoParam+0xe6>
      break;
 8006a7c:	bf00      	nop
    }
  } 
  
  return status; 
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b089      	sub	sp, #36	; 0x24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006a96:	2300      	movs	r3, #0
 8006a98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	61fb      	str	r3, [r7, #28]
 8006aaa:	e175      	b.n	8006d98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006aac:	2201      	movs	r2, #1
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	4013      	ands	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	f040 8164 	bne.w	8006d92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d00b      	beq.n	8006aea <HAL_GPIO_Init+0x5e>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d007      	beq.n	8006aea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006ade:	2b11      	cmp	r3, #17
 8006ae0:	d003      	beq.n	8006aea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	2b12      	cmp	r3, #18
 8006ae8:	d130      	bne.n	8006b4c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	2203      	movs	r2, #3
 8006af6:	fa02 f303 	lsl.w	r3, r2, r3
 8006afa:	43db      	mvns	r3, r3
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	4013      	ands	r3, r2
 8006b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b20:	2201      	movs	r2, #1
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	fa02 f303 	lsl.w	r3, r2, r3
 8006b28:	43db      	mvns	r3, r3
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	091b      	lsrs	r3, r3, #4
 8006b36:	f003 0201 	and.w	r2, r3, #1
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	2203      	movs	r2, #3
 8006b58:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5c:	43db      	mvns	r3, r3
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	4013      	ands	r3, r2
 8006b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	005b      	lsls	r3, r3, #1
 8006b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d003      	beq.n	8006b8c <HAL_GPIO_Init+0x100>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2b12      	cmp	r3, #18
 8006b8a:	d123      	bne.n	8006bd4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	08da      	lsrs	r2, r3, #3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3208      	adds	r2, #8
 8006b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	220f      	movs	r2, #15
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	4013      	ands	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	08da      	lsrs	r2, r3, #3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	3208      	adds	r2, #8
 8006bce:	69b9      	ldr	r1, [r7, #24]
 8006bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	2203      	movs	r2, #3
 8006be0:	fa02 f303 	lsl.w	r3, r2, r3
 8006be4:	43db      	mvns	r3, r3
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	4013      	ands	r3, r2
 8006bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f003 0203 	and.w	r2, r3, #3
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 80be 	beq.w	8006d92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c16:	4b65      	ldr	r3, [pc, #404]	; (8006dac <HAL_GPIO_Init+0x320>)
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	4a64      	ldr	r2, [pc, #400]	; (8006dac <HAL_GPIO_Init+0x320>)
 8006c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c20:	6453      	str	r3, [r2, #68]	; 0x44
 8006c22:	4b62      	ldr	r3, [pc, #392]	; (8006dac <HAL_GPIO_Init+0x320>)
 8006c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006c2e:	4a60      	ldr	r2, [pc, #384]	; (8006db0 <HAL_GPIO_Init+0x324>)
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	089b      	lsrs	r3, r3, #2
 8006c34:	3302      	adds	r3, #2
 8006c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	f003 0303 	and.w	r3, r3, #3
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	220f      	movs	r2, #15
 8006c46:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4a:	43db      	mvns	r3, r3
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a57      	ldr	r2, [pc, #348]	; (8006db4 <HAL_GPIO_Init+0x328>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d037      	beq.n	8006cca <HAL_GPIO_Init+0x23e>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a56      	ldr	r2, [pc, #344]	; (8006db8 <HAL_GPIO_Init+0x32c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d031      	beq.n	8006cc6 <HAL_GPIO_Init+0x23a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a55      	ldr	r2, [pc, #340]	; (8006dbc <HAL_GPIO_Init+0x330>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d02b      	beq.n	8006cc2 <HAL_GPIO_Init+0x236>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a54      	ldr	r2, [pc, #336]	; (8006dc0 <HAL_GPIO_Init+0x334>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d025      	beq.n	8006cbe <HAL_GPIO_Init+0x232>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a53      	ldr	r2, [pc, #332]	; (8006dc4 <HAL_GPIO_Init+0x338>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d01f      	beq.n	8006cba <HAL_GPIO_Init+0x22e>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a52      	ldr	r2, [pc, #328]	; (8006dc8 <HAL_GPIO_Init+0x33c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d019      	beq.n	8006cb6 <HAL_GPIO_Init+0x22a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a51      	ldr	r2, [pc, #324]	; (8006dcc <HAL_GPIO_Init+0x340>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d013      	beq.n	8006cb2 <HAL_GPIO_Init+0x226>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a50      	ldr	r2, [pc, #320]	; (8006dd0 <HAL_GPIO_Init+0x344>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d00d      	beq.n	8006cae <HAL_GPIO_Init+0x222>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a4f      	ldr	r2, [pc, #316]	; (8006dd4 <HAL_GPIO_Init+0x348>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d007      	beq.n	8006caa <HAL_GPIO_Init+0x21e>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a4e      	ldr	r2, [pc, #312]	; (8006dd8 <HAL_GPIO_Init+0x34c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d101      	bne.n	8006ca6 <HAL_GPIO_Init+0x21a>
 8006ca2:	2309      	movs	r3, #9
 8006ca4:	e012      	b.n	8006ccc <HAL_GPIO_Init+0x240>
 8006ca6:	230a      	movs	r3, #10
 8006ca8:	e010      	b.n	8006ccc <HAL_GPIO_Init+0x240>
 8006caa:	2308      	movs	r3, #8
 8006cac:	e00e      	b.n	8006ccc <HAL_GPIO_Init+0x240>
 8006cae:	2307      	movs	r3, #7
 8006cb0:	e00c      	b.n	8006ccc <HAL_GPIO_Init+0x240>
 8006cb2:	2306      	movs	r3, #6
 8006cb4:	e00a      	b.n	8006ccc <HAL_GPIO_Init+0x240>
 8006cb6:	2305      	movs	r3, #5
 8006cb8:	e008      	b.n	8006ccc <HAL_GPIO_Init+0x240>
 8006cba:	2304      	movs	r3, #4
 8006cbc:	e006      	b.n	8006ccc <HAL_GPIO_Init+0x240>
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e004      	b.n	8006ccc <HAL_GPIO_Init+0x240>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	e002      	b.n	8006ccc <HAL_GPIO_Init+0x240>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e000      	b.n	8006ccc <HAL_GPIO_Init+0x240>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	69fa      	ldr	r2, [r7, #28]
 8006cce:	f002 0203 	and.w	r2, r2, #3
 8006cd2:	0092      	lsls	r2, r2, #2
 8006cd4:	4093      	lsls	r3, r2
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006cdc:	4934      	ldr	r1, [pc, #208]	; (8006db0 <HAL_GPIO_Init+0x324>)
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	089b      	lsrs	r3, r3, #2
 8006ce2:	3302      	adds	r3, #2
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006cea:	4b3c      	ldr	r3, [pc, #240]	; (8006ddc <HAL_GPIO_Init+0x350>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	43db      	mvns	r3, r3
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d0e:	4a33      	ldr	r2, [pc, #204]	; (8006ddc <HAL_GPIO_Init+0x350>)
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006d14:	4b31      	ldr	r3, [pc, #196]	; (8006ddc <HAL_GPIO_Init+0x350>)
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	43db      	mvns	r3, r3
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	4013      	ands	r3, r2
 8006d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d38:	4a28      	ldr	r2, [pc, #160]	; (8006ddc <HAL_GPIO_Init+0x350>)
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d3e:	4b27      	ldr	r3, [pc, #156]	; (8006ddc <HAL_GPIO_Init+0x350>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	43db      	mvns	r3, r3
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006d62:	4a1e      	ldr	r2, [pc, #120]	; (8006ddc <HAL_GPIO_Init+0x350>)
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006d68:	4b1c      	ldr	r3, [pc, #112]	; (8006ddc <HAL_GPIO_Init+0x350>)
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	43db      	mvns	r3, r3
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	4013      	ands	r3, r2
 8006d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d8c:	4a13      	ldr	r2, [pc, #76]	; (8006ddc <HAL_GPIO_Init+0x350>)
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	3301      	adds	r3, #1
 8006d96:	61fb      	str	r3, [r7, #28]
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	2b0f      	cmp	r3, #15
 8006d9c:	f67f ae86 	bls.w	8006aac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006da0:	bf00      	nop
 8006da2:	3724      	adds	r7, #36	; 0x24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	40023800 	.word	0x40023800
 8006db0:	40013800 	.word	0x40013800
 8006db4:	40020000 	.word	0x40020000
 8006db8:	40020400 	.word	0x40020400
 8006dbc:	40020800 	.word	0x40020800
 8006dc0:	40020c00 	.word	0x40020c00
 8006dc4:	40021000 	.word	0x40021000
 8006dc8:	40021400 	.word	0x40021400
 8006dcc:	40021800 	.word	0x40021800
 8006dd0:	40021c00 	.word	0x40021c00
 8006dd4:	40022000 	.word	0x40022000
 8006dd8:	40022400 	.word	0x40022400
 8006ddc:	40013c00 	.word	0x40013c00

08006de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	887b      	ldrh	r3, [r7, #2]
 8006df2:	4013      	ands	r3, r2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
 8006dfc:	e001      	b.n	8006e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	807b      	strh	r3, [r7, #2]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e20:	787b      	ldrb	r3, [r7, #1]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e26:	887a      	ldrh	r2, [r7, #2]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006e2c:	e003      	b.n	8006e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006e2e:	887b      	ldrh	r3, [r7, #2]
 8006e30:	041a      	lsls	r2, r3, #16
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	619a      	str	r2, [r3, #24]
}
 8006e36:	bf00      	nop
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
	...

08006e44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006e4e:	4b08      	ldr	r3, [pc, #32]	; (8006e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e50:	695a      	ldr	r2, [r3, #20]
 8006e52:	88fb      	ldrh	r3, [r7, #6]
 8006e54:	4013      	ands	r3, r2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d006      	beq.n	8006e68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e5a:	4a05      	ldr	r2, [pc, #20]	; (8006e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e5c:	88fb      	ldrh	r3, [r7, #6]
 8006e5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e60:	88fb      	ldrh	r3, [r7, #6]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fa fb74 	bl	8001550 <HAL_GPIO_EXTI_Callback>
  }
}
 8006e68:	bf00      	nop
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40013c00 	.word	0x40013c00

08006e74 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e78:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a04      	ldr	r2, [pc, #16]	; (8006e90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e82:	6013      	str	r3, [r2, #0]
}
 8006e84:	bf00      	nop
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	40007000 	.word	0x40007000

08006e94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e29b      	b.n	80073e2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 8087 	beq.w	8006fc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006eb8:	4b96      	ldr	r3, [pc, #600]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f003 030c 	and.w	r3, r3, #12
 8006ec0:	2b04      	cmp	r3, #4
 8006ec2:	d00c      	beq.n	8006ede <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ec4:	4b93      	ldr	r3, [pc, #588]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f003 030c 	and.w	r3, r3, #12
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d112      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x62>
 8006ed0:	4b90      	ldr	r3, [pc, #576]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006edc:	d10b      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ede:	4b8d      	ldr	r3, [pc, #564]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d06c      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x130>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d168      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e275      	b.n	80073e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006efe:	d106      	bne.n	8006f0e <HAL_RCC_OscConfig+0x7a>
 8006f00:	4b84      	ldr	r3, [pc, #528]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a83      	ldr	r2, [pc, #524]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	e02e      	b.n	8006f6c <HAL_RCC_OscConfig+0xd8>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10c      	bne.n	8006f30 <HAL_RCC_OscConfig+0x9c>
 8006f16:	4b7f      	ldr	r3, [pc, #508]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a7e      	ldr	r2, [pc, #504]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	4b7c      	ldr	r3, [pc, #496]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a7b      	ldr	r2, [pc, #492]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	e01d      	b.n	8006f6c <HAL_RCC_OscConfig+0xd8>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f38:	d10c      	bne.n	8006f54 <HAL_RCC_OscConfig+0xc0>
 8006f3a:	4b76      	ldr	r3, [pc, #472]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a75      	ldr	r2, [pc, #468]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	4b73      	ldr	r3, [pc, #460]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a72      	ldr	r2, [pc, #456]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	e00b      	b.n	8006f6c <HAL_RCC_OscConfig+0xd8>
 8006f54:	4b6f      	ldr	r3, [pc, #444]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a6e      	ldr	r2, [pc, #440]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	4b6c      	ldr	r3, [pc, #432]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a6b      	ldr	r2, [pc, #428]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d013      	beq.n	8006f9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f74:	f7fe fe5e 	bl	8005c34 <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f7c:	f7fe fe5a 	bl	8005c34 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b64      	cmp	r3, #100	; 0x64
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e229      	b.n	80073e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f8e:	4b61      	ldr	r3, [pc, #388]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d0f0      	beq.n	8006f7c <HAL_RCC_OscConfig+0xe8>
 8006f9a:	e014      	b.n	8006fc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f9c:	f7fe fe4a 	bl	8005c34 <HAL_GetTick>
 8006fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fa4:	f7fe fe46 	bl	8005c34 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b64      	cmp	r3, #100	; 0x64
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e215      	b.n	80073e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fb6:	4b57      	ldr	r3, [pc, #348]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1f0      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x110>
 8006fc2:	e000      	b.n	8006fc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d069      	beq.n	80070a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006fd2:	4b50      	ldr	r3, [pc, #320]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f003 030c 	and.w	r3, r3, #12
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00b      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fde:	4b4d      	ldr	r3, [pc, #308]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 030c 	and.w	r3, r3, #12
 8006fe6:	2b08      	cmp	r3, #8
 8006fe8:	d11c      	bne.n	8007024 <HAL_RCC_OscConfig+0x190>
 8006fea:	4b4a      	ldr	r3, [pc, #296]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d116      	bne.n	8007024 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ff6:	4b47      	ldr	r3, [pc, #284]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d005      	beq.n	800700e <HAL_RCC_OscConfig+0x17a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d001      	beq.n	800700e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e1e9      	b.n	80073e2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800700e:	4b41      	ldr	r3, [pc, #260]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	00db      	lsls	r3, r3, #3
 800701c:	493d      	ldr	r1, [pc, #244]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 800701e:	4313      	orrs	r3, r2
 8007020:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007022:	e040      	b.n	80070a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d023      	beq.n	8007074 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800702c:	4b39      	ldr	r3, [pc, #228]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a38      	ldr	r2, [pc, #224]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8007032:	f043 0301 	orr.w	r3, r3, #1
 8007036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007038:	f7fe fdfc 	bl	8005c34 <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800703e:	e008      	b.n	8007052 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007040:	f7fe fdf8 	bl	8005c34 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b02      	cmp	r3, #2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e1c7      	b.n	80073e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007052:	4b30      	ldr	r3, [pc, #192]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0f0      	beq.n	8007040 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800705e:	4b2d      	ldr	r3, [pc, #180]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	4929      	ldr	r1, [pc, #164]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 800706e:	4313      	orrs	r3, r2
 8007070:	600b      	str	r3, [r1, #0]
 8007072:	e018      	b.n	80070a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007074:	4b27      	ldr	r3, [pc, #156]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a26      	ldr	r2, [pc, #152]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 800707a:	f023 0301 	bic.w	r3, r3, #1
 800707e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007080:	f7fe fdd8 	bl	8005c34 <HAL_GetTick>
 8007084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007086:	e008      	b.n	800709a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007088:	f7fe fdd4 	bl	8005c34 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e1a3      	b.n	80073e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800709a:	4b1e      	ldr	r3, [pc, #120]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1f0      	bne.n	8007088 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0308 	and.w	r3, r3, #8
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d038      	beq.n	8007124 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d019      	beq.n	80070ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070ba:	4b16      	ldr	r3, [pc, #88]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 80070bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070be:	4a15      	ldr	r2, [pc, #84]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 80070c0:	f043 0301 	orr.w	r3, r3, #1
 80070c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c6:	f7fe fdb5 	bl	8005c34 <HAL_GetTick>
 80070ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070cc:	e008      	b.n	80070e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070ce:	f7fe fdb1 	bl	8005c34 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e180      	b.n	80073e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070e0:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 80070e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d0f0      	beq.n	80070ce <HAL_RCC_OscConfig+0x23a>
 80070ec:	e01a      	b.n	8007124 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070ee:	4b09      	ldr	r3, [pc, #36]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 80070f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070f2:	4a08      	ldr	r2, [pc, #32]	; (8007114 <HAL_RCC_OscConfig+0x280>)
 80070f4:	f023 0301 	bic.w	r3, r3, #1
 80070f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070fa:	f7fe fd9b 	bl	8005c34 <HAL_GetTick>
 80070fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007100:	e00a      	b.n	8007118 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007102:	f7fe fd97 	bl	8005c34 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d903      	bls.n	8007118 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e166      	b.n	80073e2 <HAL_RCC_OscConfig+0x54e>
 8007114:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007118:	4b92      	ldr	r3, [pc, #584]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 800711a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1ee      	bne.n	8007102 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 80a4 	beq.w	800727a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007132:	4b8c      	ldr	r3, [pc, #560]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10d      	bne.n	800715a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800713e:	4b89      	ldr	r3, [pc, #548]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 8007140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007142:	4a88      	ldr	r2, [pc, #544]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 8007144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007148:	6413      	str	r3, [r2, #64]	; 0x40
 800714a:	4b86      	ldr	r3, [pc, #536]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007152:	60bb      	str	r3, [r7, #8]
 8007154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007156:	2301      	movs	r3, #1
 8007158:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800715a:	4b83      	ldr	r3, [pc, #524]	; (8007368 <HAL_RCC_OscConfig+0x4d4>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007162:	2b00      	cmp	r3, #0
 8007164:	d118      	bne.n	8007198 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007166:	4b80      	ldr	r3, [pc, #512]	; (8007368 <HAL_RCC_OscConfig+0x4d4>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a7f      	ldr	r2, [pc, #508]	; (8007368 <HAL_RCC_OscConfig+0x4d4>)
 800716c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007172:	f7fe fd5f 	bl	8005c34 <HAL_GetTick>
 8007176:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007178:	e008      	b.n	800718c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800717a:	f7fe fd5b 	bl	8005c34 <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	2b64      	cmp	r3, #100	; 0x64
 8007186:	d901      	bls.n	800718c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e12a      	b.n	80073e2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800718c:	4b76      	ldr	r3, [pc, #472]	; (8007368 <HAL_RCC_OscConfig+0x4d4>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007194:	2b00      	cmp	r3, #0
 8007196:	d0f0      	beq.n	800717a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d106      	bne.n	80071ae <HAL_RCC_OscConfig+0x31a>
 80071a0:	4b70      	ldr	r3, [pc, #448]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 80071a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a4:	4a6f      	ldr	r2, [pc, #444]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 80071a6:	f043 0301 	orr.w	r3, r3, #1
 80071aa:	6713      	str	r3, [r2, #112]	; 0x70
 80071ac:	e02d      	b.n	800720a <HAL_RCC_OscConfig+0x376>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10c      	bne.n	80071d0 <HAL_RCC_OscConfig+0x33c>
 80071b6:	4b6b      	ldr	r3, [pc, #428]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 80071b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ba:	4a6a      	ldr	r2, [pc, #424]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 80071bc:	f023 0301 	bic.w	r3, r3, #1
 80071c0:	6713      	str	r3, [r2, #112]	; 0x70
 80071c2:	4b68      	ldr	r3, [pc, #416]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 80071c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c6:	4a67      	ldr	r2, [pc, #412]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 80071c8:	f023 0304 	bic.w	r3, r3, #4
 80071cc:	6713      	str	r3, [r2, #112]	; 0x70
 80071ce:	e01c      	b.n	800720a <HAL_RCC_OscConfig+0x376>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	2b05      	cmp	r3, #5
 80071d6:	d10c      	bne.n	80071f2 <HAL_RCC_OscConfig+0x35e>
 80071d8:	4b62      	ldr	r3, [pc, #392]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 80071da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071dc:	4a61      	ldr	r2, [pc, #388]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 80071de:	f043 0304 	orr.w	r3, r3, #4
 80071e2:	6713      	str	r3, [r2, #112]	; 0x70
 80071e4:	4b5f      	ldr	r3, [pc, #380]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 80071e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e8:	4a5e      	ldr	r2, [pc, #376]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 80071ea:	f043 0301 	orr.w	r3, r3, #1
 80071ee:	6713      	str	r3, [r2, #112]	; 0x70
 80071f0:	e00b      	b.n	800720a <HAL_RCC_OscConfig+0x376>
 80071f2:	4b5c      	ldr	r3, [pc, #368]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 80071f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f6:	4a5b      	ldr	r2, [pc, #364]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 80071f8:	f023 0301 	bic.w	r3, r3, #1
 80071fc:	6713      	str	r3, [r2, #112]	; 0x70
 80071fe:	4b59      	ldr	r3, [pc, #356]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 8007200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007202:	4a58      	ldr	r2, [pc, #352]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 8007204:	f023 0304 	bic.w	r3, r3, #4
 8007208:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d015      	beq.n	800723e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007212:	f7fe fd0f 	bl	8005c34 <HAL_GetTick>
 8007216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007218:	e00a      	b.n	8007230 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800721a:	f7fe fd0b 	bl	8005c34 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	f241 3288 	movw	r2, #5000	; 0x1388
 8007228:	4293      	cmp	r3, r2
 800722a:	d901      	bls.n	8007230 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e0d8      	b.n	80073e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007230:	4b4c      	ldr	r3, [pc, #304]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 8007232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d0ee      	beq.n	800721a <HAL_RCC_OscConfig+0x386>
 800723c:	e014      	b.n	8007268 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800723e:	f7fe fcf9 	bl	8005c34 <HAL_GetTick>
 8007242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007244:	e00a      	b.n	800725c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007246:	f7fe fcf5 	bl	8005c34 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	f241 3288 	movw	r2, #5000	; 0x1388
 8007254:	4293      	cmp	r3, r2
 8007256:	d901      	bls.n	800725c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e0c2      	b.n	80073e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800725c:	4b41      	ldr	r3, [pc, #260]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 800725e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1ee      	bne.n	8007246 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007268:	7dfb      	ldrb	r3, [r7, #23]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d105      	bne.n	800727a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800726e:	4b3d      	ldr	r3, [pc, #244]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	4a3c      	ldr	r2, [pc, #240]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 8007274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007278:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 80ae 	beq.w	80073e0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007284:	4b37      	ldr	r3, [pc, #220]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f003 030c 	and.w	r3, r3, #12
 800728c:	2b08      	cmp	r3, #8
 800728e:	d06d      	beq.n	800736c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	2b02      	cmp	r3, #2
 8007296:	d14b      	bne.n	8007330 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007298:	4b32      	ldr	r3, [pc, #200]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a31      	ldr	r2, [pc, #196]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 800729e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a4:	f7fe fcc6 	bl	8005c34 <HAL_GetTick>
 80072a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072aa:	e008      	b.n	80072be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072ac:	f7fe fcc2 	bl	8005c34 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d901      	bls.n	80072be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e091      	b.n	80073e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072be:	4b29      	ldr	r3, [pc, #164]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1f0      	bne.n	80072ac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	69da      	ldr	r2, [r3, #28]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	431a      	orrs	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	019b      	lsls	r3, r3, #6
 80072da:	431a      	orrs	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e0:	085b      	lsrs	r3, r3, #1
 80072e2:	3b01      	subs	r3, #1
 80072e4:	041b      	lsls	r3, r3, #16
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ec:	061b      	lsls	r3, r3, #24
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f4:	071b      	lsls	r3, r3, #28
 80072f6:	491b      	ldr	r1, [pc, #108]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072fc:	4b19      	ldr	r3, [pc, #100]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a18      	ldr	r2, [pc, #96]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 8007302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007308:	f7fe fc94 	bl	8005c34 <HAL_GetTick>
 800730c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800730e:	e008      	b.n	8007322 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007310:	f7fe fc90 	bl	8005c34 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	2b02      	cmp	r3, #2
 800731c:	d901      	bls.n	8007322 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e05f      	b.n	80073e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007322:	4b10      	ldr	r3, [pc, #64]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d0f0      	beq.n	8007310 <HAL_RCC_OscConfig+0x47c>
 800732e:	e057      	b.n	80073e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007330:	4b0c      	ldr	r3, [pc, #48]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a0b      	ldr	r2, [pc, #44]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 8007336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800733a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733c:	f7fe fc7a 	bl	8005c34 <HAL_GetTick>
 8007340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007342:	e008      	b.n	8007356 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007344:	f7fe fc76 	bl	8005c34 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e045      	b.n	80073e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007356:	4b03      	ldr	r3, [pc, #12]	; (8007364 <HAL_RCC_OscConfig+0x4d0>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1f0      	bne.n	8007344 <HAL_RCC_OscConfig+0x4b0>
 8007362:	e03d      	b.n	80073e0 <HAL_RCC_OscConfig+0x54c>
 8007364:	40023800 	.word	0x40023800
 8007368:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800736c:	4b1f      	ldr	r3, [pc, #124]	; (80073ec <HAL_RCC_OscConfig+0x558>)
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d030      	beq.n	80073dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007384:	429a      	cmp	r2, r3
 8007386:	d129      	bne.n	80073dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007392:	429a      	cmp	r2, r3
 8007394:	d122      	bne.n	80073dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800739c:	4013      	ands	r3, r2
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d119      	bne.n	80073dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b2:	085b      	lsrs	r3, r3, #1
 80073b4:	3b01      	subs	r3, #1
 80073b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d10f      	bne.n	80073dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d107      	bne.n	80073dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073d8:	429a      	cmp	r2, r3
 80073da:	d001      	beq.n	80073e0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e000      	b.n	80073e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	40023800 	.word	0x40023800

080073f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e0d0      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007408:	4b6a      	ldr	r3, [pc, #424]	; (80075b4 <HAL_RCC_ClockConfig+0x1c4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	429a      	cmp	r2, r3
 8007414:	d910      	bls.n	8007438 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007416:	4b67      	ldr	r3, [pc, #412]	; (80075b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f023 020f 	bic.w	r2, r3, #15
 800741e:	4965      	ldr	r1, [pc, #404]	; (80075b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	4313      	orrs	r3, r2
 8007424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007426:	4b63      	ldr	r3, [pc, #396]	; (80075b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 030f 	and.w	r3, r3, #15
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d001      	beq.n	8007438 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e0b8      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d020      	beq.n	8007486 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007450:	4b59      	ldr	r3, [pc, #356]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	4a58      	ldr	r2, [pc, #352]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800745a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0308 	and.w	r3, r3, #8
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007468:	4b53      	ldr	r3, [pc, #332]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	4a52      	ldr	r2, [pc, #328]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 800746e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007472:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007474:	4b50      	ldr	r3, [pc, #320]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	494d      	ldr	r1, [pc, #308]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007482:	4313      	orrs	r3, r2
 8007484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d040      	beq.n	8007514 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d107      	bne.n	80074aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800749a:	4b47      	ldr	r3, [pc, #284]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d115      	bne.n	80074d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e07f      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d107      	bne.n	80074c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074b2:	4b41      	ldr	r3, [pc, #260]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d109      	bne.n	80074d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e073      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074c2:	4b3d      	ldr	r3, [pc, #244]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e06b      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074d2:	4b39      	ldr	r3, [pc, #228]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f023 0203 	bic.w	r2, r3, #3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	4936      	ldr	r1, [pc, #216]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074e4:	f7fe fba6 	bl	8005c34 <HAL_GetTick>
 80074e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074ea:	e00a      	b.n	8007502 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074ec:	f7fe fba2 	bl	8005c34 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e053      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007502:	4b2d      	ldr	r3, [pc, #180]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 020c 	and.w	r2, r3, #12
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	429a      	cmp	r2, r3
 8007512:	d1eb      	bne.n	80074ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007514:	4b27      	ldr	r3, [pc, #156]	; (80075b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	d210      	bcs.n	8007544 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007522:	4b24      	ldr	r3, [pc, #144]	; (80075b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f023 020f 	bic.w	r2, r3, #15
 800752a:	4922      	ldr	r1, [pc, #136]	; (80075b4 <HAL_RCC_ClockConfig+0x1c4>)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	4313      	orrs	r3, r2
 8007530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007532:	4b20      	ldr	r3, [pc, #128]	; (80075b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	429a      	cmp	r2, r3
 800753e:	d001      	beq.n	8007544 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e032      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d008      	beq.n	8007562 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007550:	4b19      	ldr	r3, [pc, #100]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	4916      	ldr	r1, [pc, #88]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 800755e:	4313      	orrs	r3, r2
 8007560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	2b00      	cmp	r3, #0
 800756c:	d009      	beq.n	8007582 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800756e:	4b12      	ldr	r3, [pc, #72]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	490e      	ldr	r1, [pc, #56]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 800757e:	4313      	orrs	r3, r2
 8007580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007582:	f000 f821 	bl	80075c8 <HAL_RCC_GetSysClockFreq>
 8007586:	4601      	mov	r1, r0
 8007588:	4b0b      	ldr	r3, [pc, #44]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	091b      	lsrs	r3, r3, #4
 800758e:	f003 030f 	and.w	r3, r3, #15
 8007592:	4a0a      	ldr	r2, [pc, #40]	; (80075bc <HAL_RCC_ClockConfig+0x1cc>)
 8007594:	5cd3      	ldrb	r3, [r2, r3]
 8007596:	fa21 f303 	lsr.w	r3, r1, r3
 800759a:	4a09      	ldr	r2, [pc, #36]	; (80075c0 <HAL_RCC_ClockConfig+0x1d0>)
 800759c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800759e:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <HAL_RCC_ClockConfig+0x1d4>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe fb02 	bl	8005bac <HAL_InitTick>

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	40023c00 	.word	0x40023c00
 80075b8:	40023800 	.word	0x40023800
 80075bc:	08009510 	.word	0x08009510
 80075c0:	20003b8c 	.word	0x20003b8c
 80075c4:	20003b94 	.word	0x20003b94

080075c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	607b      	str	r3, [r7, #4]
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]
 80075d6:	2300      	movs	r3, #0
 80075d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075de:	4b63      	ldr	r3, [pc, #396]	; (800776c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f003 030c 	and.w	r3, r3, #12
 80075e6:	2b04      	cmp	r3, #4
 80075e8:	d007      	beq.n	80075fa <HAL_RCC_GetSysClockFreq+0x32>
 80075ea:	2b08      	cmp	r3, #8
 80075ec:	d008      	beq.n	8007600 <HAL_RCC_GetSysClockFreq+0x38>
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f040 80b4 	bne.w	800775c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075f4:	4b5e      	ldr	r3, [pc, #376]	; (8007770 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80075f6:	60bb      	str	r3, [r7, #8]
      break;
 80075f8:	e0b3      	b.n	8007762 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075fa:	4b5e      	ldr	r3, [pc, #376]	; (8007774 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80075fc:	60bb      	str	r3, [r7, #8]
      break;
 80075fe:	e0b0      	b.n	8007762 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007600:	4b5a      	ldr	r3, [pc, #360]	; (800776c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007608:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800760a:	4b58      	ldr	r3, [pc, #352]	; (800776c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d04a      	beq.n	80076ac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007616:	4b55      	ldr	r3, [pc, #340]	; (800776c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	099b      	lsrs	r3, r3, #6
 800761c:	f04f 0400 	mov.w	r4, #0
 8007620:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007624:	f04f 0200 	mov.w	r2, #0
 8007628:	ea03 0501 	and.w	r5, r3, r1
 800762c:	ea04 0602 	and.w	r6, r4, r2
 8007630:	4629      	mov	r1, r5
 8007632:	4632      	mov	r2, r6
 8007634:	f04f 0300 	mov.w	r3, #0
 8007638:	f04f 0400 	mov.w	r4, #0
 800763c:	0154      	lsls	r4, r2, #5
 800763e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007642:	014b      	lsls	r3, r1, #5
 8007644:	4619      	mov	r1, r3
 8007646:	4622      	mov	r2, r4
 8007648:	1b49      	subs	r1, r1, r5
 800764a:	eb62 0206 	sbc.w	r2, r2, r6
 800764e:	f04f 0300 	mov.w	r3, #0
 8007652:	f04f 0400 	mov.w	r4, #0
 8007656:	0194      	lsls	r4, r2, #6
 8007658:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800765c:	018b      	lsls	r3, r1, #6
 800765e:	1a5b      	subs	r3, r3, r1
 8007660:	eb64 0402 	sbc.w	r4, r4, r2
 8007664:	f04f 0100 	mov.w	r1, #0
 8007668:	f04f 0200 	mov.w	r2, #0
 800766c:	00e2      	lsls	r2, r4, #3
 800766e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007672:	00d9      	lsls	r1, r3, #3
 8007674:	460b      	mov	r3, r1
 8007676:	4614      	mov	r4, r2
 8007678:	195b      	adds	r3, r3, r5
 800767a:	eb44 0406 	adc.w	r4, r4, r6
 800767e:	f04f 0100 	mov.w	r1, #0
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	0262      	lsls	r2, r4, #9
 8007688:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800768c:	0259      	lsls	r1, r3, #9
 800768e:	460b      	mov	r3, r1
 8007690:	4614      	mov	r4, r2
 8007692:	4618      	mov	r0, r3
 8007694:	4621      	mov	r1, r4
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f04f 0400 	mov.w	r4, #0
 800769c:	461a      	mov	r2, r3
 800769e:	4623      	mov	r3, r4
 80076a0:	f7f8 fdca 	bl	8000238 <__aeabi_uldivmod>
 80076a4:	4603      	mov	r3, r0
 80076a6:	460c      	mov	r4, r1
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	e049      	b.n	8007740 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076ac:	4b2f      	ldr	r3, [pc, #188]	; (800776c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	099b      	lsrs	r3, r3, #6
 80076b2:	f04f 0400 	mov.w	r4, #0
 80076b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	ea03 0501 	and.w	r5, r3, r1
 80076c2:	ea04 0602 	and.w	r6, r4, r2
 80076c6:	4629      	mov	r1, r5
 80076c8:	4632      	mov	r2, r6
 80076ca:	f04f 0300 	mov.w	r3, #0
 80076ce:	f04f 0400 	mov.w	r4, #0
 80076d2:	0154      	lsls	r4, r2, #5
 80076d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80076d8:	014b      	lsls	r3, r1, #5
 80076da:	4619      	mov	r1, r3
 80076dc:	4622      	mov	r2, r4
 80076de:	1b49      	subs	r1, r1, r5
 80076e0:	eb62 0206 	sbc.w	r2, r2, r6
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	f04f 0400 	mov.w	r4, #0
 80076ec:	0194      	lsls	r4, r2, #6
 80076ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80076f2:	018b      	lsls	r3, r1, #6
 80076f4:	1a5b      	subs	r3, r3, r1
 80076f6:	eb64 0402 	sbc.w	r4, r4, r2
 80076fa:	f04f 0100 	mov.w	r1, #0
 80076fe:	f04f 0200 	mov.w	r2, #0
 8007702:	00e2      	lsls	r2, r4, #3
 8007704:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007708:	00d9      	lsls	r1, r3, #3
 800770a:	460b      	mov	r3, r1
 800770c:	4614      	mov	r4, r2
 800770e:	195b      	adds	r3, r3, r5
 8007710:	eb44 0406 	adc.w	r4, r4, r6
 8007714:	f04f 0100 	mov.w	r1, #0
 8007718:	f04f 0200 	mov.w	r2, #0
 800771c:	02a2      	lsls	r2, r4, #10
 800771e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007722:	0299      	lsls	r1, r3, #10
 8007724:	460b      	mov	r3, r1
 8007726:	4614      	mov	r4, r2
 8007728:	4618      	mov	r0, r3
 800772a:	4621      	mov	r1, r4
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f04f 0400 	mov.w	r4, #0
 8007732:	461a      	mov	r2, r3
 8007734:	4623      	mov	r3, r4
 8007736:	f7f8 fd7f 	bl	8000238 <__aeabi_uldivmod>
 800773a:	4603      	mov	r3, r0
 800773c:	460c      	mov	r4, r1
 800773e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007740:	4b0a      	ldr	r3, [pc, #40]	; (800776c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	0c1b      	lsrs	r3, r3, #16
 8007746:	f003 0303 	and.w	r3, r3, #3
 800774a:	3301      	adds	r3, #1
 800774c:	005b      	lsls	r3, r3, #1
 800774e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	fbb2 f3f3 	udiv	r3, r2, r3
 8007758:	60bb      	str	r3, [r7, #8]
      break;
 800775a:	e002      	b.n	8007762 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800775c:	4b04      	ldr	r3, [pc, #16]	; (8007770 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800775e:	60bb      	str	r3, [r7, #8]
      break;
 8007760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007762:	68bb      	ldr	r3, [r7, #8]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800776c:	40023800 	.word	0x40023800
 8007770:	00f42400 	.word	0x00f42400
 8007774:	007a1200 	.word	0x007a1200

08007778 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800777c:	4b03      	ldr	r3, [pc, #12]	; (800778c <HAL_RCC_GetHCLKFreq+0x14>)
 800777e:	681b      	ldr	r3, [r3, #0]
}
 8007780:	4618      	mov	r0, r3
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	20003b8c 	.word	0x20003b8c

08007790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007794:	f7ff fff0 	bl	8007778 <HAL_RCC_GetHCLKFreq>
 8007798:	4601      	mov	r1, r0
 800779a:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	0a9b      	lsrs	r3, r3, #10
 80077a0:	f003 0307 	and.w	r3, r3, #7
 80077a4:	4a03      	ldr	r2, [pc, #12]	; (80077b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077a6:	5cd3      	ldrb	r3, [r2, r3]
 80077a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	40023800 	.word	0x40023800
 80077b4:	08009520 	.word	0x08009520

080077b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077bc:	f7ff ffdc 	bl	8007778 <HAL_RCC_GetHCLKFreq>
 80077c0:	4601      	mov	r1, r0
 80077c2:	4b05      	ldr	r3, [pc, #20]	; (80077d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	0b5b      	lsrs	r3, r3, #13
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	4a03      	ldr	r2, [pc, #12]	; (80077dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80077ce:	5cd3      	ldrb	r3, [r2, r3]
 80077d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	40023800 	.word	0x40023800
 80077dc:	08009520 	.word	0x08009520

080077e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b088      	sub	sp, #32
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80077ec:	2300      	movs	r3, #0
 80077ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80077f8:	2300      	movs	r3, #0
 80077fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	d012      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007808:	4b69      	ldr	r3, [pc, #420]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	4a68      	ldr	r2, [pc, #416]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800780e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007812:	6093      	str	r3, [r2, #8]
 8007814:	4b66      	ldr	r3, [pc, #408]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781c:	4964      	ldr	r1, [pc, #400]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800781e:	4313      	orrs	r3, r2
 8007820:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800782a:	2301      	movs	r3, #1
 800782c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d017      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800783a:	4b5d      	ldr	r3, [pc, #372]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800783c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007840:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007848:	4959      	ldr	r1, [pc, #356]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800784a:	4313      	orrs	r3, r2
 800784c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007854:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007858:	d101      	bne.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800785a:	2301      	movs	r3, #1
 800785c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007866:	2301      	movs	r3, #1
 8007868:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d017      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007876:	4b4e      	ldr	r3, [pc, #312]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800787c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007884:	494a      	ldr	r1, [pc, #296]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007886:	4313      	orrs	r3, r2
 8007888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007894:	d101      	bne.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007896:	2301      	movs	r3, #1
 8007898:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80078a2:	2301      	movs	r3, #1
 80078a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80078b2:	2301      	movs	r3, #1
 80078b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0320 	and.w	r3, r3, #32
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 808b 	beq.w	80079da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80078c4:	4b3a      	ldr	r3, [pc, #232]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c8:	4a39      	ldr	r2, [pc, #228]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ce:	6413      	str	r3, [r2, #64]	; 0x40
 80078d0:	4b37      	ldr	r3, [pc, #220]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078d8:	60bb      	str	r3, [r7, #8]
 80078da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80078dc:	4b35      	ldr	r3, [pc, #212]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a34      	ldr	r2, [pc, #208]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078e8:	f7fe f9a4 	bl	8005c34 <HAL_GetTick>
 80078ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80078ee:	e008      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078f0:	f7fe f9a0 	bl	8005c34 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b64      	cmp	r3, #100	; 0x64
 80078fc:	d901      	bls.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e38d      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007902:	4b2c      	ldr	r3, [pc, #176]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790a:	2b00      	cmp	r3, #0
 800790c:	d0f0      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800790e:	4b28      	ldr	r3, [pc, #160]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007916:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d035      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	429a      	cmp	r2, r3
 800792a:	d02e      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800792c:	4b20      	ldr	r3, [pc, #128]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800792e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007934:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007936:	4b1e      	ldr	r3, [pc, #120]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793a:	4a1d      	ldr	r2, [pc, #116]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800793c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007940:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007942:	4b1b      	ldr	r3, [pc, #108]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007946:	4a1a      	ldr	r2, [pc, #104]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800794c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800794e:	4a18      	ldr	r2, [pc, #96]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007954:	4b16      	ldr	r3, [pc, #88]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b01      	cmp	r3, #1
 800795e:	d114      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007960:	f7fe f968 	bl	8005c34 <HAL_GetTick>
 8007964:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007966:	e00a      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007968:	f7fe f964 	bl	8005c34 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	f241 3288 	movw	r2, #5000	; 0x1388
 8007976:	4293      	cmp	r3, r2
 8007978:	d901      	bls.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e34f      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800797e:	4b0c      	ldr	r3, [pc, #48]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d0ee      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007996:	d111      	bne.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007998:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079a4:	4b04      	ldr	r3, [pc, #16]	; (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079a6:	400b      	ands	r3, r1
 80079a8:	4901      	ldr	r1, [pc, #4]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	608b      	str	r3, [r1, #8]
 80079ae:	e00b      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80079b0:	40023800 	.word	0x40023800
 80079b4:	40007000 	.word	0x40007000
 80079b8:	0ffffcff 	.word	0x0ffffcff
 80079bc:	4bb3      	ldr	r3, [pc, #716]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	4ab2      	ldr	r2, [pc, #712]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80079c6:	6093      	str	r3, [r2, #8]
 80079c8:	4bb0      	ldr	r3, [pc, #704]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079d4:	49ad      	ldr	r1, [pc, #692]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0310 	and.w	r3, r3, #16
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d010      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079e6:	4ba9      	ldr	r3, [pc, #676]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079ec:	4aa7      	ldr	r2, [pc, #668]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80079f6:	4ba5      	ldr	r3, [pc, #660]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	49a2      	ldr	r1, [pc, #648]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00a      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a14:	4b9d      	ldr	r3, [pc, #628]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a22:	499a      	ldr	r1, [pc, #616]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a36:	4b95      	ldr	r3, [pc, #596]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a44:	4991      	ldr	r1, [pc, #580]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00a      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a58:	4b8c      	ldr	r3, [pc, #560]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a66:	4989      	ldr	r1, [pc, #548]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a7a:	4b84      	ldr	r3, [pc, #528]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a88:	4980      	ldr	r1, [pc, #512]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00a      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a9c:	4b7b      	ldr	r3, [pc, #492]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa2:	f023 0203 	bic.w	r2, r3, #3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aaa:	4978      	ldr	r1, [pc, #480]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007aac:	4313      	orrs	r3, r2
 8007aae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00a      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007abe:	4b73      	ldr	r3, [pc, #460]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac4:	f023 020c 	bic.w	r2, r3, #12
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007acc:	496f      	ldr	r1, [pc, #444]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ae0:	4b6a      	ldr	r3, [pc, #424]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aee:	4967      	ldr	r1, [pc, #412]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b02:	4b62      	ldr	r3, [pc, #392]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b10:	495e      	ldr	r1, [pc, #376]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b24:	4b59      	ldr	r3, [pc, #356]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b32:	4956      	ldr	r1, [pc, #344]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007b46:	4b51      	ldr	r3, [pc, #324]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b54:	494d      	ldr	r1, [pc, #308]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007b68:	4b48      	ldr	r3, [pc, #288]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b76:	4945      	ldr	r1, [pc, #276]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007b8a:	4b40      	ldr	r3, [pc, #256]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b98:	493c      	ldr	r1, [pc, #240]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bac:	4b37      	ldr	r3, [pc, #220]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bba:	4934      	ldr	r1, [pc, #208]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d011      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007bce:	4b2f      	ldr	r3, [pc, #188]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bdc:	492b      	ldr	r1, [pc, #172]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007be8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bec:	d101      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0308 	and.w	r3, r3, #8
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c0e:	4b1f      	ldr	r3, [pc, #124]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c1c:	491b      	ldr	r1, [pc, #108]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c30:	4b16      	ldr	r3, [pc, #88]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c40:	4912      	ldr	r1, [pc, #72]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00b      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007c54:	4b0d      	ldr	r3, [pc, #52]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c64:	4909      	ldr	r1, [pc, #36]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00f      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c78:	4b04      	ldr	r3, [pc, #16]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c88:	e002      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007c8a:	bf00      	nop
 8007c8c:	40023800 	.word	0x40023800
 8007c90:	4985      	ldr	r1, [pc, #532]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00b      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007ca4:	4b80      	ldr	r3, [pc, #512]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007caa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb4:	497c      	ldr	r1, [pc, #496]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d005      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cca:	f040 80d6 	bne.w	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007cce:	4b76      	ldr	r3, [pc, #472]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a75      	ldr	r2, [pc, #468]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007cd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cda:	f7fd ffab 	bl	8005c34 <HAL_GetTick>
 8007cde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ce0:	e008      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ce2:	f7fd ffa7 	bl	8005c34 <HAL_GetTick>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	2b64      	cmp	r3, #100	; 0x64
 8007cee:	d901      	bls.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e194      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cf4:	4b6c      	ldr	r3, [pc, #432]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1f0      	bne.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d021      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d11d      	bne.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d14:	4b64      	ldr	r3, [pc, #400]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d1a:	0c1b      	lsrs	r3, r3, #16
 8007d1c:	f003 0303 	and.w	r3, r3, #3
 8007d20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d22:	4b61      	ldr	r3, [pc, #388]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d28:	0e1b      	lsrs	r3, r3, #24
 8007d2a:	f003 030f 	and.w	r3, r3, #15
 8007d2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	019a      	lsls	r2, r3, #6
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	041b      	lsls	r3, r3, #16
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	061b      	lsls	r3, r3, #24
 8007d40:	431a      	orrs	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	071b      	lsls	r3, r3, #28
 8007d48:	4957      	ldr	r1, [pc, #348]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d004      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d64:	d00a      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d02e      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d7a:	d129      	bne.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d7c:	4b4a      	ldr	r3, [pc, #296]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d82:	0c1b      	lsrs	r3, r3, #16
 8007d84:	f003 0303 	and.w	r3, r3, #3
 8007d88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d8a:	4b47      	ldr	r3, [pc, #284]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d90:	0f1b      	lsrs	r3, r3, #28
 8007d92:	f003 0307 	and.w	r3, r3, #7
 8007d96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	019a      	lsls	r2, r3, #6
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	041b      	lsls	r3, r3, #16
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	061b      	lsls	r3, r3, #24
 8007daa:	431a      	orrs	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	071b      	lsls	r3, r3, #28
 8007db0:	493d      	ldr	r1, [pc, #244]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007db2:	4313      	orrs	r3, r2
 8007db4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007db8:	4b3b      	ldr	r3, [pc, #236]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dbe:	f023 021f 	bic.w	r2, r3, #31
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	4937      	ldr	r1, [pc, #220]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d01d      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007ddc:	4b32      	ldr	r3, [pc, #200]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007de2:	0e1b      	lsrs	r3, r3, #24
 8007de4:	f003 030f 	and.w	r3, r3, #15
 8007de8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007dea:	4b2f      	ldr	r3, [pc, #188]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007df0:	0f1b      	lsrs	r3, r3, #28
 8007df2:	f003 0307 	and.w	r3, r3, #7
 8007df6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	019a      	lsls	r2, r3, #6
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	041b      	lsls	r3, r3, #16
 8007e04:	431a      	orrs	r2, r3
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	061b      	lsls	r3, r3, #24
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	071b      	lsls	r3, r3, #28
 8007e10:	4925      	ldr	r1, [pc, #148]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d011      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	019a      	lsls	r2, r3, #6
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	041b      	lsls	r3, r3, #16
 8007e30:	431a      	orrs	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	061b      	lsls	r3, r3, #24
 8007e38:	431a      	orrs	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	071b      	lsls	r3, r3, #28
 8007e40:	4919      	ldr	r1, [pc, #100]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e48:	4b17      	ldr	r3, [pc, #92]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a16      	ldr	r2, [pc, #88]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e54:	f7fd feee 	bl	8005c34 <HAL_GetTick>
 8007e58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e5a:	e008      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e5c:	f7fd feea 	bl	8005c34 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	2b64      	cmp	r3, #100	; 0x64
 8007e68:	d901      	bls.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e0d7      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e6e:	4b0e      	ldr	r3, [pc, #56]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0f0      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	f040 80cd 	bne.w	800801c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007e82:	4b09      	ldr	r3, [pc, #36]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a08      	ldr	r2, [pc, #32]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e8e:	f7fd fed1 	bl	8005c34 <HAL_GetTick>
 8007e92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e94:	e00a      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e96:	f7fd fecd 	bl	8005c34 <HAL_GetTick>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	2b64      	cmp	r3, #100	; 0x64
 8007ea2:	d903      	bls.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e0ba      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007ea8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007eac:	4b5e      	ldr	r3, [pc, #376]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eb8:	d0ed      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d009      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d02e      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d12a      	bne.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007ee2:	4b51      	ldr	r3, [pc, #324]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ee8:	0c1b      	lsrs	r3, r3, #16
 8007eea:	f003 0303 	and.w	r3, r3, #3
 8007eee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007ef0:	4b4d      	ldr	r3, [pc, #308]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef6:	0f1b      	lsrs	r3, r3, #28
 8007ef8:	f003 0307 	and.w	r3, r3, #7
 8007efc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	019a      	lsls	r2, r3, #6
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	041b      	lsls	r3, r3, #16
 8007f08:	431a      	orrs	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	061b      	lsls	r3, r3, #24
 8007f10:	431a      	orrs	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	071b      	lsls	r3, r3, #28
 8007f16:	4944      	ldr	r1, [pc, #272]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007f1e:	4b42      	ldr	r3, [pc, #264]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	021b      	lsls	r3, r3, #8
 8007f30:	493d      	ldr	r1, [pc, #244]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d022      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f4c:	d11d      	bne.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f4e:	4b36      	ldr	r3, [pc, #216]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f54:	0e1b      	lsrs	r3, r3, #24
 8007f56:	f003 030f 	and.w	r3, r3, #15
 8007f5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f5c:	4b32      	ldr	r3, [pc, #200]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f62:	0f1b      	lsrs	r3, r3, #28
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	019a      	lsls	r2, r3, #6
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a1b      	ldr	r3, [r3, #32]
 8007f74:	041b      	lsls	r3, r3, #16
 8007f76:	431a      	orrs	r2, r3
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	061b      	lsls	r3, r3, #24
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	071b      	lsls	r3, r3, #28
 8007f82:	4929      	ldr	r1, [pc, #164]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 0308 	and.w	r3, r3, #8
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d028      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f96:	4b24      	ldr	r3, [pc, #144]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f9c:	0e1b      	lsrs	r3, r3, #24
 8007f9e:	f003 030f 	and.w	r3, r3, #15
 8007fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007fa4:	4b20      	ldr	r3, [pc, #128]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007faa:	0c1b      	lsrs	r3, r3, #16
 8007fac:	f003 0303 	and.w	r3, r3, #3
 8007fb0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	019a      	lsls	r2, r3, #6
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	041b      	lsls	r3, r3, #16
 8007fbc:	431a      	orrs	r2, r3
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	061b      	lsls	r3, r3, #24
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	69db      	ldr	r3, [r3, #28]
 8007fc8:	071b      	lsls	r3, r3, #28
 8007fca:	4917      	ldr	r1, [pc, #92]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007fd2:	4b15      	ldr	r3, [pc, #84]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe0:	4911      	ldr	r1, [pc, #68]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007fe8:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a0e      	ldr	r2, [pc, #56]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ff4:	f7fd fe1e 	bl	8005c34 <HAL_GetTick>
 8007ff8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ffa:	e008      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ffc:	f7fd fe1a 	bl	8005c34 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	2b64      	cmp	r3, #100	; 0x64
 8008008:	d901      	bls.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e007      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800800e:	4b06      	ldr	r3, [pc, #24]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800801a:	d1ef      	bne.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3720      	adds	r7, #32
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	40023800 	.word	0x40023800

0800802c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e01d      	b.n	800807a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d106      	bne.n	8008058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7f9 fdac 	bl	8001bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3304      	adds	r3, #4
 8008068:	4619      	mov	r1, r3
 800806a:	4610      	mov	r0, r2
 800806c:	f000 fa8c 	bl	8008588 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2202      	movs	r2, #2
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689a      	ldr	r2, [r3, #8]
 800809a:	4b0e      	ldr	r3, [pc, #56]	; (80080d4 <HAL_TIM_Base_Start+0x50>)
 800809c:	4013      	ands	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b06      	cmp	r3, #6
 80080a4:	d00b      	beq.n	80080be <HAL_TIM_Base_Start+0x3a>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ac:	d007      	beq.n	80080be <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f042 0201 	orr.w	r2, r2, #1
 80080bc:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	00010007 	.word	0x00010007

080080d8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6a1a      	ldr	r2, [r3, #32]
 80080ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80080f2:	4013      	ands	r3, r2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10f      	bne.n	8008118 <HAL_TIM_Base_Stop+0x40>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6a1a      	ldr	r2, [r3, #32]
 80080fe:	f240 4344 	movw	r3, #1092	; 0x444
 8008102:	4013      	ands	r3, r2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d107      	bne.n	8008118 <HAL_TIM_Base_Stop+0x40>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 0201 	bic.w	r2, r2, #1
 8008116:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
	...

08008130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f042 0201 	orr.w	r2, r2, #1
 8008146:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	689a      	ldr	r2, [r3, #8]
 800814e:	4b0c      	ldr	r3, [pc, #48]	; (8008180 <HAL_TIM_Base_Start_IT+0x50>)
 8008150:	4013      	ands	r3, r2
 8008152:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2b06      	cmp	r3, #6
 8008158:	d00b      	beq.n	8008172 <HAL_TIM_Base_Start_IT+0x42>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008160:	d007      	beq.n	8008172 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f042 0201 	orr.w	r2, r2, #1
 8008170:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	00010007 	.word	0x00010007

08008184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	f003 0302 	and.w	r3, r3, #2
 8008196:	2b02      	cmp	r3, #2
 8008198:	d122      	bne.n	80081e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	f003 0302 	and.w	r3, r3, #2
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d11b      	bne.n	80081e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f06f 0202 	mvn.w	r2, #2
 80081b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	f003 0303 	and.w	r3, r3, #3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d003      	beq.n	80081ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f9c0 	bl	800854c <HAL_TIM_IC_CaptureCallback>
 80081cc:	e005      	b.n	80081da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f9b2 	bl	8008538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f9c3 	bl	8008560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	f003 0304 	and.w	r3, r3, #4
 80081ea:	2b04      	cmp	r3, #4
 80081ec:	d122      	bne.n	8008234 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b04      	cmp	r3, #4
 80081fa:	d11b      	bne.n	8008234 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f06f 0204 	mvn.w	r2, #4
 8008204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2202      	movs	r2, #2
 800820a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f996 	bl	800854c <HAL_TIM_IC_CaptureCallback>
 8008220:	e005      	b.n	800822e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f988 	bl	8008538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f999 	bl	8008560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	f003 0308 	and.w	r3, r3, #8
 800823e:	2b08      	cmp	r3, #8
 8008240:	d122      	bne.n	8008288 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f003 0308 	and.w	r3, r3, #8
 800824c:	2b08      	cmp	r3, #8
 800824e:	d11b      	bne.n	8008288 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f06f 0208 	mvn.w	r2, #8
 8008258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2204      	movs	r2, #4
 800825e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	f003 0303 	and.w	r3, r3, #3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f96c 	bl	800854c <HAL_TIM_IC_CaptureCallback>
 8008274:	e005      	b.n	8008282 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f95e 	bl	8008538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f96f 	bl	8008560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	f003 0310 	and.w	r3, r3, #16
 8008292:	2b10      	cmp	r3, #16
 8008294:	d122      	bne.n	80082dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f003 0310 	and.w	r3, r3, #16
 80082a0:	2b10      	cmp	r3, #16
 80082a2:	d11b      	bne.n	80082dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f06f 0210 	mvn.w	r2, #16
 80082ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2208      	movs	r2, #8
 80082b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	69db      	ldr	r3, [r3, #28]
 80082ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f942 	bl	800854c <HAL_TIM_IC_CaptureCallback>
 80082c8:	e005      	b.n	80082d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f934 	bl	8008538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f945 	bl	8008560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d10e      	bne.n	8008308 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f003 0301 	and.w	r3, r3, #1
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d107      	bne.n	8008308 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f06f 0201 	mvn.w	r2, #1
 8008300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7f9 f94c 	bl	80015a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008312:	2b80      	cmp	r3, #128	; 0x80
 8008314:	d10e      	bne.n	8008334 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008320:	2b80      	cmp	r3, #128	; 0x80
 8008322:	d107      	bne.n	8008334 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800832c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fafc 	bl	800892c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800833e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008342:	d10e      	bne.n	8008362 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800834e:	2b80      	cmp	r3, #128	; 0x80
 8008350:	d107      	bne.n	8008362 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800835a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 faef 	bl	8008940 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836c:	2b40      	cmp	r3, #64	; 0x40
 800836e:	d10e      	bne.n	800838e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837a:	2b40      	cmp	r3, #64	; 0x40
 800837c:	d107      	bne.n	800838e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f8f3 	bl	8008574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	f003 0320 	and.w	r3, r3, #32
 8008398:	2b20      	cmp	r3, #32
 800839a:	d10e      	bne.n	80083ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	f003 0320 	and.w	r3, r3, #32
 80083a6:	2b20      	cmp	r3, #32
 80083a8:	d107      	bne.n	80083ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f06f 0220 	mvn.w	r2, #32
 80083b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 faaf 	bl	8008918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083ba:	bf00      	nop
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
	...

080083c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d101      	bne.n	80083dc <HAL_TIM_ConfigClockSource+0x18>
 80083d8:	2302      	movs	r3, #2
 80083da:	e0a6      	b.n	800852a <HAL_TIM_ConfigClockSource+0x166>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2202      	movs	r2, #2
 80083e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	4b4f      	ldr	r3, [pc, #316]	; (8008534 <HAL_TIM_ConfigClockSource+0x170>)
 80083f8:	4013      	ands	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008402:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b40      	cmp	r3, #64	; 0x40
 8008412:	d067      	beq.n	80084e4 <HAL_TIM_ConfigClockSource+0x120>
 8008414:	2b40      	cmp	r3, #64	; 0x40
 8008416:	d80b      	bhi.n	8008430 <HAL_TIM_ConfigClockSource+0x6c>
 8008418:	2b10      	cmp	r3, #16
 800841a:	d073      	beq.n	8008504 <HAL_TIM_ConfigClockSource+0x140>
 800841c:	2b10      	cmp	r3, #16
 800841e:	d802      	bhi.n	8008426 <HAL_TIM_ConfigClockSource+0x62>
 8008420:	2b00      	cmp	r3, #0
 8008422:	d06f      	beq.n	8008504 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008424:	e078      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008426:	2b20      	cmp	r3, #32
 8008428:	d06c      	beq.n	8008504 <HAL_TIM_ConfigClockSource+0x140>
 800842a:	2b30      	cmp	r3, #48	; 0x30
 800842c:	d06a      	beq.n	8008504 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800842e:	e073      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008430:	2b70      	cmp	r3, #112	; 0x70
 8008432:	d00d      	beq.n	8008450 <HAL_TIM_ConfigClockSource+0x8c>
 8008434:	2b70      	cmp	r3, #112	; 0x70
 8008436:	d804      	bhi.n	8008442 <HAL_TIM_ConfigClockSource+0x7e>
 8008438:	2b50      	cmp	r3, #80	; 0x50
 800843a:	d033      	beq.n	80084a4 <HAL_TIM_ConfigClockSource+0xe0>
 800843c:	2b60      	cmp	r3, #96	; 0x60
 800843e:	d041      	beq.n	80084c4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008440:	e06a      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008446:	d066      	beq.n	8008516 <HAL_TIM_ConfigClockSource+0x152>
 8008448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800844c:	d017      	beq.n	800847e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800844e:	e063      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6818      	ldr	r0, [r3, #0]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	6899      	ldr	r1, [r3, #8]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	f000 f9ac 	bl	80087bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008472:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	609a      	str	r2, [r3, #8]
      break;
 800847c:	e04c      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6818      	ldr	r0, [r3, #0]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	6899      	ldr	r1, [r3, #8]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	f000 f995 	bl	80087bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084a0:	609a      	str	r2, [r3, #8]
      break;
 80084a2:	e039      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6818      	ldr	r0, [r3, #0]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	6859      	ldr	r1, [r3, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	461a      	mov	r2, r3
 80084b2:	f000 f909 	bl	80086c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2150      	movs	r1, #80	; 0x50
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 f962 	bl	8008786 <TIM_ITRx_SetConfig>
      break;
 80084c2:	e029      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6818      	ldr	r0, [r3, #0]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	6859      	ldr	r1, [r3, #4]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	461a      	mov	r2, r3
 80084d2:	f000 f928 	bl	8008726 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2160      	movs	r1, #96	; 0x60
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 f952 	bl	8008786 <TIM_ITRx_SetConfig>
      break;
 80084e2:	e019      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6818      	ldr	r0, [r3, #0]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	6859      	ldr	r1, [r3, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	461a      	mov	r2, r3
 80084f2:	f000 f8e9 	bl	80086c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2140      	movs	r1, #64	; 0x40
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 f942 	bl	8008786 <TIM_ITRx_SetConfig>
      break;
 8008502:	e009      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4619      	mov	r1, r3
 800850e:	4610      	mov	r0, r2
 8008510:	f000 f939 	bl	8008786 <TIM_ITRx_SetConfig>
      break;
 8008514:	e000      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008516:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	fffeff88 	.word	0xfffeff88

08008538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a40      	ldr	r2, [pc, #256]	; (800869c <TIM_Base_SetConfig+0x114>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d013      	beq.n	80085c8 <TIM_Base_SetConfig+0x40>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085a6:	d00f      	beq.n	80085c8 <TIM_Base_SetConfig+0x40>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a3d      	ldr	r2, [pc, #244]	; (80086a0 <TIM_Base_SetConfig+0x118>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d00b      	beq.n	80085c8 <TIM_Base_SetConfig+0x40>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a3c      	ldr	r2, [pc, #240]	; (80086a4 <TIM_Base_SetConfig+0x11c>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d007      	beq.n	80085c8 <TIM_Base_SetConfig+0x40>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a3b      	ldr	r2, [pc, #236]	; (80086a8 <TIM_Base_SetConfig+0x120>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d003      	beq.n	80085c8 <TIM_Base_SetConfig+0x40>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a3a      	ldr	r2, [pc, #232]	; (80086ac <TIM_Base_SetConfig+0x124>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d108      	bne.n	80085da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a2f      	ldr	r2, [pc, #188]	; (800869c <TIM_Base_SetConfig+0x114>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d02b      	beq.n	800863a <TIM_Base_SetConfig+0xb2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085e8:	d027      	beq.n	800863a <TIM_Base_SetConfig+0xb2>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a2c      	ldr	r2, [pc, #176]	; (80086a0 <TIM_Base_SetConfig+0x118>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d023      	beq.n	800863a <TIM_Base_SetConfig+0xb2>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a2b      	ldr	r2, [pc, #172]	; (80086a4 <TIM_Base_SetConfig+0x11c>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d01f      	beq.n	800863a <TIM_Base_SetConfig+0xb2>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a2a      	ldr	r2, [pc, #168]	; (80086a8 <TIM_Base_SetConfig+0x120>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d01b      	beq.n	800863a <TIM_Base_SetConfig+0xb2>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a29      	ldr	r2, [pc, #164]	; (80086ac <TIM_Base_SetConfig+0x124>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d017      	beq.n	800863a <TIM_Base_SetConfig+0xb2>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a28      	ldr	r2, [pc, #160]	; (80086b0 <TIM_Base_SetConfig+0x128>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d013      	beq.n	800863a <TIM_Base_SetConfig+0xb2>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a27      	ldr	r2, [pc, #156]	; (80086b4 <TIM_Base_SetConfig+0x12c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d00f      	beq.n	800863a <TIM_Base_SetConfig+0xb2>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a26      	ldr	r2, [pc, #152]	; (80086b8 <TIM_Base_SetConfig+0x130>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d00b      	beq.n	800863a <TIM_Base_SetConfig+0xb2>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a25      	ldr	r2, [pc, #148]	; (80086bc <TIM_Base_SetConfig+0x134>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d007      	beq.n	800863a <TIM_Base_SetConfig+0xb2>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a24      	ldr	r2, [pc, #144]	; (80086c0 <TIM_Base_SetConfig+0x138>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d003      	beq.n	800863a <TIM_Base_SetConfig+0xb2>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a23      	ldr	r2, [pc, #140]	; (80086c4 <TIM_Base_SetConfig+0x13c>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d108      	bne.n	800864c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	4313      	orrs	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	4313      	orrs	r3, r2
 8008658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a0a      	ldr	r2, [pc, #40]	; (800869c <TIM_Base_SetConfig+0x114>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d003      	beq.n	8008680 <TIM_Base_SetConfig+0xf8>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a0c      	ldr	r2, [pc, #48]	; (80086ac <TIM_Base_SetConfig+0x124>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d103      	bne.n	8008688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	691a      	ldr	r2, [r3, #16]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	615a      	str	r2, [r3, #20]
}
 800868e:	bf00      	nop
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	40010000 	.word	0x40010000
 80086a0:	40000400 	.word	0x40000400
 80086a4:	40000800 	.word	0x40000800
 80086a8:	40000c00 	.word	0x40000c00
 80086ac:	40010400 	.word	0x40010400
 80086b0:	40014000 	.word	0x40014000
 80086b4:	40014400 	.word	0x40014400
 80086b8:	40014800 	.word	0x40014800
 80086bc:	40001800 	.word	0x40001800
 80086c0:	40001c00 	.word	0x40001c00
 80086c4:	40002000 	.word	0x40002000

080086c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	f023 0201 	bic.w	r2, r3, #1
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	011b      	lsls	r3, r3, #4
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f023 030a 	bic.w	r3, r3, #10
 8008704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	4313      	orrs	r3, r2
 800870c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	621a      	str	r2, [r3, #32]
}
 800871a:	bf00      	nop
 800871c:	371c      	adds	r7, #28
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008726:	b480      	push	{r7}
 8008728:	b087      	sub	sp, #28
 800872a:	af00      	add	r7, sp, #0
 800872c:	60f8      	str	r0, [r7, #12]
 800872e:	60b9      	str	r1, [r7, #8]
 8008730:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	f023 0210 	bic.w	r2, r3, #16
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6a1b      	ldr	r3, [r3, #32]
 8008748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	031b      	lsls	r3, r3, #12
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	4313      	orrs	r3, r2
 800875a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008762:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	011b      	lsls	r3, r3, #4
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	4313      	orrs	r3, r2
 800876c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	621a      	str	r2, [r3, #32]
}
 800877a:	bf00      	nop
 800877c:	371c      	adds	r7, #28
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008786:	b480      	push	{r7}
 8008788:	b085      	sub	sp, #20
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800879c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800879e:	683a      	ldr	r2, [r7, #0]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	f043 0307 	orr.w	r3, r3, #7
 80087a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	609a      	str	r2, [r3, #8]
}
 80087b0:	bf00      	nop
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087bc:	b480      	push	{r7}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	021a      	lsls	r2, r3, #8
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	431a      	orrs	r2, r3
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	609a      	str	r2, [r3, #8]
}
 80087f0:	bf00      	nop
 80087f2:	371c      	adds	r7, #28
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800880c:	2b01      	cmp	r3, #1
 800880e:	d101      	bne.n	8008814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008810:	2302      	movs	r3, #2
 8008812:	e06d      	b.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2202      	movs	r2, #2
 8008820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a30      	ldr	r2, [pc, #192]	; (80088fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d004      	beq.n	8008848 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a2f      	ldr	r2, [pc, #188]	; (8008900 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d108      	bne.n	800885a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800884e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008860:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	4313      	orrs	r3, r2
 800886a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a20      	ldr	r2, [pc, #128]	; (80088fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d022      	beq.n	80088c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008886:	d01d      	beq.n	80088c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a1d      	ldr	r2, [pc, #116]	; (8008904 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d018      	beq.n	80088c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a1c      	ldr	r2, [pc, #112]	; (8008908 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d013      	beq.n	80088c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a1a      	ldr	r2, [pc, #104]	; (800890c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d00e      	beq.n	80088c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a15      	ldr	r2, [pc, #84]	; (8008900 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d009      	beq.n	80088c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a16      	ldr	r2, [pc, #88]	; (8008910 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d004      	beq.n	80088c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a15      	ldr	r2, [pc, #84]	; (8008914 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d10c      	bne.n	80088de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	40010000 	.word	0x40010000
 8008900:	40010400 	.word	0x40010400
 8008904:	40000400 	.word	0x40000400
 8008908:	40000800 	.word	0x40000800
 800890c:	40000c00 	.word	0x40000c00
 8008910:	40014000 	.word	0x40014000
 8008914:	40001800 	.word	0x40001800

08008918 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d101      	bne.n	8008966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e040      	b.n	80089e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800896a:	2b00      	cmp	r3, #0
 800896c:	d106      	bne.n	800897c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7f9 f966 	bl	8001c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2224      	movs	r2, #36	; 0x24
 8008980:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f022 0201 	bic.w	r2, r2, #1
 8008990:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f8c4 	bl	8008b20 <UART_SetConfig>
 8008998:	4603      	mov	r3, r0
 800899a:	2b01      	cmp	r3, #1
 800899c:	d101      	bne.n	80089a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e022      	b.n	80089e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d002      	beq.n	80089b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fb62 	bl	8009074 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	689a      	ldr	r2, [r3, #8]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f042 0201 	orr.w	r2, r2, #1
 80089de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fbe9 	bl	80091b8 <UART_CheckIdleState>
 80089e6:	4603      	mov	r3, r0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	4613      	mov	r3, r2
 80089fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a02:	2b20      	cmp	r3, #32
 8008a04:	d16c      	bne.n	8008ae0 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d002      	beq.n	8008a12 <HAL_UART_Receive_DMA+0x22>
 8008a0c:	88fb      	ldrh	r3, [r7, #6]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e065      	b.n	8008ae2 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d101      	bne.n	8008a24 <HAL_UART_Receive_DMA+0x34>
 8008a20:	2302      	movs	r3, #2
 8008a22:	e05e      	b.n	8008ae2 <HAL_UART_Receive_DMA+0xf2>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	88fa      	ldrh	r2, [r7, #6]
 8008a36:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2222      	movs	r2, #34	; 0x22
 8008a44:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d02a      	beq.n	8008aa4 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a52:	4a26      	ldr	r2, [pc, #152]	; (8008aec <HAL_UART_Receive_DMA+0xfc>)
 8008a54:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a5a:	4a25      	ldr	r2, [pc, #148]	; (8008af0 <HAL_UART_Receive_DMA+0x100>)
 8008a5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a62:	4a24      	ldr	r2, [pc, #144]	; (8008af4 <HAL_UART_Receive_DMA+0x104>)
 8008a64:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3324      	adds	r3, #36	; 0x24
 8008a78:	4619      	mov	r1, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a7e:	461a      	mov	r2, r3
 8008a80:	88fb      	ldrh	r3, [r7, #6]
 8008a82:	f7fd fccb 	bl	800641c <HAL_DMA_Start_IT>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00b      	beq.n	8008aa4 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2210      	movs	r2, #16
 8008a90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2220      	movs	r2, #32
 8008a9e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e01e      	b.n	8008ae2 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008aba:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689a      	ldr	r2, [r3, #8]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f042 0201 	orr.w	r2, r2, #1
 8008aca:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	689a      	ldr	r2, [r3, #8]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ada:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	e000      	b.n	8008ae2 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8008ae0:	2302      	movs	r3, #2
  }
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	080093a3 	.word	0x080093a3
 8008af0:	08009407 	.word	0x08009407
 8008af4:	08009423 	.word	0x08009423

08008af8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	689a      	ldr	r2, [r3, #8]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	4bb1      	ldr	r3, [pc, #708]	; (8008e14 <UART_SetConfig+0x2f4>)
 8008b50:	4013      	ands	r3, r2
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	6812      	ldr	r2, [r2, #0]
 8008b56:	6939      	ldr	r1, [r7, #16]
 8008b58:	430b      	orrs	r3, r1
 8008b5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68da      	ldr	r2, [r3, #12]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	699b      	ldr	r3, [r3, #24]
 8008b76:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a1b      	ldr	r3, [r3, #32]
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a9f      	ldr	r2, [pc, #636]	; (8008e18 <UART_SetConfig+0x2f8>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d121      	bne.n	8008be4 <UART_SetConfig+0xc4>
 8008ba0:	4b9e      	ldr	r3, [pc, #632]	; (8008e1c <UART_SetConfig+0x2fc>)
 8008ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ba6:	f003 0303 	and.w	r3, r3, #3
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	d816      	bhi.n	8008bdc <UART_SetConfig+0xbc>
 8008bae:	a201      	add	r2, pc, #4	; (adr r2, 8008bb4 <UART_SetConfig+0x94>)
 8008bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb4:	08008bc5 	.word	0x08008bc5
 8008bb8:	08008bd1 	.word	0x08008bd1
 8008bbc:	08008bcb 	.word	0x08008bcb
 8008bc0:	08008bd7 	.word	0x08008bd7
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	77fb      	strb	r3, [r7, #31]
 8008bc8:	e151      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008bca:	2302      	movs	r3, #2
 8008bcc:	77fb      	strb	r3, [r7, #31]
 8008bce:	e14e      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008bd0:	2304      	movs	r3, #4
 8008bd2:	77fb      	strb	r3, [r7, #31]
 8008bd4:	e14b      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008bd6:	2308      	movs	r3, #8
 8008bd8:	77fb      	strb	r3, [r7, #31]
 8008bda:	e148      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008bdc:	2310      	movs	r3, #16
 8008bde:	77fb      	strb	r3, [r7, #31]
 8008be0:	bf00      	nop
 8008be2:	e144      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a8d      	ldr	r2, [pc, #564]	; (8008e20 <UART_SetConfig+0x300>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d134      	bne.n	8008c58 <UART_SetConfig+0x138>
 8008bee:	4b8b      	ldr	r3, [pc, #556]	; (8008e1c <UART_SetConfig+0x2fc>)
 8008bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bf4:	f003 030c 	and.w	r3, r3, #12
 8008bf8:	2b0c      	cmp	r3, #12
 8008bfa:	d829      	bhi.n	8008c50 <UART_SetConfig+0x130>
 8008bfc:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <UART_SetConfig+0xe4>)
 8008bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c02:	bf00      	nop
 8008c04:	08008c39 	.word	0x08008c39
 8008c08:	08008c51 	.word	0x08008c51
 8008c0c:	08008c51 	.word	0x08008c51
 8008c10:	08008c51 	.word	0x08008c51
 8008c14:	08008c45 	.word	0x08008c45
 8008c18:	08008c51 	.word	0x08008c51
 8008c1c:	08008c51 	.word	0x08008c51
 8008c20:	08008c51 	.word	0x08008c51
 8008c24:	08008c3f 	.word	0x08008c3f
 8008c28:	08008c51 	.word	0x08008c51
 8008c2c:	08008c51 	.word	0x08008c51
 8008c30:	08008c51 	.word	0x08008c51
 8008c34:	08008c4b 	.word	0x08008c4b
 8008c38:	2300      	movs	r3, #0
 8008c3a:	77fb      	strb	r3, [r7, #31]
 8008c3c:	e117      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008c3e:	2302      	movs	r3, #2
 8008c40:	77fb      	strb	r3, [r7, #31]
 8008c42:	e114      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008c44:	2304      	movs	r3, #4
 8008c46:	77fb      	strb	r3, [r7, #31]
 8008c48:	e111      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008c4a:	2308      	movs	r3, #8
 8008c4c:	77fb      	strb	r3, [r7, #31]
 8008c4e:	e10e      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008c50:	2310      	movs	r3, #16
 8008c52:	77fb      	strb	r3, [r7, #31]
 8008c54:	bf00      	nop
 8008c56:	e10a      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a71      	ldr	r2, [pc, #452]	; (8008e24 <UART_SetConfig+0x304>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d120      	bne.n	8008ca4 <UART_SetConfig+0x184>
 8008c62:	4b6e      	ldr	r3, [pc, #440]	; (8008e1c <UART_SetConfig+0x2fc>)
 8008c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008c6c:	2b10      	cmp	r3, #16
 8008c6e:	d00f      	beq.n	8008c90 <UART_SetConfig+0x170>
 8008c70:	2b10      	cmp	r3, #16
 8008c72:	d802      	bhi.n	8008c7a <UART_SetConfig+0x15a>
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d005      	beq.n	8008c84 <UART_SetConfig+0x164>
 8008c78:	e010      	b.n	8008c9c <UART_SetConfig+0x17c>
 8008c7a:	2b20      	cmp	r3, #32
 8008c7c:	d005      	beq.n	8008c8a <UART_SetConfig+0x16a>
 8008c7e:	2b30      	cmp	r3, #48	; 0x30
 8008c80:	d009      	beq.n	8008c96 <UART_SetConfig+0x176>
 8008c82:	e00b      	b.n	8008c9c <UART_SetConfig+0x17c>
 8008c84:	2300      	movs	r3, #0
 8008c86:	77fb      	strb	r3, [r7, #31]
 8008c88:	e0f1      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008c8a:	2302      	movs	r3, #2
 8008c8c:	77fb      	strb	r3, [r7, #31]
 8008c8e:	e0ee      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008c90:	2304      	movs	r3, #4
 8008c92:	77fb      	strb	r3, [r7, #31]
 8008c94:	e0eb      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008c96:	2308      	movs	r3, #8
 8008c98:	77fb      	strb	r3, [r7, #31]
 8008c9a:	e0e8      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008c9c:	2310      	movs	r3, #16
 8008c9e:	77fb      	strb	r3, [r7, #31]
 8008ca0:	bf00      	nop
 8008ca2:	e0e4      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a5f      	ldr	r2, [pc, #380]	; (8008e28 <UART_SetConfig+0x308>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d120      	bne.n	8008cf0 <UART_SetConfig+0x1d0>
 8008cae:	4b5b      	ldr	r3, [pc, #364]	; (8008e1c <UART_SetConfig+0x2fc>)
 8008cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008cb8:	2b40      	cmp	r3, #64	; 0x40
 8008cba:	d00f      	beq.n	8008cdc <UART_SetConfig+0x1bc>
 8008cbc:	2b40      	cmp	r3, #64	; 0x40
 8008cbe:	d802      	bhi.n	8008cc6 <UART_SetConfig+0x1a6>
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d005      	beq.n	8008cd0 <UART_SetConfig+0x1b0>
 8008cc4:	e010      	b.n	8008ce8 <UART_SetConfig+0x1c8>
 8008cc6:	2b80      	cmp	r3, #128	; 0x80
 8008cc8:	d005      	beq.n	8008cd6 <UART_SetConfig+0x1b6>
 8008cca:	2bc0      	cmp	r3, #192	; 0xc0
 8008ccc:	d009      	beq.n	8008ce2 <UART_SetConfig+0x1c2>
 8008cce:	e00b      	b.n	8008ce8 <UART_SetConfig+0x1c8>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	77fb      	strb	r3, [r7, #31]
 8008cd4:	e0cb      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	77fb      	strb	r3, [r7, #31]
 8008cda:	e0c8      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008cdc:	2304      	movs	r3, #4
 8008cde:	77fb      	strb	r3, [r7, #31]
 8008ce0:	e0c5      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008ce2:	2308      	movs	r3, #8
 8008ce4:	77fb      	strb	r3, [r7, #31]
 8008ce6:	e0c2      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008ce8:	2310      	movs	r3, #16
 8008cea:	77fb      	strb	r3, [r7, #31]
 8008cec:	bf00      	nop
 8008cee:	e0be      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a4d      	ldr	r2, [pc, #308]	; (8008e2c <UART_SetConfig+0x30c>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d124      	bne.n	8008d44 <UART_SetConfig+0x224>
 8008cfa:	4b48      	ldr	r3, [pc, #288]	; (8008e1c <UART_SetConfig+0x2fc>)
 8008cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d08:	d012      	beq.n	8008d30 <UART_SetConfig+0x210>
 8008d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d0e:	d802      	bhi.n	8008d16 <UART_SetConfig+0x1f6>
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d007      	beq.n	8008d24 <UART_SetConfig+0x204>
 8008d14:	e012      	b.n	8008d3c <UART_SetConfig+0x21c>
 8008d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d1a:	d006      	beq.n	8008d2a <UART_SetConfig+0x20a>
 8008d1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d20:	d009      	beq.n	8008d36 <UART_SetConfig+0x216>
 8008d22:	e00b      	b.n	8008d3c <UART_SetConfig+0x21c>
 8008d24:	2300      	movs	r3, #0
 8008d26:	77fb      	strb	r3, [r7, #31]
 8008d28:	e0a1      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	77fb      	strb	r3, [r7, #31]
 8008d2e:	e09e      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008d30:	2304      	movs	r3, #4
 8008d32:	77fb      	strb	r3, [r7, #31]
 8008d34:	e09b      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008d36:	2308      	movs	r3, #8
 8008d38:	77fb      	strb	r3, [r7, #31]
 8008d3a:	e098      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008d3c:	2310      	movs	r3, #16
 8008d3e:	77fb      	strb	r3, [r7, #31]
 8008d40:	bf00      	nop
 8008d42:	e094      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a39      	ldr	r2, [pc, #228]	; (8008e30 <UART_SetConfig+0x310>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d124      	bne.n	8008d98 <UART_SetConfig+0x278>
 8008d4e:	4b33      	ldr	r3, [pc, #204]	; (8008e1c <UART_SetConfig+0x2fc>)
 8008d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d5c:	d012      	beq.n	8008d84 <UART_SetConfig+0x264>
 8008d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d62:	d802      	bhi.n	8008d6a <UART_SetConfig+0x24a>
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d007      	beq.n	8008d78 <UART_SetConfig+0x258>
 8008d68:	e012      	b.n	8008d90 <UART_SetConfig+0x270>
 8008d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d6e:	d006      	beq.n	8008d7e <UART_SetConfig+0x25e>
 8008d70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d74:	d009      	beq.n	8008d8a <UART_SetConfig+0x26a>
 8008d76:	e00b      	b.n	8008d90 <UART_SetConfig+0x270>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	77fb      	strb	r3, [r7, #31]
 8008d7c:	e077      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008d7e:	2302      	movs	r3, #2
 8008d80:	77fb      	strb	r3, [r7, #31]
 8008d82:	e074      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008d84:	2304      	movs	r3, #4
 8008d86:	77fb      	strb	r3, [r7, #31]
 8008d88:	e071      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008d8a:	2308      	movs	r3, #8
 8008d8c:	77fb      	strb	r3, [r7, #31]
 8008d8e:	e06e      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008d90:	2310      	movs	r3, #16
 8008d92:	77fb      	strb	r3, [r7, #31]
 8008d94:	bf00      	nop
 8008d96:	e06a      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a25      	ldr	r2, [pc, #148]	; (8008e34 <UART_SetConfig+0x314>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d124      	bne.n	8008dec <UART_SetConfig+0x2cc>
 8008da2:	4b1e      	ldr	r3, [pc, #120]	; (8008e1c <UART_SetConfig+0x2fc>)
 8008da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008da8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008db0:	d012      	beq.n	8008dd8 <UART_SetConfig+0x2b8>
 8008db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008db6:	d802      	bhi.n	8008dbe <UART_SetConfig+0x29e>
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d007      	beq.n	8008dcc <UART_SetConfig+0x2ac>
 8008dbc:	e012      	b.n	8008de4 <UART_SetConfig+0x2c4>
 8008dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dc2:	d006      	beq.n	8008dd2 <UART_SetConfig+0x2b2>
 8008dc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008dc8:	d009      	beq.n	8008dde <UART_SetConfig+0x2be>
 8008dca:	e00b      	b.n	8008de4 <UART_SetConfig+0x2c4>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	77fb      	strb	r3, [r7, #31]
 8008dd0:	e04d      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	77fb      	strb	r3, [r7, #31]
 8008dd6:	e04a      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008dd8:	2304      	movs	r3, #4
 8008dda:	77fb      	strb	r3, [r7, #31]
 8008ddc:	e047      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008dde:	2308      	movs	r3, #8
 8008de0:	77fb      	strb	r3, [r7, #31]
 8008de2:	e044      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008de4:	2310      	movs	r3, #16
 8008de6:	77fb      	strb	r3, [r7, #31]
 8008de8:	bf00      	nop
 8008dea:	e040      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a11      	ldr	r2, [pc, #68]	; (8008e38 <UART_SetConfig+0x318>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d139      	bne.n	8008e6a <UART_SetConfig+0x34a>
 8008df6:	4b09      	ldr	r3, [pc, #36]	; (8008e1c <UART_SetConfig+0x2fc>)
 8008df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e04:	d027      	beq.n	8008e56 <UART_SetConfig+0x336>
 8008e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e0a:	d817      	bhi.n	8008e3c <UART_SetConfig+0x31c>
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d01c      	beq.n	8008e4a <UART_SetConfig+0x32a>
 8008e10:	e027      	b.n	8008e62 <UART_SetConfig+0x342>
 8008e12:	bf00      	nop
 8008e14:	efff69f3 	.word	0xefff69f3
 8008e18:	40011000 	.word	0x40011000
 8008e1c:	40023800 	.word	0x40023800
 8008e20:	40004400 	.word	0x40004400
 8008e24:	40004800 	.word	0x40004800
 8008e28:	40004c00 	.word	0x40004c00
 8008e2c:	40005000 	.word	0x40005000
 8008e30:	40011400 	.word	0x40011400
 8008e34:	40007800 	.word	0x40007800
 8008e38:	40007c00 	.word	0x40007c00
 8008e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e40:	d006      	beq.n	8008e50 <UART_SetConfig+0x330>
 8008e42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008e46:	d009      	beq.n	8008e5c <UART_SetConfig+0x33c>
 8008e48:	e00b      	b.n	8008e62 <UART_SetConfig+0x342>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	77fb      	strb	r3, [r7, #31]
 8008e4e:	e00e      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008e50:	2302      	movs	r3, #2
 8008e52:	77fb      	strb	r3, [r7, #31]
 8008e54:	e00b      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008e56:	2304      	movs	r3, #4
 8008e58:	77fb      	strb	r3, [r7, #31]
 8008e5a:	e008      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008e5c:	2308      	movs	r3, #8
 8008e5e:	77fb      	strb	r3, [r7, #31]
 8008e60:	e005      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008e62:	2310      	movs	r3, #16
 8008e64:	77fb      	strb	r3, [r7, #31]
 8008e66:	bf00      	nop
 8008e68:	e001      	b.n	8008e6e <UART_SetConfig+0x34e>
 8008e6a:	2310      	movs	r3, #16
 8008e6c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e76:	d17f      	bne.n	8008f78 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008e78:	7ffb      	ldrb	r3, [r7, #31]
 8008e7a:	2b08      	cmp	r3, #8
 8008e7c:	d85c      	bhi.n	8008f38 <UART_SetConfig+0x418>
 8008e7e:	a201      	add	r2, pc, #4	; (adr r2, 8008e84 <UART_SetConfig+0x364>)
 8008e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e84:	08008ea9 	.word	0x08008ea9
 8008e88:	08008ec9 	.word	0x08008ec9
 8008e8c:	08008ee9 	.word	0x08008ee9
 8008e90:	08008f39 	.word	0x08008f39
 8008e94:	08008f01 	.word	0x08008f01
 8008e98:	08008f39 	.word	0x08008f39
 8008e9c:	08008f39 	.word	0x08008f39
 8008ea0:	08008f39 	.word	0x08008f39
 8008ea4:	08008f21 	.word	0x08008f21
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ea8:	f7fe fc72 	bl	8007790 <HAL_RCC_GetPCLK1Freq>
 8008eac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	005a      	lsls	r2, r3, #1
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	085b      	lsrs	r3, r3, #1
 8008eb8:	441a      	add	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	61bb      	str	r3, [r7, #24]
        break;
 8008ec6:	e03a      	b.n	8008f3e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ec8:	f7fe fc76 	bl	80077b8 <HAL_RCC_GetPCLK2Freq>
 8008ecc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	005a      	lsls	r2, r3, #1
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	085b      	lsrs	r3, r3, #1
 8008ed8:	441a      	add	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	61bb      	str	r3, [r7, #24]
        break;
 8008ee6:	e02a      	b.n	8008f3e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	085a      	lsrs	r2, r3, #1
 8008eee:	4b5f      	ldr	r3, [pc, #380]	; (800906c <UART_SetConfig+0x54c>)
 8008ef0:	4413      	add	r3, r2
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	6852      	ldr	r2, [r2, #4]
 8008ef6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	61bb      	str	r3, [r7, #24]
        break;
 8008efe:	e01e      	b.n	8008f3e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f00:	f7fe fb62 	bl	80075c8 <HAL_RCC_GetSysClockFreq>
 8008f04:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	005a      	lsls	r2, r3, #1
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	085b      	lsrs	r3, r3, #1
 8008f10:	441a      	add	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	61bb      	str	r3, [r7, #24]
        break;
 8008f1e:	e00e      	b.n	8008f3e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	085b      	lsrs	r3, r3, #1
 8008f26:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	61bb      	str	r3, [r7, #24]
        break;
 8008f36:	e002      	b.n	8008f3e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	75fb      	strb	r3, [r7, #23]
        break;
 8008f3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	2b0f      	cmp	r3, #15
 8008f42:	d916      	bls.n	8008f72 <UART_SetConfig+0x452>
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f4a:	d212      	bcs.n	8008f72 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	f023 030f 	bic.w	r3, r3, #15
 8008f54:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	085b      	lsrs	r3, r3, #1
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	f003 0307 	and.w	r3, r3, #7
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	897b      	ldrh	r3, [r7, #10]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	897a      	ldrh	r2, [r7, #10]
 8008f6e:	60da      	str	r2, [r3, #12]
 8008f70:	e070      	b.n	8009054 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	75fb      	strb	r3, [r7, #23]
 8008f76:	e06d      	b.n	8009054 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008f78:	7ffb      	ldrb	r3, [r7, #31]
 8008f7a:	2b08      	cmp	r3, #8
 8008f7c:	d859      	bhi.n	8009032 <UART_SetConfig+0x512>
 8008f7e:	a201      	add	r2, pc, #4	; (adr r2, 8008f84 <UART_SetConfig+0x464>)
 8008f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f84:	08008fa9 	.word	0x08008fa9
 8008f88:	08008fc7 	.word	0x08008fc7
 8008f8c:	08008fe5 	.word	0x08008fe5
 8008f90:	08009033 	.word	0x08009033
 8008f94:	08008ffd 	.word	0x08008ffd
 8008f98:	08009033 	.word	0x08009033
 8008f9c:	08009033 	.word	0x08009033
 8008fa0:	08009033 	.word	0x08009033
 8008fa4:	0800901b 	.word	0x0800901b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fa8:	f7fe fbf2 	bl	8007790 <HAL_RCC_GetPCLK1Freq>
 8008fac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	085a      	lsrs	r2, r3, #1
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	441a      	add	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	61bb      	str	r3, [r7, #24]
        break;
 8008fc4:	e038      	b.n	8009038 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fc6:	f7fe fbf7 	bl	80077b8 <HAL_RCC_GetPCLK2Freq>
 8008fca:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	085a      	lsrs	r2, r3, #1
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	441a      	add	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	61bb      	str	r3, [r7, #24]
        break;
 8008fe2:	e029      	b.n	8009038 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	085a      	lsrs	r2, r3, #1
 8008fea:	4b21      	ldr	r3, [pc, #132]	; (8009070 <UART_SetConfig+0x550>)
 8008fec:	4413      	add	r3, r2
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	6852      	ldr	r2, [r2, #4]
 8008ff2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	61bb      	str	r3, [r7, #24]
        break;
 8008ffa:	e01d      	b.n	8009038 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ffc:	f7fe fae4 	bl	80075c8 <HAL_RCC_GetSysClockFreq>
 8009000:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	085a      	lsrs	r2, r3, #1
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	441a      	add	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	fbb2 f3f3 	udiv	r3, r2, r3
 8009014:	b29b      	uxth	r3, r3
 8009016:	61bb      	str	r3, [r7, #24]
        break;
 8009018:	e00e      	b.n	8009038 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	085b      	lsrs	r3, r3, #1
 8009020:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	fbb2 f3f3 	udiv	r3, r2, r3
 800902c:	b29b      	uxth	r3, r3
 800902e:	61bb      	str	r3, [r7, #24]
        break;
 8009030:	e002      	b.n	8009038 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	75fb      	strb	r3, [r7, #23]
        break;
 8009036:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	2b0f      	cmp	r3, #15
 800903c:	d908      	bls.n	8009050 <UART_SetConfig+0x530>
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009044:	d204      	bcs.n	8009050 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	69ba      	ldr	r2, [r7, #24]
 800904c:	60da      	str	r2, [r3, #12]
 800904e:	e001      	b.n	8009054 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009060:	7dfb      	ldrb	r3, [r7, #23]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3720      	adds	r7, #32
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	01e84800 	.word	0x01e84800
 8009070:	00f42400 	.word	0x00f42400

08009074 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	f003 0301 	and.w	r3, r3, #1
 8009084:	2b00      	cmp	r3, #0
 8009086:	d00a      	beq.n	800909e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	430a      	orrs	r2, r1
 800909c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a2:	f003 0302 	and.w	r3, r3, #2
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00a      	beq.n	80090c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	430a      	orrs	r2, r1
 80090be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00a      	beq.n	80090e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	430a      	orrs	r2, r1
 80090e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e6:	f003 0308 	and.w	r3, r3, #8
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00a      	beq.n	8009104 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	430a      	orrs	r2, r1
 8009102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009108:	f003 0310 	and.w	r3, r3, #16
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00a      	beq.n	8009126 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	430a      	orrs	r2, r1
 8009124:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912a:	f003 0320 	and.w	r3, r3, #32
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00a      	beq.n	8009148 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	430a      	orrs	r2, r1
 8009146:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009150:	2b00      	cmp	r3, #0
 8009152:	d01a      	beq.n	800918a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	430a      	orrs	r2, r1
 8009168:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009172:	d10a      	bne.n	800918a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	430a      	orrs	r2, r1
 8009188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00a      	beq.n	80091ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	430a      	orrs	r2, r1
 80091aa:	605a      	str	r2, [r3, #4]
  }
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af02      	add	r7, sp, #8
 80091be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80091c6:	f7fc fd35 	bl	8005c34 <HAL_GetTick>
 80091ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0308 	and.w	r3, r3, #8
 80091d6:	2b08      	cmp	r3, #8
 80091d8:	d10e      	bne.n	80091f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f82a 	bl	8009242 <UART_WaitOnFlagUntilTimeout>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e020      	b.n	800923a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0304 	and.w	r3, r3, #4
 8009202:	2b04      	cmp	r3, #4
 8009204:	d10e      	bne.n	8009224 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009206:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f814 	bl	8009242 <UART_WaitOnFlagUntilTimeout>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d001      	beq.n	8009224 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009220:	2303      	movs	r3, #3
 8009222:	e00a      	b.n	800923a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2220      	movs	r2, #32
 8009228:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2220      	movs	r2, #32
 800922e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b084      	sub	sp, #16
 8009246:	af00      	add	r7, sp, #0
 8009248:	60f8      	str	r0, [r7, #12]
 800924a:	60b9      	str	r1, [r7, #8]
 800924c:	603b      	str	r3, [r7, #0]
 800924e:	4613      	mov	r3, r2
 8009250:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009252:	e05d      	b.n	8009310 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925a:	d059      	beq.n	8009310 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800925c:	f7fc fcea 	bl	8005c34 <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	429a      	cmp	r2, r3
 800926a:	d302      	bcc.n	8009272 <UART_WaitOnFlagUntilTimeout+0x30>
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d11b      	bne.n	80092aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009280:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	689a      	ldr	r2, [r3, #8]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f022 0201 	bic.w	r2, r2, #1
 8009290:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2220      	movs	r2, #32
 8009296:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2220      	movs	r2, #32
 800929c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e042      	b.n	8009330 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 0304 	and.w	r3, r3, #4
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d02b      	beq.n	8009310 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092c6:	d123      	bne.n	8009310 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092d0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80092e0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	689a      	ldr	r2, [r3, #8]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f022 0201 	bic.w	r2, r2, #1
 80092f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2220      	movs	r2, #32
 80092f6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2220      	movs	r2, #32
 80092fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2220      	movs	r2, #32
 8009302:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e00f      	b.n	8009330 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	69da      	ldr	r2, [r3, #28]
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	4013      	ands	r3, r2
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	429a      	cmp	r2, r3
 800931e:	bf0c      	ite	eq
 8009320:	2301      	moveq	r3, #1
 8009322:	2300      	movne	r3, #0
 8009324:	b2db      	uxtb	r3, r3
 8009326:	461a      	mov	r2, r3
 8009328:	79fb      	ldrb	r3, [r7, #7]
 800932a:	429a      	cmp	r2, r3
 800932c:	d092      	beq.n	8009254 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800934e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2220      	movs	r2, #32
 8009354:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009356:	bf00      	nop
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009362:	b480      	push	{r7}
 8009364:	b083      	sub	sp, #12
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009378:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	689a      	ldr	r2, [r3, #8]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f022 0201 	bic.w	r2, r2, #1
 8009388:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2220      	movs	r2, #32
 800938e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009396:	bf00      	nop
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b084      	sub	sp, #16
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ae:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	69db      	ldr	r3, [r3, #28]
 80093b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093b8:	d01e      	beq.n	80093f8 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093d0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f022 0201 	bic.w	r2, r2, #1
 80093e0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093f0:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2220      	movs	r2, #32
 80093f6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f7f8 f923 	bl	8001644 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093fe:	bf00      	nop
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b084      	sub	sp, #16
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009412:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f7ff fb6f 	bl	8008af8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800941a:	bf00      	nop
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b086      	sub	sp, #24
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009434:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800943a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009446:	2b80      	cmp	r3, #128	; 0x80
 8009448:	d109      	bne.n	800945e <UART_DMAError+0x3c>
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	2b21      	cmp	r3, #33	; 0x21
 800944e:	d106      	bne.n	800945e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	2200      	movs	r2, #0
 8009454:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009458:	6978      	ldr	r0, [r7, #20]
 800945a:	f7ff ff6d 	bl	8009338 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009468:	2b40      	cmp	r3, #64	; 0x40
 800946a:	d109      	bne.n	8009480 <UART_DMAError+0x5e>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2b22      	cmp	r3, #34	; 0x22
 8009470:	d106      	bne.n	8009480 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	2200      	movs	r2, #0
 8009476:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800947a:	6978      	ldr	r0, [r7, #20]
 800947c:	f7ff ff71 	bl	8009362 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009484:	f043 0210 	orr.w	r2, r3, #16
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800948c:	6978      	ldr	r0, [r7, #20]
 800948e:	f7ff fb3d 	bl	8008b0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009492:	bf00      	nop
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
	...

0800949c <__libc_init_array>:
 800949c:	b570      	push	{r4, r5, r6, lr}
 800949e:	4e0d      	ldr	r6, [pc, #52]	; (80094d4 <__libc_init_array+0x38>)
 80094a0:	4c0d      	ldr	r4, [pc, #52]	; (80094d8 <__libc_init_array+0x3c>)
 80094a2:	1ba4      	subs	r4, r4, r6
 80094a4:	10a4      	asrs	r4, r4, #2
 80094a6:	2500      	movs	r5, #0
 80094a8:	42a5      	cmp	r5, r4
 80094aa:	d109      	bne.n	80094c0 <__libc_init_array+0x24>
 80094ac:	4e0b      	ldr	r6, [pc, #44]	; (80094dc <__libc_init_array+0x40>)
 80094ae:	4c0c      	ldr	r4, [pc, #48]	; (80094e0 <__libc_init_array+0x44>)
 80094b0:	f000 f820 	bl	80094f4 <_init>
 80094b4:	1ba4      	subs	r4, r4, r6
 80094b6:	10a4      	asrs	r4, r4, #2
 80094b8:	2500      	movs	r5, #0
 80094ba:	42a5      	cmp	r5, r4
 80094bc:	d105      	bne.n	80094ca <__libc_init_array+0x2e>
 80094be:	bd70      	pop	{r4, r5, r6, pc}
 80094c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094c4:	4798      	blx	r3
 80094c6:	3501      	adds	r5, #1
 80094c8:	e7ee      	b.n	80094a8 <__libc_init_array+0xc>
 80094ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094ce:	4798      	blx	r3
 80094d0:	3501      	adds	r5, #1
 80094d2:	e7f2      	b.n	80094ba <__libc_init_array+0x1e>
 80094d4:	08009aac 	.word	0x08009aac
 80094d8:	08009aac 	.word	0x08009aac
 80094dc:	08009aac 	.word	0x08009aac
 80094e0:	08009ab0 	.word	0x08009ab0

080094e4 <memset>:
 80094e4:	4402      	add	r2, r0
 80094e6:	4603      	mov	r3, r0
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d100      	bne.n	80094ee <memset+0xa>
 80094ec:	4770      	bx	lr
 80094ee:	f803 1b01 	strb.w	r1, [r3], #1
 80094f2:	e7f9      	b.n	80094e8 <memset+0x4>

080094f4 <_init>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	bf00      	nop
 80094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fa:	bc08      	pop	{r3}
 80094fc:	469e      	mov	lr, r3
 80094fe:	4770      	bx	lr

08009500 <_fini>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	bf00      	nop
 8009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009506:	bc08      	pop	{r3}
 8009508:	469e      	mov	lr, r3
 800950a:	4770      	bx	lr
