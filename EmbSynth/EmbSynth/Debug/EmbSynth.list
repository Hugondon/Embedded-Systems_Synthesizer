
EmbSynth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ef4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  080090ec  080090ec  000190ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009684  08009684  000202dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009684  08009684  00019684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800968c  0800968c  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800968c  0800968c  0001968c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009690  08009690  00019690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  08009694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  200002dc  08009970  000202dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  08009970  0002066c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128a5  00000000  00000000  0002030a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023df  00000000  00000000  00032baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  00034f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001058  00000000  00000000  000360e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002770e  00000000  00000000  00037140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc8c  00000000  00000000  0005e84e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fcd6a  00000000  00000000  0006b4da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00168244  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c8  00000000  00000000  001682c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200002dc 	.word	0x200002dc
 8000214:	00000000 	.word	0x00000000
 8000218:	080090d4 	.word	0x080090d4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200002e0 	.word	0x200002e0
 8000234:	080090d4 	.word	0x080090d4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f005 f886 	bl	800564e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 fbc3 	bl	8000ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 fe0f 	bl	8001168 <MX_GPIO_Init>
  MX_DMA_Init();
 800054a:	f000 fddf 	bl	800110c <MX_DMA_Init>
  MX_UART4_Init();
 800054e:	f000 fd7d 	bl	800104c <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000552:	f000 fdab 	bl	80010ac <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000556:	f000 fcd1 	bl	8000efc <MX_TIM2_Init>
  MX_TIM14_Init();
 800055a:	f000 fd53 	bl	8001004 <MX_TIM14_Init>
  MX_TIM1_Init();
 800055e:	f000 fc79 	bl	8000e54 <MX_TIM1_Init>
  MX_DAC_Init();
 8000562:	f000 fc43 	bl	8000dec <MX_DAC_Init>
  MX_TIM6_Init();
 8000566:	f000 fd17 	bl	8000f98 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800056a:	48be      	ldr	r0, [pc, #760]	; (8000864 <main+0x32c>)
 800056c:	f007 fae8 	bl	8007b40 <HAL_TIM_Base_Start>
  HAL_UART_Receive_DMA(&huart4, rx_buffer, sizeof(rx_buffer)/sizeof(char));
 8000570:	2201      	movs	r2, #1
 8000572:	49bd      	ldr	r1, [pc, #756]	; (8000868 <main+0x330>)
 8000574:	48bd      	ldr	r0, [pc, #756]	; (800086c <main+0x334>)
 8000576:	f008 f82b 	bl	80085d0 <HAL_UART_Receive_DMA>

  ID = readID();
 800057a:	f002 ff21 	bl	80033c0 <readID>
 800057e:	4603      	mov	r3, r0
 8000580:	461a      	mov	r2, r3
 8000582:	4bbb      	ldr	r3, [pc, #748]	; (8000870 <main+0x338>)
 8000584:	801a      	strh	r2, [r3, #0]
  HAL_Delay(100);
 8000586:	2064      	movs	r0, #100	; 0x64
 8000588:	f005 f8be 	bl	8005708 <HAL_Delay>
  tft_init(ID);
 800058c:	4bb8      	ldr	r3, [pc, #736]	; (8000870 <main+0x338>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f002 fbf7 	bl	8002d84 <tft_init>
  setRotation(3);
 8000596:	2003      	movs	r0, #3
 8000598:	f003 fe30 	bl	80041fc <setRotation>

  // INTERFAZ GLOBAL
  fillRect(0 , 0, 320, 240,(11)&BLUE | (((16)*2)<<5)&GREEN |  ((26)<<(5+6))&RED );//Color base
 800059c:	f24d 430b 	movw	r3, #54283	; 0xd40b
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	23f0      	movs	r3, #240	; 0xf0
 80005a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80005a8:	2100      	movs	r1, #0
 80005aa:	2000      	movs	r0, #0
 80005ac:	f004 fcac 	bl	8004f08 <fillRect>
  fillRect(20 , 80, 280, 120,BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));//Color de tablero
 80005b0:	f648 23ca 	movw	r3, #35530	; 0x8aca
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2378      	movs	r3, #120	; 0x78
 80005b8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	2014      	movs	r0, #20
 80005c0:	f004 fca2 	bl	8004f08 <fillRect>
  fillRect(20 , 20, 280, 50,BLUE_LEV(2) | GREEN_LEV(2) | RED_LEV(2));//Color de señales
 80005c4:	f241 0382 	movw	r3, #4226	; 0x1082
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2332      	movs	r3, #50	; 0x32
 80005cc:	f44f 728c 	mov.w	r2, #280	; 0x118
 80005d0:	2114      	movs	r1, #20
 80005d2:	2014      	movs	r0, #20
 80005d4:	f004 fc98 	bl	8004f08 <fillRect>

  // AM
  fillTriangle(62, 105, 72, 90, 82, 105, RED);
 80005d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80005dc:	9302      	str	r3, [sp, #8]
 80005de:	2369      	movs	r3, #105	; 0x69
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2352      	movs	r3, #82	; 0x52
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	235a      	movs	r3, #90	; 0x5a
 80005e8:	2248      	movs	r2, #72	; 0x48
 80005ea:	2169      	movs	r1, #105	; 0x69
 80005ec:	203e      	movs	r0, #62	; 0x3e
 80005ee:	f004 fea5 	bl	800533c <fillTriangle>

  // FM
  fillTriangle(45, 140, 55, 125, 65, 140, RED);
 80005f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80005f6:	9302      	str	r3, [sp, #8]
 80005f8:	238c      	movs	r3, #140	; 0x8c
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2341      	movs	r3, #65	; 0x41
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	237d      	movs	r3, #125	; 0x7d
 8000602:	2237      	movs	r2, #55	; 0x37
 8000604:	218c      	movs	r1, #140	; 0x8c
 8000606:	202d      	movs	r0, #45	; 0x2d
 8000608:	f004 fe98 	bl	800533c <fillTriangle>
  fillTriangle(76, 140, 86, 125, 96, 140, RED);
 800060c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000610:	9302      	str	r3, [sp, #8]
 8000612:	238c      	movs	r3, #140	; 0x8c
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2360      	movs	r3, #96	; 0x60
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	237d      	movs	r3, #125	; 0x7d
 800061c:	2256      	movs	r2, #86	; 0x56
 800061e:	218c      	movs	r1, #140	; 0x8c
 8000620:	204c      	movs	r0, #76	; 0x4c
 8000622:	f004 fe8b 	bl	800533c <fillTriangle>

  // LP
  fillTriangle(76, 175, 76, 160, 90, 175, RED);
 8000626:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800062a:	9302      	str	r3, [sp, #8]
 800062c:	23af      	movs	r3, #175	; 0xaf
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	235a      	movs	r3, #90	; 0x5a
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	23a0      	movs	r3, #160	; 0xa0
 8000636:	224c      	movs	r2, #76	; 0x4c
 8000638:	21af      	movs	r1, #175	; 0xaf
 800063a:	204c      	movs	r0, #76	; 0x4c
 800063c:	f004 fe7e 	bl	800533c <fillTriangle>
  fillRect(40, 161, 36, 14,RED);
 8000640:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	230e      	movs	r3, #14
 8000648:	2224      	movs	r2, #36	; 0x24
 800064a:	21a1      	movs	r1, #161	; 0xa1
 800064c:	2028      	movs	r0, #40	; 0x28
 800064e:	f004 fc5b 	bl	8004f08 <fillRect>

  // PIANO
  fillRect(65 , 205, 190, 35,WHITE);
 8000652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2323      	movs	r3, #35	; 0x23
 800065a:	22be      	movs	r2, #190	; 0xbe
 800065c:	21cd      	movs	r1, #205	; 0xcd
 800065e:	2041      	movs	r0, #65	; 0x41
 8000660:	f004 fc52 	bl	8004f08 <fillRect>
  fillRect(85 , 205, 10 ,22,BLACK);
 8000664:	2300      	movs	r3, #0
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2316      	movs	r3, #22
 800066a:	220a      	movs	r2, #10
 800066c:	21cd      	movs	r1, #205	; 0xcd
 800066e:	2055      	movs	r0, #85	; 0x55
 8000670:	f004 fc4a 	bl	8004f08 <fillRect>
  fillRect(115 , 205, 10 ,22,BLACK);
 8000674:	2300      	movs	r3, #0
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2316      	movs	r3, #22
 800067a:	220a      	movs	r2, #10
 800067c:	21cd      	movs	r1, #205	; 0xcd
 800067e:	2073      	movs	r0, #115	; 0x73
 8000680:	f004 fc42 	bl	8004f08 <fillRect>
  fillRect(165 , 205, 10 ,22,BLACK);
 8000684:	2300      	movs	r3, #0
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2316      	movs	r3, #22
 800068a:	220a      	movs	r2, #10
 800068c:	21cd      	movs	r1, #205	; 0xcd
 800068e:	20a5      	movs	r0, #165	; 0xa5
 8000690:	f004 fc3a 	bl	8004f08 <fillRect>
  fillRect(195 , 205, 10 ,22,BLACK);
 8000694:	2300      	movs	r3, #0
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2316      	movs	r3, #22
 800069a:	220a      	movs	r2, #10
 800069c:	21cd      	movs	r1, #205	; 0xcd
 800069e:	20c3      	movs	r0, #195	; 0xc3
 80006a0:	f004 fc32 	bl	8004f08 <fillRect>
  fillRect(225 , 205, 10 ,22,BLACK);
 80006a4:	2300      	movs	r3, #0
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2316      	movs	r3, #22
 80006aa:	220a      	movs	r2, #10
 80006ac:	21cd      	movs	r1, #205	; 0xcd
 80006ae:	20e1      	movs	r0, #225	; 0xe1
 80006b0:	f004 fc2a 	bl	8004f08 <fillRect>

  //CAJAS DE VOLUMEN
  	//HORIZONTALES
  fillRect(130 , 95, 152, 3,BLACK);
 80006b4:	2300      	movs	r3, #0
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2303      	movs	r3, #3
 80006ba:	2298      	movs	r2, #152	; 0x98
 80006bc:	215f      	movs	r1, #95	; 0x5f
 80006be:	2082      	movs	r0, #130	; 0x82
 80006c0:	f004 fc22 	bl	8004f08 <fillRect>
  fillRect(130 , 112, 152, 3,BLACK);
 80006c4:	2300      	movs	r3, #0
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2303      	movs	r3, #3
 80006ca:	2298      	movs	r2, #152	; 0x98
 80006cc:	2170      	movs	r1, #112	; 0x70
 80006ce:	2082      	movs	r0, #130	; 0x82
 80006d0:	f004 fc1a 	bl	8004f08 <fillRect>
  fillRect(130 , 130, 152, 3,BLACK);
 80006d4:	2300      	movs	r3, #0
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2303      	movs	r3, #3
 80006da:	2298      	movs	r2, #152	; 0x98
 80006dc:	2182      	movs	r1, #130	; 0x82
 80006de:	2082      	movs	r0, #130	; 0x82
 80006e0:	f004 fc12 	bl	8004f08 <fillRect>
  fillRect(130 , 147, 152, 3,BLACK);
 80006e4:	2300      	movs	r3, #0
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2303      	movs	r3, #3
 80006ea:	2298      	movs	r2, #152	; 0x98
 80006ec:	2193      	movs	r1, #147	; 0x93
 80006ee:	2082      	movs	r0, #130	; 0x82
 80006f0:	f004 fc0a 	bl	8004f08 <fillRect>
  fillRect(130 , 165, 152, 3,BLACK);
 80006f4:	2300      	movs	r3, #0
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	2303      	movs	r3, #3
 80006fa:	2298      	movs	r2, #152	; 0x98
 80006fc:	21a5      	movs	r1, #165	; 0xa5
 80006fe:	2082      	movs	r0, #130	; 0x82
 8000700:	f004 fc02 	bl	8004f08 <fillRect>
  fillRect(130 , 182, 152, 3,BLACK);
 8000704:	2300      	movs	r3, #0
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2303      	movs	r3, #3
 800070a:	2298      	movs	r2, #152	; 0x98
 800070c:	21b6      	movs	r1, #182	; 0xb6
 800070e:	2082      	movs	r0, #130	; 0x82
 8000710:	f004 fbfa 	bl	8004f08 <fillRect>

  	  //VERTICALES
  for(i = 0; i < 5; i++){
 8000714:	4b57      	ldr	r3, [pc, #348]	; (8000874 <main+0x33c>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	e040      	b.n	800079e <main+0x266>
  	fillRect(130+(i*38) , 95, 3, 20,BLACK);
 800071c:	4b55      	ldr	r3, [pc, #340]	; (8000874 <main+0x33c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	b29b      	uxth	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	00d2      	lsls	r2, r2, #3
 8000726:	441a      	add	r2, r3
 8000728:	0052      	lsls	r2, r2, #1
 800072a:	4413      	add	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	b29b      	uxth	r3, r3
 8000730:	3382      	adds	r3, #130	; 0x82
 8000732:	b29b      	uxth	r3, r3
 8000734:	b218      	sxth	r0, r3
 8000736:	2300      	movs	r3, #0
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2314      	movs	r3, #20
 800073c:	2203      	movs	r2, #3
 800073e:	215f      	movs	r1, #95	; 0x5f
 8000740:	f004 fbe2 	bl	8004f08 <fillRect>
  	fillRect(130+(i*38) , 130, 3, 20,BLACK);
 8000744:	4b4b      	ldr	r3, [pc, #300]	; (8000874 <main+0x33c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	b29b      	uxth	r3, r3
 800074a:	461a      	mov	r2, r3
 800074c:	00d2      	lsls	r2, r2, #3
 800074e:	441a      	add	r2, r3
 8000750:	0052      	lsls	r2, r2, #1
 8000752:	4413      	add	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	b29b      	uxth	r3, r3
 8000758:	3382      	adds	r3, #130	; 0x82
 800075a:	b29b      	uxth	r3, r3
 800075c:	b218      	sxth	r0, r3
 800075e:	2300      	movs	r3, #0
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2314      	movs	r3, #20
 8000764:	2203      	movs	r2, #3
 8000766:	2182      	movs	r1, #130	; 0x82
 8000768:	f004 fbce 	bl	8004f08 <fillRect>
  	fillRect(130+(i*38) , 165, 3, 20,BLACK);
 800076c:	4b41      	ldr	r3, [pc, #260]	; (8000874 <main+0x33c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	b29b      	uxth	r3, r3
 8000772:	461a      	mov	r2, r3
 8000774:	00d2      	lsls	r2, r2, #3
 8000776:	441a      	add	r2, r3
 8000778:	0052      	lsls	r2, r2, #1
 800077a:	4413      	add	r3, r2
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	b29b      	uxth	r3, r3
 8000780:	3382      	adds	r3, #130	; 0x82
 8000782:	b29b      	uxth	r3, r3
 8000784:	b218      	sxth	r0, r3
 8000786:	2300      	movs	r3, #0
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2314      	movs	r3, #20
 800078c:	2203      	movs	r2, #3
 800078e:	21a5      	movs	r1, #165	; 0xa5
 8000790:	f004 fbba 	bl	8004f08 <fillRect>
  for(i = 0; i < 5; i++){
 8000794:	4b37      	ldr	r3, [pc, #220]	; (8000874 <main+0x33c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	4a36      	ldr	r2, [pc, #216]	; (8000874 <main+0x33c>)
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	4b35      	ldr	r3, [pc, #212]	; (8000874 <main+0x33c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	d9ba      	bls.n	800071c <main+0x1e4>
  }

  // Imagenes que identifican
  for(i=0; i < 3; i++){
 80007a6:	4b33      	ldr	r3, [pc, #204]	; (8000874 <main+0x33c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	e02e      	b.n	800080c <main+0x2d4>
  	fillRect(40 , 90+(i*35), 2, 20,RED);
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <main+0x33c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	461a      	mov	r2, r3
 80007b6:	0092      	lsls	r2, r2, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	461a      	mov	r2, r3
 80007bc:	00d2      	lsls	r2, r2, #3
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	335a      	adds	r3, #90	; 0x5a
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	b219      	sxth	r1, r3
 80007c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2314      	movs	r3, #20
 80007d0:	2202      	movs	r2, #2
 80007d2:	2028      	movs	r0, #40	; 0x28
 80007d4:	f004 fb98 	bl	8004f08 <fillRect>
  	fillRect(30 , 105+(i*35), 70, 2,RED);
 80007d8:	4b26      	ldr	r3, [pc, #152]	; (8000874 <main+0x33c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	b29b      	uxth	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	0092      	lsls	r2, r2, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	461a      	mov	r2, r3
 80007e6:	00d2      	lsls	r2, r2, #3
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	3369      	adds	r3, #105	; 0x69
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	b219      	sxth	r1, r3
 80007f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2302      	movs	r3, #2
 80007fa:	2246      	movs	r2, #70	; 0x46
 80007fc:	201e      	movs	r0, #30
 80007fe:	f004 fb83 	bl	8004f08 <fillRect>
  for(i=0; i < 3; i++){
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <main+0x33c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	4a1a      	ldr	r2, [pc, #104]	; (8000874 <main+0x33c>)
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <main+0x33c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b02      	cmp	r3, #2
 8000812:	d9cc      	bls.n	80007ae <main+0x276>
  }
  HAL_TIM_Base_Start(&htim6);
 8000814:	4818      	ldr	r0, [pc, #96]	; (8000878 <main+0x340>)
 8000816:	f007 f993 	bl	8007b40 <HAL_TIM_Base_Start>

  HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(message)/sizeof(char) - 1, 1000);
 800081a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081e:	221b      	movs	r2, #27
 8000820:	4916      	ldr	r1, [pc, #88]	; (800087c <main+0x344>)
 8000822:	4817      	ldr	r0, [pc, #92]	; (8000880 <main+0x348>)
 8000824:	f007 fe42 	bl	80084ac <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)okay_message, sizeof(okay_message)/sizeof(char) - 1, 1000);
 8000828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082c:	2204      	movs	r2, #4
 800082e:	4915      	ldr	r1, [pc, #84]	; (8000884 <main+0x34c>)
 8000830:	4813      	ldr	r0, [pc, #76]	; (8000880 <main+0x348>)
 8000832:	f007 fe3b 	bl	80084ac <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		  if(!EXT_BTN_1_state){
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <main+0x350>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	f083 0301 	eor.w	r3, r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d06d      	beq.n	8000922 <main+0x3ea>
			  cont_lp ++;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <main+0x354>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	3301      	adds	r3, #1
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <main+0x354>)
 8000850:	701a      	strb	r2, [r3, #0]
			  if(cont_lp < 5){
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <main+0x354>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b04      	cmp	r3, #4
 8000858:	d83b      	bhi.n	80008d2 <main+0x39a>
				  for (i = 0; i < cont_lp; i++) fillRect(133+(i*38), 168, 35,14,BLUE);
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <main+0x33c>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	e02f      	b.n	80008c2 <main+0x38a>
 8000862:	bf00      	nop
 8000864:	200004a8 	.word	0x200004a8
 8000868:	20000300 	.word	0x20000300
 800086c:	200004ec 	.word	0x200004ec
 8000870:	200002f8 	.word	0x200002f8
 8000874:	20000308 	.word	0x20000308
 8000878:	20000468 	.word	0x20000468
 800087c:	20000004 	.word	0x20000004
 8000880:	20000374 	.word	0x20000374
 8000884:	20000020 	.word	0x20000020
 8000888:	20000025 	.word	0x20000025
 800088c:	200002fc 	.word	0x200002fc
 8000890:	4b8f      	ldr	r3, [pc, #572]	; (8000ad0 <main+0x598>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	b29b      	uxth	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	00d2      	lsls	r2, r2, #3
 800089a:	441a      	add	r2, r3
 800089c:	0052      	lsls	r2, r2, #1
 800089e:	4413      	add	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	3385      	adds	r3, #133	; 0x85
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	b218      	sxth	r0, r3
 80008aa:	231f      	movs	r3, #31
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	230e      	movs	r3, #14
 80008b0:	2223      	movs	r2, #35	; 0x23
 80008b2:	21a8      	movs	r1, #168	; 0xa8
 80008b4:	f004 fb28 	bl	8004f08 <fillRect>
 80008b8:	4b85      	ldr	r3, [pc, #532]	; (8000ad0 <main+0x598>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	4a84      	ldr	r2, [pc, #528]	; (8000ad0 <main+0x598>)
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	4b84      	ldr	r3, [pc, #528]	; (8000ad4 <main+0x59c>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b81      	ldr	r3, [pc, #516]	; (8000ad0 <main+0x598>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d8df      	bhi.n	8000890 <main+0x358>
 80008d0:	e024      	b.n	800091c <main+0x3e4>
			  }else{
				  for (i = 0; i < 4; i++) fillRect(133+(i*38), 168, 35,14,BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));
 80008d2:	4b7f      	ldr	r3, [pc, #508]	; (8000ad0 <main+0x598>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	e019      	b.n	800090e <main+0x3d6>
 80008da:	4b7d      	ldr	r3, [pc, #500]	; (8000ad0 <main+0x598>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	461a      	mov	r2, r3
 80008e2:	00d2      	lsls	r2, r2, #3
 80008e4:	441a      	add	r2, r3
 80008e6:	0052      	lsls	r2, r2, #1
 80008e8:	4413      	add	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	3385      	adds	r3, #133	; 0x85
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	b218      	sxth	r0, r3
 80008f4:	f648 23ca 	movw	r3, #35530	; 0x8aca
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	230e      	movs	r3, #14
 80008fc:	2223      	movs	r2, #35	; 0x23
 80008fe:	21a8      	movs	r1, #168	; 0xa8
 8000900:	f004 fb02 	bl	8004f08 <fillRect>
 8000904:	4b72      	ldr	r3, [pc, #456]	; (8000ad0 <main+0x598>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3301      	adds	r3, #1
 800090a:	4a71      	ldr	r2, [pc, #452]	; (8000ad0 <main+0x598>)
 800090c:	6013      	str	r3, [r2, #0]
 800090e:	4b70      	ldr	r3, [pc, #448]	; (8000ad0 <main+0x598>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b03      	cmp	r3, #3
 8000914:	d9e1      	bls.n	80008da <main+0x3a2>
				  cont_lp = 0;
 8000916:	4b6f      	ldr	r3, [pc, #444]	; (8000ad4 <main+0x59c>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
			  }
			  EXT_BTN_1_state = true;
 800091c:	4b6e      	ldr	r3, [pc, #440]	; (8000ad8 <main+0x5a0>)
 800091e:	2201      	movs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_2_state){
 8000922:	4b6e      	ldr	r3, [pc, #440]	; (8000adc <main+0x5a4>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	f083 0301 	eor.w	r3, r3, #1
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d056      	beq.n	80009e0 <main+0x4a8>
			  cont_fm++;
 8000932:	4b6b      	ldr	r3, [pc, #428]	; (8000ae0 <main+0x5a8>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	3301      	adds	r3, #1
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b69      	ldr	r3, [pc, #420]	; (8000ae0 <main+0x5a8>)
 800093c:	701a      	strb	r2, [r3, #0]
			  if(cont_fm < 5){
 800093e:	4b68      	ldr	r3, [pc, #416]	; (8000ae0 <main+0x5a8>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b04      	cmp	r3, #4
 8000944:	d824      	bhi.n	8000990 <main+0x458>
				  for (i = 0; i < cont_fm; i++) fillRect(133+(i*38), 133, 35,14,BLUE);
 8000946:	4b62      	ldr	r3, [pc, #392]	; (8000ad0 <main+0x598>)
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	e018      	b.n	8000980 <main+0x448>
 800094e:	4b60      	ldr	r3, [pc, #384]	; (8000ad0 <main+0x598>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	b29b      	uxth	r3, r3
 8000954:	461a      	mov	r2, r3
 8000956:	00d2      	lsls	r2, r2, #3
 8000958:	441a      	add	r2, r3
 800095a:	0052      	lsls	r2, r2, #1
 800095c:	4413      	add	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	b29b      	uxth	r3, r3
 8000962:	3385      	adds	r3, #133	; 0x85
 8000964:	b29b      	uxth	r3, r3
 8000966:	b218      	sxth	r0, r3
 8000968:	231f      	movs	r3, #31
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	230e      	movs	r3, #14
 800096e:	2223      	movs	r2, #35	; 0x23
 8000970:	2185      	movs	r1, #133	; 0x85
 8000972:	f004 fac9 	bl	8004f08 <fillRect>
 8000976:	4b56      	ldr	r3, [pc, #344]	; (8000ad0 <main+0x598>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	3301      	adds	r3, #1
 800097c:	4a54      	ldr	r2, [pc, #336]	; (8000ad0 <main+0x598>)
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	4b57      	ldr	r3, [pc, #348]	; (8000ae0 <main+0x5a8>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b52      	ldr	r3, [pc, #328]	; (8000ad0 <main+0x598>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	429a      	cmp	r2, r3
 800098c:	d8df      	bhi.n	800094e <main+0x416>
 800098e:	e024      	b.n	80009da <main+0x4a2>
			  }else{
				  for (i = 0; i < 4; i++) fillRect(133+(i*38), 133, 35,14,BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));
 8000990:	4b4f      	ldr	r3, [pc, #316]	; (8000ad0 <main+0x598>)
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	e019      	b.n	80009cc <main+0x494>
 8000998:	4b4d      	ldr	r3, [pc, #308]	; (8000ad0 <main+0x598>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	b29b      	uxth	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	00d2      	lsls	r2, r2, #3
 80009a2:	441a      	add	r2, r3
 80009a4:	0052      	lsls	r2, r2, #1
 80009a6:	4413      	add	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	3385      	adds	r3, #133	; 0x85
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	b218      	sxth	r0, r3
 80009b2:	f648 23ca 	movw	r3, #35530	; 0x8aca
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	230e      	movs	r3, #14
 80009ba:	2223      	movs	r2, #35	; 0x23
 80009bc:	2185      	movs	r1, #133	; 0x85
 80009be:	f004 faa3 	bl	8004f08 <fillRect>
 80009c2:	4b43      	ldr	r3, [pc, #268]	; (8000ad0 <main+0x598>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	4a41      	ldr	r2, [pc, #260]	; (8000ad0 <main+0x598>)
 80009ca:	6013      	str	r3, [r2, #0]
 80009cc:	4b40      	ldr	r3, [pc, #256]	; (8000ad0 <main+0x598>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	d9e1      	bls.n	8000998 <main+0x460>
				  cont_fm = 0;
 80009d4:	4b42      	ldr	r3, [pc, #264]	; (8000ae0 <main+0x5a8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
			  }
			  EXT_BTN_2_state = true;
 80009da:	4b40      	ldr	r3, [pc, #256]	; (8000adc <main+0x5a4>)
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_3_state){
 80009e0:	4b40      	ldr	r3, [pc, #256]	; (8000ae4 <main+0x5ac>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f083 0301 	eor.w	r3, r3, #1
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d056      	beq.n	8000a9e <main+0x566>
			  cont_am++;
 80009f0:	4b3d      	ldr	r3, [pc, #244]	; (8000ae8 <main+0x5b0>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <main+0x5b0>)
 80009fa:	701a      	strb	r2, [r3, #0]
			  if(cont_am < 5){
 80009fc:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <main+0x5b0>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b04      	cmp	r3, #4
 8000a02:	d824      	bhi.n	8000a4e <main+0x516>
				  for (i = 0; i < cont_am; i++) fillRect(133+(i*38), 98, 35,14,BLUE);
 8000a04:	4b32      	ldr	r3, [pc, #200]	; (8000ad0 <main+0x598>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	e018      	b.n	8000a3e <main+0x506>
 8000a0c:	4b30      	ldr	r3, [pc, #192]	; (8000ad0 <main+0x598>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	461a      	mov	r2, r3
 8000a14:	00d2      	lsls	r2, r2, #3
 8000a16:	441a      	add	r2, r3
 8000a18:	0052      	lsls	r2, r2, #1
 8000a1a:	4413      	add	r3, r2
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	3385      	adds	r3, #133	; 0x85
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	b218      	sxth	r0, r3
 8000a26:	231f      	movs	r3, #31
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	230e      	movs	r3, #14
 8000a2c:	2223      	movs	r2, #35	; 0x23
 8000a2e:	2162      	movs	r1, #98	; 0x62
 8000a30:	f004 fa6a 	bl	8004f08 <fillRect>
 8000a34:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <main+0x598>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	4a25      	ldr	r2, [pc, #148]	; (8000ad0 <main+0x598>)
 8000a3c:	6013      	str	r3, [r2, #0]
 8000a3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <main+0x5b0>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <main+0x598>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d8df      	bhi.n	8000a0c <main+0x4d4>
 8000a4c:	e024      	b.n	8000a98 <main+0x560>
			  }else{
			  		for (i = 0; i < 4; i++) fillRect(133+(i*38), 98, 35,14,BLUE_LEV(10) | GREEN_LEV(11) | RED_LEV(17));
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <main+0x598>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	e019      	b.n	8000a8a <main+0x552>
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <main+0x598>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	00d2      	lsls	r2, r2, #3
 8000a60:	441a      	add	r2, r3
 8000a62:	0052      	lsls	r2, r2, #1
 8000a64:	4413      	add	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	3385      	adds	r3, #133	; 0x85
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	b218      	sxth	r0, r3
 8000a70:	f648 23ca 	movw	r3, #35530	; 0x8aca
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	230e      	movs	r3, #14
 8000a78:	2223      	movs	r2, #35	; 0x23
 8000a7a:	2162      	movs	r1, #98	; 0x62
 8000a7c:	f004 fa44 	bl	8004f08 <fillRect>
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <main+0x598>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <main+0x598>)
 8000a88:	6013      	str	r3, [r2, #0]
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <main+0x598>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d9e1      	bls.n	8000a56 <main+0x51e>
			  		cont_am = 0;
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <main+0x5b0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
			  }
			  EXT_BTN_3_state = true;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <main+0x5ac>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
		  }
		  if(!EXT_BTN_4_state){
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <main+0x5b4>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	f083 0301 	eor.w	r3, r3, #1
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f43f aec3 	beq.w	8000836 <main+0x2fe>
			  cont_signal++;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <main+0x5b8>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <main+0x5b8>)
 8000aba:	701a      	strb	r2, [r3, #0]
			  if(cont_signal<5){
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <main+0x5b8>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	f200 80a0 	bhi.w	8000c06 <main+0x6ce>
				  for (i=1; i<=cont_signal; i++){
 8000ac6:	4b02      	ldr	r3, [pc, #8]	; (8000ad0 <main+0x598>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	e092      	b.n	8000bf4 <main+0x6bc>
 8000ace:	bf00      	nop
 8000ad0:	20000308 	.word	0x20000308
 8000ad4:	200002fc 	.word	0x200002fc
 8000ad8:	20000025 	.word	0x20000025
 8000adc:	20000026 	.word	0x20000026
 8000ae0:	200002fb 	.word	0x200002fb
 8000ae4:	20000027 	.word	0x20000027
 8000ae8:	200002fa 	.word	0x200002fa
 8000aec:	20000028 	.word	0x20000028
 8000af0:	200002fd 	.word	0x200002fd
					  fillRect(24+((i-2)*65), 22, 3,46,BLACK);
 8000af4:	4b71      	ldr	r3, [pc, #452]	; (8000cbc <main+0x784>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	0192      	lsls	r2, r2, #6
 8000afe:	4413      	add	r3, r2
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	3b6a      	subs	r3, #106	; 0x6a
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b218      	sxth	r0, r3
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	232e      	movs	r3, #46	; 0x2e
 8000b0e:	2203      	movs	r2, #3
 8000b10:	2116      	movs	r1, #22
 8000b12:	f004 f9f9 	bl	8004f08 <fillRect>
					  fillRect(24+((i-1)*65), 22, 3,46,YELLOW);
 8000b16:	4b69      	ldr	r3, [pc, #420]	; (8000cbc <main+0x784>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	0192      	lsls	r2, r2, #6
 8000b20:	4413      	add	r3, r2
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	3b29      	subs	r3, #41	; 0x29
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	b218      	sxth	r0, r3
 8000b2a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	232e      	movs	r3, #46	; 0x2e
 8000b32:	2203      	movs	r2, #3
 8000b34:	2116      	movs	r1, #22
 8000b36:	f004 f9e7 	bl	8004f08 <fillRect>
					  fillRect(89+((i-1)*65), 22, 3,46,YELLOW);
 8000b3a:	4b60      	ldr	r3, [pc, #384]	; (8000cbc <main+0x784>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	461a      	mov	r2, r3
 8000b42:	0192      	lsls	r2, r2, #6
 8000b44:	4413      	add	r3, r2
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	3318      	adds	r3, #24
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	b218      	sxth	r0, r3
 8000b4e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	232e      	movs	r3, #46	; 0x2e
 8000b56:	2203      	movs	r2, #3
 8000b58:	2116      	movs	r1, #22
 8000b5a:	f004 f9d5 	bl	8004f08 <fillRect>
					  fillRect(24+((i-2)*65), 22, 65,3,BLACK);
 8000b5e:	4b57      	ldr	r3, [pc, #348]	; (8000cbc <main+0x784>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	461a      	mov	r2, r3
 8000b66:	0192      	lsls	r2, r2, #6
 8000b68:	4413      	add	r3, r2
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	3b6a      	subs	r3, #106	; 0x6a
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	b218      	sxth	r0, r3
 8000b72:	2300      	movs	r3, #0
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2303      	movs	r3, #3
 8000b78:	2241      	movs	r2, #65	; 0x41
 8000b7a:	2116      	movs	r1, #22
 8000b7c:	f004 f9c4 	bl	8004f08 <fillRect>
					  fillRect(24+((i-2)*65), 65, 65,3,BLACK);
 8000b80:	4b4e      	ldr	r3, [pc, #312]	; (8000cbc <main+0x784>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	461a      	mov	r2, r3
 8000b88:	0192      	lsls	r2, r2, #6
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	3b6a      	subs	r3, #106	; 0x6a
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	b218      	sxth	r0, r3
 8000b94:	2300      	movs	r3, #0
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	2303      	movs	r3, #3
 8000b9a:	2241      	movs	r2, #65	; 0x41
 8000b9c:	2141      	movs	r1, #65	; 0x41
 8000b9e:	f004 f9b3 	bl	8004f08 <fillRect>
					  fillRect(24+((i-1)*65), 22, 65,3,YELLOW);
 8000ba2:	4b46      	ldr	r3, [pc, #280]	; (8000cbc <main+0x784>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	461a      	mov	r2, r3
 8000baa:	0192      	lsls	r2, r2, #6
 8000bac:	4413      	add	r3, r2
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	3b29      	subs	r3, #41	; 0x29
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	b218      	sxth	r0, r3
 8000bb6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	2241      	movs	r2, #65	; 0x41
 8000bc0:	2116      	movs	r1, #22
 8000bc2:	f004 f9a1 	bl	8004f08 <fillRect>
					  fillRect(24+((i-1)*65), 65, 65,3,YELLOW);
 8000bc6:	4b3d      	ldr	r3, [pc, #244]	; (8000cbc <main+0x784>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	461a      	mov	r2, r3
 8000bce:	0192      	lsls	r2, r2, #6
 8000bd0:	4413      	add	r3, r2
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	3b29      	subs	r3, #41	; 0x29
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	b218      	sxth	r0, r3
 8000bda:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2303      	movs	r3, #3
 8000be2:	2241      	movs	r2, #65	; 0x41
 8000be4:	2141      	movs	r1, #65	; 0x41
 8000be6:	f004 f98f 	bl	8004f08 <fillRect>
				  for (i=1; i<=cont_signal; i++){
 8000bea:	4b34      	ldr	r3, [pc, #208]	; (8000cbc <main+0x784>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	4a32      	ldr	r2, [pc, #200]	; (8000cbc <main+0x784>)
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b32      	ldr	r3, [pc, #200]	; (8000cc0 <main+0x788>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <main+0x784>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	f4bf af78 	bcs.w	8000af4 <main+0x5bc>
 8000c04:	e047      	b.n	8000c96 <main+0x75e>
				  }
			  }else{
				  fillRect(219, 22, 3,46,BLACK);
 8000c06:	2300      	movs	r3, #0
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	232e      	movs	r3, #46	; 0x2e
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	2116      	movs	r1, #22
 8000c10:	20db      	movs	r0, #219	; 0xdb
 8000c12:	f004 f979 	bl	8004f08 <fillRect>
				  fillRect(284, 22, 3,46,BLACK);
 8000c16:	2300      	movs	r3, #0
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	232e      	movs	r3, #46	; 0x2e
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	2116      	movs	r1, #22
 8000c20:	f44f 708e 	mov.w	r0, #284	; 0x11c
 8000c24:	f004 f970 	bl	8004f08 <fillRect>
				  fillRect(24, 22, 3,46,YELLOW);
 8000c28:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	232e      	movs	r3, #46	; 0x2e
 8000c30:	2203      	movs	r2, #3
 8000c32:	2116      	movs	r1, #22
 8000c34:	2018      	movs	r0, #24
 8000c36:	f004 f967 	bl	8004f08 <fillRect>
				  fillRect(89, 22, 3,46,YELLOW);
 8000c3a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	232e      	movs	r3, #46	; 0x2e
 8000c42:	2203      	movs	r2, #3
 8000c44:	2116      	movs	r1, #22
 8000c46:	2059      	movs	r0, #89	; 0x59
 8000c48:	f004 f95e 	bl	8004f08 <fillRect>
				  fillRect(219, 22, 65,3,BLACK);
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2303      	movs	r3, #3
 8000c52:	2241      	movs	r2, #65	; 0x41
 8000c54:	2116      	movs	r1, #22
 8000c56:	20db      	movs	r0, #219	; 0xdb
 8000c58:	f004 f956 	bl	8004f08 <fillRect>
				  fillRect(219, 65, 65,3,BLACK);
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2303      	movs	r3, #3
 8000c62:	2241      	movs	r2, #65	; 0x41
 8000c64:	2141      	movs	r1, #65	; 0x41
 8000c66:	20db      	movs	r0, #219	; 0xdb
 8000c68:	f004 f94e 	bl	8004f08 <fillRect>
				  fillRect(24, 22, 65,3,YELLOW);
 8000c6c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2303      	movs	r3, #3
 8000c74:	2241      	movs	r2, #65	; 0x41
 8000c76:	2116      	movs	r1, #22
 8000c78:	2018      	movs	r0, #24
 8000c7a:	f004 f945 	bl	8004f08 <fillRect>
				  fillRect(24, 65, 65,3,YELLOW);
 8000c7e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	2303      	movs	r3, #3
 8000c86:	2241      	movs	r2, #65	; 0x41
 8000c88:	2141      	movs	r1, #65	; 0x41
 8000c8a:	2018      	movs	r0, #24
 8000c8c:	f004 f93c 	bl	8004f08 <fillRect>
				  cont_signal = 1;
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <main+0x788>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
			  }
			  if(wave_selection < 4){
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <main+0x78c>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d806      	bhi.n	8000cac <main+0x774>
				  wave_selection++;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <main+0x78c>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <main+0x78c>)
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	e002      	b.n	8000cb2 <main+0x77a>
			  }else{
				  wave_selection = 1;
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <main+0x78c>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
			  }
			  EXT_BTN_4_state = true;
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <main+0x790>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
		  if(!EXT_BTN_1_state){
 8000cb8:	e5bd      	b.n	8000836 <main+0x2fe>
 8000cba:	bf00      	nop
 8000cbc:	20000308 	.word	0x20000308
 8000cc0:	200002fd 	.word	0x200002fd
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000028 	.word	0x20000028

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b0b8      	sub	sp, #224	; 0xe0
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cd6:	2234      	movs	r2, #52	; 0x34
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f008 f9f2 	bl	80090c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	2290      	movs	r2, #144	; 0x90
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f008 f9e3 	bl	80090c4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cfe:	f005 fe17 	bl	8006930 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <SystemClock_Config+0x118>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a37      	ldr	r2, [pc, #220]	; (8000de4 <SystemClock_Config+0x118>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <SystemClock_Config+0x118>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d1a:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <SystemClock_Config+0x11c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d22:	4a31      	ldr	r2, [pc, #196]	; (8000de8 <SystemClock_Config+0x11c>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <SystemClock_Config+0x11c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d36:	2302      	movs	r3, #2
 8000d38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d42:	2310      	movs	r3, #16
 8000d44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d54:	2308      	movs	r3, #8
 8000d56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000d5a:	2390      	movs	r3, #144	; 0x90
 8000d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d66:	2304      	movs	r3, #4
 8000d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d70:	4618      	mov	r0, r3
 8000d72:	f005 fded 	bl	8006950 <HAL_RCC_OscConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d7c:	f000 fcc2 	bl	8001704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d80:	230f      	movs	r3, #15
 8000d82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d86:	2302      	movs	r3, #2
 8000d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000d92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000d9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000da2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000da6:	2104      	movs	r1, #4
 8000da8:	4618      	mov	r0, r3
 8000daa:	f006 f87f 	bl	8006eac <HAL_RCC_ClockConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000db4:	f000 fca6 	bl	8001704 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4;
 8000db8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dbc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f006 fa66 	bl	800729c <HAL_RCCEx_PeriphCLKConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000dd6:	f000 fc95 	bl	8001704 <Error_Handler>
  }
}
 8000dda:	bf00      	nop
 8000ddc:	37e0      	adds	r7, #224	; 0xe0
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40007000 	.word	0x40007000

08000dec <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <MX_DAC_Init+0x60>)
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <MX_DAC_Init+0x64>)
 8000dfe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e00:	4812      	ldr	r0, [pc, #72]	; (8000e4c <MX_DAC_Init+0x60>)
 8000e02:	f004 fdb4 	bl	800596e <HAL_DAC_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e0c:	f000 fc7a 	bl	8001704 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000e10:	2304      	movs	r3, #4
 8000e12:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e18:	463b      	mov	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480b      	ldr	r0, [pc, #44]	; (8000e4c <MX_DAC_Init+0x60>)
 8000e20:	f004 fed5 	bl	8005bce <HAL_DAC_ConfigChannel>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e2a:	f000 fc6b 	bl	8001704 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000e2e:	463b      	mov	r3, r7
 8000e30:	2210      	movs	r2, #16
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_DAC_Init+0x60>)
 8000e36:	f004 feca 	bl	8005bce <HAL_DAC_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000e40:	f000 fc60 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000454 	.word	0x20000454
 8000e50:	40007400 	.word	0x40007400

08000e54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000e74:	4a20      	ldr	r2, [pc, #128]	; (8000ef8 <MX_TIM1_Init+0xa4>)
 8000e76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000e7a:	2247      	movs	r2, #71	; 0x47
 8000e7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000e86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000e8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e9e:	4815      	ldr	r0, [pc, #84]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000ea0:	f006 fe22 	bl	8007ae8 <HAL_TIM_Base_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000eaa:	f000 fc2b 	bl	8001704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000ebc:	f006 ffe0 	bl	8007e80 <HAL_TIM_ConfigClockSource>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ec6:	f000 fc1d 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <MX_TIM1_Init+0xa0>)
 8000edc:	f007 f9ec 	bl	80082b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ee6:	f000 fc0d 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	3720      	adds	r7, #32
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200004a8 	.word	0x200004a8
 8000ef8:	40010000 	.word	0x40010000

08000efc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <MX_TIM2_Init+0x98>)
 8000f1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000-1;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <MX_TIM2_Init+0x98>)
 8000f24:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000f28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_TIM2_Init+0x98>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40-1;
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_TIM2_Init+0x98>)
 8000f32:	2227      	movs	r2, #39	; 0x27
 8000f34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_TIM2_Init+0x98>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_TIM2_Init+0x98>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f42:	4814      	ldr	r0, [pc, #80]	; (8000f94 <MX_TIM2_Init+0x98>)
 8000f44:	f006 fdd0 	bl	8007ae8 <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f4e:	f000 fbd9 	bl	8001704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480d      	ldr	r0, [pc, #52]	; (8000f94 <MX_TIM2_Init+0x98>)
 8000f60:	f006 ff8e 	bl	8007e80 <HAL_TIM_ConfigClockSource>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f6a:	f000 fbcb 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <MX_TIM2_Init+0x98>)
 8000f7c:	f007 f99c 	bl	80082b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f86:	f000 fbbd 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	3720      	adds	r7, #32
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000056c 	.word	0x2000056c

08000f98 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <MX_TIM6_Init+0x64>)
 8000faa:	4a15      	ldr	r2, [pc, #84]	; (8001000 <MX_TIM6_Init+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 55-1;
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <MX_TIM6_Init+0x64>)
 8000fb0:	2236      	movs	r2, #54	; 0x36
 8000fb2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_TIM6_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 15-1;
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <MX_TIM6_Init+0x64>)
 8000fbc:	220e      	movs	r2, #14
 8000fbe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <MX_TIM6_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000fc6:	480d      	ldr	r0, [pc, #52]	; (8000ffc <MX_TIM6_Init+0x64>)
 8000fc8:	f006 fd8e 	bl	8007ae8 <HAL_TIM_Base_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000fd2:	f000 fb97 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fd6:	2320      	movs	r3, #32
 8000fd8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4806      	ldr	r0, [pc, #24]	; (8000ffc <MX_TIM6_Init+0x64>)
 8000fe4:	f007 f968 	bl	80082b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000fee:	f000 fb89 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000468 	.word	0x20000468
 8001000:	40001000 	.word	0x40001000

08001004 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_TIM14_Init+0x40>)
 800100a:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <MX_TIM14_Init+0x44>)
 800100c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <MX_TIM14_Init+0x40>)
 8001010:	2200      	movs	r2, #0
 8001012:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_TIM14_Init+0x40>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <MX_TIM14_Init+0x40>)
 800101c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001020:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <MX_TIM14_Init+0x40>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_TIM14_Init+0x40>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_TIM14_Init+0x40>)
 8001030:	f006 fd5a 	bl	8007ae8 <HAL_TIM_Base_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800103a:	f000 fb63 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200005ac 	.word	0x200005ac
 8001048:	40002000 	.word	0x40002000

0800104c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_UART4_Init+0x58>)
 8001052:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <MX_UART4_Init+0x5c>)
 8001054:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 31250;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_UART4_Init+0x58>)
 8001058:	f647 2212 	movw	r2, #31250	; 0x7a12
 800105c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_UART4_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_UART4_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_UART4_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_UART4_Init+0x58>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_UART4_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_UART4_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_UART4_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_UART4_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_UART4_Init+0x58>)
 8001090:	f007 f9be 	bl	8008410 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800109a:	f000 fb33 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200004ec 	.word	0x200004ec
 80010a8:	40004c00 	.word	0x40004c00

080010ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_USART3_UART_Init+0x58>)
 80010b2:	4a15      	ldr	r2, [pc, #84]	; (8001108 <MX_USART3_UART_Init+0x5c>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MX_USART3_UART_Init+0x58>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_USART3_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_USART3_UART_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_USART3_UART_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_USART3_UART_Init+0x58>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <MX_USART3_UART_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_USART3_UART_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <MX_USART3_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_USART3_UART_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_USART3_UART_Init+0x58>)
 80010f0:	f007 f98e 	bl	8008410 <HAL_UART_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010fa:	f000 fb03 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000374 	.word	0x20000374
 8001108:	40004800 	.word	0x40004800

0800110c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_DMA_Init+0x58>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a13      	ldr	r2, [pc, #76]	; (8001164 <MX_DMA_Init+0x58>)
 8001118:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_DMA_Init+0x58>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	200d      	movs	r0, #13
 8001130:	f004 fbe7 	bl	8005902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001134:	200d      	movs	r0, #13
 8001136:	f004 fc00 	bl	800593a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	2010      	movs	r0, #16
 8001140:	f004 fbdf 	bl	8005902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001144:	2010      	movs	r0, #16
 8001146:	f004 fbf8 	bl	800593a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	2011      	movs	r0, #17
 8001150:	f004 fbd7 	bl	8005902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001154:	2011      	movs	r0, #17
 8001156:	f004 fbf0 	bl	800593a <HAL_NVIC_EnableIRQ>

}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08e      	sub	sp, #56	; 0x38
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800117e:	4bb3      	ldr	r3, [pc, #716]	; (800144c <MX_GPIO_Init+0x2e4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4ab2      	ldr	r2, [pc, #712]	; (800144c <MX_GPIO_Init+0x2e4>)
 8001184:	f043 0310 	orr.w	r3, r3, #16
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4bb0      	ldr	r3, [pc, #704]	; (800144c <MX_GPIO_Init+0x2e4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	623b      	str	r3, [r7, #32]
 8001194:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	4bad      	ldr	r3, [pc, #692]	; (800144c <MX_GPIO_Init+0x2e4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4aac      	ldr	r2, [pc, #688]	; (800144c <MX_GPIO_Init+0x2e4>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4baa      	ldr	r3, [pc, #680]	; (800144c <MX_GPIO_Init+0x2e4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ae:	4ba7      	ldr	r3, [pc, #668]	; (800144c <MX_GPIO_Init+0x2e4>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4aa6      	ldr	r2, [pc, #664]	; (800144c <MX_GPIO_Init+0x2e4>)
 80011b4:	f043 0320 	orr.w	r3, r3, #32
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4ba4      	ldr	r3, [pc, #656]	; (800144c <MX_GPIO_Init+0x2e4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0320 	and.w	r3, r3, #32
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c6:	4ba1      	ldr	r3, [pc, #644]	; (800144c <MX_GPIO_Init+0x2e4>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4aa0      	ldr	r2, [pc, #640]	; (800144c <MX_GPIO_Init+0x2e4>)
 80011cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b9e      	ldr	r3, [pc, #632]	; (800144c <MX_GPIO_Init+0x2e4>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b9b      	ldr	r3, [pc, #620]	; (800144c <MX_GPIO_Init+0x2e4>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a9a      	ldr	r2, [pc, #616]	; (800144c <MX_GPIO_Init+0x2e4>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b98      	ldr	r3, [pc, #608]	; (800144c <MX_GPIO_Init+0x2e4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	4b95      	ldr	r3, [pc, #596]	; (800144c <MX_GPIO_Init+0x2e4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a94      	ldr	r2, [pc, #592]	; (800144c <MX_GPIO_Init+0x2e4>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b92      	ldr	r3, [pc, #584]	; (800144c <MX_GPIO_Init+0x2e4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800120e:	4b8f      	ldr	r3, [pc, #572]	; (800144c <MX_GPIO_Init+0x2e4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a8e      	ldr	r2, [pc, #568]	; (800144c <MX_GPIO_Init+0x2e4>)
 8001214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b8c      	ldr	r3, [pc, #560]	; (800144c <MX_GPIO_Init+0x2e4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001226:	4b89      	ldr	r3, [pc, #548]	; (800144c <MX_GPIO_Init+0x2e4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a88      	ldr	r2, [pc, #544]	; (800144c <MX_GPIO_Init+0x2e4>)
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b86      	ldr	r3, [pc, #536]	; (800144c <MX_GPIO_Init+0x2e4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800123e:	2200      	movs	r2, #0
 8001240:	f24c 0178 	movw	r1, #49272	; 0xc078
 8001244:	4882      	ldr	r0, [pc, #520]	; (8001450 <MX_GPIO_Init+0x2e8>)
 8001246:	f005 fb41 	bl	80068cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001250:	4880      	ldr	r0, [pc, #512]	; (8001454 <MX_GPIO_Init+0x2ec>)
 8001252:	f005 fb3b 	bl	80068cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	f644 0181 	movw	r1, #18561	; 0x4881
 800125c:	487e      	ldr	r0, [pc, #504]	; (8001458 <MX_GPIO_Init+0x2f0>)
 800125e:	f005 fb35 	bl	80068cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2142      	movs	r1, #66	; 0x42
 8001266:	487d      	ldr	r0, [pc, #500]	; (800145c <MX_GPIO_Init+0x2f4>)
 8001268:	f005 fb30 	bl	80068cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800126c:	f24c 0378 	movw	r3, #49272	; 0xc078
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	4619      	mov	r1, r3
 8001284:	4872      	ldr	r0, [pc, #456]	; (8001450 <MX_GPIO_Init+0x2e8>)
 8001286:	f005 f95f 	bl	8006548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800128a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	4619      	mov	r1, r3
 80012a2:	486c      	ldr	r0, [pc, #432]	; (8001454 <MX_GPIO_Init+0x2ec>)
 80012a4:	f005 f950 	bl	8006548 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012a8:	2332      	movs	r3, #50	; 0x32
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012b8:	230b      	movs	r3, #11
 80012ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c0:	4619      	mov	r1, r3
 80012c2:	4867      	ldr	r0, [pc, #412]	; (8001460 <MX_GPIO_Init+0x2f8>)
 80012c4:	f005 f940 	bl	8006548 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012c8:	2386      	movs	r3, #134	; 0x86
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012d8:	230b      	movs	r3, #11
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e0:	4619      	mov	r1, r3
 80012e2:	4860      	ldr	r0, [pc, #384]	; (8001464 <MX_GPIO_Init+0x2fc>)
 80012e4:	f005 f930 	bl	8006548 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB11 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin;
 80012e8:	f644 0381 	movw	r3, #18561	; 0x4881
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fe:	4619      	mov	r1, r3
 8001300:	4855      	ldr	r0, [pc, #340]	; (8001458 <MX_GPIO_Init+0x2f0>)
 8001302:	f005 f921 	bl	8006548 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_BTN_1_Pin EXT_BTN_4_Pin */
  GPIO_InitStruct.Pin = EXT_BTN_1_Pin|EXT_BTN_4_Pin;
 8001306:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800130c:	4b56      	ldr	r3, [pc, #344]	; (8001468 <MX_GPIO_Init+0x300>)
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001310:	2301      	movs	r3, #1
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001318:	4619      	mov	r1, r3
 800131a:	484e      	ldr	r0, [pc, #312]	; (8001454 <MX_GPIO_Init+0x2ec>)
 800131c:	f005 f914 	bl	8006548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|USB_PowerSwitchOn_Pin;
 8001320:	2342      	movs	r3, #66	; 0x42
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001334:	4619      	mov	r1, r3
 8001336:	4849      	ldr	r0, [pc, #292]	; (800145c <MX_GPIO_Init+0x2f4>)
 8001338:	f005 f906 	bl	8006548 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_BTN_2_Pin EXT_BTN_3_Pin */
  GPIO_InitStruct.Pin = EXT_BTN_2_Pin|EXT_BTN_3_Pin;
 800133c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001342:	4b49      	ldr	r3, [pc, #292]	; (8001468 <MX_GPIO_Init+0x300>)
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001346:	2301      	movs	r3, #1
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	4619      	mov	r1, r3
 8001350:	483f      	ldr	r0, [pc, #252]	; (8001450 <MX_GPIO_Init+0x2e8>)
 8001352:	f005 f8f9 	bl	8006548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135c:	2300      	movs	r3, #0
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001368:	4619      	mov	r1, r3
 800136a:	4839      	ldr	r0, [pc, #228]	; (8001450 <MX_GPIO_Init+0x2e8>)
 800136c:	f005 f8ec 	bl	8006548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001376:	2303      	movs	r3, #3
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001382:	4619      	mov	r1, r3
 8001384:	4834      	ldr	r0, [pc, #208]	; (8001458 <MX_GPIO_Init+0x2f0>)
 8001386:	f005 f8df 	bl	8006548 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800138a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800139c:	230b      	movs	r3, #11
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a4:	4619      	mov	r1, r3
 80013a6:	482c      	ldr	r0, [pc, #176]	; (8001458 <MX_GPIO_Init+0x2f0>)
 80013a8:	f005 f8ce 	bl	8006548 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013bc:	4619      	mov	r1, r3
 80013be:	4827      	ldr	r0, [pc, #156]	; (800145c <MX_GPIO_Init+0x2f4>)
 80013c0:	f005 f8c2 	bl	8006548 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013c4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013d6:	230a      	movs	r3, #10
 80013d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	4619      	mov	r1, r3
 80013e0:	4820      	ldr	r0, [pc, #128]	; (8001464 <MX_GPIO_Init+0x2fc>)
 80013e2:	f005 f8b1 	bl	8006548 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f8:	4619      	mov	r1, r3
 80013fa:	481a      	ldr	r0, [pc, #104]	; (8001464 <MX_GPIO_Init+0x2fc>)
 80013fc:	f005 f8a4 	bl	8006548 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001400:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001412:	230b      	movs	r3, #11
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141a:	4619      	mov	r1, r3
 800141c:	480f      	ldr	r0, [pc, #60]	; (800145c <MX_GPIO_Init+0x2f4>)
 800141e:	f005 f893 	bl	8006548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2017      	movs	r0, #23
 8001428:	f004 fa6b 	bl	8005902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800142c:	2017      	movs	r0, #23
 800142e:	f004 fa84 	bl	800593a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2028      	movs	r0, #40	; 0x28
 8001438:	f004 fa63 	bl	8005902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800143c:	2028      	movs	r0, #40	; 0x28
 800143e:	f004 fa7c 	bl	800593a <HAL_NVIC_EnableIRQ>

}
 8001442:	bf00      	nop
 8001444:	3738      	adds	r7, #56	; 0x38
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40021000 	.word	0x40021000
 8001454:	40021400 	.word	0x40021400
 8001458:	40020400 	.word	0x40020400
 800145c:	40021800 	.word	0x40021800
 8001460:	40020800 	.word	0x40020800
 8001464:	40020000 	.word	0x40020000
 8001468:	10210000 	.word	0x10210000

0800146c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// Callback para GPIOs
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXT_BTN_1_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800147c:	d102      	bne.n	8001484 <HAL_GPIO_EXTI_Callback+0x18>
 800147e:	480e      	ldr	r0, [pc, #56]	; (80014b8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001480:	f006 fbb4 	bl	8007bec <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_2_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800148a:	d102      	bne.n	8001492 <HAL_GPIO_EXTI_Callback+0x26>
 800148c:	480a      	ldr	r0, [pc, #40]	; (80014b8 <HAL_GPIO_EXTI_Callback+0x4c>)
 800148e:	f006 fbad 	bl	8007bec <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_3_Pin) HAL_TIM_Base_Start_IT(&htim2);
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001498:	d102      	bne.n	80014a0 <HAL_GPIO_EXTI_Callback+0x34>
 800149a:	4807      	ldr	r0, [pc, #28]	; (80014b8 <HAL_GPIO_EXTI_Callback+0x4c>)
 800149c:	f006 fba6 	bl	8007bec <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == EXT_BTN_4_Pin) HAL_TIM_Base_Start_IT(&htim2);
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014a6:	d102      	bne.n	80014ae <HAL_GPIO_EXTI_Callback+0x42>
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80014aa:	f006 fb9f 	bl	8007bec <HAL_TIM_Base_Start_IT>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000056c 	.word	0x2000056c

080014bc <HAL_TIM_PeriodElapsedCallback>:
// Callback para Timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(htim == &htim2){
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d137      	bne.n	800153c <HAL_TIM_PeriodElapsedCallback+0x80>
	  // Ya pasaron 40ms y sigue en 0, es real esto.
	  if(!HAL_GPIO_ReadPin(EXT_BTN_1_GPIO_Port, EXT_BTN_1_Pin)){
 80014cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d0:	481d      	ldr	r0, [pc, #116]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80014d2:	f005 f9e3 	bl	800689c <HAL_GPIO_ReadPin>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d105      	bne.n	80014e8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		  EXT_BTN_1_state = false;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 80014e2:	4818      	ldr	r0, [pc, #96]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80014e4:	f006 fb56 	bl	8007b94 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_2_GPIO_Port, EXT_BTN_2_Pin)){
 80014e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ec:	4818      	ldr	r0, [pc, #96]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80014ee:	f005 f9d5 	bl	800689c <HAL_GPIO_ReadPin>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d105      	bne.n	8001504 <HAL_TIM_PeriodElapsedCallback+0x48>
		  EXT_BTN_2_state = false;
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 80014fe:	4811      	ldr	r0, [pc, #68]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001500:	f006 fb48 	bl	8007b94 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_3_GPIO_Port, EXT_BTN_3_Pin)){
 8001504:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001508:	4811      	ldr	r0, [pc, #68]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800150a:	f005 f9c7 	bl	800689c <HAL_GPIO_ReadPin>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <HAL_TIM_PeriodElapsedCallback+0x64>
		  EXT_BTN_3_state = false;
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 800151a:	480a      	ldr	r0, [pc, #40]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800151c:	f006 fb3a 	bl	8007b94 <HAL_TIM_Base_Stop>
	  }
	  if(!HAL_GPIO_ReadPin(EXT_BTN_4_GPIO_Port, EXT_BTN_4_Pin)){
 8001520:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001524:	4808      	ldr	r0, [pc, #32]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001526:	f005 f9b9 	bl	800689c <HAL_GPIO_ReadPin>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d105      	bne.n	800153c <HAL_TIM_PeriodElapsedCallback+0x80>
		  EXT_BTN_4_state = false;
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);
 8001536:	4803      	ldr	r0, [pc, #12]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001538:	f006 fb2c 	bl	8007b94 <HAL_TIM_Base_Stop>
	  }
  }
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000056c 	.word	0x2000056c
 8001548:	40021400 	.word	0x40021400
 800154c:	20000025 	.word	0x20000025
 8001550:	40021000 	.word	0x40021000
 8001554:	20000026 	.word	0x20000026
 8001558:	20000027 	.word	0x20000027
 800155c:	20000028 	.word	0x20000028

08001560 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af02      	add	r7, sp, #8
 8001566:	6078      	str	r0, [r7, #4]
	note_received_flag = false;
 8001568:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <HAL_UART_RxCpltCallback+0x170>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < RX_BUFFER_SIZE; i++){
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	e0a5      	b.n	80016c0 <HAL_UART_RxCpltCallback+0x160>
		if(rx_buffer[i] >= C4 && rx_buffer[i] <= B5){
 8001574:	4a57      	ldr	r2, [pc, #348]	; (80016d4 <HAL_UART_RxCpltCallback+0x174>)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4413      	add	r3, r2
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b3b      	cmp	r3, #59	; 0x3b
 800157e:	f240 809b 	bls.w	80016b8 <HAL_UART_RxCpltCallback+0x158>
 8001582:	4a54      	ldr	r2, [pc, #336]	; (80016d4 <HAL_UART_RxCpltCallback+0x174>)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b53      	cmp	r3, #83	; 0x53
 800158c:	f200 8094 	bhi.w	80016b8 <HAL_UART_RxCpltCallback+0x158>
			note_buffer[current_note_buffer] = rx_buffer[i];
 8001590:	4b51      	ldr	r3, [pc, #324]	; (80016d8 <HAL_UART_RxCpltCallback+0x178>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	4a4f      	ldr	r2, [pc, #316]	; (80016d4 <HAL_UART_RxCpltCallback+0x174>)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	4b4f      	ldr	r3, [pc, #316]	; (80016dc <HAL_UART_RxCpltCallback+0x17c>)
 80015a0:	545a      	strb	r2, [r3, r1]
			current_note_buffer++;
 80015a2:	4b4d      	ldr	r3, [pc, #308]	; (80016d8 <HAL_UART_RxCpltCallback+0x178>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	3301      	adds	r3, #1
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b4b      	ldr	r3, [pc, #300]	; (80016d8 <HAL_UART_RxCpltCallback+0x178>)
 80015ac:	701a      	strb	r2, [r3, #0]
			received_note_buffer = rx_buffer[i];
 80015ae:	4a49      	ldr	r2, [pc, #292]	; (80016d4 <HAL_UART_RxCpltCallback+0x174>)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	781a      	ldrb	r2, [r3, #0]
 80015b6:	4b4a      	ldr	r3, [pc, #296]	; (80016e0 <HAL_UART_RxCpltCallback+0x180>)
 80015b8:	701a      	strb	r2, [r3, #0]
			note_received_flag = true;
 80015ba:	4b45      	ldr	r3, [pc, #276]	; (80016d0 <HAL_UART_RxCpltCallback+0x170>)
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
			if(current_note_buffer >= NOTE_BUFFER_SIZE){
 80015c0:	4b45      	ldr	r3, [pc, #276]	; (80016d8 <HAL_UART_RxCpltCallback+0x178>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <HAL_UART_RxCpltCallback+0x6e>
				current_note_buffer = 0;
 80015c8:	4b43      	ldr	r3, [pc, #268]	; (80016d8 <HAL_UART_RxCpltCallback+0x178>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
			}
			HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80015ce:	2100      	movs	r1, #0
 80015d0:	4844      	ldr	r0, [pc, #272]	; (80016e4 <HAL_UART_RxCpltCallback+0x184>)
 80015d2:	f004 fa9d 	bl	8005b10 <HAL_DAC_Stop_DMA>
			HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_2);
 80015d6:	2110      	movs	r1, #16
 80015d8:	4842      	ldr	r0, [pc, #264]	; (80016e4 <HAL_UART_RxCpltCallback+0x184>)
 80015da:	f004 fa99 	bl	8005b10 <HAL_DAC_Stop_DMA>
			htim6.Init.Prescaler = PSC_LUT[received_note_buffer - 60] - 1;
 80015de:	4b40      	ldr	r3, [pc, #256]	; (80016e0 <HAL_UART_RxCpltCallback+0x180>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	3b3c      	subs	r3, #60	; 0x3c
 80015e4:	4a40      	ldr	r2, [pc, #256]	; (80016e8 <HAL_UART_RxCpltCallback+0x188>)
 80015e6:	5cd3      	ldrb	r3, [r2, r3]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <HAL_UART_RxCpltCallback+0x18c>)
 80015ee:	605a      	str	r2, [r3, #4]
			htim6.Init.Period = ARR_LUT[received_note_buffer - 60] - 1;
 80015f0:	4b3b      	ldr	r3, [pc, #236]	; (80016e0 <HAL_UART_RxCpltCallback+0x180>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	3b3c      	subs	r3, #60	; 0x3c
 80015f6:	4a3e      	ldr	r2, [pc, #248]	; (80016f0 <HAL_UART_RxCpltCallback+0x190>)
 80015f8:	5cd3      	ldrb	r3, [r2, r3]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <HAL_UART_RxCpltCallback+0x18c>)
 8001600:	60da      	str	r2, [r3, #12]
			HAL_TIM_Base_Init(&htim6);
 8001602:	483a      	ldr	r0, [pc, #232]	; (80016ec <HAL_UART_RxCpltCallback+0x18c>)
 8001604:	f006 fa70 	bl	8007ae8 <HAL_TIM_Base_Init>
			  switch(wave_selection){
 8001608:	4b3a      	ldr	r3, [pc, #232]	; (80016f4 <HAL_UART_RxCpltCallback+0x194>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	3b01      	subs	r3, #1
 800160e:	2b03      	cmp	r3, #3
 8001610:	d84e      	bhi.n	80016b0 <HAL_UART_RxCpltCallback+0x150>
 8001612:	a201      	add	r2, pc, #4	; (adr r2, 8001618 <HAL_UART_RxCpltCallback+0xb8>)
 8001614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001618:	08001629 	.word	0x08001629
 800161c:	0800164b 	.word	0x0800164b
 8001620:	0800166d 	.word	0x0800166d
 8001624:	0800168f 	.word	0x0800168f
				  case 1:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_LUT, NS, DAC_ALIGN_12B_R);
 8001628:	2300      	movs	r3, #0
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2364      	movs	r3, #100	; 0x64
 800162e:	4a32      	ldr	r2, [pc, #200]	; (80016f8 <HAL_UART_RxCpltCallback+0x198>)
 8001630:	2100      	movs	r1, #0
 8001632:	482c      	ldr	r0, [pc, #176]	; (80016e4 <HAL_UART_RxCpltCallback+0x184>)
 8001634:	f004 f9be 	bl	80059b4 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sine_LUT, NS, DAC_ALIGN_12B_R);
 8001638:	2300      	movs	r3, #0
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2364      	movs	r3, #100	; 0x64
 800163e:	4a2e      	ldr	r2, [pc, #184]	; (80016f8 <HAL_UART_RxCpltCallback+0x198>)
 8001640:	2110      	movs	r1, #16
 8001642:	4828      	ldr	r0, [pc, #160]	; (80016e4 <HAL_UART_RxCpltCallback+0x184>)
 8001644:	f004 f9b6 	bl	80059b4 <HAL_DAC_Start_DMA>
					  break;
 8001648:	e037      	b.n	80016ba <HAL_UART_RxCpltCallback+0x15a>
				  case 2:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, triangle_LUT, NS, DAC_ALIGN_12B_R);
 800164a:	2300      	movs	r3, #0
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2364      	movs	r3, #100	; 0x64
 8001650:	4a2a      	ldr	r2, [pc, #168]	; (80016fc <HAL_UART_RxCpltCallback+0x19c>)
 8001652:	2100      	movs	r1, #0
 8001654:	4823      	ldr	r0, [pc, #140]	; (80016e4 <HAL_UART_RxCpltCallback+0x184>)
 8001656:	f004 f9ad 	bl	80059b4 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, triangle_LUT, NS, DAC_ALIGN_12B_R);
 800165a:	2300      	movs	r3, #0
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2364      	movs	r3, #100	; 0x64
 8001660:	4a26      	ldr	r2, [pc, #152]	; (80016fc <HAL_UART_RxCpltCallback+0x19c>)
 8001662:	2110      	movs	r1, #16
 8001664:	481f      	ldr	r0, [pc, #124]	; (80016e4 <HAL_UART_RxCpltCallback+0x184>)
 8001666:	f004 f9a5 	bl	80059b4 <HAL_DAC_Start_DMA>
					  break;
 800166a:	e026      	b.n	80016ba <HAL_UART_RxCpltCallback+0x15a>
				  case 3:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sawtooth_LUT, NS, DAC_ALIGN_12B_R);
 800166c:	2300      	movs	r3, #0
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2364      	movs	r3, #100	; 0x64
 8001672:	4a23      	ldr	r2, [pc, #140]	; (8001700 <HAL_UART_RxCpltCallback+0x1a0>)
 8001674:	2100      	movs	r1, #0
 8001676:	481b      	ldr	r0, [pc, #108]	; (80016e4 <HAL_UART_RxCpltCallback+0x184>)
 8001678:	f004 f99c 	bl	80059b4 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sawtooth_LUT, NS, DAC_ALIGN_12B_R);
 800167c:	2300      	movs	r3, #0
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2364      	movs	r3, #100	; 0x64
 8001682:	4a1f      	ldr	r2, [pc, #124]	; (8001700 <HAL_UART_RxCpltCallback+0x1a0>)
 8001684:	2110      	movs	r1, #16
 8001686:	4817      	ldr	r0, [pc, #92]	; (80016e4 <HAL_UART_RxCpltCallback+0x184>)
 8001688:	f004 f994 	bl	80059b4 <HAL_DAC_Start_DMA>
					  break;
 800168c:	e015      	b.n	80016ba <HAL_UART_RxCpltCallback+0x15a>
				  case 4:
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sawtooth_LUT, NS, DAC_ALIGN_12B_R);
 800168e:	2300      	movs	r3, #0
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2364      	movs	r3, #100	; 0x64
 8001694:	4a1a      	ldr	r2, [pc, #104]	; (8001700 <HAL_UART_RxCpltCallback+0x1a0>)
 8001696:	2100      	movs	r1, #0
 8001698:	4812      	ldr	r0, [pc, #72]	; (80016e4 <HAL_UART_RxCpltCallback+0x184>)
 800169a:	f004 f98b 	bl	80059b4 <HAL_DAC_Start_DMA>
					  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sawtooth_LUT, NS, DAC_ALIGN_12B_R);
 800169e:	2300      	movs	r3, #0
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2364      	movs	r3, #100	; 0x64
 80016a4:	4a16      	ldr	r2, [pc, #88]	; (8001700 <HAL_UART_RxCpltCallback+0x1a0>)
 80016a6:	2110      	movs	r1, #16
 80016a8:	480e      	ldr	r0, [pc, #56]	; (80016e4 <HAL_UART_RxCpltCallback+0x184>)
 80016aa:	f004 f983 	bl	80059b4 <HAL_DAC_Start_DMA>
					  break;
 80016ae:	e004      	b.n	80016ba <HAL_UART_RxCpltCallback+0x15a>
				  default:
					  wave_selection = 1;
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_UART_RxCpltCallback+0x194>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
					  break;
 80016b6:	e000      	b.n	80016ba <HAL_UART_RxCpltCallback+0x15a>
			  }
		}
 80016b8:	bf00      	nop
	for(int i = 0; i < RX_BUFFER_SIZE; i++){
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3301      	adds	r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f77f af56 	ble.w	8001574 <HAL_UART_RxCpltCallback+0x14>
	}
}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000307 	.word	0x20000307
 80016d4:	20000300 	.word	0x20000300
 80016d8:	20000305 	.word	0x20000305
 80016dc:	20000304 	.word	0x20000304
 80016e0:	20000306 	.word	0x20000306
 80016e4:	20000454 	.word	0x20000454
 80016e8:	20000284 	.word	0x20000284
 80016ec:	20000468 	.word	0x20000468
 80016f0:	200002a8 	.word	0x200002a8
 80016f4:	20000000 	.word	0x20000000
 80016f8:	2000002c 	.word	0x2000002c
 80016fc:	200001bc 	.word	0x200001bc
 8001700:	200000f4 	.word	0x200000f4

08001704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_MspInit+0x44>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <HAL_MspInit+0x44>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_MspInit+0x44>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_MspInit+0x44>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a08      	ldr	r2, [pc, #32]	; (8001758 <HAL_MspInit+0x44>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_MspInit+0x44>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a47      	ldr	r2, [pc, #284]	; (8001898 <HAL_DAC_MspInit+0x13c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	f040 8088 	bne.w	8001890 <HAL_DAC_MspInit+0x134>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001780:	4b46      	ldr	r3, [pc, #280]	; (800189c <HAL_DAC_MspInit+0x140>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	4a45      	ldr	r2, [pc, #276]	; (800189c <HAL_DAC_MspInit+0x140>)
 8001786:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800178a:	6413      	str	r3, [r2, #64]	; 0x40
 800178c:	4b43      	ldr	r3, [pc, #268]	; (800189c <HAL_DAC_MspInit+0x140>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	4b40      	ldr	r3, [pc, #256]	; (800189c <HAL_DAC_MspInit+0x140>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	4a3f      	ldr	r2, [pc, #252]	; (800189c <HAL_DAC_MspInit+0x140>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6313      	str	r3, [r2, #48]	; 0x30
 80017a4:	4b3d      	ldr	r3, [pc, #244]	; (800189c <HAL_DAC_MspInit+0x140>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017b0:	2330      	movs	r3, #48	; 0x30
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b4:	2303      	movs	r3, #3
 80017b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4837      	ldr	r0, [pc, #220]	; (80018a0 <HAL_DAC_MspInit+0x144>)
 80017c4:	f004 fec0 	bl	8006548 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80017c8:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <HAL_DAC_MspInit+0x148>)
 80017ca:	4a37      	ldr	r2, [pc, #220]	; (80018a8 <HAL_DAC_MspInit+0x14c>)
 80017cc:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80017ce:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <HAL_DAC_MspInit+0x148>)
 80017d0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80017d4:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017d6:	4b33      	ldr	r3, [pc, #204]	; (80018a4 <HAL_DAC_MspInit+0x148>)
 80017d8:	2240      	movs	r2, #64	; 0x40
 80017da:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017dc:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <HAL_DAC_MspInit+0x148>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80017e2:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <HAL_DAC_MspInit+0x148>)
 80017e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e8:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017ea:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <HAL_DAC_MspInit+0x148>)
 80017ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017f0:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017f2:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <HAL_DAC_MspInit+0x148>)
 80017f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017f8:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80017fa:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <HAL_DAC_MspInit+0x148>)
 80017fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001800:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8001802:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <HAL_DAC_MspInit+0x148>)
 8001804:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001808:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800180a:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <HAL_DAC_MspInit+0x148>)
 800180c:	2200      	movs	r2, #0
 800180e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001810:	4824      	ldr	r0, [pc, #144]	; (80018a4 <HAL_DAC_MspInit+0x148>)
 8001812:	f004 fab3 	bl	8005d7c <HAL_DMA_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_DAC_MspInit+0xc4>
    {
      Error_Handler();
 800181c:	f7ff ff72 	bl	8001704 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a20      	ldr	r2, [pc, #128]	; (80018a4 <HAL_DAC_MspInit+0x148>)
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	4a1f      	ldr	r2, [pc, #124]	; (80018a4 <HAL_DAC_MspInit+0x148>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 800182c:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <HAL_DAC_MspInit+0x150>)
 800182e:	4a20      	ldr	r2, [pc, #128]	; (80018b0 <HAL_DAC_MspInit+0x154>)
 8001830:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8001832:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <HAL_DAC_MspInit+0x150>)
 8001834:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001838:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <HAL_DAC_MspInit+0x150>)
 800183c:	2240      	movs	r2, #64	; 0x40
 800183e:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <HAL_DAC_MspInit+0x150>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_DAC_MspInit+0x150>)
 8001848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184c:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <HAL_DAC_MspInit+0x150>)
 8001850:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001854:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_DAC_MspInit+0x150>)
 8001858:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800185c:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <HAL_DAC_MspInit+0x150>)
 8001860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001864:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_HIGH;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_DAC_MspInit+0x150>)
 8001868:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800186c:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_DAC_MspInit+0x150>)
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8001874:	480d      	ldr	r0, [pc, #52]	; (80018ac <HAL_DAC_MspInit+0x150>)
 8001876:	f004 fa81 	bl	8005d7c <HAL_DMA_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_DAC_MspInit+0x128>
    {
      Error_Handler();
 8001880:	f7ff ff40 	bl	8001704 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a09      	ldr	r2, [pc, #36]	; (80018ac <HAL_DAC_MspInit+0x150>)
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_DAC_MspInit+0x150>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3728      	adds	r7, #40	; 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40007400 	.word	0x40007400
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	200003f4 	.word	0x200003f4
 80018a8:	40026088 	.word	0x40026088
 80018ac:	200005ec 	.word	0x200005ec
 80018b0:	400260a0 	.word	0x400260a0

080018b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a28      	ldr	r2, [pc, #160]	; (8001964 <HAL_TIM_Base_MspInit+0xb0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10c      	bne.n	80018e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018c6:	4b28      	ldr	r3, [pc, #160]	; (8001968 <HAL_TIM_Base_MspInit+0xb4>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	4a27      	ldr	r2, [pc, #156]	; (8001968 <HAL_TIM_Base_MspInit+0xb4>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	4b25      	ldr	r3, [pc, #148]	; (8001968 <HAL_TIM_Base_MspInit+0xb4>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80018de:	e03c      	b.n	800195a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e8:	d114      	bne.n	8001914 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <HAL_TIM_Base_MspInit+0xb4>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <HAL_TIM_Base_MspInit+0xb4>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <HAL_TIM_Base_MspInit+0xb4>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	201c      	movs	r0, #28
 8001908:	f003 fffb 	bl	8005902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800190c:	201c      	movs	r0, #28
 800190e:	f004 f814 	bl	800593a <HAL_NVIC_EnableIRQ>
}
 8001912:	e022      	b.n	800195a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <HAL_TIM_Base_MspInit+0xb8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d10c      	bne.n	8001938 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_TIM_Base_MspInit+0xb4>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a11      	ldr	r2, [pc, #68]	; (8001968 <HAL_TIM_Base_MspInit+0xb4>)
 8001924:	f043 0310 	orr.w	r3, r3, #16
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_TIM_Base_MspInit+0xb4>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
}
 8001936:	e010      	b.n	800195a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <HAL_TIM_Base_MspInit+0xbc>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d10b      	bne.n	800195a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_TIM_Base_MspInit+0xb4>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_TIM_Base_MspInit+0xb4>)
 8001948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_TIM_Base_MspInit+0xb4>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40010000 	.word	0x40010000
 8001968:	40023800 	.word	0x40023800
 800196c:	40001000 	.word	0x40001000
 8001970:	40002000 	.word	0x40002000

08001974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08c      	sub	sp, #48	; 0x30
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a55      	ldr	r2, [pc, #340]	; (8001ae8 <HAL_UART_MspInit+0x174>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d175      	bne.n	8001a82 <HAL_UART_MspInit+0x10e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001996:	4b55      	ldr	r3, [pc, #340]	; (8001aec <HAL_UART_MspInit+0x178>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a54      	ldr	r2, [pc, #336]	; (8001aec <HAL_UART_MspInit+0x178>)
 800199c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b52      	ldr	r3, [pc, #328]	; (8001aec <HAL_UART_MspInit+0x178>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b4f      	ldr	r3, [pc, #316]	; (8001aec <HAL_UART_MspInit+0x178>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a4e      	ldr	r2, [pc, #312]	; (8001aec <HAL_UART_MspInit+0x178>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b4c      	ldr	r3, [pc, #304]	; (8001aec <HAL_UART_MspInit+0x178>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c6:	4b49      	ldr	r3, [pc, #292]	; (8001aec <HAL_UART_MspInit+0x178>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a48      	ldr	r2, [pc, #288]	; (8001aec <HAL_UART_MspInit+0x178>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b46      	ldr	r3, [pc, #280]	; (8001aec <HAL_UART_MspInit+0x178>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019de:	2301      	movs	r3, #1
 80019e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019ee:	2308      	movs	r3, #8
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	483d      	ldr	r0, [pc, #244]	; (8001af0 <HAL_UART_MspInit+0x17c>)
 80019fa:	f004 fda5 	bl	8006548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a10:	2308      	movs	r3, #8
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4836      	ldr	r0, [pc, #216]	; (8001af4 <HAL_UART_MspInit+0x180>)
 8001a1c:	f004 fd94 	bl	8006548 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001a20:	4b35      	ldr	r3, [pc, #212]	; (8001af8 <HAL_UART_MspInit+0x184>)
 8001a22:	4a36      	ldr	r2, [pc, #216]	; (8001afc <HAL_UART_MspInit+0x188>)
 8001a24:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001a26:	4b34      	ldr	r3, [pc, #208]	; (8001af8 <HAL_UART_MspInit+0x184>)
 8001a28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a2c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a2e:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <HAL_UART_MspInit+0x184>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a34:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <HAL_UART_MspInit+0x184>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <HAL_UART_MspInit+0x184>)
 8001a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a40:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_UART_MspInit+0x184>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a48:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <HAL_UART_MspInit+0x184>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_UART_MspInit+0x184>)
 8001a50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a54:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a56:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <HAL_UART_MspInit+0x184>)
 8001a58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a5c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_UART_MspInit+0x184>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001a64:	4824      	ldr	r0, [pc, #144]	; (8001af8 <HAL_UART_MspInit+0x184>)
 8001a66:	f004 f989 	bl	8005d7c <HAL_DMA_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001a70:	f7ff fe48 	bl	8001704 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a20      	ldr	r2, [pc, #128]	; (8001af8 <HAL_UART_MspInit+0x184>)
 8001a78:	66da      	str	r2, [r3, #108]	; 0x6c
 8001a7a:	4a1f      	ldr	r2, [pc, #124]	; (8001af8 <HAL_UART_MspInit+0x184>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a80:	e02d      	b.n	8001ade <HAL_UART_MspInit+0x16a>
  else if(huart->Instance==USART3)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <HAL_UART_MspInit+0x18c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d128      	bne.n	8001ade <HAL_UART_MspInit+0x16a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a8c:	4b17      	ldr	r3, [pc, #92]	; (8001aec <HAL_UART_MspInit+0x178>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	4a16      	ldr	r2, [pc, #88]	; (8001aec <HAL_UART_MspInit+0x178>)
 8001a92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a96:	6413      	str	r3, [r2, #64]	; 0x40
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <HAL_UART_MspInit+0x178>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_UART_MspInit+0x178>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	4a10      	ldr	r2, [pc, #64]	; (8001aec <HAL_UART_MspInit+0x178>)
 8001aaa:	f043 0308 	orr.w	r3, r3, #8
 8001aae:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_UART_MspInit+0x178>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001abc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ace:	2307      	movs	r3, #7
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480a      	ldr	r0, [pc, #40]	; (8001b04 <HAL_UART_MspInit+0x190>)
 8001ada:	f004 fd35 	bl	8006548 <HAL_GPIO_Init>
}
 8001ade:	bf00      	nop
 8001ae0:	3730      	adds	r7, #48	; 0x30
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40004c00 	.word	0x40004c00
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000
 8001af4:	40020800 	.word	0x40020800
 8001af8:	20000314 	.word	0x20000314
 8001afc:	40026040 	.word	0x40026040
 8001b00:	40004800 	.word	0x40004800
 8001b04:	40020c00 	.word	0x40020c00

08001b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1a:	e7fe      	b.n	8001b1a <HardFault_Handler+0x4>

08001b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <MemManage_Handler+0x4>

08001b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <BusFault_Handler+0x4>

08001b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <UsageFault_Handler+0x4>

08001b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5c:	f003 fdb4 	bl	80056c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <DMA1_Stream2_IRQHandler+0x10>)
 8001b6a:	f004 fa85 	bl	8006078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000314 	.word	0x20000314

08001b78 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <DMA1_Stream5_IRQHandler+0x10>)
 8001b7e:	f004 fa7b 	bl	8006078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200003f4 	.word	0x200003f4

08001b8c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <DMA1_Stream6_IRQHandler+0x10>)
 8001b92:	f004 fa71 	bl	8006078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200005ec 	.word	0x200005ec

08001ba0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001ba4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ba8:	f004 feaa 	bl	8006900 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <TIM2_IRQHandler+0x10>)
 8001bb6:	f006 f843 	bl	8007c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000056c 	.word	0x2000056c

08001bc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001bc8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001bcc:	f004 fe98 	bl	8006900 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001bd0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bd4:	f004 fe94 	bl	8006900 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001bd8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001bdc:	f004 fe90 	bl	8006900 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <SystemInit+0x28>)
 8001bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bee:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <SystemInit+0x28>)
 8001bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <SystemInit+0x28>)
 8001bfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bfe:	609a      	str	r2, [r3, #8]
#endif
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <delay+0x2c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8001c20:	bf00      	nop
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <delay+0x2c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d8f9      	bhi.n	8001c22 <delay+0x12>
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	200004a8 	.word	0x200004a8

08001c40 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001c4c:	887b      	ldrh	r3, [r7, #2]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4619      	mov	r1, r3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f004 fe3a 	bl	80068cc <HAL_GPIO_WritePin>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4619      	mov	r1, r3
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f004 fe2a 	bl	80068cc <HAL_GPIO_WritePin>
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f004 fc52 	bl	8006548 <HAL_GPIO_Init>
}
 8001ca4:	bf00      	nop
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001cb8:	887b      	ldrh	r3, [r7, #2]
 8001cba:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f004 fc3a 	bl	8006548 <HAL_GPIO_Init>
}
 8001cd4:	bf00      	nop
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <width+0x14>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	200002d0 	.word	0x200002d0

08001cf4 <height>:

uint16_t height(void)
{ return _height; }
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <height+0x14>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	200002d2 	.word	0x200002d2

08001d0c <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8001d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	b21a      	sxth	r2, r3
 8001d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	b29b      	uxth	r3, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 8001d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d5e:	b21a      	sxth	r2, r3
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	115b      	asrs	r3, r3, #5
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	b21a      	sxth	r2, r3
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	105b      	asrs	r3, r3, #1
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b21b      	sxth	r3, r3
 8001d80:	b29b      	uxth	r3, r3
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	121b      	asrs	r3, r3, #8
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	f023 0307 	bic.w	r3, r3, #7
 8001da2:	b2db      	uxtb	r3, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	10db      	asrs	r3, r3, #3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f023 0303 	bic.w	r3, r3, #3
 8001dc4:	b2db      	uxtb	r3, r3
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	b2db      	uxtb	r3, r3
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	71bb      	strb	r3, [r7, #6]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	717b      	strb	r3, [r7, #5]
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <color565+0x48>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	b21a      	sxth	r2, r3
 8001e0e:	79bb      	ldrb	r3, [r7, #6]
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	b21a      	sxth	r2, r3
 8001e1e:	797b      	ldrb	r3, [r7, #5]
 8001e20:	08db      	lsrs	r3, r3, #3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	4313      	orrs	r3, r2
 8001e28:	b21b      	sxth	r3, r3
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	fffff800 	.word	0xfffff800

08001e3c <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	4603      	mov	r3, r0
 8001e44:	460a      	mov	r2, r1
 8001e46:	80fb      	strh	r3, [r7, #6]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	80bb      	strh	r3, [r7, #4]
 8001e4c:	f107 020e 	add.w	r2, r7, #14
 8001e50:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e54:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	f001 fbef 	bl	8003640 <readGRAM>
 8001e62:	89fb      	ldrh	r3, [r7, #14]
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	460a      	mov	r2, r1
 8001e76:	80fb      	strh	r3, [r7, #6]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	80bb      	strh	r3, [r7, #4]
 8001e7c:	88ba      	ldrh	r2, [r7, #4]
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 f964 	bl	8002150 <writecmddata>
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	80fb      	strh	r3, [r7, #6]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	717b      	strb	r3, [r7, #5]
 8001ea0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fa9d 	bl	80023e8 <WriteCmdParamN>
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <setReadDir>:


//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	4811      	ldr	r0, [pc, #68]	; (8001f04 <setReadDir+0x4c>)
 8001ec0:	f7ff fede 	bl	8001c80 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8001ec4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ec8:	480f      	ldr	r0, [pc, #60]	; (8001f08 <setReadDir+0x50>)
 8001eca:	f7ff fed9 	bl	8001c80 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8001ece:	2180      	movs	r1, #128	; 0x80
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <setReadDir+0x50>)
 8001ed2:	f7ff fed5 	bl	8001c80 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8001ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eda:	480b      	ldr	r0, [pc, #44]	; (8001f08 <setReadDir+0x50>)
 8001edc:	f7ff fed0 	bl	8001c80 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8001ee0:	2108      	movs	r1, #8
 8001ee2:	480a      	ldr	r0, [pc, #40]	; (8001f0c <setReadDir+0x54>)
 8001ee4:	f7ff fecc 	bl	8001c80 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8001ee8:	2140      	movs	r1, #64	; 0x40
 8001eea:	4808      	ldr	r0, [pc, #32]	; (8001f0c <setReadDir+0x54>)
 8001eec:	f7ff fec8 	bl	8001c80 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8001ef0:	2120      	movs	r1, #32
 8001ef2:	4806      	ldr	r0, [pc, #24]	; (8001f0c <setReadDir+0x54>)
 8001ef4:	f7ff fec4 	bl	8001c80 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8001ef8:	2110      	movs	r1, #16
 8001efa:	4804      	ldr	r0, [pc, #16]	; (8001f0c <setReadDir+0x54>)
 8001efc:	f7ff fec0 	bl	8001c80 <PIN_INPUT>
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021800 	.word	0x40021800
 8001f08:	40021400 	.word	0x40021400
 8001f0c:	40021000 	.word	0x40021000

08001f10 <setWriteDir>:

void setWriteDir (void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8001f14:	2102      	movs	r1, #2
 8001f16:	4811      	ldr	r0, [pc, #68]	; (8001f5c <setWriteDir+0x4c>)
 8001f18:	f7ff fec8 	bl	8001cac <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8001f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f20:	480f      	ldr	r0, [pc, #60]	; (8001f60 <setWriteDir+0x50>)
 8001f22:	f7ff fec3 	bl	8001cac <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8001f26:	2180      	movs	r1, #128	; 0x80
 8001f28:	480d      	ldr	r0, [pc, #52]	; (8001f60 <setWriteDir+0x50>)
 8001f2a:	f7ff febf 	bl	8001cac <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8001f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f32:	480b      	ldr	r0, [pc, #44]	; (8001f60 <setWriteDir+0x50>)
 8001f34:	f7ff feba 	bl	8001cac <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8001f38:	2108      	movs	r1, #8
 8001f3a:	480a      	ldr	r0, [pc, #40]	; (8001f64 <setWriteDir+0x54>)
 8001f3c:	f7ff feb6 	bl	8001cac <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8001f40:	2140      	movs	r1, #64	; 0x40
 8001f42:	4808      	ldr	r0, [pc, #32]	; (8001f64 <setWriteDir+0x54>)
 8001f44:	f7ff feb2 	bl	8001cac <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8001f48:	2120      	movs	r1, #32
 8001f4a:	4806      	ldr	r0, [pc, #24]	; (8001f64 <setWriteDir+0x54>)
 8001f4c:	f7ff feae 	bl	8001cac <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8001f50:	2110      	movs	r1, #16
 8001f52:	4804      	ldr	r0, [pc, #16]	; (8001f64 <setWriteDir+0x54>)
 8001f54:	f7ff feaa 	bl	8001cac <PIN_OUTPUT>
}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021800 	.word	0x40021800
 8001f60:	40021400 	.word	0x40021400
 8001f64:	40021000 	.word	0x40021000

08001f68 <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff0a 	bl	8001d8e <color565_to_r>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff15 	bl	8001db0 <color565_to_g>
 8001f86:	4603      	mov	r3, r0
 8001f88:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff20 	bl	8001dd2 <color565_to_b>
 8001f92:	4603      	mov	r3, r0
 8001f94:	737b      	strb	r3, [r7, #13]
    write8(r);
 8001f96:	4b6b      	ldr	r3, [pc, #428]	; (8002144 <write24+0x1dc>)
 8001f98:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001f9c:	619a      	str	r2, [r3, #24]
 8001f9e:	4b6a      	ldr	r3, [pc, #424]	; (8002148 <write24+0x1e0>)
 8001fa0:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8001fa4:	619a      	str	r2, [r3, #24]
 8001fa6:	4b69      	ldr	r3, [pc, #420]	; (800214c <write24+0x1e4>)
 8001fa8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fac:	619a      	str	r2, [r3, #24]
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4a66      	ldr	r2, [pc, #408]	; (800214c <write24+0x1e4>)
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	6193      	str	r3, [r2, #24]
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	015b      	lsls	r3, r3, #5
 8001fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	015b      	lsls	r3, r3, #5
 8001fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	4b5c      	ldr	r3, [pc, #368]	; (8002148 <write24+0x1e0>)
 8001fd8:	619a      	str	r2, [r3, #24]
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	105b      	asrs	r3, r3, #1
 8001fde:	f003 0208 	and.w	r2, r3, #8
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fea:	431a      	orrs	r2, r3
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	105b      	asrs	r3, r3, #1
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	10db      	asrs	r3, r3, #3
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	431a      	orrs	r2, r3
 8002000:	4b50      	ldr	r3, [pc, #320]	; (8002144 <write24+0x1dc>)
 8002002:	619a      	str	r2, [r3, #24]
 8002004:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002008:	484e      	ldr	r0, [pc, #312]	; (8002144 <write24+0x1dc>)
 800200a:	f7ff fe19 	bl	8001c40 <PIN_LOW>
 800200e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002012:	484c      	ldr	r0, [pc, #304]	; (8002144 <write24+0x1dc>)
 8002014:	f7ff fe24 	bl	8001c60 <PIN_HIGH>
 8002018:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800201c:	4849      	ldr	r0, [pc, #292]	; (8002144 <write24+0x1dc>)
 800201e:	f7ff fe1f 	bl	8001c60 <PIN_HIGH>
    write8(g);
 8002022:	4b48      	ldr	r3, [pc, #288]	; (8002144 <write24+0x1dc>)
 8002024:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002028:	619a      	str	r2, [r3, #24]
 800202a:	4b47      	ldr	r3, [pc, #284]	; (8002148 <write24+0x1e0>)
 800202c:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002030:	619a      	str	r2, [r3, #24]
 8002032:	4b46      	ldr	r3, [pc, #280]	; (800214c <write24+0x1e4>)
 8002034:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002038:	619a      	str	r2, [r3, #24]
 800203a:	7bbb      	ldrb	r3, [r7, #14]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4a43      	ldr	r2, [pc, #268]	; (800214c <write24+0x1e4>)
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	6193      	str	r3, [r2, #24]
 8002046:	7bbb      	ldrb	r3, [r7, #14]
 8002048:	021b      	lsls	r3, r3, #8
 800204a:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800204e:	7bbb      	ldrb	r3, [r7, #14]
 8002050:	015b      	lsls	r3, r3, #5
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	431a      	orrs	r2, r3
 8002058:	7bbb      	ldrb	r3, [r7, #14]
 800205a:	015b      	lsls	r3, r3, #5
 800205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002060:	431a      	orrs	r2, r3
 8002062:	4b39      	ldr	r3, [pc, #228]	; (8002148 <write24+0x1e0>)
 8002064:	619a      	str	r2, [r3, #24]
 8002066:	7bbb      	ldrb	r3, [r7, #14]
 8002068:	105b      	asrs	r3, r3, #1
 800206a:	f003 0208 	and.w	r2, r3, #8
 800206e:	7bbb      	ldrb	r3, [r7, #14]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002076:	431a      	orrs	r2, r3
 8002078:	7bbb      	ldrb	r3, [r7, #14]
 800207a:	105b      	asrs	r3, r3, #1
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	431a      	orrs	r2, r3
 8002082:	7bbb      	ldrb	r3, [r7, #14]
 8002084:	10db      	asrs	r3, r3, #3
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	431a      	orrs	r2, r3
 800208c:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <write24+0x1dc>)
 800208e:	619a      	str	r2, [r3, #24]
 8002090:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002094:	482b      	ldr	r0, [pc, #172]	; (8002144 <write24+0x1dc>)
 8002096:	f7ff fdd3 	bl	8001c40 <PIN_LOW>
 800209a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800209e:	4829      	ldr	r0, [pc, #164]	; (8002144 <write24+0x1dc>)
 80020a0:	f7ff fdde 	bl	8001c60 <PIN_HIGH>
 80020a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020a8:	4826      	ldr	r0, [pc, #152]	; (8002144 <write24+0x1dc>)
 80020aa:	f7ff fdd9 	bl	8001c60 <PIN_HIGH>
    write8(b);
 80020ae:	4b25      	ldr	r3, [pc, #148]	; (8002144 <write24+0x1dc>)
 80020b0:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80020b4:	619a      	str	r2, [r3, #24]
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <write24+0x1e0>)
 80020b8:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80020bc:	619a      	str	r2, [r3, #24]
 80020be:	4b23      	ldr	r3, [pc, #140]	; (800214c <write24+0x1e4>)
 80020c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020c4:	619a      	str	r2, [r3, #24]
 80020c6:	7b7b      	ldrb	r3, [r7, #13]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4a20      	ldr	r2, [pc, #128]	; (800214c <write24+0x1e4>)
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	6193      	str	r3, [r2, #24]
 80020d2:	7b7b      	ldrb	r3, [r7, #13]
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80020da:	7b7b      	ldrb	r3, [r7, #13]
 80020dc:	015b      	lsls	r3, r3, #5
 80020de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e2:	431a      	orrs	r2, r3
 80020e4:	7b7b      	ldrb	r3, [r7, #13]
 80020e6:	015b      	lsls	r3, r3, #5
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	431a      	orrs	r2, r3
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <write24+0x1e0>)
 80020f0:	619a      	str	r2, [r3, #24]
 80020f2:	7b7b      	ldrb	r3, [r7, #13]
 80020f4:	105b      	asrs	r3, r3, #1
 80020f6:	f003 0208 	and.w	r2, r3, #8
 80020fa:	7b7b      	ldrb	r3, [r7, #13]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002102:	431a      	orrs	r2, r3
 8002104:	7b7b      	ldrb	r3, [r7, #13]
 8002106:	105b      	asrs	r3, r3, #1
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	431a      	orrs	r2, r3
 800210e:	7b7b      	ldrb	r3, [r7, #13]
 8002110:	10db      	asrs	r3, r3, #3
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	431a      	orrs	r2, r3
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <write24+0x1dc>)
 800211a:	619a      	str	r2, [r3, #24]
 800211c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002120:	4808      	ldr	r0, [pc, #32]	; (8002144 <write24+0x1dc>)
 8002122:	f7ff fd8d 	bl	8001c40 <PIN_LOW>
 8002126:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800212a:	4806      	ldr	r0, [pc, #24]	; (8002144 <write24+0x1dc>)
 800212c:	f7ff fd98 	bl	8001c60 <PIN_HIGH>
 8002130:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002134:	4803      	ldr	r0, [pc, #12]	; (8002144 <write24+0x1dc>)
 8002136:	f7ff fd93 	bl	8001c60 <PIN_HIGH>
}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	40021400 	.word	0x40021400
 800214c:	40021800 	.word	0x40021800

08002150 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	460a      	mov	r2, r1
 800215a:	80fb      	strh	r3, [r7, #6]
 800215c:	4613      	mov	r3, r2
 800215e:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 8002160:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002164:	489c      	ldr	r0, [pc, #624]	; (80023d8 <writecmddata+0x288>)
 8002166:	f7ff fd6b 	bl	8001c40 <PIN_LOW>
    WriteCmd(cmd);
 800216a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800216e:	489b      	ldr	r0, [pc, #620]	; (80023dc <writecmddata+0x28c>)
 8002170:	f7ff fd66 	bl	8001c40 <PIN_LOW>
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	0a1b      	lsrs	r3, r3, #8
 8002178:	b29b      	uxth	r3, r3
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	73bb      	strb	r3, [r7, #14]
 8002180:	4b96      	ldr	r3, [pc, #600]	; (80023dc <writecmddata+0x28c>)
 8002182:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002186:	619a      	str	r2, [r3, #24]
 8002188:	4b95      	ldr	r3, [pc, #596]	; (80023e0 <writecmddata+0x290>)
 800218a:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800218e:	619a      	str	r2, [r3, #24]
 8002190:	4b94      	ldr	r3, [pc, #592]	; (80023e4 <writecmddata+0x294>)
 8002192:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002196:	619a      	str	r2, [r3, #24]
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4a91      	ldr	r2, [pc, #580]	; (80023e4 <writecmddata+0x294>)
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	015b      	lsls	r3, r3, #5
 80021b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b4:	431a      	orrs	r2, r3
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	015b      	lsls	r3, r3, #5
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	431a      	orrs	r2, r3
 80021c0:	4b87      	ldr	r3, [pc, #540]	; (80023e0 <writecmddata+0x290>)
 80021c2:	619a      	str	r2, [r3, #24]
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	105b      	asrs	r3, r3, #1
 80021c8:	f003 0208 	and.w	r2, r3, #8
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d4:	431a      	orrs	r2, r3
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	105b      	asrs	r3, r3, #1
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	431a      	orrs	r2, r3
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	10db      	asrs	r3, r3, #3
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	431a      	orrs	r2, r3
 80021ea:	4b7c      	ldr	r3, [pc, #496]	; (80023dc <writecmddata+0x28c>)
 80021ec:	619a      	str	r2, [r3, #24]
 80021ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021f2:	487a      	ldr	r0, [pc, #488]	; (80023dc <writecmddata+0x28c>)
 80021f4:	f7ff fd24 	bl	8001c40 <PIN_LOW>
 80021f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021fc:	4877      	ldr	r0, [pc, #476]	; (80023dc <writecmddata+0x28c>)
 80021fe:	f7ff fd2f 	bl	8001c60 <PIN_HIGH>
 8002202:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002206:	4875      	ldr	r0, [pc, #468]	; (80023dc <writecmddata+0x28c>)
 8002208:	f7ff fd2a 	bl	8001c60 <PIN_HIGH>
 800220c:	4b73      	ldr	r3, [pc, #460]	; (80023dc <writecmddata+0x28c>)
 800220e:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002212:	619a      	str	r2, [r3, #24]
 8002214:	4b72      	ldr	r3, [pc, #456]	; (80023e0 <writecmddata+0x290>)
 8002216:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800221a:	619a      	str	r2, [r3, #24]
 800221c:	4b71      	ldr	r3, [pc, #452]	; (80023e4 <writecmddata+0x294>)
 800221e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002222:	619a      	str	r2, [r3, #24]
 8002224:	7bbb      	ldrb	r3, [r7, #14]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4a6e      	ldr	r2, [pc, #440]	; (80023e4 <writecmddata+0x294>)
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	6193      	str	r3, [r2, #24]
 8002230:	7bbb      	ldrb	r3, [r7, #14]
 8002232:	021b      	lsls	r3, r3, #8
 8002234:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002238:	7bbb      	ldrb	r3, [r7, #14]
 800223a:	015b      	lsls	r3, r3, #5
 800223c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002240:	431a      	orrs	r2, r3
 8002242:	7bbb      	ldrb	r3, [r7, #14]
 8002244:	015b      	lsls	r3, r3, #5
 8002246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224a:	431a      	orrs	r2, r3
 800224c:	4b64      	ldr	r3, [pc, #400]	; (80023e0 <writecmddata+0x290>)
 800224e:	619a      	str	r2, [r3, #24]
 8002250:	7bbb      	ldrb	r3, [r7, #14]
 8002252:	105b      	asrs	r3, r3, #1
 8002254:	f003 0208 	and.w	r2, r3, #8
 8002258:	7bbb      	ldrb	r3, [r7, #14]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002260:	431a      	orrs	r2, r3
 8002262:	7bbb      	ldrb	r3, [r7, #14]
 8002264:	105b      	asrs	r3, r3, #1
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	431a      	orrs	r2, r3
 800226c:	7bbb      	ldrb	r3, [r7, #14]
 800226e:	10db      	asrs	r3, r3, #3
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	431a      	orrs	r2, r3
 8002276:	4b59      	ldr	r3, [pc, #356]	; (80023dc <writecmddata+0x28c>)
 8002278:	619a      	str	r2, [r3, #24]
 800227a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800227e:	4857      	ldr	r0, [pc, #348]	; (80023dc <writecmddata+0x28c>)
 8002280:	f7ff fcde 	bl	8001c40 <PIN_LOW>
 8002284:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002288:	4854      	ldr	r0, [pc, #336]	; (80023dc <writecmddata+0x28c>)
 800228a:	f7ff fce9 	bl	8001c60 <PIN_HIGH>
 800228e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002292:	4852      	ldr	r0, [pc, #328]	; (80023dc <writecmddata+0x28c>)
 8002294:	f7ff fce4 	bl	8001c60 <PIN_HIGH>
 8002298:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800229c:	484f      	ldr	r0, [pc, #316]	; (80023dc <writecmddata+0x28c>)
 800229e:	f7ff fcdf 	bl	8001c60 <PIN_HIGH>
    WriteData(dat);
 80022a2:	88bb      	ldrh	r3, [r7, #4]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	737b      	strb	r3, [r7, #13]
 80022aa:	88bb      	ldrh	r3, [r7, #4]
 80022ac:	733b      	strb	r3, [r7, #12]
 80022ae:	4b4b      	ldr	r3, [pc, #300]	; (80023dc <writecmddata+0x28c>)
 80022b0:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80022b4:	619a      	str	r2, [r3, #24]
 80022b6:	4b4a      	ldr	r3, [pc, #296]	; (80023e0 <writecmddata+0x290>)
 80022b8:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80022bc:	619a      	str	r2, [r3, #24]
 80022be:	4b49      	ldr	r3, [pc, #292]	; (80023e4 <writecmddata+0x294>)
 80022c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022c4:	619a      	str	r2, [r3, #24]
 80022c6:	7b7b      	ldrb	r3, [r7, #13]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4a46      	ldr	r2, [pc, #280]	; (80023e4 <writecmddata+0x294>)
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	6193      	str	r3, [r2, #24]
 80022d2:	7b7b      	ldrb	r3, [r7, #13]
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80022da:	7b7b      	ldrb	r3, [r7, #13]
 80022dc:	015b      	lsls	r3, r3, #5
 80022de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e2:	431a      	orrs	r2, r3
 80022e4:	7b7b      	ldrb	r3, [r7, #13]
 80022e6:	015b      	lsls	r3, r3, #5
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	431a      	orrs	r2, r3
 80022ee:	4b3c      	ldr	r3, [pc, #240]	; (80023e0 <writecmddata+0x290>)
 80022f0:	619a      	str	r2, [r3, #24]
 80022f2:	7b7b      	ldrb	r3, [r7, #13]
 80022f4:	105b      	asrs	r3, r3, #1
 80022f6:	f003 0208 	and.w	r2, r3, #8
 80022fa:	7b7b      	ldrb	r3, [r7, #13]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002302:	431a      	orrs	r2, r3
 8002304:	7b7b      	ldrb	r3, [r7, #13]
 8002306:	105b      	asrs	r3, r3, #1
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	431a      	orrs	r2, r3
 800230e:	7b7b      	ldrb	r3, [r7, #13]
 8002310:	10db      	asrs	r3, r3, #3
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	431a      	orrs	r2, r3
 8002318:	4b30      	ldr	r3, [pc, #192]	; (80023dc <writecmddata+0x28c>)
 800231a:	619a      	str	r2, [r3, #24]
 800231c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002320:	482e      	ldr	r0, [pc, #184]	; (80023dc <writecmddata+0x28c>)
 8002322:	f7ff fc8d 	bl	8001c40 <PIN_LOW>
 8002326:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800232a:	482c      	ldr	r0, [pc, #176]	; (80023dc <writecmddata+0x28c>)
 800232c:	f7ff fc98 	bl	8001c60 <PIN_HIGH>
 8002330:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002334:	4829      	ldr	r0, [pc, #164]	; (80023dc <writecmddata+0x28c>)
 8002336:	f7ff fc93 	bl	8001c60 <PIN_HIGH>
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <writecmddata+0x28c>)
 800233c:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002340:	619a      	str	r2, [r3, #24]
 8002342:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <writecmddata+0x290>)
 8002344:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002348:	619a      	str	r2, [r3, #24]
 800234a:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <writecmddata+0x294>)
 800234c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002350:	619a      	str	r2, [r3, #24]
 8002352:	7b3b      	ldrb	r3, [r7, #12]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4a23      	ldr	r2, [pc, #140]	; (80023e4 <writecmddata+0x294>)
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	6193      	str	r3, [r2, #24]
 800235e:	7b3b      	ldrb	r3, [r7, #12]
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002366:	7b3b      	ldrb	r3, [r7, #12]
 8002368:	015b      	lsls	r3, r3, #5
 800236a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236e:	431a      	orrs	r2, r3
 8002370:	7b3b      	ldrb	r3, [r7, #12]
 8002372:	015b      	lsls	r3, r3, #5
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	431a      	orrs	r2, r3
 800237a:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <writecmddata+0x290>)
 800237c:	619a      	str	r2, [r3, #24]
 800237e:	7b3b      	ldrb	r3, [r7, #12]
 8002380:	105b      	asrs	r3, r3, #1
 8002382:	f003 0208 	and.w	r2, r3, #8
 8002386:	7b3b      	ldrb	r3, [r7, #12]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238e:	431a      	orrs	r2, r3
 8002390:	7b3b      	ldrb	r3, [r7, #12]
 8002392:	105b      	asrs	r3, r3, #1
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	431a      	orrs	r2, r3
 800239a:	7b3b      	ldrb	r3, [r7, #12]
 800239c:	10db      	asrs	r3, r3, #3
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	431a      	orrs	r2, r3
 80023a4:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <writecmddata+0x28c>)
 80023a6:	619a      	str	r2, [r3, #24]
 80023a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023ac:	480b      	ldr	r0, [pc, #44]	; (80023dc <writecmddata+0x28c>)
 80023ae:	f7ff fc47 	bl	8001c40 <PIN_LOW>
 80023b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023b6:	4809      	ldr	r0, [pc, #36]	; (80023dc <writecmddata+0x28c>)
 80023b8:	f7ff fc52 	bl	8001c60 <PIN_HIGH>
 80023bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023c0:	4806      	ldr	r0, [pc, #24]	; (80023dc <writecmddata+0x28c>)
 80023c2:	f7ff fc4d 	bl	8001c60 <PIN_HIGH>
    CS_IDLE;
 80023c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ca:	4803      	ldr	r0, [pc, #12]	; (80023d8 <writecmddata+0x288>)
 80023cc:	f7ff fc48 	bl	8001c60 <PIN_HIGH>
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40020400 	.word	0x40020400
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40021400 	.word	0x40021400
 80023e4:	40021800 	.word	0x40021800

080023e8 <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	603a      	str	r2, [r7, #0]
 80023f2:	80fb      	strh	r3, [r7, #6]
 80023f4:	460b      	mov	r3, r1
 80023f6:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 80023f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023fc:	484f      	ldr	r0, [pc, #316]	; (800253c <WriteCmdParamN+0x154>)
 80023fe:	f7ff fc1f 	bl	8001c40 <PIN_LOW>
    WriteCmd(cmd);
 8002402:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002406:	484e      	ldr	r0, [pc, #312]	; (8002540 <WriteCmdParamN+0x158>)
 8002408:	f7ff fc1a 	bl	8001c40 <PIN_LOW>
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	0a1b      	lsrs	r3, r3, #8
 8002410:	b29b      	uxth	r3, r3
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	73bb      	strb	r3, [r7, #14]
 8002418:	4b49      	ldr	r3, [pc, #292]	; (8002540 <WriteCmdParamN+0x158>)
 800241a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800241e:	619a      	str	r2, [r3, #24]
 8002420:	4b48      	ldr	r3, [pc, #288]	; (8002544 <WriteCmdParamN+0x15c>)
 8002422:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002426:	619a      	str	r2, [r3, #24]
 8002428:	4b47      	ldr	r3, [pc, #284]	; (8002548 <WriteCmdParamN+0x160>)
 800242a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800242e:	619a      	str	r2, [r3, #24]
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4a44      	ldr	r2, [pc, #272]	; (8002548 <WriteCmdParamN+0x160>)
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	6193      	str	r3, [r2, #24]
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	015b      	lsls	r3, r3, #5
 8002448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244c:	431a      	orrs	r2, r3
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	015b      	lsls	r3, r3, #5
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	431a      	orrs	r2, r3
 8002458:	4b3a      	ldr	r3, [pc, #232]	; (8002544 <WriteCmdParamN+0x15c>)
 800245a:	619a      	str	r2, [r3, #24]
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	105b      	asrs	r3, r3, #1
 8002460:	f003 0208 	and.w	r2, r3, #8
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246c:	431a      	orrs	r2, r3
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	105b      	asrs	r3, r3, #1
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	431a      	orrs	r2, r3
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	10db      	asrs	r3, r3, #3
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	431a      	orrs	r2, r3
 8002482:	4b2f      	ldr	r3, [pc, #188]	; (8002540 <WriteCmdParamN+0x158>)
 8002484:	619a      	str	r2, [r3, #24]
 8002486:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800248a:	482d      	ldr	r0, [pc, #180]	; (8002540 <WriteCmdParamN+0x158>)
 800248c:	f7ff fbd8 	bl	8001c40 <PIN_LOW>
 8002490:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002494:	482a      	ldr	r0, [pc, #168]	; (8002540 <WriteCmdParamN+0x158>)
 8002496:	f7ff fbe3 	bl	8001c60 <PIN_HIGH>
 800249a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800249e:	4828      	ldr	r0, [pc, #160]	; (8002540 <WriteCmdParamN+0x158>)
 80024a0:	f7ff fbde 	bl	8001c60 <PIN_HIGH>
 80024a4:	4b26      	ldr	r3, [pc, #152]	; (8002540 <WriteCmdParamN+0x158>)
 80024a6:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80024aa:	619a      	str	r2, [r3, #24]
 80024ac:	4b25      	ldr	r3, [pc, #148]	; (8002544 <WriteCmdParamN+0x15c>)
 80024ae:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80024b2:	619a      	str	r2, [r3, #24]
 80024b4:	4b24      	ldr	r3, [pc, #144]	; (8002548 <WriteCmdParamN+0x160>)
 80024b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024ba:	619a      	str	r2, [r3, #24]
 80024bc:	7bbb      	ldrb	r3, [r7, #14]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4a21      	ldr	r2, [pc, #132]	; (8002548 <WriteCmdParamN+0x160>)
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	6193      	str	r3, [r2, #24]
 80024c8:	7bbb      	ldrb	r3, [r7, #14]
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80024d0:	7bbb      	ldrb	r3, [r7, #14]
 80024d2:	015b      	lsls	r3, r3, #5
 80024d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d8:	431a      	orrs	r2, r3
 80024da:	7bbb      	ldrb	r3, [r7, #14]
 80024dc:	015b      	lsls	r3, r3, #5
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	431a      	orrs	r2, r3
 80024e4:	4b17      	ldr	r3, [pc, #92]	; (8002544 <WriteCmdParamN+0x15c>)
 80024e6:	619a      	str	r2, [r3, #24]
 80024e8:	7bbb      	ldrb	r3, [r7, #14]
 80024ea:	105b      	asrs	r3, r3, #1
 80024ec:	f003 0208 	and.w	r2, r3, #8
 80024f0:	7bbb      	ldrb	r3, [r7, #14]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f8:	431a      	orrs	r2, r3
 80024fa:	7bbb      	ldrb	r3, [r7, #14]
 80024fc:	105b      	asrs	r3, r3, #1
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	431a      	orrs	r2, r3
 8002504:	7bbb      	ldrb	r3, [r7, #14]
 8002506:	10db      	asrs	r3, r3, #3
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	431a      	orrs	r2, r3
 800250e:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <WriteCmdParamN+0x158>)
 8002510:	619a      	str	r2, [r3, #24]
 8002512:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002516:	480a      	ldr	r0, [pc, #40]	; (8002540 <WriteCmdParamN+0x158>)
 8002518:	f7ff fb92 	bl	8001c40 <PIN_LOW>
 800251c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002520:	4807      	ldr	r0, [pc, #28]	; (8002540 <WriteCmdParamN+0x158>)
 8002522:	f7ff fb9d 	bl	8001c60 <PIN_HIGH>
 8002526:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800252a:	4805      	ldr	r0, [pc, #20]	; (8002540 <WriteCmdParamN+0x158>)
 800252c:	f7ff fb98 	bl	8001c60 <PIN_HIGH>
 8002530:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <WriteCmdParamN+0x158>)
 8002536:	f7ff fb93 	bl	8001c60 <PIN_HIGH>
    while (N-- > 0) {
 800253a:	e0fb      	b.n	8002734 <WriteCmdParamN+0x34c>
 800253c:	40020400 	.word	0x40020400
 8002540:	40021000 	.word	0x40021000
 8002544:	40021400 	.word	0x40021400
 8002548:	40021800 	.word	0x40021800
        uint8_t u8 = *block++;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	603a      	str	r2, [r7, #0]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	737b      	strb	r3, [r7, #13]
        write8(u8);
 8002556:	4b80      	ldr	r3, [pc, #512]	; (8002758 <WriteCmdParamN+0x370>)
 8002558:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800255c:	619a      	str	r2, [r3, #24]
 800255e:	4b7f      	ldr	r3, [pc, #508]	; (800275c <WriteCmdParamN+0x374>)
 8002560:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002564:	619a      	str	r2, [r3, #24]
 8002566:	4b7e      	ldr	r3, [pc, #504]	; (8002760 <WriteCmdParamN+0x378>)
 8002568:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800256c:	619a      	str	r2, [r3, #24]
 800256e:	7b7b      	ldrb	r3, [r7, #13]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4a7b      	ldr	r2, [pc, #492]	; (8002760 <WriteCmdParamN+0x378>)
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	6193      	str	r3, [r2, #24]
 800257a:	7b7b      	ldrb	r3, [r7, #13]
 800257c:	021b      	lsls	r3, r3, #8
 800257e:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002582:	7b7b      	ldrb	r3, [r7, #13]
 8002584:	015b      	lsls	r3, r3, #5
 8002586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258a:	431a      	orrs	r2, r3
 800258c:	7b7b      	ldrb	r3, [r7, #13]
 800258e:	015b      	lsls	r3, r3, #5
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	431a      	orrs	r2, r3
 8002596:	4b71      	ldr	r3, [pc, #452]	; (800275c <WriteCmdParamN+0x374>)
 8002598:	619a      	str	r2, [r3, #24]
 800259a:	7b7b      	ldrb	r3, [r7, #13]
 800259c:	105b      	asrs	r3, r3, #1
 800259e:	f003 0208 	and.w	r2, r3, #8
 80025a2:	7b7b      	ldrb	r3, [r7, #13]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025aa:	431a      	orrs	r2, r3
 80025ac:	7b7b      	ldrb	r3, [r7, #13]
 80025ae:	105b      	asrs	r3, r3, #1
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	431a      	orrs	r2, r3
 80025b6:	7b7b      	ldrb	r3, [r7, #13]
 80025b8:	10db      	asrs	r3, r3, #3
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	431a      	orrs	r2, r3
 80025c0:	4b65      	ldr	r3, [pc, #404]	; (8002758 <WriteCmdParamN+0x370>)
 80025c2:	619a      	str	r2, [r3, #24]
 80025c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025c8:	4863      	ldr	r0, [pc, #396]	; (8002758 <WriteCmdParamN+0x370>)
 80025ca:	f7ff fb39 	bl	8001c40 <PIN_LOW>
 80025ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025d2:	4861      	ldr	r0, [pc, #388]	; (8002758 <WriteCmdParamN+0x370>)
 80025d4:	f7ff fb44 	bl	8001c60 <PIN_HIGH>
 80025d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025dc:	485e      	ldr	r0, [pc, #376]	; (8002758 <WriteCmdParamN+0x370>)
 80025de:	f7ff fb3f 	bl	8001c60 <PIN_HIGH>
        if (N && is8347) {
 80025e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 80a4 	beq.w	8002734 <WriteCmdParamN+0x34c>
 80025ec:	4b5d      	ldr	r3, [pc, #372]	; (8002764 <WriteCmdParamN+0x37c>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 809f 	beq.w	8002734 <WriteCmdParamN+0x34c>
            cmd++;
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	3301      	adds	r3, #1
 80025fa:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 80025fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002600:	4855      	ldr	r0, [pc, #340]	; (8002758 <WriteCmdParamN+0x370>)
 8002602:	f7ff fb1d 	bl	8001c40 <PIN_LOW>
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	0a1b      	lsrs	r3, r3, #8
 800260a:	b29b      	uxth	r3, r3
 800260c:	733b      	strb	r3, [r7, #12]
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	72fb      	strb	r3, [r7, #11]
 8002612:	4b51      	ldr	r3, [pc, #324]	; (8002758 <WriteCmdParamN+0x370>)
 8002614:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002618:	619a      	str	r2, [r3, #24]
 800261a:	4b50      	ldr	r3, [pc, #320]	; (800275c <WriteCmdParamN+0x374>)
 800261c:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002620:	619a      	str	r2, [r3, #24]
 8002622:	4b4f      	ldr	r3, [pc, #316]	; (8002760 <WriteCmdParamN+0x378>)
 8002624:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002628:	619a      	str	r2, [r3, #24]
 800262a:	7b3b      	ldrb	r3, [r7, #12]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4a4c      	ldr	r2, [pc, #304]	; (8002760 <WriteCmdParamN+0x378>)
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	6193      	str	r3, [r2, #24]
 8002636:	7b3b      	ldrb	r3, [r7, #12]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800263e:	7b3b      	ldrb	r3, [r7, #12]
 8002640:	015b      	lsls	r3, r3, #5
 8002642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002646:	431a      	orrs	r2, r3
 8002648:	7b3b      	ldrb	r3, [r7, #12]
 800264a:	015b      	lsls	r3, r3, #5
 800264c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002650:	431a      	orrs	r2, r3
 8002652:	4b42      	ldr	r3, [pc, #264]	; (800275c <WriteCmdParamN+0x374>)
 8002654:	619a      	str	r2, [r3, #24]
 8002656:	7b3b      	ldrb	r3, [r7, #12]
 8002658:	105b      	asrs	r3, r3, #1
 800265a:	f003 0208 	and.w	r2, r3, #8
 800265e:	7b3b      	ldrb	r3, [r7, #12]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002666:	431a      	orrs	r2, r3
 8002668:	7b3b      	ldrb	r3, [r7, #12]
 800266a:	105b      	asrs	r3, r3, #1
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	431a      	orrs	r2, r3
 8002672:	7b3b      	ldrb	r3, [r7, #12]
 8002674:	10db      	asrs	r3, r3, #3
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	431a      	orrs	r2, r3
 800267c:	4b36      	ldr	r3, [pc, #216]	; (8002758 <WriteCmdParamN+0x370>)
 800267e:	619a      	str	r2, [r3, #24]
 8002680:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002684:	4834      	ldr	r0, [pc, #208]	; (8002758 <WriteCmdParamN+0x370>)
 8002686:	f7ff fadb 	bl	8001c40 <PIN_LOW>
 800268a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800268e:	4832      	ldr	r0, [pc, #200]	; (8002758 <WriteCmdParamN+0x370>)
 8002690:	f7ff fae6 	bl	8001c60 <PIN_HIGH>
 8002694:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002698:	482f      	ldr	r0, [pc, #188]	; (8002758 <WriteCmdParamN+0x370>)
 800269a:	f7ff fae1 	bl	8001c60 <PIN_HIGH>
 800269e:	4b2e      	ldr	r3, [pc, #184]	; (8002758 <WriteCmdParamN+0x370>)
 80026a0:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80026a4:	619a      	str	r2, [r3, #24]
 80026a6:	4b2d      	ldr	r3, [pc, #180]	; (800275c <WriteCmdParamN+0x374>)
 80026a8:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80026ac:	619a      	str	r2, [r3, #24]
 80026ae:	4b2c      	ldr	r3, [pc, #176]	; (8002760 <WriteCmdParamN+0x378>)
 80026b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026b4:	619a      	str	r2, [r3, #24]
 80026b6:	7afb      	ldrb	r3, [r7, #11]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4a29      	ldr	r2, [pc, #164]	; (8002760 <WriteCmdParamN+0x378>)
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	6193      	str	r3, [r2, #24]
 80026c2:	7afb      	ldrb	r3, [r7, #11]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80026ca:	7afb      	ldrb	r3, [r7, #11]
 80026cc:	015b      	lsls	r3, r3, #5
 80026ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d2:	431a      	orrs	r2, r3
 80026d4:	7afb      	ldrb	r3, [r7, #11]
 80026d6:	015b      	lsls	r3, r3, #5
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	431a      	orrs	r2, r3
 80026de:	4b1f      	ldr	r3, [pc, #124]	; (800275c <WriteCmdParamN+0x374>)
 80026e0:	619a      	str	r2, [r3, #24]
 80026e2:	7afb      	ldrb	r3, [r7, #11]
 80026e4:	105b      	asrs	r3, r3, #1
 80026e6:	f003 0208 	and.w	r2, r3, #8
 80026ea:	7afb      	ldrb	r3, [r7, #11]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f2:	431a      	orrs	r2, r3
 80026f4:	7afb      	ldrb	r3, [r7, #11]
 80026f6:	105b      	asrs	r3, r3, #1
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	431a      	orrs	r2, r3
 80026fe:	7afb      	ldrb	r3, [r7, #11]
 8002700:	10db      	asrs	r3, r3, #3
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	431a      	orrs	r2, r3
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <WriteCmdParamN+0x370>)
 800270a:	619a      	str	r2, [r3, #24]
 800270c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002710:	4811      	ldr	r0, [pc, #68]	; (8002758 <WriteCmdParamN+0x370>)
 8002712:	f7ff fa95 	bl	8001c40 <PIN_LOW>
 8002716:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800271a:	480f      	ldr	r0, [pc, #60]	; (8002758 <WriteCmdParamN+0x370>)
 800271c:	f7ff faa0 	bl	8001c60 <PIN_HIGH>
 8002720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002724:	480c      	ldr	r0, [pc, #48]	; (8002758 <WriteCmdParamN+0x370>)
 8002726:	f7ff fa9b 	bl	8001c60 <PIN_HIGH>
 800272a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800272e:	480a      	ldr	r0, [pc, #40]	; (8002758 <WriteCmdParamN+0x370>)
 8002730:	f7ff fa96 	bl	8001c60 <PIN_HIGH>
    while (N-- > 0) {
 8002734:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	3a01      	subs	r2, #1
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	717a      	strb	r2, [r7, #5]
 8002740:	2b00      	cmp	r3, #0
 8002742:	f73f af03 	bgt.w	800254c <WriteCmdParamN+0x164>
        }
    }
    CS_IDLE;
 8002746:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800274a:	4807      	ldr	r0, [pc, #28]	; (8002768 <WriteCmdParamN+0x380>)
 800274c:	f7ff fa88 	bl	8001c60 <PIN_HIGH>
}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000
 800275c:	40021400 	.word	0x40021400
 8002760:	40021800 	.word	0x40021800
 8002764:	2000030d 	.word	0x2000030d
 8002768:	40020400 	.word	0x40020400

0800276c <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	4604      	mov	r4, r0
 8002774:	4608      	mov	r0, r1
 8002776:	4611      	mov	r1, r2
 8002778:	461a      	mov	r2, r3
 800277a:	4623      	mov	r3, r4
 800277c:	71fb      	strb	r3, [r7, #7]
 800277e:	4603      	mov	r3, r0
 8002780:	71bb      	strb	r3, [r7, #6]
 8002782:	460b      	mov	r3, r1
 8002784:	717b      	strb	r3, [r7, #5]
 8002786:	4613      	mov	r3, r2
 8002788:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 800278a:	79bb      	ldrb	r3, [r7, #6]
 800278c:	733b      	strb	r3, [r7, #12]
 800278e:	797b      	ldrb	r3, [r7, #5]
 8002790:	737b      	strb	r3, [r7, #13]
 8002792:	793b      	ldrb	r3, [r7, #4]
 8002794:	73bb      	strb	r3, [r7, #14]
 8002796:	f897 3020 	ldrb.w	r3, [r7, #32]
 800279a:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	f107 020c 	add.w	r2, r7, #12
 80027a4:	2104      	movs	r1, #4
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fe1e 	bl	80023e8 <WriteCmdParamN>
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd90      	pop	{r4, r7, pc}

080027b4 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 80027c4:	e046      	b.n	8002854 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	627a      	str	r2, [r7, #36]	; 0x24
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	627a      	str	r2, [r7, #36]	; 0x24
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 80027de:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80027e2:	2b7f      	cmp	r3, #127	; 0x7f
 80027e4:	d108      	bne.n	80027f8 <init_table+0x44>
        {
            delay(len);
 80027e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fa10 	bl	8001c10 <delay>
            len = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027f6:	e024      	b.n	8002842 <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 80027f8:	2300      	movs	r3, #0
 80027fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80027fe:	e010      	b.n	8002822 <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	627a      	str	r2, [r7, #36]	; 0x24
 8002806:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800280a:	7819      	ldrb	r1, [r3, #0]
 800280c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002810:	4413      	add	r3, r2
 8002812:	460a      	mov	r2, r1
 8002814:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 8002818:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800281c:	3301      	adds	r3, #1
 800281e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002822:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002826:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800282a:	429a      	cmp	r2, r3
 800282c:	d3e8      	bcc.n	8002800 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 800282e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002832:	b29b      	uxth	r3, r3
 8002834:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8002838:	f107 0208 	add.w	r2, r7, #8
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fdd3 	bl	80023e8 <WriteCmdParamN>
        }
        size -= len + 2;
 8002842:	887a      	ldrh	r2, [r7, #2]
 8002844:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002848:	b29b      	uxth	r3, r3
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b02      	subs	r3, #2
 8002850:	b29b      	uxth	r3, r3
 8002852:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 8002854:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002858:	2b00      	cmp	r3, #0
 800285a:	dcb4      	bgt.n	80027c6 <init_table+0x12>
    }
}
 800285c:	bf00      	nop
 800285e:	3728      	adds	r7, #40	; 0x28
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 8002874:	e01d      	b.n	80028b2 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1c9a      	adds	r2, r3, #2
 800287a:	60fa      	str	r2, [r7, #12]
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1c9a      	adds	r2, r3, #2
 8002884:	60fa      	str	r2, [r7, #12]
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 800288a:	897b      	ldrh	r3, [r7, #10]
 800288c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002890:	4293      	cmp	r3, r2
 8002892:	d104      	bne.n	800289e <init_table16+0x3a>
            delay(d);
 8002894:	893b      	ldrh	r3, [r7, #8]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff f9ba 	bl	8001c10 <delay>
 800289c:	e005      	b.n	80028aa <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 800289e:	893a      	ldrh	r2, [r7, #8]
 80028a0:	897b      	ldrh	r3, [r7, #10]
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fc53 	bl	8002150 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	3b04      	subs	r3, #4
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 80028b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	dcdd      	bgt.n	8002876 <init_table16+0x12>
    }
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <reset>:



void reset(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
    done_reset = 1;
 80028c8:	4b25      	ldr	r3, [pc, #148]	; (8002960 <reset+0x9c>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 80028ce:	f7ff fb1f 	bl	8001f10 <setWriteDir>
    CTL_INIT();
 80028d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028d6:	4823      	ldr	r0, [pc, #140]	; (8002964 <reset+0xa0>)
 80028d8:	f7ff f9e8 	bl	8001cac <PIN_OUTPUT>
 80028dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028e0:	4820      	ldr	r0, [pc, #128]	; (8002964 <reset+0xa0>)
 80028e2:	f7ff f9e3 	bl	8001cac <PIN_OUTPUT>
 80028e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ea:	481e      	ldr	r0, [pc, #120]	; (8002964 <reset+0xa0>)
 80028ec:	f7ff f9de 	bl	8001cac <PIN_OUTPUT>
 80028f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028f4:	481c      	ldr	r0, [pc, #112]	; (8002968 <reset+0xa4>)
 80028f6:	f7ff f9d9 	bl	8001cac <PIN_OUTPUT>
 80028fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028fe:	481a      	ldr	r0, [pc, #104]	; (8002968 <reset+0xa4>)
 8002900:	f7ff f9d4 	bl	8001cac <PIN_OUTPUT>
    CS_IDLE;
 8002904:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002908:	4817      	ldr	r0, [pc, #92]	; (8002968 <reset+0xa4>)
 800290a:	f7ff f9a9 	bl	8001c60 <PIN_HIGH>
    RD_IDLE;
 800290e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002912:	4814      	ldr	r0, [pc, #80]	; (8002964 <reset+0xa0>)
 8002914:	f7ff f9a4 	bl	8001c60 <PIN_HIGH>
    WR_IDLE;
 8002918:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800291c:	4811      	ldr	r0, [pc, #68]	; (8002964 <reset+0xa0>)
 800291e:	f7ff f99f 	bl	8001c60 <PIN_HIGH>
    RESET_IDLE;
 8002922:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002926:	4810      	ldr	r0, [pc, #64]	; (8002968 <reset+0xa4>)
 8002928:	f7ff f99a 	bl	8001c60 <PIN_HIGH>
    delay(50);
 800292c:	2032      	movs	r0, #50	; 0x32
 800292e:	f7ff f96f 	bl	8001c10 <delay>
    RESET_ACTIVE;
 8002932:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002936:	480c      	ldr	r0, [pc, #48]	; (8002968 <reset+0xa4>)
 8002938:	f7ff f982 	bl	8001c40 <PIN_LOW>
    delay(100);
 800293c:	2064      	movs	r0, #100	; 0x64
 800293e:	f7ff f967 	bl	8001c10 <delay>
    RESET_IDLE;
 8002942:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002946:	4808      	ldr	r0, [pc, #32]	; (8002968 <reset+0xa4>)
 8002948:	f7ff f98a 	bl	8001c60 <PIN_HIGH>
    delay(100);
 800294c:	2064      	movs	r0, #100	; 0x64
 800294e:	f7ff f95f 	bl	8001c10 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8002952:	2100      	movs	r1, #0
 8002954:	20b0      	movs	r0, #176	; 0xb0
 8002956:	f7ff fa89 	bl	8001e6c <WriteCmdData>
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	2000030c 	.word	0x2000030c
 8002964:	40021000 	.word	0x40021000
 8002968:	40020400 	.word	0x40020400

0800296c <read16bits>:

static uint16_t read16bits(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8002972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002976:	4871      	ldr	r0, [pc, #452]	; (8002b3c <read16bits+0x1d0>)
 8002978:	f7ff f972 	bl	8001c60 <PIN_HIGH>
 800297c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002980:	486e      	ldr	r0, [pc, #440]	; (8002b3c <read16bits+0x1d0>)
 8002982:	f7ff f95d 	bl	8001c40 <PIN_LOW>
 8002986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800298a:	486c      	ldr	r0, [pc, #432]	; (8002b3c <read16bits+0x1d0>)
 800298c:	f7ff f958 	bl	8001c40 <PIN_LOW>
 8002990:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002994:	4869      	ldr	r0, [pc, #420]	; (8002b3c <read16bits+0x1d0>)
 8002996:	f7ff f953 	bl	8001c40 <PIN_LOW>
 800299a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800299e:	4867      	ldr	r0, [pc, #412]	; (8002b3c <read16bits+0x1d0>)
 80029a0:	f7ff f94e 	bl	8001c40 <PIN_LOW>
 80029a4:	4b66      	ldr	r3, [pc, #408]	; (8002b40 <read16bits+0x1d4>)
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	085b      	lsrs	r3, r3, #1
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	4b64      	ldr	r3, [pc, #400]	; (8002b44 <read16bits+0x1d8>)
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	b29b      	uxth	r3, r3
 80029c0:	4313      	orrs	r3, r2
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	4b5f      	ldr	r3, [pc, #380]	; (8002b44 <read16bits+0x1d8>)
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	4313      	orrs	r3, r2
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	4b5b      	ldr	r3, [pc, #364]	; (8002b44 <read16bits+0x1d8>)
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	b29b      	uxth	r3, r3
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	4313      	orrs	r3, r2
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	4b54      	ldr	r3, [pc, #336]	; (8002b3c <read16bits+0x1d0>)
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	4313      	orrs	r3, r2
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	4b4f      	ldr	r3, [pc, #316]	; (8002b3c <read16bits+0x1d0>)
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	4b4b      	ldr	r3, [pc, #300]	; (8002b3c <read16bits+0x1d0>)
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	4b46      	ldr	r3, [pc, #280]	; (8002b3c <read16bits+0x1d0>)
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4313      	orrs	r3, r2
 8002a34:	80fb      	strh	r3, [r7, #6]
 8002a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a3a:	4840      	ldr	r0, [pc, #256]	; (8002b3c <read16bits+0x1d0>)
 8002a3c:	f7ff f910 	bl	8001c60 <PIN_HIGH>
 8002a40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a44:	483d      	ldr	r0, [pc, #244]	; (8002b3c <read16bits+0x1d0>)
 8002a46:	f7ff f90b 	bl	8001c60 <PIN_HIGH>
    READ_8(lo);
 8002a4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a4e:	483b      	ldr	r0, [pc, #236]	; (8002b3c <read16bits+0x1d0>)
 8002a50:	f7ff f906 	bl	8001c60 <PIN_HIGH>
 8002a54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a58:	4838      	ldr	r0, [pc, #224]	; (8002b3c <read16bits+0x1d0>)
 8002a5a:	f7ff f8f1 	bl	8001c40 <PIN_LOW>
 8002a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a62:	4836      	ldr	r0, [pc, #216]	; (8002b3c <read16bits+0x1d0>)
 8002a64:	f7ff f8ec 	bl	8001c40 <PIN_LOW>
 8002a68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a6c:	4833      	ldr	r0, [pc, #204]	; (8002b3c <read16bits+0x1d0>)
 8002a6e:	f7ff f8e7 	bl	8001c40 <PIN_LOW>
 8002a72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a76:	4831      	ldr	r0, [pc, #196]	; (8002b3c <read16bits+0x1d0>)
 8002a78:	f7ff f8e2 	bl	8001c40 <PIN_LOW>
 8002a7c:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <read16bits+0x1d4>)
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <read16bits+0x1d8>)
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <read16bits+0x1d8>)
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <read16bits+0x1d8>)
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	4313      	orrs	r3, r2
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <read16bits+0x1d0>)
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <read16bits+0x1d0>)
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <read16bits+0x1d0>)
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4313      	orrs	r3, r2
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <read16bits+0x1d0>)
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	717b      	strb	r3, [r7, #5]
 8002b0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b12:	480a      	ldr	r0, [pc, #40]	; (8002b3c <read16bits+0x1d0>)
 8002b14:	f7ff f8a4 	bl	8001c60 <PIN_HIGH>
 8002b18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b1c:	4807      	ldr	r0, [pc, #28]	; (8002b3c <read16bits+0x1d0>)
 8002b1e:	f7ff f89f 	bl	8001c60 <PIN_HIGH>
    return (ret << 8) | lo;
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	b21a      	sxth	r2, r3
 8002b28:	797b      	ldrb	r3, [r7, #5]
 8002b2a:	b21b      	sxth	r3, r3
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	b21b      	sxth	r3, r3
 8002b30:	b29b      	uxth	r3, r3
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40021800 	.word	0x40021800
 8002b44:	40021400 	.word	0x40021400

08002b48 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	460a      	mov	r2, r1
 8002b52:	80fb      	strh	r3, [r7, #6]
 8002b54:	4613      	mov	r3, r2
 8002b56:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8002b58:	4b64      	ldr	r3, [pc, #400]	; (8002cec <readReg+0x1a4>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <readReg+0x1c>
        reset();
 8002b60:	f7ff feb0 	bl	80028c4 <reset>
    CS_ACTIVE;
 8002b64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b68:	4861      	ldr	r0, [pc, #388]	; (8002cf0 <readReg+0x1a8>)
 8002b6a:	f7ff f869 	bl	8001c40 <PIN_LOW>
    WriteCmd(reg);
 8002b6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b72:	4860      	ldr	r0, [pc, #384]	; (8002cf4 <readReg+0x1ac>)
 8002b74:	f7ff f864 	bl	8001c40 <PIN_LOW>
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	73bb      	strb	r3, [r7, #14]
 8002b84:	4b5b      	ldr	r3, [pc, #364]	; (8002cf4 <readReg+0x1ac>)
 8002b86:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002b8a:	619a      	str	r2, [r3, #24]
 8002b8c:	4b5a      	ldr	r3, [pc, #360]	; (8002cf8 <readReg+0x1b0>)
 8002b8e:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002b92:	619a      	str	r2, [r3, #24]
 8002b94:	4b59      	ldr	r3, [pc, #356]	; (8002cfc <readReg+0x1b4>)
 8002b96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b9a:	619a      	str	r2, [r3, #24]
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4a56      	ldr	r2, [pc, #344]	; (8002cfc <readReg+0x1b4>)
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	6193      	str	r3, [r2, #24]
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	021b      	lsls	r3, r3, #8
 8002bac:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	015b      	lsls	r3, r3, #5
 8002bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	015b      	lsls	r3, r3, #5
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	4b4c      	ldr	r3, [pc, #304]	; (8002cf8 <readReg+0x1b0>)
 8002bc6:	619a      	str	r2, [r3, #24]
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	105b      	asrs	r3, r3, #1
 8002bcc:	f003 0208 	and.w	r2, r3, #8
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	105b      	asrs	r3, r3, #1
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	431a      	orrs	r2, r3
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	10db      	asrs	r3, r3, #3
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	431a      	orrs	r2, r3
 8002bee:	4b41      	ldr	r3, [pc, #260]	; (8002cf4 <readReg+0x1ac>)
 8002bf0:	619a      	str	r2, [r3, #24]
 8002bf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bf6:	483f      	ldr	r0, [pc, #252]	; (8002cf4 <readReg+0x1ac>)
 8002bf8:	f7ff f822 	bl	8001c40 <PIN_LOW>
 8002bfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c00:	483c      	ldr	r0, [pc, #240]	; (8002cf4 <readReg+0x1ac>)
 8002c02:	f7ff f82d 	bl	8001c60 <PIN_HIGH>
 8002c06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c0a:	483a      	ldr	r0, [pc, #232]	; (8002cf4 <readReg+0x1ac>)
 8002c0c:	f7ff f828 	bl	8001c60 <PIN_HIGH>
 8002c10:	4b38      	ldr	r3, [pc, #224]	; (8002cf4 <readReg+0x1ac>)
 8002c12:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002c16:	619a      	str	r2, [r3, #24]
 8002c18:	4b37      	ldr	r3, [pc, #220]	; (8002cf8 <readReg+0x1b0>)
 8002c1a:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8002c1e:	619a      	str	r2, [r3, #24]
 8002c20:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <readReg+0x1b4>)
 8002c22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c26:	619a      	str	r2, [r3, #24]
 8002c28:	7bbb      	ldrb	r3, [r7, #14]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4a33      	ldr	r2, [pc, #204]	; (8002cfc <readReg+0x1b4>)
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	6193      	str	r3, [r2, #24]
 8002c34:	7bbb      	ldrb	r3, [r7, #14]
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002c3c:	7bbb      	ldrb	r3, [r7, #14]
 8002c3e:	015b      	lsls	r3, r3, #5
 8002c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c44:	431a      	orrs	r2, r3
 8002c46:	7bbb      	ldrb	r3, [r7, #14]
 8002c48:	015b      	lsls	r3, r3, #5
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <readReg+0x1b0>)
 8002c52:	619a      	str	r2, [r3, #24]
 8002c54:	7bbb      	ldrb	r3, [r7, #14]
 8002c56:	105b      	asrs	r3, r3, #1
 8002c58:	f003 0208 	and.w	r2, r3, #8
 8002c5c:	7bbb      	ldrb	r3, [r7, #14]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	431a      	orrs	r2, r3
 8002c66:	7bbb      	ldrb	r3, [r7, #14]
 8002c68:	105b      	asrs	r3, r3, #1
 8002c6a:	f003 0320 	and.w	r3, r3, #32
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	7bbb      	ldrb	r3, [r7, #14]
 8002c72:	10db      	asrs	r3, r3, #3
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	; (8002cf4 <readReg+0x1ac>)
 8002c7c:	619a      	str	r2, [r3, #24]
 8002c7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c82:	481c      	ldr	r0, [pc, #112]	; (8002cf4 <readReg+0x1ac>)
 8002c84:	f7fe ffdc 	bl	8001c40 <PIN_LOW>
 8002c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c8c:	4819      	ldr	r0, [pc, #100]	; (8002cf4 <readReg+0x1ac>)
 8002c8e:	f7fe ffe7 	bl	8001c60 <PIN_HIGH>
 8002c92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c96:	4817      	ldr	r0, [pc, #92]	; (8002cf4 <readReg+0x1ac>)
 8002c98:	f7fe ffe2 	bl	8001c60 <PIN_HIGH>
 8002c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ca0:	4814      	ldr	r0, [pc, #80]	; (8002cf4 <readReg+0x1ac>)
 8002ca2:	f7fe ffdd 	bl	8001c60 <PIN_HIGH>
    setReadDir();
 8002ca6:	f7ff f907 	bl	8001eb8 <setReadDir>
    delay(1);    //1us should be adequate
 8002caa:	2001      	movs	r0, #1
 8002cac:	f7fe ffb0 	bl	8001c10 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8002cb0:	f7ff fe5c 	bl	800296c <read16bits>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	81bb      	strh	r3, [r7, #12]
 8002cb8:	797b      	ldrb	r3, [r7, #5]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	717b      	strb	r3, [r7, #5]
 8002cc0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	daf3      	bge.n	8002cb0 <readReg+0x168>
    RD_IDLE;
 8002cc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ccc:	4809      	ldr	r0, [pc, #36]	; (8002cf4 <readReg+0x1ac>)
 8002cce:	f7fe ffc7 	bl	8001c60 <PIN_HIGH>
    CS_IDLE;
 8002cd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cd6:	4806      	ldr	r0, [pc, #24]	; (8002cf0 <readReg+0x1a8>)
 8002cd8:	f7fe ffc2 	bl	8001c60 <PIN_HIGH>
    setWriteDir();
 8002cdc:	f7ff f918 	bl	8001f10 <setWriteDir>
    return ret;
 8002ce0:	89bb      	ldrh	r3, [r7, #12]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	2000030c 	.word	0x2000030c
 8002cf0:	40020400 	.word	0x40020400
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40021400 	.word	0x40021400
 8002cfc:	40021800 	.word	0x40021800

08002d00 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff1a 	bl	8002b48 <readReg>
 8002d14:	4603      	mov	r3, r0
 8002d16:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff13 	bl	8002b48 <readReg>
 8002d22:	4603      	mov	r3, r0
 8002d24:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 8002d26:	89fb      	ldrh	r3, [r7, #14]
 8002d28:	041a      	lsls	r2, r3, #16
 8002d2a:	89bb      	ldrh	r3, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	2100      	movs	r1, #0
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff feff 	bl	8002b48 <readReg>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	2101      	movs	r1, #1
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fef8 	bl	8002b48 <readReg>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	2102      	movs	r1, #2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fef1 	bl	8002b48 <readReg>
 8002d66:	4603      	mov	r3, r0
 8002d68:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8002d6a:	89fb      	ldrh	r3, [r7, #14]
 8002d6c:	061b      	lsls	r3, r3, #24
 8002d6e:	89ba      	ldrh	r2, [r7, #12]
 8002d70:	0212      	lsls	r2, r2, #8
 8002d72:	4313      	orrs	r3, r2
 8002d74:	897a      	ldrh	r2, [r7, #10]
 8002d76:	0a12      	lsrs	r2, r2, #8
 8002d78:	b292      	uxth	r2, r2
 8002d7a:	4313      	orrs	r3, r2
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <tft_init>:


void tft_init(uint16_t ID)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 8002d96:	4bc4      	ldr	r3, [pc, #784]	; (80030a8 <tft_init+0x324>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 8002d9c:	4ac3      	ldr	r2, [pc, #780]	; (80030ac <tft_init+0x328>)
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	8013      	strh	r3, [r2, #0]
 8002da2:	4bc2      	ldr	r3, [pc, #776]	; (80030ac <tft_init+0x328>)
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	f249 0290 	movw	r2, #37008	; 0x9090
 8002daa:	4293      	cmp	r3, r2
 8002dac:	f000 8164 	beq.w	8003078 <tft_init+0x2f4>
 8002db0:	f249 0290 	movw	r2, #37008	; 0x9090
 8002db4:	4293      	cmp	r3, r2
 8002db6:	dc7f      	bgt.n	8002eb8 <tft_init+0x134>
 8002db8:	f244 7247 	movw	r2, #18247	; 0x4747
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	f000 8145 	beq.w	800304c <tft_init+0x2c8>
 8002dc2:	f244 7247 	movw	r2, #18247	; 0x4747
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	dc34      	bgt.n	8002e34 <tft_init+0xb0>
 8002dca:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8002dce:	f000 8104 	beq.w	8002fda <tft_init+0x256>
 8002dd2:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8002dd6:	dc13      	bgt.n	8002e00 <tft_init+0x7c>
 8002dd8:	2b99      	cmp	r3, #153	; 0x99
 8002dda:	f000 8181 	beq.w	80030e0 <tft_init+0x35c>
 8002dde:	2b99      	cmp	r3, #153	; 0x99
 8002de0:	dc03      	bgt.n	8002dea <tft_init+0x66>
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	f000 8191 	beq.w	800310a <tft_init+0x386>
 8002de8:	e268      	b.n	80032bc <tft_init+0x538>
 8002dea:	f241 5205 	movw	r2, #5381	; 0x1505
 8002dee:	4293      	cmp	r3, r2
 8002df0:	f000 8195 	beq.w	800311e <tft_init+0x39a>
 8002df4:	f241 5211 	movw	r2, #5393	; 0x1511
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	f000 80da 	beq.w	8002fb2 <tft_init+0x22e>
 8002dfe:	e25d      	b.n	80032bc <tft_init+0x538>
 8002e00:	f241 5281 	movw	r2, #5505	; 0x1581
 8002e04:	4293      	cmp	r3, r2
 8002e06:	f000 81f4 	beq.w	80031f2 <tft_init+0x46e>
 8002e0a:	f241 5281 	movw	r2, #5505	; 0x1581
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	dc05      	bgt.n	8002e1e <tft_init+0x9a>
 8002e12:	f241 5226 	movw	r2, #5414	; 0x1526
 8002e16:	4293      	cmp	r3, r2
 8002e18:	f000 80e8 	beq.w	8002fec <tft_init+0x268>
 8002e1c:	e24e      	b.n	80032bc <tft_init+0x538>
 8002e1e:	f241 6202 	movw	r2, #5634	; 0x1602
 8002e22:	4293      	cmp	r3, r2
 8002e24:	f000 81af 	beq.w	8003186 <tft_init+0x402>
 8002e28:	f242 0253 	movw	r2, #8275	; 0x2053
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	f000 81b3 	beq.w	8003198 <tft_init+0x414>
 8002e32:	e243      	b.n	80032bc <tft_init+0x538>
 8002e34:	f247 5275 	movw	r2, #30069	; 0x7575
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	f000 810c 	beq.w	8003056 <tft_init+0x2d2>
 8002e3e:	f247 5275 	movw	r2, #30069	; 0x7575
 8002e42:	4293      	cmp	r3, r2
 8002e44:	dc19      	bgt.n	8002e7a <tft_init+0xf6>
 8002e46:	f245 4208 	movw	r2, #21512	; 0x5408
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	f000 8162 	beq.w	8003114 <tft_init+0x390>
 8002e50:	f245 4208 	movw	r2, #21512	; 0x5408
 8002e54:	4293      	cmp	r3, r2
 8002e56:	dc05      	bgt.n	8002e64 <tft_init+0xe0>
 8002e58:	f245 3210 	movw	r2, #21264	; 0x5310
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	f000 80ce 	beq.w	8002ffe <tft_init+0x27a>
 8002e62:	e22b      	b.n	80032bc <tft_init+0x538>
 8002e64:	f246 7267 	movw	r2, #26471	; 0x6767
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	f000 80f4 	beq.w	8003056 <tft_init+0x2d2>
 8002e6e:	f646 0209 	movw	r2, #26633	; 0x6809
 8002e72:	4293      	cmp	r3, r2
 8002e74:	f000 815e 	beq.w	8003134 <tft_init+0x3b0>
 8002e78:	e220      	b.n	80032bc <tft_init+0x538>
 8002e7a:	f247 7296 	movw	r2, #30614	; 0x7796
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	f000 81e8 	beq.w	8003254 <tft_init+0x4d0>
 8002e84:	f247 7296 	movw	r2, #30614	; 0x7796
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	dc0a      	bgt.n	8002ea2 <tft_init+0x11e>
 8002e8c:	f247 7289 	movw	r2, #30601	; 0x7789
 8002e90:	4293      	cmp	r3, r2
 8002e92:	f000 80c9 	beq.w	8003028 <tft_init+0x2a4>
 8002e96:	f247 7293 	movw	r2, #30611	; 0x7793
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	f000 81ff 	beq.w	800329e <tft_init+0x51a>
 8002ea0:	e20c      	b.n	80032bc <tft_init+0x538>
 8002ea2:	f248 0231 	movw	r2, #32817	; 0x8031
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	f000 80c7 	beq.w	800303a <tft_init+0x2b6>
 8002eac:	f248 3257 	movw	r2, #33623	; 0x8357
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	f000 80dc 	beq.w	800306e <tft_init+0x2ea>
 8002eb6:	e201      	b.n	80032bc <tft_init+0x538>
 8002eb8:	f249 3240 	movw	r2, #37696	; 0x9340
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	f000 818a 	beq.w	80031d6 <tft_init+0x452>
 8002ec2:	f249 3240 	movw	r2, #37696	; 0x9340
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	dc3c      	bgt.n	8002f44 <tft_init+0x1c0>
 8002eca:	f249 3228 	movw	r2, #37672	; 0x9328
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	f000 8135 	beq.w	800313e <tft_init+0x3ba>
 8002ed4:	f249 3228 	movw	r2, #37672	; 0x9328
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	dc19      	bgt.n	8002f10 <tft_init+0x18c>
 8002edc:	f249 3220 	movw	r2, #37664	; 0x9320
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	f000 811c 	beq.w	800311e <tft_init+0x39a>
 8002ee6:	f249 3220 	movw	r2, #37664	; 0x9320
 8002eea:	4293      	cmp	r3, r2
 8002eec:	dc05      	bgt.n	8002efa <tft_init+0x176>
 8002eee:	f249 3202 	movw	r2, #37634	; 0x9302
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	f000 815a 	beq.w	80031ac <tft_init+0x428>
 8002ef8:	e1e0      	b.n	80032bc <tft_init+0x538>
 8002efa:	f249 3225 	movw	r2, #37669	; 0x9325
 8002efe:	4293      	cmp	r3, r2
 8002f00:	f000 811d 	beq.w	800313e <tft_init+0x3ba>
 8002f04:	f249 3227 	movw	r2, #37671	; 0x9327
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	f000 8128 	beq.w	800315e <tft_init+0x3da>
 8002f0e:	e1d5      	b.n	80032bc <tft_init+0x538>
 8002f10:	f249 3231 	movw	r2, #37681	; 0x9331
 8002f14:	4293      	cmp	r3, r2
 8002f16:	f000 8117 	beq.w	8003148 <tft_init+0x3c4>
 8002f1a:	f249 3231 	movw	r2, #37681	; 0x9331
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	dc05      	bgt.n	8002f2e <tft_init+0x1aa>
 8002f22:	f249 3229 	movw	r2, #37673	; 0x9329
 8002f26:	4293      	cmp	r3, r2
 8002f28:	f000 814a 	beq.w	80031c0 <tft_init+0x43c>
 8002f2c:	e1c6      	b.n	80032bc <tft_init+0x538>
 8002f2e:	f249 3235 	movw	r2, #37685	; 0x9335
 8002f32:	4293      	cmp	r3, r2
 8002f34:	f000 8108 	beq.w	8003148 <tft_init+0x3c4>
 8002f38:	f249 3238 	movw	r2, #37688	; 0x9338
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	f000 813a 	beq.w	80031b6 <tft_init+0x432>
 8002f42:	e1bb      	b.n	80032bc <tft_init+0x538>
 8002f44:	f249 4288 	movw	r2, #38024	; 0x9488
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	dc14      	bgt.n	8002f76 <tft_init+0x1f2>
 8002f4c:	f249 4287 	movw	r2, #38023	; 0x9487
 8002f50:	4293      	cmp	r3, r2
 8002f52:	f280 8184 	bge.w	800325e <tft_init+0x4da>
 8002f56:	f249 4281 	movw	r2, #38017	; 0x9481
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	f000 814e 	beq.w	80031fc <tft_init+0x478>
 8002f60:	f249 4286 	movw	r2, #38022	; 0x9486
 8002f64:	4293      	cmp	r3, r2
 8002f66:	f000 8160 	beq.w	800322a <tft_init+0x4a6>
 8002f6a:	f249 3241 	movw	r2, #37697	; 0x9341
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	f000 8136 	beq.w	80031e0 <tft_init+0x45c>
 8002f74:	e1a2      	b.n	80032bc <tft_init+0x538>
 8002f76:	f24b 5205 	movw	r2, #46341	; 0xb505
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	f000 8186 	beq.w	800328c <tft_init+0x508>
 8002f80:	f24b 5205 	movw	r2, #46341	; 0xb505
 8002f84:	4293      	cmp	r3, r2
 8002f86:	dc09      	bgt.n	8002f9c <tft_init+0x218>
 8002f88:	f249 5295 	movw	r2, #38293	; 0x9595
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d062      	beq.n	8003056 <tft_init+0x2d2>
 8002f90:	f64a 4211 	movw	r2, #44049	; 0xac11
 8002f94:	4293      	cmp	r3, r2
 8002f96:	f000 8104 	beq.w	80031a2 <tft_init+0x41e>
 8002f9a:	e18f      	b.n	80032bc <tft_init+0x538>
 8002f9c:	f24b 5209 	movw	r2, #46345	; 0xb509
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	f000 817c 	beq.w	800329e <tft_init+0x51a>
 8002fa6:	f24c 5205 	movw	r2, #50437	; 0xc505
 8002faa:	4293      	cmp	r3, r2
 8002fac:	f000 816e 	beq.w	800328c <tft_init+0x508>
 8002fb0:	e184      	b.n	80032bc <tft_init+0x538>
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8002fb2:	4b3f      	ldr	r3, [pc, #252]	; (80030b0 <tft_init+0x32c>)
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 8002fb8:	4b3e      	ldr	r3, [pc, #248]	; (80030b4 <tft_init+0x330>)
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002fc0:	4b3d      	ldr	r3, [pc, #244]	; (80030b8 <tft_init+0x334>)
 8002fc2:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002fca:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002fcc:	4b3b      	ldr	r3, [pc, #236]	; (80030bc <tft_init+0x338>)
 8002fce:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002fd6:	801a      	strh	r2, [r3, #0]
        break;
 8002fd8:	e176      	b.n	80032c8 <tft_init+0x544>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002fda:	4b35      	ldr	r3, [pc, #212]	; (80030b0 <tft_init+0x32c>)
 8002fdc:	f240 4213 	movw	r2, #1043	; 0x413
 8002fe0:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 8002fe2:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <tft_init+0x33c>)
 8002fe4:	61fb      	str	r3, [r7, #28]
 8002fe6:	2306      	movs	r3, #6
 8002fe8:	837b      	strh	r3, [r7, #26]
        break;
 8002fea:	e16d      	b.n	80032c8 <tft_init+0x544>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002fec:	4b30      	ldr	r3, [pc, #192]	; (80030b0 <tft_init+0x32c>)
 8002fee:	f240 4213 	movw	r2, #1043	; 0x413
 8002ff2:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 8002ff4:	4b33      	ldr	r3, [pc, #204]	; (80030c4 <tft_init+0x340>)
 8002ff6:	61fb      	str	r3, [r7, #28]
 8002ff8:	230c      	movs	r3, #12
 8002ffa:	837b      	strh	r3, [r7, #26]
        break;
 8002ffc:	e164      	b.n	80032c8 <tft_init+0x544>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8002ffe:	4b2c      	ldr	r3, [pc, #176]	; (80030b0 <tft_init+0x32c>)
 8003000:	f640 6213 	movw	r2, #3603	; 0xe13
 8003004:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 8003006:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <tft_init+0x344>)
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	2302      	movs	r3, #2
 800300c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800300e:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <tft_init+0x334>)
 8003010:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003018:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800301a:	4b28      	ldr	r3, [pc, #160]	; (80030bc <tft_init+0x338>)
 800301c:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003024:	801a      	strh	r2, [r3, #0]
        break;
 8003026:	e14f      	b.n	80032c8 <tft_init+0x544>
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003028:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <tft_init+0x32c>)
 800302a:	f240 4213 	movw	r2, #1043	; 0x413
 800302e:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 8003030:	4b26      	ldr	r3, [pc, #152]	; (80030cc <tft_init+0x348>)
 8003032:	61fb      	str	r3, [r7, #28]
 8003034:	2341      	movs	r3, #65	; 0x41
 8003036:	837b      	strh	r3, [r7, #26]
        break;
 8003038:	e146      	b.n	80032c8 <tft_init+0x544>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 800303a:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <tft_init+0x32c>)
 800303c:	f241 4213 	movw	r2, #5139	; 0x1413
 8003040:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 8003042:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <tft_init+0x34c>)
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	2312      	movs	r3, #18
 8003048:	837b      	strh	r3, [r7, #26]
        break;
 800304a:	e13d      	b.n	80032c8 <tft_init+0x544>

#ifdef SUPPORT_8347D
    case 0x4747:       //HX8347-D
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | AUTO_READINC | READ_24BITS;
 800304c:	4b18      	ldr	r3, [pc, #96]	; (80030b0 <tft_init+0x32c>)
 800304e:	f241 6213 	movw	r2, #5651	; 0x1613
 8003052:	801a      	strh	r2, [r3, #0]
		goto common_8347DGI;
 8003054:	e003      	b.n	800305e <tft_init+0x2da>
    case 0x6767:       //HX8367-A
	case 0x7575:       //HX8347-G
	case 0x9595:       //HX8347-I
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS;
 8003056:	4b16      	ldr	r3, [pc, #88]	; (80030b0 <tft_init+0x32c>)
 8003058:	f241 4201 	movw	r2, #5121	; 0x1401
 800305c:	801a      	strh	r2, [r3, #0]
      common_8347DGI:
		is8347 = 1;
 800305e:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <tft_init+0x350>)
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
            TFTLCD_DELAY8, 40,
            0x28, 1, 0x3F,      //GON=1, DTE=1, D=1100

            0x16, 1, 0x18,
        };
        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
 8003064:	2170      	movs	r1, #112	; 0x70
 8003066:	481c      	ldr	r0, [pc, #112]	; (80030d8 <tft_init+0x354>)
 8003068:	f7ff fba4 	bl	80027b4 <init_table>
        break;
 800306c:	e12c      	b.n	80032c8 <tft_init+0x544>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 800306e:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <tft_init+0x32c>)
 8003070:	f241 4203 	movw	r2, #5123	; 0x1403
 8003074:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 8003076:	e003      	b.n	8003080 <tft_init+0x2fc>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <tft_init+0x32c>)
 800307a:	f241 4213 	movw	r2, #5139	; 0x1413
 800307e:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 8003080:	2301      	movs	r3, #1
 8003082:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 8003084:	4b15      	ldr	r3, [pc, #84]	; (80030dc <tft_init+0x358>)
 8003086:	61fb      	str	r3, [r7, #28]
 8003088:	2302      	movs	r3, #2
 800308a:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800308c:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <tft_init+0x334>)
 800308e:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003096:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003098:	4b08      	ldr	r3, [pc, #32]	; (80030bc <tft_init+0x338>)
 800309a:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030a2:	801a      	strh	r2, [r3, #0]
        break;
 80030a4:	e110      	b.n	80032c8 <tft_init+0x544>
 80030a6:	bf00      	nop
 80030a8:	20000660 	.word	0x20000660
 80030ac:	2000065e 	.word	0x2000065e
 80030b0:	20000650 	.word	0x20000650
 80030b4:	08009108 	.word	0x08009108
 80030b8:	08001cf5 	.word	0x08001cf5
 80030bc:	08001cdd 	.word	0x08001cdd
 80030c0:	0800910c 	.word	0x0800910c
 80030c4:	08009114 	.word	0x08009114
 80030c8:	08009120 	.word	0x08009120
 80030cc:	08009124 	.word	0x08009124
 80030d0:	08009168 	.word	0x08009168
 80030d4:	2000030d 	.word	0x2000030d
 80030d8:	0800917c 	.word	0x0800917c
 80030dc:	080091ec 	.word	0x080091ec

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80030e0:	4ba3      	ldr	r3, [pc, #652]	; (8003370 <tft_init+0x5ec>)
 80030e2:	f241 4213 	movw	r2, #5139	; 0x1413
 80030e6:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 80030e8:	4ba2      	ldr	r3, [pc, #648]	; (8003374 <tft_init+0x5f0>)
 80030ea:	61fb      	str	r3, [r7, #28]
 80030ec:	231d      	movs	r3, #29
 80030ee:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80030f0:	4ba1      	ldr	r3, [pc, #644]	; (8003378 <tft_init+0x5f4>)
 80030f2:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80030fa:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80030fc:	4b9f      	ldr	r3, [pc, #636]	; (800337c <tft_init+0x5f8>)
 80030fe:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003106:	801a      	strh	r2, [r3, #0]
        break;
 8003108:	e0de      	b.n	80032c8 <tft_init+0x544>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 800310a:	4b99      	ldr	r3, [pc, #612]	; (8003370 <tft_init+0x5ec>)
 800310c:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8003110:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 8003112:	e008      	b.n	8003126 <tft_init+0x3a2>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 8003114:	4b96      	ldr	r3, [pc, #600]	; (8003370 <tft_init+0x5ec>)
 8003116:	f241 0204 	movw	r2, #4100	; 0x1004
 800311a:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 800311c:	e003      	b.n	8003126 <tft_init+0x3a2>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 800311e:	4b94      	ldr	r3, [pc, #592]	; (8003370 <tft_init+0x5ec>)
 8003120:	f241 0204 	movw	r2, #4100	; 0x1004
 8003124:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 8003126:	2301      	movs	r3, #1
 8003128:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 800312a:	21d8      	movs	r1, #216	; 0xd8
 800312c:	4894      	ldr	r0, [pc, #592]	; (8003380 <tft_init+0x5fc>)
 800312e:	f7ff fb99 	bl	8002864 <init_table16>
        break;
 8003132:	e0c9      	b.n	80032c8 <tft_init+0x544>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8003134:	4b8e      	ldr	r3, [pc, #568]	; (8003370 <tft_init+0x5ec>)
 8003136:	f241 1202 	movw	r2, #4354	; 0x1102
 800313a:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 800313c:	e008      	b.n	8003150 <tft_init+0x3cc>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 800313e:	4b8c      	ldr	r3, [pc, #560]	; (8003370 <tft_init+0x5ec>)
 8003140:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8003144:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8003146:	e003      	b.n	8003150 <tft_init+0x3cc>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 8003148:	4b89      	ldr	r3, [pc, #548]	; (8003370 <tft_init+0x5ec>)
 800314a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800314e:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 8003150:	2301      	movs	r3, #1
 8003152:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8003154:	21cc      	movs	r1, #204	; 0xcc
 8003156:	488b      	ldr	r0, [pc, #556]	; (8003384 <tft_init+0x600>)
 8003158:	f7ff fb84 	bl	8002864 <init_table16>
        break;
 800315c:	e0b4      	b.n	80032c8 <tft_init+0x544>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 800315e:	4b84      	ldr	r3, [pc, #528]	; (8003370 <tft_init+0x5ec>)
 8003160:	f240 4203 	movw	r2, #1027	; 0x403
 8003164:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 8003166:	4b88      	ldr	r3, [pc, #544]	; (8003388 <tft_init+0x604>)
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	231e      	movs	r3, #30
 800316c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800316e:	4b82      	ldr	r3, [pc, #520]	; (8003378 <tft_init+0x5f4>)
 8003170:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003178:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800317a:	4b80      	ldr	r3, [pc, #512]	; (800337c <tft_init+0x5f8>)
 800317c:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	22f0      	movs	r2, #240	; 0xf0
 8003182:	801a      	strh	r2, [r3, #0]
        break;
 8003184:	e0a0      	b.n	80032c8 <tft_init+0x544>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 8003186:	4b7a      	ldr	r3, [pc, #488]	; (8003370 <tft_init+0x5ec>)
 8003188:	f240 4203 	movw	r2, #1027	; 0x403
 800318c:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 800318e:	4b7f      	ldr	r3, [pc, #508]	; (800338c <tft_init+0x608>)
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	2306      	movs	r3, #6
 8003194:	837b      	strh	r3, [r7, #26]
        break;
 8003196:	e097      	b.n	80032c8 <tft_init+0x544>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 8003198:	4b75      	ldr	r3, [pc, #468]	; (8003370 <tft_init+0x5ec>)
 800319a:	f241 4217 	movw	r2, #5143	; 0x1417
 800319e:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80031a0:	e012      	b.n	80031c8 <tft_init+0x444>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 80031a2:	4b73      	ldr	r3, [pc, #460]	; (8003370 <tft_init+0x5ec>)
 80031a4:	f241 4213 	movw	r2, #5139	; 0x1413
 80031a8:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80031aa:	e00d      	b.n	80031c8 <tft_init+0x444>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80031ac:	4b70      	ldr	r3, [pc, #448]	; (8003370 <tft_init+0x5ec>)
 80031ae:	f240 4203 	movw	r2, #1027	; 0x403
 80031b2:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80031b4:	e008      	b.n	80031c8 <tft_init+0x444>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80031b6:	4b6e      	ldr	r3, [pc, #440]	; (8003370 <tft_init+0x5ec>)
 80031b8:	f240 4213 	movw	r2, #1043	; 0x413
 80031bc:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80031be:	e003      	b.n	80031c8 <tft_init+0x444>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 80031c0:	4b6b      	ldr	r3, [pc, #428]	; (8003370 <tft_init+0x5ec>)
 80031c2:	f241 6203 	movw	r2, #5635	; 0x1603
 80031c6:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 80031c8:	2301      	movs	r3, #1
 80031ca:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 80031cc:	4b70      	ldr	r3, [pc, #448]	; (8003390 <tft_init+0x60c>)
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	2303      	movs	r3, #3
 80031d2:	837b      	strh	r3, [r7, #26]
        break;
 80031d4:	e078      	b.n	80032c8 <tft_init+0x544>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 80031d6:	4b66      	ldr	r3, [pc, #408]	; (8003370 <tft_init+0x5ec>)
 80031d8:	f241 4213 	movw	r2, #5139	; 0x1413
 80031dc:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 80031de:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80031e0:	4b63      	ldr	r3, [pc, #396]	; (8003370 <tft_init+0x5ec>)
 80031e2:	f240 4213 	movw	r2, #1043	; 0x413
 80031e6:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 80031e8:	4b6a      	ldr	r3, [pc, #424]	; (8003394 <tft_init+0x610>)
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	2365      	movs	r3, #101	; 0x65
 80031ee:	837b      	strh	r3, [r7, #26]
        break;
 80031f0:	e06a      	b.n	80032c8 <tft_init+0x544>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 80031f2:	4b5f      	ldr	r3, [pc, #380]	; (8003370 <tft_init+0x5ec>)
 80031f4:	f240 4213 	movw	r2, #1043	; 0x413
 80031f8:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 80031fa:	e003      	b.n	8003204 <tft_init+0x480>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 80031fc:	4b5c      	ldr	r3, [pc, #368]	; (8003370 <tft_init+0x5ec>)
 80031fe:	f240 4207 	movw	r2, #1031	; 0x407
 8003202:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 8003204:	2301      	movs	r3, #1
 8003206:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 8003208:	4b63      	ldr	r3, [pc, #396]	; (8003398 <tft_init+0x614>)
 800320a:	61fb      	str	r3, [r7, #28]
 800320c:	2345      	movs	r3, #69	; 0x45
 800320e:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 8003210:	4b59      	ldr	r3, [pc, #356]	; (8003378 <tft_init+0x5f4>)
 8003212:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800321a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800321c:	4b57      	ldr	r3, [pc, #348]	; (800337c <tft_init+0x5f8>)
 800321e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003226:	801a      	strh	r2, [r3, #0]
        break;
 8003228:	e04e      	b.n	80032c8 <tft_init+0x544>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 800322a:	4b51      	ldr	r3, [pc, #324]	; (8003370 <tft_init+0x5ec>)
 800322c:	f240 4203 	movw	r2, #1027	; 0x403
 8003230:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 8003232:	4b5a      	ldr	r3, [pc, #360]	; (800339c <tft_init+0x618>)
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	233b      	movs	r3, #59	; 0x3b
 8003238:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800323a:	4b4f      	ldr	r3, [pc, #316]	; (8003378 <tft_init+0x5f4>)
 800323c:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003244:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003246:	4b4d      	ldr	r3, [pc, #308]	; (800337c <tft_init+0x5f8>)
 8003248:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003250:	801a      	strh	r2, [r3, #0]
        break;
 8003252:	e039      	b.n	80032c8 <tft_init+0x544>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 8003254:	4b46      	ldr	r3, [pc, #280]	; (8003370 <tft_init+0x5ec>)
 8003256:	f240 4203 	movw	r2, #1027	; 0x403
 800325a:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 800325c:	e003      	b.n	8003266 <tft_init+0x4e2>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800325e:	4b44      	ldr	r3, [pc, #272]	; (8003370 <tft_init+0x5ec>)
 8003260:	f240 4213 	movw	r2, #1043	; 0x413
 8003264:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 8003266:	2301      	movs	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 800326a:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <tft_init+0x61c>)
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	232b      	movs	r3, #43	; 0x2b
 8003270:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003272:	4b41      	ldr	r3, [pc, #260]	; (8003378 <tft_init+0x5f4>)
 8003274:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800327c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800327e:	4b3f      	ldr	r3, [pc, #252]	; (800337c <tft_init+0x5f8>)
 8003280:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003288:	801a      	strh	r2, [r3, #0]
        break;
 800328a:	e01d      	b.n	80032c8 <tft_init+0x544>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 800328c:	4b38      	ldr	r3, [pc, #224]	; (8003370 <tft_init+0x5ec>)
 800328e:	f241 0208 	movw	r2, #4104	; 0x1008
 8003292:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8003294:	21b0      	movs	r1, #176	; 0xb0
 8003296:	4843      	ldr	r0, [pc, #268]	; (80033a4 <tft_init+0x620>)
 8003298:	f7ff fae4 	bl	8002864 <init_table16>
        break;
 800329c:	e014      	b.n	80032c8 <tft_init+0x544>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 800329e:	4b34      	ldr	r3, [pc, #208]	; (8003370 <tft_init+0x5ec>)
 80032a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032a4:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 80032a6:	21c0      	movs	r1, #192	; 0xc0
 80032a8:	483f      	ldr	r0, [pc, #252]	; (80033a8 <tft_init+0x624>)
 80032aa:	f7ff fadb 	bl	8002864 <init_table16>
        p16 = (int16_t *) & height;
 80032ae:	4b32      	ldr	r3, [pc, #200]	; (8003378 <tft_init+0x5f4>)
 80032b0:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80032b8:	801a      	strh	r2, [r3, #0]
        break;
 80032ba:	e005      	b.n	80032c8 <tft_init+0x544>
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 80032bc:	4b2f      	ldr	r3, [pc, #188]	; (800337c <tft_init+0x5f8>)
 80032be:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	2200      	movs	r2, #0
 80032c4:	801a      	strh	r2, [r3, #0]
        break;
 80032c6:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 80032c8:	4b29      	ldr	r3, [pc, #164]	; (8003370 <tft_init+0x5ec>)
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf14      	ite	ne
 80032d4:	2301      	movne	r3, #1
 80032d6:	2300      	moveq	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	b29a      	uxth	r2, r3
 80032dc:	4b33      	ldr	r3, [pc, #204]	; (80033ac <tft_init+0x628>)
 80032de:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00d      	beq.n	8003302 <tft_init+0x57e>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 80032e6:	2109      	movs	r1, #9
 80032e8:	4831      	ldr	r0, [pc, #196]	; (80033b0 <tft_init+0x62c>)
 80032ea:	f7ff fa63 	bl	80027b4 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 80032ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80032f2:	4619      	mov	r1, r3
 80032f4:	69f8      	ldr	r0, [r7, #28]
 80032f6:	f7ff fa5d 	bl	80027b4 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 80032fa:	2106      	movs	r1, #6
 80032fc:	482d      	ldr	r0, [pc, #180]	; (80033b4 <tft_init+0x630>)
 80032fe:	f7ff fa59 	bl	80027b4 <init_table>
    }
    setRotation(0);             //PORTRAIT
 8003302:	2000      	movs	r0, #0
 8003304:	f000 ff7a 	bl	80041fc <setRotation>
    invertDisplay(false);
 8003308:	2000      	movs	r0, #0
 800330a:	f001 fd45 	bl	8004d98 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 800330e:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <tft_init+0x634>)
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	f249 4288 	movw	r2, #38024	; 0x9488
 8003316:	4293      	cmp	r3, r2
 8003318:	d125      	bne.n	8003366 <tft_init+0x5e2>
		is555 = 0;
 800331a:	4b28      	ldr	r3, [pc, #160]	; (80033bc <tft_init+0x638>)
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 8003320:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003324:	2100      	movs	r1, #0
 8003326:	2000      	movs	r0, #0
 8003328:	f001 f9e8 	bl	80046fc <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 800332c:	2100      	movs	r1, #0
 800332e:	2000      	movs	r0, #0
 8003330:	f7fe fd84 	bl	8001e3c <readPixel>
 8003334:	4603      	mov	r3, r0
 8003336:	461a      	mov	r2, r3
 8003338:	f64f 731f 	movw	r3, #65311	; 0xff1f
 800333c:	429a      	cmp	r2, r3
 800333e:	d112      	bne.n	8003366 <tft_init+0x5e2>
			uint8_t pixfmt = 0x06;
 8003340:	2306      	movs	r3, #6
 8003342:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8003344:	f107 030f 	add.w	r3, r7, #15
 8003348:	2201      	movs	r2, #1
 800334a:	4619      	mov	r1, r3
 800334c:	203a      	movs	r0, #58	; 0x3a
 800334e:	f7fe fd9f 	bl	8001e90 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 8003352:	4b07      	ldr	r3, [pc, #28]	; (8003370 <tft_init+0x5ec>)
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	f023 0310 	bic.w	r3, r3, #16
 800335a:	b29a      	uxth	r2, r3
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <tft_init+0x5ec>)
 800335e:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 8003360:	4b16      	ldr	r3, [pc, #88]	; (80033bc <tft_init+0x638>)
 8003362:	2201      	movs	r2, #1
 8003364:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 8003366:	bf00      	nop
 8003368:	3720      	adds	r7, #32
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000650 	.word	0x20000650
 8003374:	080091f0 	.word	0x080091f0
 8003378:	08001cf5 	.word	0x08001cf5
 800337c:	08001cdd 	.word	0x08001cdd
 8003380:	08009210 	.word	0x08009210
 8003384:	080092e8 	.word	0x080092e8
 8003388:	080093b4 	.word	0x080093b4
 800338c:	080093d4 	.word	0x080093d4
 8003390:	080093dc 	.word	0x080093dc
 8003394:	080093e0 	.word	0x080093e0
 8003398:	08009448 	.word	0x08009448
 800339c:	08009490 	.word	0x08009490
 80033a0:	080094cc 	.word	0x080094cc
 80033a4:	080094f8 	.word	0x080094f8
 80033a8:	080095a8 	.word	0x080095a8
 80033ac:	20000654 	.word	0x20000654
 80033b0:	08009668 	.word	0x08009668
 80033b4:	08009674 	.word	0x08009674
 80033b8:	2000065e 	.word	0x2000065e
 80033bc:	2000030e 	.word	0x2000030e

080033c0 <readID>:




uint16_t readID(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 80033c6:	2100      	movs	r1, #0
 80033c8:	2000      	movs	r0, #0
 80033ca:	f7ff fbbd 	bl	8002b48 <readReg>
 80033ce:	4603      	mov	r3, r0
 80033d0:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 80033d2:	89fb      	ldrh	r3, [r7, #14]
 80033d4:	f245 4208 	movw	r2, #21512	; 0x5408
 80033d8:	4293      	cmp	r3, r2
 80033da:	d102      	bne.n	80033e2 <readID+0x22>
        return 0x5408;
 80033dc:	f245 4308 	movw	r3, #21512	; 0x5408
 80033e0:	e128      	b.n	8003634 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 80033e2:	89fb      	ldrh	r3, [r7, #14]
 80033e4:	f245 4220 	movw	r2, #21536	; 0x5420
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d102      	bne.n	80033f2 <readID+0x32>
        return 0x5420;
 80033ec:	f245 4320 	movw	r3, #21536	; 0x5420
 80033f0:	e120      	b.n	8003634 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 80033f2:	89fb      	ldrh	r3, [r7, #14]
 80033f4:	f648 1289 	movw	r2, #35209	; 0x8989
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d102      	bne.n	8003402 <readID+0x42>
        return 0x1289;
 80033fc:	f241 2389 	movw	r3, #4745	; 0x1289
 8003400:	e118      	b.n	8003634 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 8003402:	2100      	movs	r1, #0
 8003404:	2067      	movs	r0, #103	; 0x67
 8003406:	f7ff fb9f 	bl	8002b48 <readReg>
 800340a:	4603      	mov	r3, r0
 800340c:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 800340e:	89fb      	ldrh	r3, [r7, #14]
 8003410:	f244 7247 	movw	r2, #18247	; 0x4747
 8003414:	4293      	cmp	r3, r2
 8003416:	d102      	bne.n	800341e <readID+0x5e>
        return 0x8347;
 8003418:	f248 3347 	movw	r3, #33607	; 0x8347
 800341c:	e10a      	b.n	8003634 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 800341e:	20a1      	movs	r0, #161	; 0xa1
 8003420:	f7ff fc6e 	bl	8002d00 <readReg32>
 8003424:	4603      	mov	r3, r0
 8003426:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8003428:	89fb      	ldrh	r3, [r7, #14]
 800342a:	f246 1201 	movw	r2, #24833	; 0x6101
 800342e:	4293      	cmp	r3, r2
 8003430:	d102      	bne.n	8003438 <readID+0x78>
        return 0x1963;
 8003432:	f641 1363 	movw	r3, #6499	; 0x1963
 8003436:	e0fd      	b.n	8003634 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8003438:	89fb      	ldrh	r3, [r7, #14]
 800343a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800343e:	4293      	cmp	r3, r2
 8003440:	d102      	bne.n	8003448 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8003442:	f241 5326 	movw	r3, #5414	; 0x1526
 8003446:	e0f5      	b.n	8003634 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 8003448:	20bf      	movs	r0, #191	; 0xbf
 800344a:	f7ff fc74 	bl	8002d36 <readReg40>
 800344e:	4603      	mov	r3, r0
 8003450:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8003452:	89fb      	ldrh	r3, [r7, #14]
 8003454:	f248 3257 	movw	r2, #33623	; 0x8357
 8003458:	4293      	cmp	r3, r2
 800345a:	d102      	bne.n	8003462 <readID+0xa2>
        return 0x8357;
 800345c:	f248 3357 	movw	r3, #33623	; 0x8357
 8003460:	e0e8      	b.n	8003634 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8003462:	89fb      	ldrh	r3, [r7, #14]
 8003464:	f249 4281 	movw	r2, #38017	; 0x9481
 8003468:	4293      	cmp	r3, r2
 800346a:	d102      	bne.n	8003472 <readID+0xb2>
        return 0x9481;
 800346c:	f249 4381 	movw	r3, #38017	; 0x9481
 8003470:	e0e0      	b.n	8003634 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8003472:	89fb      	ldrh	r3, [r7, #14]
 8003474:	f241 5211 	movw	r2, #5393	; 0x1511
 8003478:	4293      	cmp	r3, r2
 800347a:	d102      	bne.n	8003482 <readID+0xc2>
        return 0x1511;
 800347c:	f241 5311 	movw	r3, #5393	; 0x1511
 8003480:	e0d8      	b.n	8003634 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8003482:	89fb      	ldrh	r3, [r7, #14]
 8003484:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8003488:	d102      	bne.n	8003490 <readID+0xd0>
        return 0x1520;
 800348a:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 800348e:	e0d1      	b.n	8003634 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8003490:	89fb      	ldrh	r3, [r7, #14]
 8003492:	f241 5226 	movw	r2, #5414	; 0x1526
 8003496:	4293      	cmp	r3, r2
 8003498:	d102      	bne.n	80034a0 <readID+0xe0>
        return 0x1526;
 800349a:	f241 5326 	movw	r3, #5414	; 0x1526
 800349e:	e0c9      	b.n	8003634 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 80034a0:	89fb      	ldrh	r3, [r7, #14]
 80034a2:	f241 5281 	movw	r2, #5505	; 0x1581
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d102      	bne.n	80034b0 <readID+0xf0>
        return 0x1581;
 80034aa:	f241 5381 	movw	r3, #5505	; 0x1581
 80034ae:	e0c1      	b.n	8003634 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 80034b0:	89fb      	ldrh	r3, [r7, #14]
 80034b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80034b6:	d102      	bne.n	80034be <readID+0xfe>
        return 0x6814;
 80034b8:	f646 0314 	movw	r3, #26644	; 0x6814
 80034bc:	e0ba      	b.n	8003634 <readID+0x274>
    ret = readReg32(0xD4);
 80034be:	20d4      	movs	r0, #212	; 0xd4
 80034c0:	f7ff fc1e 	bl	8002d00 <readReg32>
 80034c4:	4603      	mov	r3, r0
 80034c6:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 80034c8:	89fb      	ldrh	r3, [r7, #14]
 80034ca:	f245 3210 	movw	r2, #21264	; 0x5310
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d102      	bne.n	80034d8 <readID+0x118>
        return 0x5310;
 80034d2:	f245 3310 	movw	r3, #21264	; 0x5310
 80034d6:	e0ad      	b.n	8003634 <readID+0x274>
    ret = readReg32(0xD7);
 80034d8:	20d7      	movs	r0, #215	; 0xd7
 80034da:	f7ff fc11 	bl	8002d00 <readReg32>
 80034de:	4603      	mov	r3, r0
 80034e0:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 80034e2:	89fb      	ldrh	r3, [r7, #14]
 80034e4:	f248 0231 	movw	r2, #32817	; 0x8031
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d102      	bne.n	80034f2 <readID+0x132>
        return 0x8031;
 80034ec:	f248 0331 	movw	r3, #32817	; 0x8031
 80034f0:	e0a0      	b.n	8003634 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 80034f2:	20ef      	movs	r0, #239	; 0xef
 80034f4:	f7ff fc1f 	bl	8002d36 <readReg40>
 80034f8:	4603      	mov	r3, r0
 80034fa:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 80034fc:	89fb      	ldrh	r3, [r7, #14]
 80034fe:	f249 3227 	movw	r2, #37671	; 0x9327
 8003502:	4293      	cmp	r3, r2
 8003504:	d102      	bne.n	800350c <readID+0x14c>
        return 0x9327;
 8003506:	f249 3327 	movw	r3, #37671	; 0x9327
 800350a:	e093      	b.n	8003634 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 800350c:	20fe      	movs	r0, #254	; 0xfe
 800350e:	f7ff fbf7 	bl	8002d00 <readReg32>
 8003512:	4603      	mov	r3, r0
 8003514:	0a1b      	lsrs	r3, r3, #8
 8003516:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8003518:	89fb      	ldrh	r3, [r7, #14]
 800351a:	f242 0253 	movw	r2, #8275	; 0x2053
 800351e:	4293      	cmp	r3, r2
 8003520:	d102      	bne.n	8003528 <readID+0x168>
        return 0x2053;
 8003522:	f242 0353 	movw	r3, #8275	; 0x2053
 8003526:	e085      	b.n	8003634 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8003528:	2004      	movs	r0, #4
 800352a:	f7ff fbe9 	bl	8002d00 <readReg32>
 800352e:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	0c1b      	lsrs	r3, r3, #16
 8003534:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d122      	bne.n	8003586 <readID+0x1c6>
 8003540:	89fb      	ldrh	r3, [r7, #14]
 8003542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003546:	d11e      	bne.n	8003586 <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8003548:	4a3c      	ldr	r2, [pc, #240]	; (800363c <readID+0x27c>)
 800354a:	1d3b      	adds	r3, r7, #4
 800354c:	6812      	ldr	r2, [r2, #0]
 800354e:	4611      	mov	r1, r2
 8003550:	8019      	strh	r1, [r3, #0]
 8003552:	3302      	adds	r3, #2
 8003554:	0c12      	lsrs	r2, r2, #16
 8003556:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	2203      	movs	r2, #3
 800355c:	4619      	mov	r1, r3
 800355e:	20b9      	movs	r0, #185	; 0xb9
 8003560:	f7fe fc96 	bl	8001e90 <pushCommand>
        msb = readReg(0xD0,0);
 8003564:	2100      	movs	r1, #0
 8003566:	20d0      	movs	r0, #208	; 0xd0
 8003568:	f7ff faee 	bl	8002b48 <readReg>
 800356c:	4603      	mov	r3, r0
 800356e:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	2b99      	cmp	r3, #153	; 0x99
 8003574:	d101      	bne.n	800357a <readID+0x1ba>
 8003576:	2399      	movs	r3, #153	; 0x99
 8003578:	e05c      	b.n	8003634 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	2b90      	cmp	r3, #144	; 0x90
 800357e:	d102      	bne.n	8003586 <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8003580:	f249 0390 	movw	r3, #37008	; 0x9090
 8003584:	e056      	b.n	8003634 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8003586:	89fb      	ldrh	r3, [r7, #14]
 8003588:	f241 5226 	movw	r2, #5414	; 0x1526
 800358c:	4293      	cmp	r3, r2
 800358e:	d102      	bne.n	8003596 <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8003590:	f241 5326 	movw	r3, #5414	; 0x1526
 8003594:	e04e      	b.n	8003634 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8003596:	89fb      	ldrh	r3, [r7, #14]
 8003598:	f648 12f0 	movw	r2, #35312	; 0x89f0
 800359c:	4293      	cmp	r3, r2
 800359e:	d102      	bne.n	80035a6 <readID+0x1e6>
        return 0x7735;
 80035a0:	f247 7335 	movw	r3, #30517	; 0x7735
 80035a4:	e046      	b.n	8003634 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 80035a6:	89fb      	ldrh	r3, [r7, #14]
 80035a8:	f248 5252 	movw	r2, #34130	; 0x8552
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d102      	bne.n	80035b6 <readID+0x1f6>
        return 0x7789;
 80035b0:	f247 7389 	movw	r3, #30601	; 0x7789
 80035b4:	e03e      	b.n	8003634 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 80035b6:	89fb      	ldrh	r3, [r7, #14]
 80035b8:	f64a 4211 	movw	r2, #44049	; 0xac11
 80035bc:	4293      	cmp	r3, r2
 80035be:	d102      	bne.n	80035c6 <readID+0x206>
        return 0xAC11;
 80035c0:	f64a 4311 	movw	r3, #44049	; 0xac11
 80035c4:	e036      	b.n	8003634 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 80035c6:	20d3      	movs	r0, #211	; 0xd3
 80035c8:	f7ff fb9a 	bl	8002d00 <readReg32>
 80035cc:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	0a1b      	lsrs	r3, r3, #8
 80035d2:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 80035d4:	89fb      	ldrh	r3, [r7, #14]
 80035d6:	f249 1263 	movw	r2, #37219	; 0x9163
 80035da:	4293      	cmp	r3, r2
 80035dc:	d101      	bne.n	80035e2 <readID+0x222>
 80035de:	89fb      	ldrh	r3, [r7, #14]
 80035e0:	e028      	b.n	8003634 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 80035e2:	20d3      	movs	r0, #211	; 0xd3
 80035e4:	f7ff fb8c 	bl	8002d00 <readReg32>
 80035e8:	4603      	mov	r3, r0
 80035ea:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 80035ec:	89fb      	ldrh	r3, [r7, #14]
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	2b93      	cmp	r3, #147	; 0x93
 80035f8:	d00b      	beq.n	8003612 <readID+0x252>
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	2b94      	cmp	r3, #148	; 0x94
 80035fe:	d008      	beq.n	8003612 <readID+0x252>
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	2b98      	cmp	r3, #152	; 0x98
 8003604:	d005      	beq.n	8003612 <readID+0x252>
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	2b77      	cmp	r3, #119	; 0x77
 800360a:	d002      	beq.n	8003612 <readID+0x252>
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	2b16      	cmp	r3, #22
 8003610:	d101      	bne.n	8003616 <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8003612:	89fb      	ldrh	r3, [r7, #14]
 8003614:	e00e      	b.n	8003634 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 8003616:	89fb      	ldrh	r3, [r7, #14]
 8003618:	2bd3      	cmp	r3, #211	; 0xd3
 800361a:	d004      	beq.n	8003626 <readID+0x266>
 800361c:	89fb      	ldrh	r3, [r7, #14]
 800361e:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 8003622:	4293      	cmp	r3, r2
 8003624:	d101      	bne.n	800362a <readID+0x26a>
        return ret;             //16-bit write-only bus
 8003626:	89fb      	ldrh	r3, [r7, #14]
 8003628:	e004      	b.n	8003634 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 800362a:	2100      	movs	r1, #0
 800362c:	2000      	movs	r0, #0
 800362e:	f7ff fa8b 	bl	8002b48 <readReg>
 8003632:	4603      	mov	r3, r0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	080090ec 	.word	0x080090ec

08003640 <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b08b      	sub	sp, #44	; 0x2c
 8003644:	af00      	add	r7, sp, #0
 8003646:	60ba      	str	r2, [r7, #8]
 8003648:	461a      	mov	r2, r3
 800364a:	4603      	mov	r3, r0
 800364c:	81fb      	strh	r3, [r7, #14]
 800364e:	460b      	mov	r3, r1
 8003650:	81bb      	strh	r3, [r7, #12]
 8003652:	4613      	mov	r3, r2
 8003654:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 8003656:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <readGRAM+0x88>)
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 800365c:	88fa      	ldrh	r2, [r7, #6]
 800365e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003660:	fb12 f303 	smulbb	r3, r2, r3
 8003664:	b29b      	uxth	r3, r3
 8003666:	847b      	strh	r3, [r7, #34]	; 0x22
 8003668:	2300      	movs	r3, #0
 800366a:	843b      	strh	r3, [r7, #32]
 800366c:	2300      	movs	r3, #0
 800366e:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <readGRAM+0x8c>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d107      	bne.n	8003688 <readGRAM+0x48>
 8003678:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <readGRAM+0x90>)
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <readGRAM+0x48>
        _MR = 0x2E;
 8003684:	232e      	movs	r3, #46	; 0x2e
 8003686:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <readGRAM+0x94>)
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	f241 6202 	movw	r2, #5634	; 0x1602
 8003690:	4293      	cmp	r3, r2
 8003692:	d101      	bne.n	8003698 <readGRAM+0x58>
 8003694:	232e      	movs	r3, #46	; 0x2e
 8003696:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8003698:	89fa      	ldrh	r2, [r7, #14]
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	4413      	add	r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	b21c      	sxth	r4, r3
 80036a6:	89ba      	ldrh	r2, [r7, #12]
 80036a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80036aa:	4413      	add	r3, r2
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	b21b      	sxth	r3, r3
 80036b4:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80036b8:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80036bc:	4622      	mov	r2, r4
 80036be:	f001 f921 	bl	8004904 <setAddrWindow>
    while (n > 0) {
 80036c2:	f000 bd74 	b.w	80041ae <readGRAM+0xb6e>
 80036c6:	bf00      	nop
 80036c8:	2000064e 	.word	0x2000064e
 80036cc:	2000030d 	.word	0x2000030d
 80036d0:	20000650 	.word	0x20000650
 80036d4:	2000065e 	.word	0x2000065e
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 80036d8:	4b9d      	ldr	r3, [pc, #628]	; (8003950 <readGRAM+0x310>)
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d111      	bne.n	8003708 <readGRAM+0xc8>
            WriteCmdData(_MC, x + col);
 80036e4:	4b9b      	ldr	r3, [pc, #620]	; (8003954 <readGRAM+0x314>)
 80036e6:	8818      	ldrh	r0, [r3, #0]
 80036e8:	89fa      	ldrh	r2, [r7, #14]
 80036ea:	8bfb      	ldrh	r3, [r7, #30]
 80036ec:	4413      	add	r3, r2
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	4619      	mov	r1, r3
 80036f2:	f7fe fbbb 	bl	8001e6c <WriteCmdData>
            WriteCmdData(_MP, y + row);
 80036f6:	4b98      	ldr	r3, [pc, #608]	; (8003958 <readGRAM+0x318>)
 80036f8:	8818      	ldrh	r0, [r3, #0]
 80036fa:	89ba      	ldrh	r2, [r7, #12]
 80036fc:	8c3b      	ldrh	r3, [r7, #32]
 80036fe:	4413      	add	r3, r2
 8003700:	b29b      	uxth	r3, r3
 8003702:	4619      	mov	r1, r3
 8003704:	f7fe fbb2 	bl	8001e6c <WriteCmdData>
        }
        CS_ACTIVE;
 8003708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800370c:	4893      	ldr	r0, [pc, #588]	; (800395c <readGRAM+0x31c>)
 800370e:	f7fe fa97 	bl	8001c40 <PIN_LOW>
        WriteCmd(_MR);
 8003712:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003716:	4892      	ldr	r0, [pc, #584]	; (8003960 <readGRAM+0x320>)
 8003718:	f7fe fa92 	bl	8001c40 <PIN_LOW>
 800371c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	b29b      	uxth	r3, r3
 8003722:	777b      	strb	r3, [r7, #29]
 8003724:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003726:	773b      	strb	r3, [r7, #28]
 8003728:	4b8d      	ldr	r3, [pc, #564]	; (8003960 <readGRAM+0x320>)
 800372a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800372e:	619a      	str	r2, [r3, #24]
 8003730:	4b8c      	ldr	r3, [pc, #560]	; (8003964 <readGRAM+0x324>)
 8003732:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8003736:	619a      	str	r2, [r3, #24]
 8003738:	4b8b      	ldr	r3, [pc, #556]	; (8003968 <readGRAM+0x328>)
 800373a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800373e:	619a      	str	r2, [r3, #24]
 8003740:	7f7b      	ldrb	r3, [r7, #29]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4a88      	ldr	r2, [pc, #544]	; (8003968 <readGRAM+0x328>)
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	6193      	str	r3, [r2, #24]
 800374c:	7f7b      	ldrb	r3, [r7, #29]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8003754:	7f7b      	ldrb	r3, [r7, #29]
 8003756:	015b      	lsls	r3, r3, #5
 8003758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375c:	431a      	orrs	r2, r3
 800375e:	7f7b      	ldrb	r3, [r7, #29]
 8003760:	015b      	lsls	r3, r3, #5
 8003762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003766:	431a      	orrs	r2, r3
 8003768:	4b7e      	ldr	r3, [pc, #504]	; (8003964 <readGRAM+0x324>)
 800376a:	619a      	str	r2, [r3, #24]
 800376c:	7f7b      	ldrb	r3, [r7, #29]
 800376e:	105b      	asrs	r3, r3, #1
 8003770:	f003 0208 	and.w	r2, r3, #8
 8003774:	7f7b      	ldrb	r3, [r7, #29]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377c:	431a      	orrs	r2, r3
 800377e:	7f7b      	ldrb	r3, [r7, #29]
 8003780:	105b      	asrs	r3, r3, #1
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	431a      	orrs	r2, r3
 8003788:	7f7b      	ldrb	r3, [r7, #29]
 800378a:	10db      	asrs	r3, r3, #3
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	431a      	orrs	r2, r3
 8003792:	4b73      	ldr	r3, [pc, #460]	; (8003960 <readGRAM+0x320>)
 8003794:	619a      	str	r2, [r3, #24]
 8003796:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800379a:	4871      	ldr	r0, [pc, #452]	; (8003960 <readGRAM+0x320>)
 800379c:	f7fe fa50 	bl	8001c40 <PIN_LOW>
 80037a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037a4:	486e      	ldr	r0, [pc, #440]	; (8003960 <readGRAM+0x320>)
 80037a6:	f7fe fa5b 	bl	8001c60 <PIN_HIGH>
 80037aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037ae:	486c      	ldr	r0, [pc, #432]	; (8003960 <readGRAM+0x320>)
 80037b0:	f7fe fa56 	bl	8001c60 <PIN_HIGH>
 80037b4:	4b6a      	ldr	r3, [pc, #424]	; (8003960 <readGRAM+0x320>)
 80037b6:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80037ba:	619a      	str	r2, [r3, #24]
 80037bc:	4b69      	ldr	r3, [pc, #420]	; (8003964 <readGRAM+0x324>)
 80037be:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80037c2:	619a      	str	r2, [r3, #24]
 80037c4:	4b68      	ldr	r3, [pc, #416]	; (8003968 <readGRAM+0x328>)
 80037c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037ca:	619a      	str	r2, [r3, #24]
 80037cc:	7f3b      	ldrb	r3, [r7, #28]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4a65      	ldr	r2, [pc, #404]	; (8003968 <readGRAM+0x328>)
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	6193      	str	r3, [r2, #24]
 80037d8:	7f3b      	ldrb	r3, [r7, #28]
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80037e0:	7f3b      	ldrb	r3, [r7, #28]
 80037e2:	015b      	lsls	r3, r3, #5
 80037e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e8:	431a      	orrs	r2, r3
 80037ea:	7f3b      	ldrb	r3, [r7, #28]
 80037ec:	015b      	lsls	r3, r3, #5
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	431a      	orrs	r2, r3
 80037f4:	4b5b      	ldr	r3, [pc, #364]	; (8003964 <readGRAM+0x324>)
 80037f6:	619a      	str	r2, [r3, #24]
 80037f8:	7f3b      	ldrb	r3, [r7, #28]
 80037fa:	105b      	asrs	r3, r3, #1
 80037fc:	f003 0208 	and.w	r2, r3, #8
 8003800:	7f3b      	ldrb	r3, [r7, #28]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	431a      	orrs	r2, r3
 800380a:	7f3b      	ldrb	r3, [r7, #28]
 800380c:	105b      	asrs	r3, r3, #1
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	431a      	orrs	r2, r3
 8003814:	7f3b      	ldrb	r3, [r7, #28]
 8003816:	10db      	asrs	r3, r3, #3
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	431a      	orrs	r2, r3
 800381e:	4b50      	ldr	r3, [pc, #320]	; (8003960 <readGRAM+0x320>)
 8003820:	619a      	str	r2, [r3, #24]
 8003822:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003826:	484e      	ldr	r0, [pc, #312]	; (8003960 <readGRAM+0x320>)
 8003828:	f7fe fa0a 	bl	8001c40 <PIN_LOW>
 800382c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003830:	484b      	ldr	r0, [pc, #300]	; (8003960 <readGRAM+0x320>)
 8003832:	f7fe fa15 	bl	8001c60 <PIN_HIGH>
 8003836:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800383a:	4849      	ldr	r0, [pc, #292]	; (8003960 <readGRAM+0x320>)
 800383c:	f7fe fa10 	bl	8001c60 <PIN_HIGH>
 8003840:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003844:	4846      	ldr	r0, [pc, #280]	; (8003960 <readGRAM+0x320>)
 8003846:	f7fe fa0b 	bl	8001c60 <PIN_HIGH>
        setReadDir();
 800384a:	f7fe fb35 	bl	8001eb8 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 800384e:	4b40      	ldr	r3, [pc, #256]	; (8003950 <readGRAM+0x310>)
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	f040 816a 	bne.w	8003b30 <readGRAM+0x4f0>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 800385c:	4b3c      	ldr	r3, [pc, #240]	; (8003950 <readGRAM+0x310>)
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d105      	bne.n	8003874 <readGRAM+0x234>
 8003868:	4b40      	ldr	r3, [pc, #256]	; (800396c <readGRAM+0x32c>)
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	f241 2289 	movw	r2, #4745	; 0x1289
 8003870:	4293      	cmp	r3, r2
 8003872:	d17d      	bne.n	8003970 <readGRAM+0x330>
            READ_8(r);
 8003874:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003878:	4839      	ldr	r0, [pc, #228]	; (8003960 <readGRAM+0x320>)
 800387a:	f7fe f9f1 	bl	8001c60 <PIN_HIGH>
 800387e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003882:	4837      	ldr	r0, [pc, #220]	; (8003960 <readGRAM+0x320>)
 8003884:	f7fe f9dc 	bl	8001c40 <PIN_LOW>
 8003888:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800388c:	4834      	ldr	r0, [pc, #208]	; (8003960 <readGRAM+0x320>)
 800388e:	f7fe f9d7 	bl	8001c40 <PIN_LOW>
 8003892:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003896:	4832      	ldr	r0, [pc, #200]	; (8003960 <readGRAM+0x320>)
 8003898:	f7fe f9d2 	bl	8001c40 <PIN_LOW>
 800389c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038a0:	482f      	ldr	r0, [pc, #188]	; (8003960 <readGRAM+0x320>)
 80038a2:	f7fe f9cd 	bl	8001c40 <PIN_LOW>
 80038a6:	4b30      	ldr	r3, [pc, #192]	; (8003968 <readGRAM+0x328>)
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	4b2b      	ldr	r3, [pc, #172]	; (8003964 <readGRAM+0x324>)
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	0a1b      	lsrs	r3, r3, #8
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	4313      	orrs	r3, r2
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	4b27      	ldr	r3, [pc, #156]	; (8003964 <readGRAM+0x324>)
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	4313      	orrs	r3, r2
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	4b22      	ldr	r3, [pc, #136]	; (8003964 <readGRAM+0x324>)
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	095b      	lsrs	r3, r3, #5
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	4313      	orrs	r3, r2
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <readGRAM+0x320>)
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	4313      	orrs	r3, r2
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	4b18      	ldr	r3, [pc, #96]	; (8003960 <readGRAM+0x320>)
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	b2db      	uxtb	r3, r3
 800390c:	4313      	orrs	r3, r2
 800390e:	b2da      	uxtb	r2, r3
 8003910:	4b13      	ldr	r3, [pc, #76]	; (8003960 <readGRAM+0x320>)
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391e:	b2db      	uxtb	r3, r3
 8003920:	4313      	orrs	r3, r2
 8003922:	b2da      	uxtb	r2, r3
 8003924:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <readGRAM+0x320>)
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	b2db      	uxtb	r3, r3
 800392e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003932:	b2db      	uxtb	r3, r3
 8003934:	4313      	orrs	r3, r2
 8003936:	75fb      	strb	r3, [r7, #23]
 8003938:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800393c:	4808      	ldr	r0, [pc, #32]	; (8003960 <readGRAM+0x320>)
 800393e:	f7fe f98f 	bl	8001c60 <PIN_HIGH>
 8003942:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003946:	4806      	ldr	r0, [pc, #24]	; (8003960 <readGRAM+0x320>)
 8003948:	f7fe f98a 	bl	8001c60 <PIN_HIGH>
 800394c:	e0f0      	b.n	8003b30 <readGRAM+0x4f0>
 800394e:	bf00      	nop
 8003950:	20000650 	.word	0x20000650
 8003954:	20000658 	.word	0x20000658
 8003958:	20000656 	.word	0x20000656
 800395c:	40020400 	.word	0x40020400
 8003960:	40021000 	.word	0x40021000
 8003964:	40021400 	.word	0x40021400
 8003968:	40021800 	.word	0x40021800
 800396c:	2000065e 	.word	0x2000065e
        } else {
            READ_16(dummy);
 8003970:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003974:	48a8      	ldr	r0, [pc, #672]	; (8003c18 <readGRAM+0x5d8>)
 8003976:	f7fe f973 	bl	8001c60 <PIN_HIGH>
 800397a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800397e:	48a6      	ldr	r0, [pc, #664]	; (8003c18 <readGRAM+0x5d8>)
 8003980:	f7fe f95e 	bl	8001c40 <PIN_LOW>
 8003984:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003988:	48a3      	ldr	r0, [pc, #652]	; (8003c18 <readGRAM+0x5d8>)
 800398a:	f7fe f959 	bl	8001c40 <PIN_LOW>
 800398e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003992:	48a1      	ldr	r0, [pc, #644]	; (8003c18 <readGRAM+0x5d8>)
 8003994:	f7fe f954 	bl	8001c40 <PIN_LOW>
 8003998:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800399c:	489e      	ldr	r0, [pc, #632]	; (8003c18 <readGRAM+0x5d8>)
 800399e:	f7fe f94f 	bl	8001c40 <PIN_LOW>
 80039a2:	4b9e      	ldr	r3, [pc, #632]	; (8003c1c <readGRAM+0x5dc>)
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	085b      	lsrs	r3, r3, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	4b9b      	ldr	r3, [pc, #620]	; (8003c20 <readGRAM+0x5e0>)
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	4313      	orrs	r3, r2
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	4b97      	ldr	r3, [pc, #604]	; (8003c20 <readGRAM+0x5e0>)
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	4313      	orrs	r3, r2
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	4b92      	ldr	r3, [pc, #584]	; (8003c20 <readGRAM+0x5e0>)
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	4313      	orrs	r3, r2
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	4b8c      	ldr	r3, [pc, #560]	; (8003c18 <readGRAM+0x5d8>)
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	4313      	orrs	r3, r2
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	4b87      	ldr	r3, [pc, #540]	; (8003c18 <readGRAM+0x5d8>)
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	085b      	lsrs	r3, r3, #1
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	4b82      	ldr	r3, [pc, #520]	; (8003c18 <readGRAM+0x5d8>)
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	4b7d      	ldr	r3, [pc, #500]	; (8003c18 <readGRAM+0x5d8>)
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	4313      	orrs	r3, r2
 8003a32:	76fb      	strb	r3, [r7, #27]
 8003a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a38:	4877      	ldr	r0, [pc, #476]	; (8003c18 <readGRAM+0x5d8>)
 8003a3a:	f7fe f911 	bl	8001c60 <PIN_HIGH>
 8003a3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a42:	4875      	ldr	r0, [pc, #468]	; (8003c18 <readGRAM+0x5d8>)
 8003a44:	f7fe f90c 	bl	8001c60 <PIN_HIGH>
 8003a48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a4c:	4872      	ldr	r0, [pc, #456]	; (8003c18 <readGRAM+0x5d8>)
 8003a4e:	f7fe f907 	bl	8001c60 <PIN_HIGH>
 8003a52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a56:	4870      	ldr	r0, [pc, #448]	; (8003c18 <readGRAM+0x5d8>)
 8003a58:	f7fe f8f2 	bl	8001c40 <PIN_LOW>
 8003a5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a60:	486d      	ldr	r0, [pc, #436]	; (8003c18 <readGRAM+0x5d8>)
 8003a62:	f7fe f8ed 	bl	8001c40 <PIN_LOW>
 8003a66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a6a:	486b      	ldr	r0, [pc, #428]	; (8003c18 <readGRAM+0x5d8>)
 8003a6c:	f7fe f8e8 	bl	8001c40 <PIN_LOW>
 8003a70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a74:	4868      	ldr	r0, [pc, #416]	; (8003c18 <readGRAM+0x5d8>)
 8003a76:	f7fe f8e3 	bl	8001c40 <PIN_LOW>
 8003a7a:	4b68      	ldr	r3, [pc, #416]	; (8003c1c <readGRAM+0x5dc>)
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	085b      	lsrs	r3, r3, #1
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	4b65      	ldr	r3, [pc, #404]	; (8003c20 <readGRAM+0x5e0>)
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	0a1b      	lsrs	r3, r3, #8
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	4313      	orrs	r3, r2
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	4b61      	ldr	r3, [pc, #388]	; (8003c20 <readGRAM+0x5e0>)
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	4b5c      	ldr	r3, [pc, #368]	; (8003c20 <readGRAM+0x5e0>)
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	4313      	orrs	r3, r2
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	4b56      	ldr	r3, [pc, #344]	; (8003c18 <readGRAM+0x5d8>)
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	4b51      	ldr	r3, [pc, #324]	; (8003c18 <readGRAM+0x5d8>)
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	085b      	lsrs	r3, r3, #1
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	4b4c      	ldr	r3, [pc, #304]	; (8003c18 <readGRAM+0x5d8>)
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	4313      	orrs	r3, r2
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	4b47      	ldr	r3, [pc, #284]	; (8003c18 <readGRAM+0x5d8>)
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	833b      	strh	r3, [r7, #24]
 8003b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b10:	4841      	ldr	r0, [pc, #260]	; (8003c18 <readGRAM+0x5d8>)
 8003b12:	f7fe f8a5 	bl	8001c60 <PIN_HIGH>
 8003b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b1a:	483f      	ldr	r0, [pc, #252]	; (8003c18 <readGRAM+0x5d8>)
 8003b1c:	f7fe f8a0 	bl	8001c60 <PIN_HIGH>
 8003b20:	7efb      	ldrb	r3, [r7, #27]
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	b21a      	sxth	r2, r3
 8003b26:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	b21b      	sxth	r3, r3
 8003b2e:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8003b30:	4b3c      	ldr	r3, [pc, #240]	; (8003c24 <readGRAM+0x5e4>)
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	f241 5211 	movw	r2, #5393	; 0x1511
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	f040 8302 	bne.w	8004142 <readGRAM+0xb02>
 8003b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b42:	4835      	ldr	r0, [pc, #212]	; (8003c18 <readGRAM+0x5d8>)
 8003b44:	f7fe f88c 	bl	8001c60 <PIN_HIGH>
 8003b48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b4c:	4832      	ldr	r0, [pc, #200]	; (8003c18 <readGRAM+0x5d8>)
 8003b4e:	f7fe f877 	bl	8001c40 <PIN_LOW>
 8003b52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b56:	4830      	ldr	r0, [pc, #192]	; (8003c18 <readGRAM+0x5d8>)
 8003b58:	f7fe f872 	bl	8001c40 <PIN_LOW>
 8003b5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b60:	482d      	ldr	r0, [pc, #180]	; (8003c18 <readGRAM+0x5d8>)
 8003b62:	f7fe f86d 	bl	8001c40 <PIN_LOW>
 8003b66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b6a:	482b      	ldr	r0, [pc, #172]	; (8003c18 <readGRAM+0x5d8>)
 8003b6c:	f7fe f868 	bl	8001c40 <PIN_LOW>
 8003b70:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <readGRAM+0x5dc>)
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	4b28      	ldr	r3, [pc, #160]	; (8003c20 <readGRAM+0x5e0>)
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <readGRAM+0x5e0>)
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <readGRAM+0x5e0>)
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <readGRAM+0x5d8>)
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <readGRAM+0x5d8>)
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <readGRAM+0x5d8>)
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	4313      	orrs	r3, r2
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <readGRAM+0x5d8>)
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	75fb      	strb	r3, [r7, #23]
 8003c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c06:	4804      	ldr	r0, [pc, #16]	; (8003c18 <readGRAM+0x5d8>)
 8003c08:	f7fe f82a 	bl	8001c60 <PIN_HIGH>
 8003c0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c10:	4801      	ldr	r0, [pc, #4]	; (8003c18 <readGRAM+0x5d8>)
 8003c12:	f7fe f825 	bl	8001c60 <PIN_HIGH>
        while (n)
 8003c16:	e294      	b.n	8004142 <readGRAM+0xb02>
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40021800 	.word	0x40021800
 8003c20:	40021400 	.word	0x40021400
 8003c24:	2000065e 	.word	0x2000065e
        {
            if (_lcd_capable & READ_24BITS)
 8003c28:	4bac      	ldr	r3, [pc, #688]	; (8003edc <readGRAM+0x89c>)
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 8164 	beq.w	8003efe <readGRAM+0x8be>
            {
                READ_8(r);
 8003c36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c3a:	48a9      	ldr	r0, [pc, #676]	; (8003ee0 <readGRAM+0x8a0>)
 8003c3c:	f7fe f810 	bl	8001c60 <PIN_HIGH>
 8003c40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c44:	48a6      	ldr	r0, [pc, #664]	; (8003ee0 <readGRAM+0x8a0>)
 8003c46:	f7fd fffb 	bl	8001c40 <PIN_LOW>
 8003c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c4e:	48a4      	ldr	r0, [pc, #656]	; (8003ee0 <readGRAM+0x8a0>)
 8003c50:	f7fd fff6 	bl	8001c40 <PIN_LOW>
 8003c54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c58:	48a1      	ldr	r0, [pc, #644]	; (8003ee0 <readGRAM+0x8a0>)
 8003c5a:	f7fd fff1 	bl	8001c40 <PIN_LOW>
 8003c5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c62:	489f      	ldr	r0, [pc, #636]	; (8003ee0 <readGRAM+0x8a0>)
 8003c64:	f7fd ffec 	bl	8001c40 <PIN_LOW>
 8003c68:	4b9e      	ldr	r3, [pc, #632]	; (8003ee4 <readGRAM+0x8a4>)
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	4b9c      	ldr	r3, [pc, #624]	; (8003ee8 <readGRAM+0x8a8>)
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	0a1b      	lsrs	r3, r3, #8
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	4313      	orrs	r3, r2
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	4b97      	ldr	r3, [pc, #604]	; (8003ee8 <readGRAM+0x8a8>)
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	4313      	orrs	r3, r2
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	4b93      	ldr	r3, [pc, #588]	; (8003ee8 <readGRAM+0x8a8>)
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	4b8c      	ldr	r3, [pc, #560]	; (8003ee0 <readGRAM+0x8a0>)
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	4b87      	ldr	r3, [pc, #540]	; (8003ee0 <readGRAM+0x8a0>)
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4b83      	ldr	r3, [pc, #524]	; (8003ee0 <readGRAM+0x8a0>)
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	4b7e      	ldr	r3, [pc, #504]	; (8003ee0 <readGRAM+0x8a0>)
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	75fb      	strb	r3, [r7, #23]
 8003cfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cfe:	4878      	ldr	r0, [pc, #480]	; (8003ee0 <readGRAM+0x8a0>)
 8003d00:	f7fd ffae 	bl	8001c60 <PIN_HIGH>
 8003d04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d08:	4875      	ldr	r0, [pc, #468]	; (8003ee0 <readGRAM+0x8a0>)
 8003d0a:	f7fd ffa9 	bl	8001c60 <PIN_HIGH>
                READ_8(g);
 8003d0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d12:	4873      	ldr	r0, [pc, #460]	; (8003ee0 <readGRAM+0x8a0>)
 8003d14:	f7fd ffa4 	bl	8001c60 <PIN_HIGH>
 8003d18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d1c:	4870      	ldr	r0, [pc, #448]	; (8003ee0 <readGRAM+0x8a0>)
 8003d1e:	f7fd ff8f 	bl	8001c40 <PIN_LOW>
 8003d22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d26:	486e      	ldr	r0, [pc, #440]	; (8003ee0 <readGRAM+0x8a0>)
 8003d28:	f7fd ff8a 	bl	8001c40 <PIN_LOW>
 8003d2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d30:	486b      	ldr	r0, [pc, #428]	; (8003ee0 <readGRAM+0x8a0>)
 8003d32:	f7fd ff85 	bl	8001c40 <PIN_LOW>
 8003d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d3a:	4869      	ldr	r0, [pc, #420]	; (8003ee0 <readGRAM+0x8a0>)
 8003d3c:	f7fd ff80 	bl	8001c40 <PIN_LOW>
 8003d40:	4b68      	ldr	r3, [pc, #416]	; (8003ee4 <readGRAM+0x8a4>)
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	085b      	lsrs	r3, r3, #1
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	4b66      	ldr	r3, [pc, #408]	; (8003ee8 <readGRAM+0x8a8>)
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	4b61      	ldr	r3, [pc, #388]	; (8003ee8 <readGRAM+0x8a8>)
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	4b5d      	ldr	r3, [pc, #372]	; (8003ee8 <readGRAM+0x8a8>)
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	4313      	orrs	r3, r2
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	4b56      	ldr	r3, [pc, #344]	; (8003ee0 <readGRAM+0x8a0>)
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	4313      	orrs	r3, r2
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	4b51      	ldr	r3, [pc, #324]	; (8003ee0 <readGRAM+0x8a0>)
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	4313      	orrs	r3, r2
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	4b4d      	ldr	r3, [pc, #308]	; (8003ee0 <readGRAM+0x8a0>)
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	4b48      	ldr	r3, [pc, #288]	; (8003ee0 <readGRAM+0x8a0>)
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	757b      	strb	r3, [r7, #21]
 8003dd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dd6:	4842      	ldr	r0, [pc, #264]	; (8003ee0 <readGRAM+0x8a0>)
 8003dd8:	f7fd ff42 	bl	8001c60 <PIN_HIGH>
 8003ddc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003de0:	483f      	ldr	r0, [pc, #252]	; (8003ee0 <readGRAM+0x8a0>)
 8003de2:	f7fd ff3d 	bl	8001c60 <PIN_HIGH>
                READ_8(b);
 8003de6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dea:	483d      	ldr	r0, [pc, #244]	; (8003ee0 <readGRAM+0x8a0>)
 8003dec:	f7fd ff38 	bl	8001c60 <PIN_HIGH>
 8003df0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003df4:	483a      	ldr	r0, [pc, #232]	; (8003ee0 <readGRAM+0x8a0>)
 8003df6:	f7fd ff23 	bl	8001c40 <PIN_LOW>
 8003dfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dfe:	4838      	ldr	r0, [pc, #224]	; (8003ee0 <readGRAM+0x8a0>)
 8003e00:	f7fd ff1e 	bl	8001c40 <PIN_LOW>
 8003e04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e08:	4835      	ldr	r0, [pc, #212]	; (8003ee0 <readGRAM+0x8a0>)
 8003e0a:	f7fd ff19 	bl	8001c40 <PIN_LOW>
 8003e0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e12:	4833      	ldr	r0, [pc, #204]	; (8003ee0 <readGRAM+0x8a0>)
 8003e14:	f7fd ff14 	bl	8001c40 <PIN_LOW>
 8003e18:	4b32      	ldr	r3, [pc, #200]	; (8003ee4 <readGRAM+0x8a4>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <readGRAM+0x8a8>)
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	4313      	orrs	r3, r2
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <readGRAM+0x8a8>)
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	4313      	orrs	r3, r2
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <readGRAM+0x8a8>)
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <readGRAM+0x8a0>)
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <readGRAM+0x8a0>)
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	085b      	lsrs	r3, r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <readGRAM+0x8a0>)
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	4313      	orrs	r3, r2
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <readGRAM+0x8a0>)
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	753b      	strb	r3, [r7, #20]
 8003eaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003eae:	480c      	ldr	r0, [pc, #48]	; (8003ee0 <readGRAM+0x8a0>)
 8003eb0:	f7fd fed6 	bl	8001c60 <PIN_HIGH>
 8003eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003eb8:	4809      	ldr	r0, [pc, #36]	; (8003ee0 <readGRAM+0x8a0>)
 8003eba:	f7fd fed1 	bl	8001c60 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8003ebe:	4b07      	ldr	r3, [pc, #28]	; (8003edc <readGRAM+0x89c>)
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d010      	beq.n	8003eec <readGRAM+0x8ac>
                    ret = color565(b, g, r);
 8003eca:	7dfa      	ldrb	r2, [r7, #23]
 8003ecc:	7d79      	ldrb	r1, [r7, #21]
 8003ece:	7d3b      	ldrb	r3, [r7, #20]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fd ff8d 	bl	8001df0 <color565>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003eda:	e117      	b.n	800410c <readGRAM+0xacc>
 8003edc:	20000650 	.word	0x20000650
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40021800 	.word	0x40021800
 8003ee8:	40021400 	.word	0x40021400
                else
                    ret = color565(r, g, b);
 8003eec:	7d3a      	ldrb	r2, [r7, #20]
 8003eee:	7d79      	ldrb	r1, [r7, #21]
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fd ff7c 	bl	8001df0 <color565>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003efc:	e106      	b.n	800410c <readGRAM+0xacc>
            } else
            {
                READ_16(ret);
 8003efe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f02:	4893      	ldr	r0, [pc, #588]	; (8004150 <readGRAM+0xb10>)
 8003f04:	f7fd feac 	bl	8001c60 <PIN_HIGH>
 8003f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f0c:	4890      	ldr	r0, [pc, #576]	; (8004150 <readGRAM+0xb10>)
 8003f0e:	f7fd fe97 	bl	8001c40 <PIN_LOW>
 8003f12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f16:	488e      	ldr	r0, [pc, #568]	; (8004150 <readGRAM+0xb10>)
 8003f18:	f7fd fe92 	bl	8001c40 <PIN_LOW>
 8003f1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f20:	488b      	ldr	r0, [pc, #556]	; (8004150 <readGRAM+0xb10>)
 8003f22:	f7fd fe8d 	bl	8001c40 <PIN_LOW>
 8003f26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f2a:	4889      	ldr	r0, [pc, #548]	; (8004150 <readGRAM+0xb10>)
 8003f2c:	f7fd fe88 	bl	8001c40 <PIN_LOW>
 8003f30:	4b88      	ldr	r3, [pc, #544]	; (8004154 <readGRAM+0xb14>)
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	085b      	lsrs	r3, r3, #1
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	4b86      	ldr	r3, [pc, #536]	; (8004158 <readGRAM+0xb18>)
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	4b81      	ldr	r3, [pc, #516]	; (8004158 <readGRAM+0xb18>)
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	4b7d      	ldr	r3, [pc, #500]	; (8004158 <readGRAM+0xb18>)
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	4313      	orrs	r3, r2
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	4b76      	ldr	r3, [pc, #472]	; (8004150 <readGRAM+0xb10>)
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	4313      	orrs	r3, r2
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	4b71      	ldr	r3, [pc, #452]	; (8004150 <readGRAM+0xb10>)
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	085b      	lsrs	r3, r3, #1
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	4313      	orrs	r3, r2
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	4b6d      	ldr	r3, [pc, #436]	; (8004150 <readGRAM+0xb10>)
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	4313      	orrs	r3, r2
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	4b68      	ldr	r3, [pc, #416]	; (8004150 <readGRAM+0xb10>)
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	75bb      	strb	r3, [r7, #22]
 8003fc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fc6:	4862      	ldr	r0, [pc, #392]	; (8004150 <readGRAM+0xb10>)
 8003fc8:	f7fd fe4a 	bl	8001c60 <PIN_HIGH>
 8003fcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fd0:	485f      	ldr	r0, [pc, #380]	; (8004150 <readGRAM+0xb10>)
 8003fd2:	f7fd fe45 	bl	8001c60 <PIN_HIGH>
 8003fd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fda:	485d      	ldr	r0, [pc, #372]	; (8004150 <readGRAM+0xb10>)
 8003fdc:	f7fd fe40 	bl	8001c60 <PIN_HIGH>
 8003fe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fe4:	485a      	ldr	r0, [pc, #360]	; (8004150 <readGRAM+0xb10>)
 8003fe6:	f7fd fe2b 	bl	8001c40 <PIN_LOW>
 8003fea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fee:	4858      	ldr	r0, [pc, #352]	; (8004150 <readGRAM+0xb10>)
 8003ff0:	f7fd fe26 	bl	8001c40 <PIN_LOW>
 8003ff4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ff8:	4855      	ldr	r0, [pc, #340]	; (8004150 <readGRAM+0xb10>)
 8003ffa:	f7fd fe21 	bl	8001c40 <PIN_LOW>
 8003ffe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004002:	4853      	ldr	r0, [pc, #332]	; (8004150 <readGRAM+0xb10>)
 8004004:	f7fd fe1c 	bl	8001c40 <PIN_LOW>
 8004008:	4b52      	ldr	r3, [pc, #328]	; (8004154 <readGRAM+0xb14>)
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	085b      	lsrs	r3, r3, #1
 800400e:	b29b      	uxth	r3, r3
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	4b50      	ldr	r3, [pc, #320]	; (8004158 <readGRAM+0xb18>)
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	0a1b      	lsrs	r3, r3, #8
 800401c:	b29b      	uxth	r3, r3
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	b29b      	uxth	r3, r3
 8004024:	4313      	orrs	r3, r2
 8004026:	b29a      	uxth	r2, r3
 8004028:	4b4b      	ldr	r3, [pc, #300]	; (8004158 <readGRAM+0xb18>)
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	095b      	lsrs	r3, r3, #5
 800402e:	b29b      	uxth	r3, r3
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	b29b      	uxth	r3, r3
 8004036:	4313      	orrs	r3, r2
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b47      	ldr	r3, [pc, #284]	; (8004158 <readGRAM+0xb18>)
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	b29b      	uxth	r3, r3
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	b29b      	uxth	r3, r3
 8004048:	4313      	orrs	r3, r2
 800404a:	b29a      	uxth	r2, r3
 800404c:	4b40      	ldr	r3, [pc, #256]	; (8004150 <readGRAM+0xb10>)
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	b29b      	uxth	r3, r3
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	b29b      	uxth	r3, r3
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	b29b      	uxth	r3, r3
 800405c:	4313      	orrs	r3, r2
 800405e:	b29a      	uxth	r2, r3
 8004060:	4b3b      	ldr	r3, [pc, #236]	; (8004150 <readGRAM+0xb10>)
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	b29b      	uxth	r3, r3
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	b29b      	uxth	r3, r3
 800406e:	4313      	orrs	r3, r2
 8004070:	b29a      	uxth	r2, r3
 8004072:	4b37      	ldr	r3, [pc, #220]	; (8004150 <readGRAM+0xb10>)
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	b29b      	uxth	r3, r3
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	b29b      	uxth	r3, r3
 800407c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004080:	b29b      	uxth	r3, r3
 8004082:	4313      	orrs	r3, r2
 8004084:	b29a      	uxth	r2, r3
 8004086:	4b32      	ldr	r3, [pc, #200]	; (8004150 <readGRAM+0xb10>)
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	b29b      	uxth	r3, r3
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	b29b      	uxth	r3, r3
 8004090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004094:	b29b      	uxth	r3, r3
 8004096:	4313      	orrs	r3, r2
 8004098:	84fb      	strh	r3, [r7, #38]	; 0x26
 800409a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800409e:	482c      	ldr	r0, [pc, #176]	; (8004150 <readGRAM+0xb10>)
 80040a0:	f7fd fdde 	bl	8001c60 <PIN_HIGH>
 80040a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040a8:	4829      	ldr	r0, [pc, #164]	; (8004150 <readGRAM+0xb10>)
 80040aa:	f7fd fdd9 	bl	8001c60 <PIN_HIGH>
 80040ae:	7dbb      	ldrb	r3, [r7, #22]
 80040b0:	021b      	lsls	r3, r3, #8
 80040b2:	b21a      	sxth	r2, r3
 80040b4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80040b8:	4313      	orrs	r3, r2
 80040ba:	b21b      	sxth	r3, r3
 80040bc:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 80040be:	4b27      	ldr	r3, [pc, #156]	; (800415c <readGRAM+0xb1c>)
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <readGRAM+0xa9e>
                    ret = (ret >> 8) | (ret << 8);
 80040ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040cc:	0a1b      	lsrs	r3, r3, #8
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	b21a      	sxth	r2, r3
 80040d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	b21b      	sxth	r3, r3
 80040d8:	4313      	orrs	r3, r2
 80040da:	b21b      	sxth	r3, r3
 80040dc:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 80040de:	4b1f      	ldr	r3, [pc, #124]	; (800415c <readGRAM+0xb1c>)
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d010      	beq.n	800410c <readGRAM+0xacc>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 80040ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80040ee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80040f2:	b21a      	sxth	r2, r3
 80040f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040f6:	0adb      	lsrs	r3, r3, #11
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	b21b      	sxth	r3, r3
 80040fc:	4313      	orrs	r3, r2
 80040fe:	b21a      	sxth	r2, r3
 8004100:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004102:	02db      	lsls	r3, r3, #11
 8004104:	b21b      	sxth	r3, r3
 8004106:	4313      	orrs	r3, r2
 8004108:	b21b      	sxth	r3, r3
 800410a:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 800410c:	4b14      	ldr	r3, [pc, #80]	; (8004160 <readGRAM+0xb20>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <readGRAM+0xae0>
 8004114:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004116:	4618      	mov	r0, r3
 8004118:	f7fd fe18 	bl	8001d4c <color555_to_565>
 800411c:	4603      	mov	r3, r0
 800411e:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	1c9a      	adds	r2, r3, #2
 8004124:	60ba      	str	r2, [r7, #8]
 8004126:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004128:	801a      	strh	r2, [r3, #0]
            n--;
 800412a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29b      	uxth	r3, r3
 8004134:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <readGRAM+0xb1c>)
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d010      	beq.n	8004164 <readGRAM+0xb24>
        while (n)
 8004142:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004146:	2b00      	cmp	r3, #0
 8004148:	f47f ad6e 	bne.w	8003c28 <readGRAM+0x5e8>
 800414c:	e00b      	b.n	8004166 <readGRAM+0xb26>
 800414e:	bf00      	nop
 8004150:	40021000 	.word	0x40021000
 8004154:	40021800 	.word	0x40021800
 8004158:	40021400 	.word	0x40021400
 800415c:	20000650 	.word	0x20000650
 8004160:	2000030e 	.word	0x2000030e
                break;
 8004164:	bf00      	nop
        }
        if (++col >= w) {
 8004166:	8bfb      	ldrh	r3, [r7, #30]
 8004168:	3301      	adds	r3, #1
 800416a:	b29b      	uxth	r3, r3
 800416c:	83fb      	strh	r3, [r7, #30]
 800416e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004176:	429a      	cmp	r2, r3
 8004178:	db0d      	blt.n	8004196 <readGRAM+0xb56>
            col = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 800417e:	8c3b      	ldrh	r3, [r7, #32]
 8004180:	3301      	adds	r3, #1
 8004182:	b29b      	uxth	r3, r3
 8004184:	843b      	strh	r3, [r7, #32]
 8004186:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800418a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800418e:	429a      	cmp	r2, r3
 8004190:	db01      	blt.n	8004196 <readGRAM+0xb56>
                row = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 8004196:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800419a:	4815      	ldr	r0, [pc, #84]	; (80041f0 <readGRAM+0xbb0>)
 800419c:	f7fd fd60 	bl	8001c60 <PIN_HIGH>
        CS_IDLE;
 80041a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80041a4:	4813      	ldr	r0, [pc, #76]	; (80041f4 <readGRAM+0xbb4>)
 80041a6:	f7fd fd5b 	bl	8001c60 <PIN_HIGH>
        setWriteDir();
 80041aa:	f7fd feb1 	bl	8001f10 <setWriteDir>
    while (n > 0) {
 80041ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f73f aa90 	bgt.w	80036d8 <readGRAM+0x98>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 80041b8:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <readGRAM+0xbb8>)
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d110      	bne.n	80041e6 <readGRAM+0xba6>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 80041c4:	f7fd fd8a 	bl	8001cdc <width>
 80041c8:	4603      	mov	r3, r0
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	b21c      	sxth	r4, r3
 80041d0:	f7fd fd90 	bl	8001cf4 <height>
 80041d4:	4603      	mov	r3, r0
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29b      	uxth	r3, r3
 80041da:	b21b      	sxth	r3, r3
 80041dc:	4622      	mov	r2, r4
 80041de:	2100      	movs	r1, #0
 80041e0:	2000      	movs	r0, #0
 80041e2:	f000 fb8f 	bl	8004904 <setAddrWindow>
    return 0;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	372c      	adds	r7, #44	; 0x2c
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd90      	pop	{r4, r7, pc}
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40020400 	.word	0x40020400
 80041f8:	20000650 	.word	0x20000650

080041fc <setRotation>:

void setRotation(uint8_t r)
{
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 8004206:	4bab      	ldr	r3, [pc, #684]	; (80044b4 <setRotation+0x2b8>)
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	b2da      	uxtb	r2, r3
 8004214:	4ba8      	ldr	r3, [pc, #672]	; (80044b8 <setRotation+0x2bc>)
 8004216:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 8004218:	4ba7      	ldr	r3, [pc, #668]	; (80044b8 <setRotation+0x2bc>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <setRotation+0x2e>
 8004224:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004228:	e000      	b.n	800422c <setRotation+0x30>
 800422a:	22f0      	movs	r2, #240	; 0xf0
 800422c:	4ba3      	ldr	r3, [pc, #652]	; (80044bc <setRotation+0x2c0>)
 800422e:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8004230:	4ba1      	ldr	r3, [pc, #644]	; (80044b8 <setRotation+0x2bc>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <setRotation+0x44>
 800423c:	22f0      	movs	r2, #240	; 0xf0
 800423e:	e001      	b.n	8004244 <setRotation+0x48>
 8004240:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004244:	4b9e      	ldr	r3, [pc, #632]	; (80044c0 <setRotation+0x2c4>)
 8004246:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 8004248:	4b9b      	ldr	r3, [pc, #620]	; (80044b8 <setRotation+0x2bc>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b03      	cmp	r3, #3
 800424e:	d817      	bhi.n	8004280 <setRotation+0x84>
 8004250:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <setRotation+0x5c>)
 8004252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004256:	bf00      	nop
 8004258:	08004269 	.word	0x08004269
 800425c:	0800426f 	.word	0x0800426f
 8004260:	08004275 	.word	0x08004275
 8004264:	0800427b 	.word	0x0800427b
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8004268:	2348      	movs	r3, #72	; 0x48
 800426a:	72fb      	strb	r3, [r7, #11]
       break;
 800426c:	e008      	b.n	8004280 <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 800426e:	2328      	movs	r3, #40	; 0x28
 8004270:	72fb      	strb	r3, [r7, #11]
       break;
 8004272:	e005      	b.n	8004280 <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8004274:	2398      	movs	r3, #152	; 0x98
 8004276:	72fb      	strb	r3, [r7, #11]
       break;
 8004278:	e002      	b.n	8004280 <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 800427a:	23f8      	movs	r3, #248	; 0xf8
 800427c:	72fb      	strb	r3, [r7, #11]
       break;
 800427e:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8004280:	4b90      	ldr	r3, [pc, #576]	; (80044c4 <setRotation+0x2c8>)
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <setRotation+0x9c>
       val ^= 0x80;
 800428c:	7afa      	ldrb	r2, [r7, #11]
 800428e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8004292:	4053      	eors	r3, r2
 8004294:	b2db      	uxtb	r3, r3
 8004296:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 8004298:	4b8a      	ldr	r3, [pc, #552]	; (80044c4 <setRotation+0x2c8>)
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d004      	beq.n	80042ae <setRotation+0xb2>
       val ^= 0x40;
 80042a4:	7afb      	ldrb	r3, [r7, #11]
 80042a6:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 80042ae:	4b85      	ldr	r3, [pc, #532]	; (80044c4 <setRotation+0x2c8>)
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d004      	beq.n	80042c4 <setRotation+0xc8>
       val ^= 0x08;
 80042ba:	7afb      	ldrb	r3, [r7, #11]
 80042bc:	f083 0308 	eor.w	r3, r3, #8
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 80042c4:	4b7f      	ldr	r3, [pc, #508]	; (80044c4 <setRotation+0x2c8>)
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 8119 	beq.w	8004504 <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 80042d2:	4b7d      	ldr	r3, [pc, #500]	; (80044c8 <setRotation+0x2cc>)
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	f646 0214 	movw	r2, #26644	; 0x6814
 80042da:	4293      	cmp	r3, r2
 80042dc:	d128      	bne.n	8004330 <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 80042de:	7afb      	ldrb	r3, [r7, #11]
 80042e0:	b25b      	sxtb	r3, r3
 80042e2:	105b      	asrs	r3, r3, #1
 80042e4:	b25b      	sxtb	r3, r3
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ec:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 80042ee:	7afb      	ldrb	r3, [r7, #11]
 80042f0:	105b      	asrs	r3, r3, #1
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 80042fa:	7afb      	ldrb	r3, [r7, #11]
 80042fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004300:	b2db      	uxtb	r3, r3
 8004302:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 8004308:	8a3b      	ldrh	r3, [r7, #16]
 800430a:	b2da      	uxtb	r2, r3
 800430c:	89fb      	ldrh	r3, [r7, #14]
 800430e:	b2db      	uxtb	r3, r3
 8004310:	4313      	orrs	r3, r2
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f043 0302 	orr.w	r3, r3, #2
 8004318:	b2db      	uxtb	r3, r3
 800431a:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 800431c:	233b      	movs	r3, #59	; 0x3b
 800431e:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 8004320:	f107 0308 	add.w	r3, r7, #8
 8004324:	461a      	mov	r2, r3
 8004326:	2103      	movs	r1, #3
 8004328:	20b6      	movs	r0, #182	; 0xb6
 800432a:	f7fe f85d 	bl	80023e8 <WriteCmdParamN>
           goto common_MC;
 800432e:	e0a4      	b.n	800447a <setRotation+0x27e>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8004330:	4b65      	ldr	r3, [pc, #404]	; (80044c8 <setRotation+0x2cc>)
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	f641 1263 	movw	r2, #6499	; 0x1963
 8004338:	4293      	cmp	r3, r2
 800433a:	d00b      	beq.n	8004354 <setRotation+0x158>
 800433c:	4b62      	ldr	r3, [pc, #392]	; (80044c8 <setRotation+0x2cc>)
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	f249 4281 	movw	r2, #38017	; 0x9481
 8004344:	4293      	cmp	r3, r2
 8004346:	d005      	beq.n	8004354 <setRotation+0x158>
 8004348:	4b5f      	ldr	r3, [pc, #380]	; (80044c8 <setRotation+0x2cc>)
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	f241 5211 	movw	r2, #5393	; 0x1511
 8004350:	4293      	cmp	r3, r2
 8004352:	d139      	bne.n	80043c8 <setRotation+0x1cc>
           if (val & 0x80)
 8004354:	7afb      	ldrb	r3, [r7, #11]
 8004356:	b25b      	sxtb	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	da04      	bge.n	8004366 <setRotation+0x16a>
               val |= 0x01;    //GS
 800435c:	7afb      	ldrb	r3, [r7, #11]
 800435e:	f043 0301 	orr.w	r3, r3, #1
 8004362:	b2db      	uxtb	r3, r3
 8004364:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 8004366:	7afb      	ldrb	r3, [r7, #11]
 8004368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <setRotation+0x17e>
               val |= 0x02;    //SS
 8004370:	7afb      	ldrb	r3, [r7, #11]
 8004372:	f043 0302 	orr.w	r3, r3, #2
 8004376:	b2db      	uxtb	r3, r3
 8004378:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 800437a:	4b53      	ldr	r3, [pc, #332]	; (80044c8 <setRotation+0x2cc>)
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	f641 1263 	movw	r2, #6499	; 0x1963
 8004382:	4293      	cmp	r3, r2
 8004384:	d104      	bne.n	8004390 <setRotation+0x194>
 8004386:	7afb      	ldrb	r3, [r7, #11]
 8004388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800438c:	b2db      	uxtb	r3, r3
 800438e:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8004390:	4b4d      	ldr	r3, [pc, #308]	; (80044c8 <setRotation+0x2cc>)
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	f249 4281 	movw	r2, #38017	; 0x9481
 8004398:	4293      	cmp	r3, r2
 800439a:	d104      	bne.n	80043a6 <setRotation+0x1aa>
 800439c:	7afb      	ldrb	r3, [r7, #11]
 800439e:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 80043a6:	4b48      	ldr	r3, [pc, #288]	; (80044c8 <setRotation+0x2cc>)
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	f241 5211 	movw	r2, #5393	; 0x1511
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d160      	bne.n	8004474 <setRotation+0x278>
               val &= ~0x10;   //remove ML
 80043b2:	7afb      	ldrb	r3, [r7, #11]
 80043b4:	f023 0310 	bic.w	r3, r3, #16
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 80043bc:	7afb      	ldrb	r3, [r7, #11]
 80043be:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 80043c6:	e055      	b.n	8004474 <setRotation+0x278>
      }
       else if (is8347) {
 80043c8:	4b40      	ldr	r3, [pc, #256]	; (80044cc <setRotation+0x2d0>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d053      	beq.n	8004478 <setRotation+0x27c>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 80043d0:	4b3f      	ldr	r3, [pc, #252]	; (80044d0 <setRotation+0x2d4>)
 80043d2:	2202      	movs	r2, #2
 80043d4:	801a      	strh	r2, [r3, #0]
 80043d6:	4b3f      	ldr	r3, [pc, #252]	; (80044d4 <setRotation+0x2d8>)
 80043d8:	2206      	movs	r2, #6
 80043da:	801a      	strh	r2, [r3, #0]
 80043dc:	4b3e      	ldr	r3, [pc, #248]	; (80044d8 <setRotation+0x2dc>)
 80043de:	2222      	movs	r2, #34	; 0x22
 80043e0:	801a      	strh	r2, [r3, #0]
 80043e2:	4b3e      	ldr	r3, [pc, #248]	; (80044dc <setRotation+0x2e0>)
 80043e4:	2202      	movs	r2, #2
 80043e6:	801a      	strh	r2, [r3, #0]
 80043e8:	4b3d      	ldr	r3, [pc, #244]	; (80044e0 <setRotation+0x2e4>)
 80043ea:	2204      	movs	r2, #4
 80043ec:	801a      	strh	r2, [r3, #0]
 80043ee:	4b3d      	ldr	r3, [pc, #244]	; (80044e4 <setRotation+0x2e8>)
 80043f0:	2206      	movs	r2, #6
 80043f2:	801a      	strh	r2, [r3, #0]
 80043f4:	4b3c      	ldr	r3, [pc, #240]	; (80044e8 <setRotation+0x2ec>)
 80043f6:	2208      	movs	r2, #8
 80043f8:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 80043fa:	4b33      	ldr	r3, [pc, #204]	; (80044c8 <setRotation+0x2cc>)
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	2b65      	cmp	r3, #101	; 0x65
 8004400:	d121      	bne.n	8004446 <setRotation+0x24a>
               val |= 0x01;    //GS=1
 8004402:	7afb      	ldrb	r3, [r7, #11]
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 800440c:	7afb      	ldrb	r3, [r7, #11]
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	2b00      	cmp	r3, #0
 8004414:	d005      	beq.n	8004422 <setRotation+0x226>
 8004416:	7afa      	ldrb	r2, [r7, #11]
 8004418:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 800441c:	4053      	eors	r3, r2
 800441e:	b2db      	uxtb	r3, r3
 8004420:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d006      	beq.n	800443a <setRotation+0x23e>
 800442c:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <setRotation+0x2d4>)
 800442e:	2282      	movs	r2, #130	; 0x82
 8004430:	801a      	strh	r2, [r3, #0]
 8004432:	4b28      	ldr	r3, [pc, #160]	; (80044d4 <setRotation+0x2d8>)
 8004434:	2280      	movs	r2, #128	; 0x80
 8004436:	801a      	strh	r2, [r3, #0]
 8004438:	e005      	b.n	8004446 <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 800443a:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <setRotation+0x2d4>)
 800443c:	2280      	movs	r2, #128	; 0x80
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	4b24      	ldr	r3, [pc, #144]	; (80044d4 <setRotation+0x2d8>)
 8004442:	2282      	movs	r2, #130	; 0x82
 8004444:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 8004446:	4b20      	ldr	r3, [pc, #128]	; (80044c8 <setRotation+0x2cc>)
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	f245 2252 	movw	r2, #21074	; 0x5252
 800444e:	4293      	cmp	r3, r2
 8004450:	d129      	bne.n	80044a6 <setRotation+0x2aa>
               val |= 0x02;   //VERT_SCROLLON
 8004452:	7afb      	ldrb	r3, [r7, #11]
 8004454:	f043 0302 	orr.w	r3, r3, #2
 8004458:	b2db      	uxtb	r3, r3
 800445a:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 800445c:	7afb      	ldrb	r3, [r7, #11]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01f      	beq.n	80044a6 <setRotation+0x2aa>
 8004466:	7afa      	ldrb	r2, [r7, #11]
 8004468:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 800446c:	4053      	eors	r3, r2
 800446e:	b2db      	uxtb	r3, r3
 8004470:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 8004472:	e018      	b.n	80044a6 <setRotation+0x2aa>
           goto common_MC;
 8004474:	bf00      	nop
 8004476:	e000      	b.n	800447a <setRotation+0x27e>
       }
     common_MC:
 8004478:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 800447a:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <setRotation+0x2d4>)
 800447c:	222a      	movs	r2, #42	; 0x2a
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	4b14      	ldr	r3, [pc, #80]	; (80044d4 <setRotation+0x2d8>)
 8004482:	222b      	movs	r2, #43	; 0x2b
 8004484:	801a      	strh	r2, [r3, #0]
 8004486:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <setRotation+0x2dc>)
 8004488:	222c      	movs	r2, #44	; 0x2c
 800448a:	801a      	strh	r2, [r3, #0]
 800448c:	4b13      	ldr	r3, [pc, #76]	; (80044dc <setRotation+0x2e0>)
 800448e:	222a      	movs	r2, #42	; 0x2a
 8004490:	801a      	strh	r2, [r3, #0]
 8004492:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <setRotation+0x2e4>)
 8004494:	222a      	movs	r2, #42	; 0x2a
 8004496:	801a      	strh	r2, [r3, #0]
 8004498:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <setRotation+0x2e8>)
 800449a:	222b      	movs	r2, #43	; 0x2b
 800449c:	801a      	strh	r2, [r3, #0]
 800449e:	4b12      	ldr	r3, [pc, #72]	; (80044e8 <setRotation+0x2ec>)
 80044a0:	222b      	movs	r2, #43	; 0x2b
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	e000      	b.n	80044a8 <setRotation+0x2ac>
			goto common_BGR;
 80044a6:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 80044a8:	4b08      	ldr	r3, [pc, #32]	; (80044cc <setRotation+0x2d0>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01d      	beq.n	80044ec <setRotation+0x2f0>
 80044b0:	2316      	movs	r3, #22
 80044b2:	e01c      	b.n	80044ee <setRotation+0x2f2>
 80044b4:	20000654 	.word	0x20000654
 80044b8:	20000310 	.word	0x20000310
 80044bc:	200002d0 	.word	0x200002d0
 80044c0:	200002d2 	.word	0x200002d2
 80044c4:	20000650 	.word	0x20000650
 80044c8:	2000065e 	.word	0x2000065e
 80044cc:	2000030d 	.word	0x2000030d
 80044d0:	20000658 	.word	0x20000658
 80044d4:	20000656 	.word	0x20000656
 80044d8:	2000064e 	.word	0x2000064e
 80044dc:	2000065a 	.word	0x2000065a
 80044e0:	20000662 	.word	0x20000662
 80044e4:	20000652 	.word	0x20000652
 80044e8:	2000065c 	.word	0x2000065c
 80044ec:	2336      	movs	r3, #54	; 0x36
 80044ee:	f107 020b 	add.w	r2, r7, #11
 80044f2:	2101      	movs	r1, #1
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fd ff77 	bl	80023e8 <WriteCmdParamN>
       _lcd_madctl = val;
 80044fa:	7afb      	ldrb	r3, [r7, #11]
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	4b73      	ldr	r3, [pc, #460]	; (80046cc <setRotation+0x4d0>)
 8004500:	801a      	strh	r2, [r3, #0]
 8004502:	e09e      	b.n	8004642 <setRotation+0x446>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8004504:	4b72      	ldr	r3, [pc, #456]	; (80046d0 <setRotation+0x4d4>)
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	f247 7293 	movw	r2, #30611	; 0x7793
 800450c:	4293      	cmp	r3, r2
 800450e:	d010      	beq.n	8004532 <setRotation+0x336>
 8004510:	f247 7293 	movw	r2, #30611	; 0x7793
 8004514:	4293      	cmp	r3, r2
 8004516:	dc04      	bgt.n	8004522 <setRotation+0x326>
 8004518:	f245 4220 	movw	r2, #21536	; 0x5420
 800451c:	4293      	cmp	r3, r2
 800451e:	d008      	beq.n	8004532 <setRotation+0x336>
 8004520:	e045      	b.n	80045ae <setRotation+0x3b2>
 8004522:	f249 3226 	movw	r2, #37670	; 0x9326
 8004526:	4293      	cmp	r3, r2
 8004528:	d003      	beq.n	8004532 <setRotation+0x336>
 800452a:	f24b 5209 	movw	r2, #46345	; 0xb509
 800452e:	4293      	cmp	r3, r2
 8004530:	d13d      	bne.n	80045ae <setRotation+0x3b2>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8004532:	4b68      	ldr	r3, [pc, #416]	; (80046d4 <setRotation+0x4d8>)
 8004534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	4b67      	ldr	r3, [pc, #412]	; (80046d8 <setRotation+0x4dc>)
 800453c:	f240 2201 	movw	r2, #513	; 0x201
 8004540:	801a      	strh	r2, [r3, #0]
 8004542:	4b66      	ldr	r3, [pc, #408]	; (80046dc <setRotation+0x4e0>)
 8004544:	f240 2202 	movw	r2, #514	; 0x202
 8004548:	801a      	strh	r2, [r3, #0]
 800454a:	4b65      	ldr	r3, [pc, #404]	; (80046e0 <setRotation+0x4e4>)
 800454c:	f44f 7204 	mov.w	r2, #528	; 0x210
 8004550:	801a      	strh	r2, [r3, #0]
 8004552:	4b64      	ldr	r3, [pc, #400]	; (80046e4 <setRotation+0x4e8>)
 8004554:	f240 2211 	movw	r2, #529	; 0x211
 8004558:	801a      	strh	r2, [r3, #0]
 800455a:	4b63      	ldr	r3, [pc, #396]	; (80046e8 <setRotation+0x4ec>)
 800455c:	f240 2212 	movw	r2, #530	; 0x212
 8004560:	801a      	strh	r2, [r3, #0]
 8004562:	4b62      	ldr	r3, [pc, #392]	; (80046ec <setRotation+0x4f0>)
 8004564:	f240 2213 	movw	r2, #531	; 0x213
 8004568:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 800456a:	7afb      	ldrb	r3, [r7, #11]
 800456c:	b25b      	sxtb	r3, r3
 800456e:	b29a      	uxth	r2, r3
 8004570:	4b5f      	ldr	r3, [pc, #380]	; (80046f0 <setRotation+0x4f4>)
 8004572:	4013      	ands	r3, r2
 8004574:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8004576:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800457a:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 800457c:	4b54      	ldr	r3, [pc, #336]	; (80046d0 <setRotation+0x4d4>)
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	f249 3226 	movw	r2, #37670	; 0x9326
 8004584:	4293      	cmp	r3, r2
 8004586:	d005      	beq.n	8004594 <setRotation+0x398>
 8004588:	4b51      	ldr	r3, [pc, #324]	; (80046d0 <setRotation+0x4d4>)
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	f245 4220 	movw	r2, #21536	; 0x5420
 8004590:	4293      	cmp	r3, r2
 8004592:	d102      	bne.n	800459a <setRotation+0x39e>
 8004594:	8abb      	ldrh	r3, [r7, #20]
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 800459a:	8a3a      	ldrh	r2, [r7, #16]
 800459c:	8abb      	ldrh	r3, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	4619      	mov	r1, r3
 80045a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80045a8:	f7fd fc60 	bl	8001e6c <WriteCmdData>
           goto common_SS;
 80045ac:	e022      	b.n	80045f4 <setRotation+0x3f8>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 80045ae:	4b49      	ldr	r3, [pc, #292]	; (80046d4 <setRotation+0x4d8>)
 80045b0:	2220      	movs	r2, #32
 80045b2:	801a      	strh	r2, [r3, #0]
 80045b4:	4b48      	ldr	r3, [pc, #288]	; (80046d8 <setRotation+0x4dc>)
 80045b6:	2221      	movs	r2, #33	; 0x21
 80045b8:	801a      	strh	r2, [r3, #0]
 80045ba:	4b48      	ldr	r3, [pc, #288]	; (80046dc <setRotation+0x4e0>)
 80045bc:	2222      	movs	r2, #34	; 0x22
 80045be:	801a      	strh	r2, [r3, #0]
 80045c0:	4b47      	ldr	r3, [pc, #284]	; (80046e0 <setRotation+0x4e4>)
 80045c2:	2250      	movs	r2, #80	; 0x50
 80045c4:	801a      	strh	r2, [r3, #0]
 80045c6:	4b47      	ldr	r3, [pc, #284]	; (80046e4 <setRotation+0x4e8>)
 80045c8:	2251      	movs	r2, #81	; 0x51
 80045ca:	801a      	strh	r2, [r3, #0]
 80045cc:	4b46      	ldr	r3, [pc, #280]	; (80046e8 <setRotation+0x4ec>)
 80045ce:	2252      	movs	r2, #82	; 0x52
 80045d0:	801a      	strh	r2, [r3, #0]
 80045d2:	4b46      	ldr	r3, [pc, #280]	; (80046ec <setRotation+0x4f0>)
 80045d4:	2253      	movs	r2, #83	; 0x53
 80045d6:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 80045d8:	7afb      	ldrb	r3, [r7, #11]
 80045da:	b25b      	sxtb	r3, r3
 80045dc:	b29a      	uxth	r2, r3
 80045de:	4b44      	ldr	r3, [pc, #272]	; (80046f0 <setRotation+0x4f4>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 80045e4:	8a3b      	ldrh	r3, [r7, #16]
 80045e6:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	4619      	mov	r1, r3
 80045ee:	2060      	movs	r0, #96	; 0x60
 80045f0:	f7fd fc3c 	bl	8001e6c <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 80045f4:	7afb      	ldrb	r3, [r7, #11]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8004600:	89fb      	ldrh	r3, [r7, #14]
 8004602:	4619      	mov	r1, r3
 8004604:	2001      	movs	r0, #1
 8004606:	f7fd fc31 	bl	8001e6c <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 800460a:	7afb      	ldrb	r3, [r7, #11]
 800460c:	109b      	asrs	r3, r3, #2
 800460e:	b29b      	uxth	r3, r3
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 8004616:	7afb      	ldrb	r3, [r7, #11]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <setRotation+0x42c>
               ORG |= 0x1000;  //BGR
 8004620:	8afb      	ldrh	r3, [r7, #22]
 8004622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004626:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 8004628:	8afb      	ldrh	r3, [r7, #22]
 800462a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800462e:	b29a      	uxth	r2, r3
 8004630:	4b26      	ldr	r3, [pc, #152]	; (80046cc <setRotation+0x4d0>)
 8004632:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8004634:	4b25      	ldr	r3, [pc, #148]	; (80046cc <setRotation+0x4d0>)
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	4619      	mov	r1, r3
 800463a:	2003      	movs	r0, #3
 800463c:	f7fd fc16 	bl	8001e6c <WriteCmdData>
           break;
 8004640:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8004642:	4b2c      	ldr	r3, [pc, #176]	; (80046f4 <setRotation+0x4f8>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d023      	beq.n	8004696 <setRotation+0x49a>
 800464e:	4b2a      	ldr	r3, [pc, #168]	; (80046f8 <setRotation+0x4fc>)
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004656:	2b00      	cmp	r3, #0
 8004658:	d11d      	bne.n	8004696 <setRotation+0x49a>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 800465a:	4b1e      	ldr	r3, [pc, #120]	; (80046d4 <setRotation+0x4d8>)
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	81bb      	strh	r3, [r7, #12]
 8004660:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <setRotation+0x4dc>)
 8004662:	881a      	ldrh	r2, [r3, #0]
 8004664:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <setRotation+0x4d8>)
 8004666:	801a      	strh	r2, [r3, #0]
 8004668:	4a1b      	ldr	r2, [pc, #108]	; (80046d8 <setRotation+0x4dc>)
 800466a:	89bb      	ldrh	r3, [r7, #12]
 800466c:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 800466e:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <setRotation+0x4e4>)
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	81bb      	strh	r3, [r7, #12]
 8004674:	4b1c      	ldr	r3, [pc, #112]	; (80046e8 <setRotation+0x4ec>)
 8004676:	881a      	ldrh	r2, [r3, #0]
 8004678:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <setRotation+0x4e4>)
 800467a:	801a      	strh	r2, [r3, #0]
 800467c:	4a1a      	ldr	r2, [pc, #104]	; (80046e8 <setRotation+0x4ec>)
 800467e:	89bb      	ldrh	r3, [r7, #12]
 8004680:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8004682:	4b18      	ldr	r3, [pc, #96]	; (80046e4 <setRotation+0x4e8>)
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	81bb      	strh	r3, [r7, #12]
 8004688:	4b18      	ldr	r3, [pc, #96]	; (80046ec <setRotation+0x4f0>)
 800468a:	881a      	ldrh	r2, [r3, #0]
 800468c:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <setRotation+0x4e8>)
 800468e:	801a      	strh	r2, [r3, #0]
 8004690:	4a16      	ldr	r2, [pc, #88]	; (80046ec <setRotation+0x4f0>)
 8004692:	89bb      	ldrh	r3, [r7, #12]
 8004694:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8004696:	f7fd fb21 	bl	8001cdc <width>
 800469a:	4603      	mov	r3, r0
 800469c:	3b01      	subs	r3, #1
 800469e:	b29b      	uxth	r3, r3
 80046a0:	b21c      	sxth	r4, r3
 80046a2:	f7fd fb27 	bl	8001cf4 <height>
 80046a6:	4603      	mov	r3, r0
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	b21b      	sxth	r3, r3
 80046ae:	4622      	mov	r2, r4
 80046b0:	2100      	movs	r1, #0
 80046b2:	2000      	movs	r0, #0
 80046b4:	f000 f926 	bl	8004904 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 80046b8:	2200      	movs	r2, #0
 80046ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80046be:	2000      	movs	r0, #0
 80046c0:	f000 fa44 	bl	8004b4c <vertScroll>
}
 80046c4:	bf00      	nop
 80046c6:	371c      	adds	r7, #28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd90      	pop	{r4, r7, pc}
 80046cc:	20000664 	.word	0x20000664
 80046d0:	2000065e 	.word	0x2000065e
 80046d4:	20000658 	.word	0x20000658
 80046d8:	20000656 	.word	0x20000656
 80046dc:	2000064e 	.word	0x2000064e
 80046e0:	2000065a 	.word	0x2000065a
 80046e4:	20000662 	.word	0x20000662
 80046e8:	20000652 	.word	0x20000652
 80046ec:	2000065c 	.word	0x2000065c
 80046f0:	ffff8000 	.word	0xffff8000
 80046f4:	20000310 	.word	0x20000310
 80046f8:	20000650 	.word	0x20000650

080046fc <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80046fc:	b590      	push	{r4, r7, lr}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	80fb      	strh	r3, [r7, #6]
 8004706:	460b      	mov	r3, r1
 8004708:	80bb      	strh	r3, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 800470e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004712:	2b00      	cmp	r3, #0
 8004714:	f2c0 80e3 	blt.w	80048de <drawPixel+0x1e2>
 8004718:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	f2c0 80de 	blt.w	80048de <drawPixel+0x1e2>
 8004722:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8004726:	f7fd fad9 	bl	8001cdc <width>
 800472a:	4603      	mov	r3, r0
 800472c:	429c      	cmp	r4, r3
 800472e:	f280 80d6 	bge.w	80048de <drawPixel+0x1e2>
 8004732:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8004736:	f7fd fadd 	bl	8001cf4 <height>
 800473a:	4603      	mov	r3, r0
 800473c:	429c      	cmp	r4, r3
 800473e:	f280 80ce 	bge.w	80048de <drawPixel+0x1e2>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 8004742:	4b69      	ldr	r3, [pc, #420]	; (80048e8 <drawPixel+0x1ec>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <drawPixel+0x5a>
 800474a:	887b      	ldrh	r3, [r7, #2]
 800474c:	4618      	mov	r0, r3
 800474e:	f7fd fadd 	bl	8001d0c <color565_to_555>
 8004752:	4603      	mov	r3, r0
 8004754:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 8004756:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800475a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800475e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004762:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004766:	f000 f8cd 	bl	8004904 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 800476a:	4b60      	ldr	r3, [pc, #384]	; (80048ec <drawPixel+0x1f0>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 80ad 	beq.w	80048ce <drawPixel+0x1d2>
 8004774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004778:	485d      	ldr	r0, [pc, #372]	; (80048f0 <drawPixel+0x1f4>)
 800477a:	f7fd fa61 	bl	8001c40 <PIN_LOW>
 800477e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004782:	485c      	ldr	r0, [pc, #368]	; (80048f4 <drawPixel+0x1f8>)
 8004784:	f7fd fa5c 	bl	8001c40 <PIN_LOW>
 8004788:	4b5b      	ldr	r3, [pc, #364]	; (80048f8 <drawPixel+0x1fc>)
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	b29b      	uxth	r3, r3
 8004790:	73fb      	strb	r3, [r7, #15]
 8004792:	4b59      	ldr	r3, [pc, #356]	; (80048f8 <drawPixel+0x1fc>)
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	73bb      	strb	r3, [r7, #14]
 8004798:	4b56      	ldr	r3, [pc, #344]	; (80048f4 <drawPixel+0x1f8>)
 800479a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800479e:	619a      	str	r2, [r3, #24]
 80047a0:	4b56      	ldr	r3, [pc, #344]	; (80048fc <drawPixel+0x200>)
 80047a2:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80047a6:	619a      	str	r2, [r3, #24]
 80047a8:	4b55      	ldr	r3, [pc, #340]	; (8004900 <drawPixel+0x204>)
 80047aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047ae:	619a      	str	r2, [r3, #24]
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	4a52      	ldr	r2, [pc, #328]	; (8004900 <drawPixel+0x204>)
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	6193      	str	r3, [r2, #24]
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	015b      	lsls	r3, r3, #5
 80047c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047cc:	431a      	orrs	r2, r3
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
 80047d0:	015b      	lsls	r3, r3, #5
 80047d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d6:	431a      	orrs	r2, r3
 80047d8:	4b48      	ldr	r3, [pc, #288]	; (80048fc <drawPixel+0x200>)
 80047da:	619a      	str	r2, [r3, #24]
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	105b      	asrs	r3, r3, #1
 80047e0:	f003 0208 	and.w	r2, r3, #8
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ec:	431a      	orrs	r2, r3
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
 80047f0:	105b      	asrs	r3, r3, #1
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	431a      	orrs	r2, r3
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	10db      	asrs	r3, r3, #3
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	431a      	orrs	r2, r3
 8004802:	4b3c      	ldr	r3, [pc, #240]	; (80048f4 <drawPixel+0x1f8>)
 8004804:	619a      	str	r2, [r3, #24]
 8004806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800480a:	483a      	ldr	r0, [pc, #232]	; (80048f4 <drawPixel+0x1f8>)
 800480c:	f7fd fa18 	bl	8001c40 <PIN_LOW>
 8004810:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004814:	4837      	ldr	r0, [pc, #220]	; (80048f4 <drawPixel+0x1f8>)
 8004816:	f7fd fa23 	bl	8001c60 <PIN_HIGH>
 800481a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800481e:	4835      	ldr	r0, [pc, #212]	; (80048f4 <drawPixel+0x1f8>)
 8004820:	f7fd fa1e 	bl	8001c60 <PIN_HIGH>
 8004824:	4b33      	ldr	r3, [pc, #204]	; (80048f4 <drawPixel+0x1f8>)
 8004826:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800482a:	619a      	str	r2, [r3, #24]
 800482c:	4b33      	ldr	r3, [pc, #204]	; (80048fc <drawPixel+0x200>)
 800482e:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8004832:	619a      	str	r2, [r3, #24]
 8004834:	4b32      	ldr	r3, [pc, #200]	; (8004900 <drawPixel+0x204>)
 8004836:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800483a:	619a      	str	r2, [r3, #24]
 800483c:	7bbb      	ldrb	r3, [r7, #14]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	4a2f      	ldr	r2, [pc, #188]	; (8004900 <drawPixel+0x204>)
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	6193      	str	r3, [r2, #24]
 8004848:	7bbb      	ldrb	r3, [r7, #14]
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8004850:	7bbb      	ldrb	r3, [r7, #14]
 8004852:	015b      	lsls	r3, r3, #5
 8004854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004858:	431a      	orrs	r2, r3
 800485a:	7bbb      	ldrb	r3, [r7, #14]
 800485c:	015b      	lsls	r3, r3, #5
 800485e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004862:	431a      	orrs	r2, r3
 8004864:	4b25      	ldr	r3, [pc, #148]	; (80048fc <drawPixel+0x200>)
 8004866:	619a      	str	r2, [r3, #24]
 8004868:	7bbb      	ldrb	r3, [r7, #14]
 800486a:	105b      	asrs	r3, r3, #1
 800486c:	f003 0208 	and.w	r2, r3, #8
 8004870:	7bbb      	ldrb	r3, [r7, #14]
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004878:	431a      	orrs	r2, r3
 800487a:	7bbb      	ldrb	r3, [r7, #14]
 800487c:	105b      	asrs	r3, r3, #1
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	431a      	orrs	r2, r3
 8004884:	7bbb      	ldrb	r3, [r7, #14]
 8004886:	10db      	asrs	r3, r3, #3
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	431a      	orrs	r2, r3
 800488e:	4b19      	ldr	r3, [pc, #100]	; (80048f4 <drawPixel+0x1f8>)
 8004890:	619a      	str	r2, [r3, #24]
 8004892:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004896:	4817      	ldr	r0, [pc, #92]	; (80048f4 <drawPixel+0x1f8>)
 8004898:	f7fd f9d2 	bl	8001c40 <PIN_LOW>
 800489c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048a0:	4814      	ldr	r0, [pc, #80]	; (80048f4 <drawPixel+0x1f8>)
 80048a2:	f7fd f9dd 	bl	8001c60 <PIN_HIGH>
 80048a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048aa:	4812      	ldr	r0, [pc, #72]	; (80048f4 <drawPixel+0x1f8>)
 80048ac:	f7fd f9d8 	bl	8001c60 <PIN_HIGH>
 80048b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048b4:	480f      	ldr	r0, [pc, #60]	; (80048f4 <drawPixel+0x1f8>)
 80048b6:	f7fd f9d3 	bl	8001c60 <PIN_HIGH>
 80048ba:	887b      	ldrh	r3, [r7, #2]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fd fb53 	bl	8001f68 <write24>
 80048c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048c6:	480a      	ldr	r0, [pc, #40]	; (80048f0 <drawPixel+0x1f4>)
 80048c8:	f7fd f9ca 	bl	8001c60 <PIN_HIGH>
 80048cc:	e008      	b.n	80048e0 <drawPixel+0x1e4>
   WriteCmdData(_MW, color);
 80048ce:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <drawPixel+0x1fc>)
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	887a      	ldrh	r2, [r7, #2]
 80048d4:	4611      	mov	r1, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fd fac8 	bl	8001e6c <WriteCmdData>
 80048dc:	e000      	b.n	80048e0 <drawPixel+0x1e4>
       return;
 80048de:	bf00      	nop
}
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd90      	pop	{r4, r7, pc}
 80048e6:	bf00      	nop
 80048e8:	2000030e 	.word	0x2000030e
 80048ec:	2000030f 	.word	0x2000030f
 80048f0:	40020400 	.word	0x40020400
 80048f4:	40021000 	.word	0x40021000
 80048f8:	2000064e 	.word	0x2000064e
 80048fc:	40021400 	.word	0x40021400
 8004900:	40021800 	.word	0x40021800

08004904 <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8004904:	b590      	push	{r4, r7, lr}
 8004906:	b087      	sub	sp, #28
 8004908:	af02      	add	r7, sp, #8
 800490a:	4604      	mov	r4, r0
 800490c:	4608      	mov	r0, r1
 800490e:	4611      	mov	r1, r2
 8004910:	461a      	mov	r2, r3
 8004912:	4623      	mov	r3, r4
 8004914:	80fb      	strh	r3, [r7, #6]
 8004916:	4603      	mov	r3, r0
 8004918:	80bb      	strh	r3, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	807b      	strh	r3, [r7, #2]
 800491e:	4613      	mov	r3, r2
 8004920:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8004922:	4b80      	ldr	r3, [pc, #512]	; (8004b24 <setAddrWindow+0x220>)
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	f249 3227 	movw	r2, #37671	; 0x9327
 800492a:	4293      	cmp	r3, r2
 800492c:	d117      	bne.n	800495e <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 800492e:	4b7e      	ldr	r3, [pc, #504]	; (8004b28 <setAddrWindow+0x224>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d107      	bne.n	8004946 <setAddrWindow+0x42>
 8004936:	88bb      	ldrh	r3, [r7, #4]
 8004938:	3320      	adds	r3, #32
 800493a:	b29b      	uxth	r3, r3
 800493c:	80bb      	strh	r3, [r7, #4]
 800493e:	883b      	ldrh	r3, [r7, #0]
 8004940:	3320      	adds	r3, #32
 8004942:	b29b      	uxth	r3, r3
 8004944:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8004946:	4b78      	ldr	r3, [pc, #480]	; (8004b28 <setAddrWindow+0x224>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b03      	cmp	r3, #3
 800494c:	d107      	bne.n	800495e <setAddrWindow+0x5a>
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	3320      	adds	r3, #32
 8004952:	b29b      	uxth	r3, r3
 8004954:	80fb      	strh	r3, [r7, #6]
 8004956:	887b      	ldrh	r3, [r7, #2]
 8004958:	3320      	adds	r3, #32
 800495a:	b29b      	uxth	r3, r3
 800495c:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 800495e:	4b71      	ldr	r3, [pc, #452]	; (8004b24 <setAddrWindow+0x220>)
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	f241 5226 	movw	r2, #5414	; 0x1526
 8004966:	4293      	cmp	r3, r2
 8004968:	d128      	bne.n	80049bc <setAddrWindow+0xb8>
 800496a:	4b6f      	ldr	r3, [pc, #444]	; (8004b28 <setAddrWindow+0x224>)
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d022      	beq.n	80049bc <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8004976:	887a      	ldrh	r2, [r7, #2]
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	b29b      	uxth	r3, r3
 800497e:	81fb      	strh	r3, [r7, #14]
 8004980:	883a      	ldrh	r2, [r7, #0]
 8004982:	88bb      	ldrh	r3, [r7, #4]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	b29b      	uxth	r3, r3
 8004988:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 800498a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <setAddrWindow+0x9c>
 8004992:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004996:	b29b      	uxth	r3, r3
 8004998:	3301      	adds	r3, #1
 800499a:	b29b      	uxth	r3, r3
 800499c:	803b      	strh	r3, [r7, #0]
 800499e:	e00d      	b.n	80049bc <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 80049a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d109      	bne.n	80049bc <setAddrWindow+0xb8>
 80049a8:	887a      	ldrh	r2, [r7, #2]
 80049aa:	89bb      	ldrh	r3, [r7, #12]
 80049ac:	4413      	add	r3, r2
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	807b      	strh	r3, [r7, #2]
 80049b2:	883a      	ldrh	r2, [r7, #0]
 80049b4:	89bb      	ldrh	r3, [r7, #12]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 80049bc:	4b5b      	ldr	r3, [pc, #364]	; (8004b2c <setAddrWindow+0x228>)
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d054      	beq.n	8004a72 <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 80049c8:	4b59      	ldr	r3, [pc, #356]	; (8004b30 <setAddrWindow+0x22c>)
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	b2d8      	uxtb	r0, r3
 80049ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049d2:	121b      	asrs	r3, r3, #8
 80049d4:	b21b      	sxth	r3, r3
 80049d6:	b2d9      	uxtb	r1, r3
 80049d8:	88fb      	ldrh	r3, [r7, #6]
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049e0:	121b      	asrs	r3, r3, #8
 80049e2:	b21b      	sxth	r3, r3
 80049e4:	b2dc      	uxtb	r4, r3
 80049e6:	887b      	ldrh	r3, [r7, #2]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	4623      	mov	r3, r4
 80049ee:	f7fd febd 	bl	800276c <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 80049f2:	4b50      	ldr	r3, [pc, #320]	; (8004b34 <setAddrWindow+0x230>)
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b2d8      	uxtb	r0, r3
 80049f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80049fc:	121b      	asrs	r3, r3, #8
 80049fe:	b21b      	sxth	r3, r3
 8004a00:	b2d9      	uxtb	r1, r3
 8004a02:	88bb      	ldrh	r3, [r7, #4]
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004a0a:	121b      	asrs	r3, r3, #8
 8004a0c:	b21b      	sxth	r3, r3
 8004a0e:	b2dc      	uxtb	r4, r3
 8004a10:	883b      	ldrh	r3, [r7, #0]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	4623      	mov	r3, r4
 8004a18:	f7fd fea8 	bl	800276c <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8004a1c:	4b46      	ldr	r3, [pc, #280]	; (8004b38 <setAddrWindow+0x234>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d07b      	beq.n	8004b1c <setAddrWindow+0x218>
 8004a24:	4b3f      	ldr	r3, [pc, #252]	; (8004b24 <setAddrWindow+0x220>)
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	2b65      	cmp	r3, #101	; 0x65
 8004a2a:	d177      	bne.n	8004b1c <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8004a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a30:	121b      	asrs	r3, r3, #8
 8004a32:	b21b      	sxth	r3, r3
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	723b      	strb	r3, [r7, #8]
 8004a38:	88fb      	ldrh	r3, [r7, #6]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8004a3e:	4b3f      	ldr	r3, [pc, #252]	; (8004b3c <setAddrWindow+0x238>)
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	f107 0208 	add.w	r2, r7, #8
 8004a46:	2102      	movs	r1, #2
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fd fccd 	bl	80023e8 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 8004a4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004a52:	121b      	asrs	r3, r3, #8
 8004a54:	b21b      	sxth	r3, r3
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	723b      	strb	r3, [r7, #8]
 8004a5a:	88bb      	ldrh	r3, [r7, #4]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8004a60:	4b37      	ldr	r3, [pc, #220]	; (8004b40 <setAddrWindow+0x23c>)
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	f107 0208 	add.w	r2, r7, #8
 8004a68:	2102      	movs	r1, #2
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fd fcbc 	bl	80023e8 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8004a70:	e054      	b.n	8004b1c <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 8004a72:	4b32      	ldr	r3, [pc, #200]	; (8004b3c <setAddrWindow+0x238>)
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	88fa      	ldrh	r2, [r7, #6]
 8004a78:	4611      	mov	r1, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fd f9f6 	bl	8001e6c <WriteCmdData>
       WriteCmdData(_MP, y);
 8004a80:	4b2f      	ldr	r3, [pc, #188]	; (8004b40 <setAddrWindow+0x23c>)
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	88ba      	ldrh	r2, [r7, #4]
 8004a86:	4611      	mov	r1, r2
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fd f9ef 	bl	8001e6c <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8004a8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d105      	bne.n	8004aa6 <setAddrWindow+0x1a2>
 8004a9a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004a9e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d03a      	beq.n	8004b1c <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8004aa6:	4b21      	ldr	r3, [pc, #132]	; (8004b2c <setAddrWindow+0x228>)
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d018      	beq.n	8004ae4 <setAddrWindow+0x1e0>
               if (rotation & 1)
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <setAddrWindow+0x224>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d009      	beq.n	8004ad2 <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 8004abe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	b21a      	sxth	r2, r3
 8004ac6:	88bb      	ldrh	r3, [r7, #4]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	80bb      	strh	r3, [r7, #4]
 8004acc:	88bb      	ldrh	r3, [r7, #4]
 8004ace:	803b      	strh	r3, [r7, #0]
 8004ad0:	e008      	b.n	8004ae4 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 8004ad2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	b21a      	sxth	r2, r3
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	80fb      	strh	r3, [r7, #6]
 8004ae0:	88fb      	ldrh	r3, [r7, #6]
 8004ae2:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8004ae4:	4b12      	ldr	r3, [pc, #72]	; (8004b30 <setAddrWindow+0x22c>)
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	88fa      	ldrh	r2, [r7, #6]
 8004aea:	4611      	mov	r1, r2
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fd f9bd 	bl	8001e6c <WriteCmdData>
           WriteCmdData(_SP, y);
 8004af2:	4b10      	ldr	r3, [pc, #64]	; (8004b34 <setAddrWindow+0x230>)
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	88ba      	ldrh	r2, [r7, #4]
 8004af8:	4611      	mov	r1, r2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fd f9b6 	bl	8001e6c <WriteCmdData>
           WriteCmdData(_EC, x1);
 8004b00:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <setAddrWindow+0x240>)
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	887a      	ldrh	r2, [r7, #2]
 8004b06:	4611      	mov	r1, r2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fd f9af 	bl	8001e6c <WriteCmdData>
           WriteCmdData(_EP, y1);
 8004b0e:	4b0e      	ldr	r3, [pc, #56]	; (8004b48 <setAddrWindow+0x244>)
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	883a      	ldrh	r2, [r7, #0]
 8004b14:	4611      	mov	r1, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fd f9a8 	bl	8001e6c <WriteCmdData>
}
 8004b1c:	bf00      	nop
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd90      	pop	{r4, r7, pc}
 8004b24:	2000065e 	.word	0x2000065e
 8004b28:	20000310 	.word	0x20000310
 8004b2c:	20000650 	.word	0x20000650
 8004b30:	2000065a 	.word	0x2000065a
 8004b34:	20000652 	.word	0x20000652
 8004b38:	2000030d 	.word	0x2000030d
 8004b3c:	20000658 	.word	0x20000658
 8004b40:	20000656 	.word	0x20000656
 8004b44:	20000662 	.word	0x20000662
 8004b48:	2000065c 	.word	0x2000065c

08004b4c <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	80fb      	strh	r3, [r7, #6]
 8004b56:	460b      	mov	r3, r1
 8004b58:	80bb      	strh	r3, [r7, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8004b5e:	4b89      	ldr	r3, [pc, #548]	; (8004d84 <vertScroll+0x238>)
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	f249 3227 	movw	r2, #37671	; 0x9327
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d10b      	bne.n	8004b82 <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8004b6a:	4b87      	ldr	r3, [pc, #540]	; (8004d88 <vertScroll+0x23c>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d003      	beq.n	8004b7a <vertScroll+0x2e>
 8004b72:	4b85      	ldr	r3, [pc, #532]	; (8004d88 <vertScroll+0x23c>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d103      	bne.n	8004b82 <vertScroll+0x36>
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	3320      	adds	r3, #32
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	425b      	negs	r3, r3
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	88bb      	ldrh	r3, [r7, #4]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 8004b96:	88fb      	ldrh	r3, [r7, #6]
 8004b98:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8004b9a:	4b7a      	ldr	r3, [pc, #488]	; (8004d84 <vertScroll+0x238>)
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	f249 3227 	movw	r2, #37671	; 0x9327
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d103      	bne.n	8004bae <vertScroll+0x62>
 8004ba6:	8afb      	ldrh	r3, [r7, #22]
 8004ba8:	3320      	adds	r3, #32
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8004bae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004bb2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004bb6:	425b      	negs	r3, r3
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	dd05      	ble.n	8004bc8 <vertScroll+0x7c>
 8004bbc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004bc0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	db01      	blt.n	8004bcc <vertScroll+0x80>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8004bcc:	88fa      	ldrh	r2, [r7, #6]
 8004bce:	887b      	ldrh	r3, [r7, #2]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 8004bd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	da04      	bge.n	8004be8 <vertScroll+0x9c>
        vsp += scrollines;          //keep in unsigned range
 8004bde:	8aba      	ldrh	r2, [r7, #20]
 8004be0:	88bb      	ldrh	r3, [r7, #4]
 8004be2:	4413      	add	r3, r2
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 8004be8:	88fa      	ldrh	r2, [r7, #6]
 8004bea:	88bb      	ldrh	r3, [r7, #4]
 8004bec:	4413      	add	r3, r2
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8004bf6:	4b65      	ldr	r3, [pc, #404]	; (8004d8c <vertScroll+0x240>)
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d072      	beq.n	8004ce8 <vertScroll+0x19c>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8004c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c06:	121b      	asrs	r3, r3, #8
 8004c08:	b21b      	sxth	r3, r3
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 8004c0e:	88fb      	ldrh	r3, [r7, #6]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 8004c14:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c18:	121b      	asrs	r3, r3, #8
 8004c1a:	b21b      	sxth	r3, r3
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 8004c20:	88bb      	ldrh	r3, [r7, #4]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 8004c26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004c2a:	121b      	asrs	r3, r3, #8
 8004c2c:	b21b      	sxth	r3, r3
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 8004c32:	8afb      	ldrh	r3, [r7, #22]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8004c38:	4b55      	ldr	r3, [pc, #340]	; (8004d90 <vertScroll+0x244>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <vertScroll+0xf8>
 8004c40:	230e      	movs	r3, #14
 8004c42:	e000      	b.n	8004c46 <vertScroll+0xfa>
 8004c44:	2333      	movs	r3, #51	; 0x33
 8004c46:	f107 020c 	add.w	r2, r7, #12
 8004c4a:	2106      	movs	r1, #6
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fd fbcb 	bl	80023e8 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 8004c52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004c56:	121b      	asrs	r3, r3, #8
 8004c58:	b21b      	sxth	r3, r3
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 8004c5e:	8abb      	ldrh	r3, [r7, #20]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8004c64:	4b4a      	ldr	r3, [pc, #296]	; (8004d90 <vertScroll+0x244>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <vertScroll+0x124>
 8004c6c:	2314      	movs	r3, #20
 8004c6e:	e000      	b.n	8004c72 <vertScroll+0x126>
 8004c70:	2337      	movs	r3, #55	; 0x37
 8004c72:	f107 020c 	add.w	r2, r7, #12
 8004c76:	2102      	movs	r1, #2
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fd fbb5 	bl	80023e8 <WriteCmdParamN>
		if (is8347) {
 8004c7e:	4b44      	ldr	r3, [pc, #272]	; (8004d90 <vertScroll+0x244>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01f      	beq.n	8004cc6 <vertScroll+0x17a>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8004c86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <vertScroll+0x156>
 8004c8e:	4b3d      	ldr	r3, [pc, #244]	; (8004d84 <vertScroll+0x238>)
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	f248 3247 	movw	r2, #33607	; 0x8347
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d101      	bne.n	8004c9e <vertScroll+0x152>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e002      	b.n	8004ca4 <vertScroll+0x158>
 8004c9e:	2308      	movs	r3, #8
 8004ca0:	e000      	b.n	8004ca4 <vertScroll+0x158>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8004ca6:	4b37      	ldr	r3, [pc, #220]	; (8004d84 <vertScroll+0x238>)
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	f248 3247 	movw	r2, #33607	; 0x8347
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d101      	bne.n	8004cb6 <vertScroll+0x16a>
 8004cb2:	2318      	movs	r3, #24
 8004cb4:	e000      	b.n	8004cb8 <vertScroll+0x16c>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f107 020c 	add.w	r2, r7, #12
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fd fb92 	bl	80023e8 <WriteCmdParamN>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
		}
		return;
 8004cc4:	e059      	b.n	8004d7a <vertScroll+0x22e>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8004cc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d155      	bne.n	8004d7a <vertScroll+0x22e>
 8004cce:	4b2f      	ldr	r3, [pc, #188]	; (8004d8c <vertScroll+0x240>)
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d04f      	beq.n	8004d7a <vertScroll+0x22e>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2100      	movs	r1, #0
 8004cde:	2013      	movs	r0, #19
 8004ce0:	f7fd fb82 	bl	80023e8 <WriteCmdParamN>
		return;
 8004ce4:	bf00      	nop
 8004ce6:	e048      	b.n	8004d7a <vertScroll+0x22e>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8004ce8:	4b26      	ldr	r3, [pc, #152]	; (8004d84 <vertScroll+0x238>)
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	f247 7293 	movw	r2, #30611	; 0x7793
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d021      	beq.n	8004d38 <vertScroll+0x1ec>
 8004cf4:	f247 7293 	movw	r2, #30611	; 0x7793
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	dc08      	bgt.n	8004d0e <vertScroll+0x1c2>
 8004cfc:	f245 4220 	movw	r2, #21536	; 0x5420
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d019      	beq.n	8004d38 <vertScroll+0x1ec>
 8004d04:	f247 7283 	movw	r2, #30595	; 0x7783
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d009      	beq.n	8004d20 <vertScroll+0x1d4>
 8004d0c:	e025      	b.n	8004d5a <vertScroll+0x20e>
 8004d0e:	f249 3226 	movw	r2, #37670	; 0x9326
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d010      	beq.n	8004d38 <vertScroll+0x1ec>
 8004d16:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00c      	beq.n	8004d38 <vertScroll+0x1ec>
 8004d1e:	e01c      	b.n	8004d5a <vertScroll+0x20e>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 8004d20:	4b1c      	ldr	r3, [pc, #112]	; (8004d94 <vertScroll+0x248>)
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	4619      	mov	r1, r3
 8004d26:	2061      	movs	r0, #97	; 0x61
 8004d28:	f7fd f8a0 	bl	8001e6c <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8004d2c:	8abb      	ldrh	r3, [r7, #20]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	206a      	movs	r0, #106	; 0x6a
 8004d32:	f7fd f89b 	bl	8001e6c <WriteCmdData>
        break;
 8004d36:	e021      	b.n	8004d7c <vertScroll+0x230>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8004d38:	4b16      	ldr	r3, [pc, #88]	; (8004d94 <vertScroll+0x248>)
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	f043 0302 	orr.w	r3, r3, #2
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	4619      	mov	r1, r3
 8004d44:	f240 4001 	movw	r0, #1025	; 0x401
 8004d48:	f7fd f890 	bl	8001e6c <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 8004d4c:	8abb      	ldrh	r3, [r7, #20]
 8004d4e:	4619      	mov	r1, r3
 8004d50:	f240 4004 	movw	r0, #1028	; 0x404
 8004d54:	f7fd f88a 	bl	8001e6c <WriteCmdData>
        break;
 8004d58:	e010      	b.n	8004d7c <vertScroll+0x230>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8004d5a:	4b0e      	ldr	r3, [pc, #56]	; (8004d94 <vertScroll+0x248>)
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	f043 0302 	orr.w	r3, r3, #2
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	4619      	mov	r1, r3
 8004d66:	2061      	movs	r0, #97	; 0x61
 8004d68:	f7fd f880 	bl	8001e6c <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8004d6c:	8abb      	ldrh	r3, [r7, #20]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	206a      	movs	r0, #106	; 0x6a
 8004d72:	f7fd f87b 	bl	8001e6c <WriteCmdData>
        break;
 8004d76:	bf00      	nop
 8004d78:	e000      	b.n	8004d7c <vertScroll+0x230>
		return;
 8004d7a:	bf00      	nop
    }
}
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	2000065e 	.word	0x2000065e
 8004d88:	20000310 	.word	0x20000310
 8004d8c:	20000650 	.word	0x20000650
 8004d90:	2000030d 	.word	0x2000030d
 8004d94:	20000654 	.word	0x20000654

08004d98 <invertDisplay>:
{
    fillRect(0, 0, _width, _height, color);
}

void invertDisplay(uint8_t i)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8004da2:	4b46      	ldr	r3, [pc, #280]	; (8004ebc <invertDisplay+0x124>)
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bf14      	ite	ne
 8004dae:	2301      	movne	r3, #1
 8004db0:	2300      	moveq	r3, #0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	b21a      	sxth	r2, r3
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	b21b      	sxth	r3, r3
 8004dba:	4053      	eors	r3, r2
 8004dbc:	b21b      	sxth	r3, r3
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	4b3f      	ldr	r3, [pc, #252]	; (8004ec0 <invertDisplay+0x128>)
 8004dc2:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8004dc4:	4b3d      	ldr	r3, [pc, #244]	; (8004ebc <invertDisplay+0x124>)
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d035      	beq.n	8004e3c <invertDisplay+0xa4>
        if (is8347) {
 8004dd0:	4b3c      	ldr	r3, [pc, #240]	; (8004ec4 <invertDisplay+0x12c>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d024      	beq.n	8004e22 <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8004dd8:	4b3b      	ldr	r3, [pc, #236]	; (8004ec8 <invertDisplay+0x130>)
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	f248 3247 	movw	r2, #33607	; 0x8347
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d005      	beq.n	8004df0 <invertDisplay+0x58>
 8004de4:	4b38      	ldr	r3, [pc, #224]	; (8004ec8 <invertDisplay+0x130>)
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	f245 2252 	movw	r2, #21074	; 0x5252
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d108      	bne.n	8004e02 <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 8004df0:	4b33      	ldr	r3, [pc, #204]	; (8004ec0 <invertDisplay+0x128>)
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <invertDisplay+0x64>
 8004df8:	2306      	movs	r3, #6
 8004dfa:	e000      	b.n	8004dfe <invertDisplay+0x66>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	73fb      	strb	r3, [r7, #15]
 8004e00:	e007      	b.n	8004e12 <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 8004e02:	4b2f      	ldr	r3, [pc, #188]	; (8004ec0 <invertDisplay+0x128>)
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <invertDisplay+0x76>
 8004e0a:	2308      	movs	r3, #8
 8004e0c:	e000      	b.n	8004e10 <invertDisplay+0x78>
 8004e0e:	230a      	movs	r3, #10
 8004e10:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 8004e12:	f107 030f 	add.w	r3, r7, #15
 8004e16:	461a      	mov	r2, r3
 8004e18:	2101      	movs	r1, #1
 8004e1a:	2001      	movs	r0, #1
 8004e1c:	f7fd fae4 	bl	80023e8 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 8004e20:	e049      	b.n	8004eb6 <invertDisplay+0x11e>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8004e22:	4b27      	ldr	r3, [pc, #156]	; (8004ec0 <invertDisplay+0x128>)
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <invertDisplay+0x96>
 8004e2a:	2321      	movs	r3, #33	; 0x21
 8004e2c:	e000      	b.n	8004e30 <invertDisplay+0x98>
 8004e2e:	2320      	movs	r3, #32
 8004e30:	2200      	movs	r2, #0
 8004e32:	2100      	movs	r1, #0
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fd fad7 	bl	80023e8 <WriteCmdParamN>
 8004e3a:	e03c      	b.n	8004eb6 <invertDisplay+0x11e>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8004e3c:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <invertDisplay+0x130>)
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	f247 7293 	movw	r2, #30611	; 0x7793
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d024      	beq.n	8004e92 <invertDisplay+0xfa>
 8004e48:	f247 7293 	movw	r2, #30611	; 0x7793
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	dc07      	bgt.n	8004e60 <invertDisplay+0xc8>
 8004e50:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004e54:	d010      	beq.n	8004e78 <invertDisplay+0xe0>
 8004e56:	f245 4220 	movw	r2, #21536	; 0x5420
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d019      	beq.n	8004e92 <invertDisplay+0xfa>
 8004e5e:	e023      	b.n	8004ea8 <invertDisplay+0x110>
 8004e60:	f249 3226 	movw	r2, #37670	; 0x9326
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d014      	beq.n	8004e92 <invertDisplay+0xfa>
 8004e68:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d010      	beq.n	8004e92 <invertDisplay+0xfa>
 8004e70:	f249 2225 	movw	r2, #37413	; 0x9225
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d117      	bne.n	8004ea8 <invertDisplay+0x110>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8004e78:	4b11      	ldr	r3, [pc, #68]	; (8004ec0 <invertDisplay+0x128>)
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	b21b      	sxth	r3, r3
 8004e80:	f043 0313 	orr.w	r3, r3, #19
 8004e84:	b21b      	sxth	r3, r3
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	4619      	mov	r1, r3
 8004e8a:	2007      	movs	r0, #7
 8004e8c:	f7fc ffee 	bl	8001e6c <WriteCmdData>
        break;
 8004e90:	e011      	b.n	8004eb6 <invertDisplay+0x11e>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 8004e92:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <invertDisplay+0x128>)
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	f043 0302 	orr.w	r3, r3, #2
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	f240 4001 	movw	r0, #1025	; 0x401
 8004ea2:	f7fc ffe3 	bl	8001e6c <WriteCmdData>
        break;
 8004ea6:	e006      	b.n	8004eb6 <invertDisplay+0x11e>
    default:
        WriteCmdData(0x61, _lcd_rev);
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <invertDisplay+0x128>)
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	4619      	mov	r1, r3
 8004eae:	2061      	movs	r0, #97	; 0x61
 8004eb0:	f7fc ffdc 	bl	8001e6c <WriteCmdData>
        break;
 8004eb4:	bf00      	nop
    }
}
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000650 	.word	0x20000650
 8004ec0:	20000654 	.word	0x20000654
 8004ec4:	2000030d 	.word	0x2000030d
 8004ec8:	2000065e 	.word	0x2000065e

08004ecc <drawFastHLine>:
void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
	fillRect(x, y, 1, h, color);
}
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8004ecc:	b590      	push	{r4, r7, lr}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af02      	add	r7, sp, #8
 8004ed2:	4604      	mov	r4, r0
 8004ed4:	4608      	mov	r0, r1
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4623      	mov	r3, r4
 8004edc:	80fb      	strh	r3, [r7, #6]
 8004ede:	4603      	mov	r3, r0
 8004ee0:	80bb      	strh	r3, [r7, #4]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	807b      	strh	r3, [r7, #2]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, w, 1, color);
 8004eea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004eee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004ef2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004ef6:	883b      	ldrh	r3, [r7, #0]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	2301      	movs	r3, #1
 8004efc:	f000 f804 	bl	8004f08 <fillRect>
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd90      	pop	{r4, r7, pc}

08004f08 <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8004f08:	b590      	push	{r4, r7, lr}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4604      	mov	r4, r0
 8004f10:	4608      	mov	r0, r1
 8004f12:	4611      	mov	r1, r2
 8004f14:	461a      	mov	r2, r3
 8004f16:	4623      	mov	r3, r4
 8004f18:	80fb      	strh	r3, [r7, #6]
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	80bb      	strh	r3, [r7, #4]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	807b      	strh	r3, [r7, #2]
 8004f22:	4613      	mov	r3, r2
 8004f24:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 8004f26:	4b92      	ldr	r3, [pc, #584]	; (8005170 <fillRect+0x268>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <fillRect+0x32>
 8004f2e:	8c3b      	ldrh	r3, [r7, #32]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fc feeb 	bl	8001d0c <color565_to_555>
 8004f36:	4603      	mov	r3, r0
 8004f38:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 8004f3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	da08      	bge.n	8004f54 <fillRect+0x4c>
        w = -w;
 8004f42:	887b      	ldrh	r3, [r7, #2]
 8004f44:	425b      	negs	r3, r3
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	807b      	strh	r3, [r7, #2]
        x -= w;
 8004f4a:	88fa      	ldrh	r2, [r7, #6]
 8004f4c:	887b      	ldrh	r3, [r7, #2]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8004f54:	88fa      	ldrh	r2, [r7, #6]
 8004f56:	887b      	ldrh	r3, [r7, #2]
 8004f58:	4413      	add	r3, r2
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8004f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	da01      	bge.n	8004f6a <fillRect+0x62>
        x = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 8004f6a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8004f6e:	f7fc feb5 	bl	8001cdc <width>
 8004f72:	4603      	mov	r3, r0
 8004f74:	429c      	cmp	r4, r3
 8004f76:	dd03      	ble.n	8004f80 <fillRect+0x78>
        end = width();
 8004f78:	f7fc feb0 	bl	8001cdc <width>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 8004f80:	89fa      	ldrh	r2, [r7, #14]
 8004f82:	88fb      	ldrh	r3, [r7, #6]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 8004f8a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	da08      	bge.n	8004fa4 <fillRect+0x9c>
        h = -h;
 8004f92:	883b      	ldrh	r3, [r7, #0]
 8004f94:	425b      	negs	r3, r3
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	803b      	strh	r3, [r7, #0]
        y -= h;
 8004f9a:	88ba      	ldrh	r2, [r7, #4]
 8004f9c:	883b      	ldrh	r3, [r7, #0]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8004fa4:	88ba      	ldrh	r2, [r7, #4]
 8004fa6:	883b      	ldrh	r3, [r7, #0]
 8004fa8:	4413      	add	r3, r2
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8004fae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	da01      	bge.n	8004fba <fillRect+0xb2>
        y = 0;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 8004fba:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8004fbe:	f7fc fe99 	bl	8001cf4 <height>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	429c      	cmp	r4, r3
 8004fc6:	dd03      	ble.n	8004fd0 <fillRect+0xc8>
        end = height();
 8004fc8:	f7fc fe94 	bl	8001cf4 <height>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 8004fd0:	89fa      	ldrh	r2, [r7, #14]
 8004fd2:	88bb      	ldrh	r3, [r7, #4]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8004fda:	88fa      	ldrh	r2, [r7, #6]
 8004fdc:	887b      	ldrh	r3, [r7, #2]
 8004fde:	4413      	add	r3, r2
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	b21c      	sxth	r4, r3
 8004fe8:	88ba      	ldrh	r2, [r7, #4]
 8004fea:	883b      	ldrh	r3, [r7, #0]
 8004fec:	4413      	add	r3, r2
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	b21b      	sxth	r3, r3
 8004ff6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004ffa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004ffe:	4622      	mov	r2, r4
 8005000:	f7ff fc80 	bl	8004904 <setAddrWindow>
    CS_ACTIVE;
 8005004:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005008:	485a      	ldr	r0, [pc, #360]	; (8005174 <fillRect+0x26c>)
 800500a:	f7fc fe19 	bl	8001c40 <PIN_LOW>
    WriteCmd(_MW);
 800500e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005012:	4859      	ldr	r0, [pc, #356]	; (8005178 <fillRect+0x270>)
 8005014:	f7fc fe14 	bl	8001c40 <PIN_LOW>
 8005018:	4b58      	ldr	r3, [pc, #352]	; (800517c <fillRect+0x274>)
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	0a1b      	lsrs	r3, r3, #8
 800501e:	b29b      	uxth	r3, r3
 8005020:	737b      	strb	r3, [r7, #13]
 8005022:	4b56      	ldr	r3, [pc, #344]	; (800517c <fillRect+0x274>)
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	733b      	strb	r3, [r7, #12]
 8005028:	4b53      	ldr	r3, [pc, #332]	; (8005178 <fillRect+0x270>)
 800502a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800502e:	619a      	str	r2, [r3, #24]
 8005030:	4b53      	ldr	r3, [pc, #332]	; (8005180 <fillRect+0x278>)
 8005032:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8005036:	619a      	str	r2, [r3, #24]
 8005038:	4b52      	ldr	r3, [pc, #328]	; (8005184 <fillRect+0x27c>)
 800503a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800503e:	619a      	str	r2, [r3, #24]
 8005040:	7b7b      	ldrb	r3, [r7, #13]
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	4a4f      	ldr	r2, [pc, #316]	; (8005184 <fillRect+0x27c>)
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	6193      	str	r3, [r2, #24]
 800504c:	7b7b      	ldrb	r3, [r7, #13]
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8005054:	7b7b      	ldrb	r3, [r7, #13]
 8005056:	015b      	lsls	r3, r3, #5
 8005058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505c:	431a      	orrs	r2, r3
 800505e:	7b7b      	ldrb	r3, [r7, #13]
 8005060:	015b      	lsls	r3, r3, #5
 8005062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005066:	431a      	orrs	r2, r3
 8005068:	4b45      	ldr	r3, [pc, #276]	; (8005180 <fillRect+0x278>)
 800506a:	619a      	str	r2, [r3, #24]
 800506c:	7b7b      	ldrb	r3, [r7, #13]
 800506e:	105b      	asrs	r3, r3, #1
 8005070:	f003 0208 	and.w	r2, r3, #8
 8005074:	7b7b      	ldrb	r3, [r7, #13]
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	431a      	orrs	r2, r3
 800507e:	7b7b      	ldrb	r3, [r7, #13]
 8005080:	105b      	asrs	r3, r3, #1
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	431a      	orrs	r2, r3
 8005088:	7b7b      	ldrb	r3, [r7, #13]
 800508a:	10db      	asrs	r3, r3, #3
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	431a      	orrs	r2, r3
 8005092:	4b39      	ldr	r3, [pc, #228]	; (8005178 <fillRect+0x270>)
 8005094:	619a      	str	r2, [r3, #24]
 8005096:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800509a:	4837      	ldr	r0, [pc, #220]	; (8005178 <fillRect+0x270>)
 800509c:	f7fc fdd0 	bl	8001c40 <PIN_LOW>
 80050a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050a4:	4834      	ldr	r0, [pc, #208]	; (8005178 <fillRect+0x270>)
 80050a6:	f7fc fddb 	bl	8001c60 <PIN_HIGH>
 80050aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050ae:	4832      	ldr	r0, [pc, #200]	; (8005178 <fillRect+0x270>)
 80050b0:	f7fc fdd6 	bl	8001c60 <PIN_HIGH>
 80050b4:	4b30      	ldr	r3, [pc, #192]	; (8005178 <fillRect+0x270>)
 80050b6:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80050ba:	619a      	str	r2, [r3, #24]
 80050bc:	4b30      	ldr	r3, [pc, #192]	; (8005180 <fillRect+0x278>)
 80050be:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80050c2:	619a      	str	r2, [r3, #24]
 80050c4:	4b2f      	ldr	r3, [pc, #188]	; (8005184 <fillRect+0x27c>)
 80050c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050ca:	619a      	str	r2, [r3, #24]
 80050cc:	7b3b      	ldrb	r3, [r7, #12]
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	4a2c      	ldr	r2, [pc, #176]	; (8005184 <fillRect+0x27c>)
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	6193      	str	r3, [r2, #24]
 80050d8:	7b3b      	ldrb	r3, [r7, #12]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80050e0:	7b3b      	ldrb	r3, [r7, #12]
 80050e2:	015b      	lsls	r3, r3, #5
 80050e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e8:	431a      	orrs	r2, r3
 80050ea:	7b3b      	ldrb	r3, [r7, #12]
 80050ec:	015b      	lsls	r3, r3, #5
 80050ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f2:	431a      	orrs	r2, r3
 80050f4:	4b22      	ldr	r3, [pc, #136]	; (8005180 <fillRect+0x278>)
 80050f6:	619a      	str	r2, [r3, #24]
 80050f8:	7b3b      	ldrb	r3, [r7, #12]
 80050fa:	105b      	asrs	r3, r3, #1
 80050fc:	f003 0208 	and.w	r2, r3, #8
 8005100:	7b3b      	ldrb	r3, [r7, #12]
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005108:	431a      	orrs	r2, r3
 800510a:	7b3b      	ldrb	r3, [r7, #12]
 800510c:	105b      	asrs	r3, r3, #1
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	431a      	orrs	r2, r3
 8005114:	7b3b      	ldrb	r3, [r7, #12]
 8005116:	10db      	asrs	r3, r3, #3
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	431a      	orrs	r2, r3
 800511e:	4b16      	ldr	r3, [pc, #88]	; (8005178 <fillRect+0x270>)
 8005120:	619a      	str	r2, [r3, #24]
 8005122:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005126:	4814      	ldr	r0, [pc, #80]	; (8005178 <fillRect+0x270>)
 8005128:	f7fc fd8a 	bl	8001c40 <PIN_LOW>
 800512c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005130:	4811      	ldr	r0, [pc, #68]	; (8005178 <fillRect+0x270>)
 8005132:	f7fc fd95 	bl	8001c60 <PIN_HIGH>
 8005136:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800513a:	480f      	ldr	r0, [pc, #60]	; (8005178 <fillRect+0x270>)
 800513c:	f7fc fd90 	bl	8001c60 <PIN_HIGH>
 8005140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005144:	480c      	ldr	r0, [pc, #48]	; (8005178 <fillRect+0x270>)
 8005146:	f7fc fd8b 	bl	8001c60 <PIN_HIGH>
    if (h > w) {
 800514a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800514e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005152:	429a      	cmp	r2, r3
 8005154:	dd05      	ble.n	8005162 <fillRect+0x25a>
        end = h;
 8005156:	883b      	ldrh	r3, [r7, #0]
 8005158:	81fb      	strh	r3, [r7, #14]
        h = w;
 800515a:	887b      	ldrh	r3, [r7, #2]
 800515c:	803b      	strh	r3, [r7, #0]
        w = end;
 800515e:	89fb      	ldrh	r3, [r7, #14]
 8005160:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8005162:	8c3b      	ldrh	r3, [r7, #32]
 8005164:	0a1b      	lsrs	r3, r3, #8
 8005166:	b29b      	uxth	r3, r3
 8005168:	72fb      	strb	r3, [r7, #11]
 800516a:	8c3b      	ldrh	r3, [r7, #32]
 800516c:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 800516e:	e0a2      	b.n	80052b6 <fillRect+0x3ae>
 8005170:	2000030e 	.word	0x2000030e
 8005174:	40020400 	.word	0x40020400
 8005178:	40021000 	.word	0x40021000
 800517c:	2000064e 	.word	0x2000064e
 8005180:	40021400 	.word	0x40021400
 8005184:	40021800 	.word	0x40021800
        end = w;
 8005188:	887b      	ldrh	r3, [r7, #2]
 800518a:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 800518c:	4b64      	ldr	r3, [pc, #400]	; (8005320 <fillRect+0x418>)
 800518e:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8005192:	619a      	str	r2, [r3, #24]
 8005194:	4b63      	ldr	r3, [pc, #396]	; (8005324 <fillRect+0x41c>)
 8005196:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 800519a:	619a      	str	r2, [r3, #24]
 800519c:	4b62      	ldr	r3, [pc, #392]	; (8005328 <fillRect+0x420>)
 800519e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051a2:	619a      	str	r2, [r3, #24]
 80051a4:	7afb      	ldrb	r3, [r7, #11]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	4a5f      	ldr	r2, [pc, #380]	; (8005328 <fillRect+0x420>)
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	6193      	str	r3, [r2, #24]
 80051b0:	7afb      	ldrb	r3, [r7, #11]
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80051b8:	7afb      	ldrb	r3, [r7, #11]
 80051ba:	015b      	lsls	r3, r3, #5
 80051bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c0:	431a      	orrs	r2, r3
 80051c2:	7afb      	ldrb	r3, [r7, #11]
 80051c4:	015b      	lsls	r3, r3, #5
 80051c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ca:	431a      	orrs	r2, r3
 80051cc:	4b55      	ldr	r3, [pc, #340]	; (8005324 <fillRect+0x41c>)
 80051ce:	619a      	str	r2, [r3, #24]
 80051d0:	7afb      	ldrb	r3, [r7, #11]
 80051d2:	105b      	asrs	r3, r3, #1
 80051d4:	f003 0208 	and.w	r2, r3, #8
 80051d8:	7afb      	ldrb	r3, [r7, #11]
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	431a      	orrs	r2, r3
 80051e2:	7afb      	ldrb	r3, [r7, #11]
 80051e4:	105b      	asrs	r3, r3, #1
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	431a      	orrs	r2, r3
 80051ec:	7afb      	ldrb	r3, [r7, #11]
 80051ee:	10db      	asrs	r3, r3, #3
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	431a      	orrs	r2, r3
 80051f6:	4b4a      	ldr	r3, [pc, #296]	; (8005320 <fillRect+0x418>)
 80051f8:	619a      	str	r2, [r3, #24]
 80051fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051fe:	4848      	ldr	r0, [pc, #288]	; (8005320 <fillRect+0x418>)
 8005200:	f7fc fd1e 	bl	8001c40 <PIN_LOW>
 8005204:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005208:	4845      	ldr	r0, [pc, #276]	; (8005320 <fillRect+0x418>)
 800520a:	f7fc fd29 	bl	8001c60 <PIN_HIGH>
 800520e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005212:	4843      	ldr	r0, [pc, #268]	; (8005320 <fillRect+0x418>)
 8005214:	f7fc fd24 	bl	8001c60 <PIN_HIGH>
            write8(lo);
 8005218:	4b41      	ldr	r3, [pc, #260]	; (8005320 <fillRect+0x418>)
 800521a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800521e:	619a      	str	r2, [r3, #24]
 8005220:	4b40      	ldr	r3, [pc, #256]	; (8005324 <fillRect+0x41c>)
 8005222:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 8005226:	619a      	str	r2, [r3, #24]
 8005228:	4b3f      	ldr	r3, [pc, #252]	; (8005328 <fillRect+0x420>)
 800522a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800522e:	619a      	str	r2, [r3, #24]
 8005230:	7abb      	ldrb	r3, [r7, #10]
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	4a3c      	ldr	r2, [pc, #240]	; (8005328 <fillRect+0x420>)
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	6193      	str	r3, [r2, #24]
 800523c:	7abb      	ldrb	r3, [r7, #10]
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8005244:	7abb      	ldrb	r3, [r7, #10]
 8005246:	015b      	lsls	r3, r3, #5
 8005248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524c:	431a      	orrs	r2, r3
 800524e:	7abb      	ldrb	r3, [r7, #10]
 8005250:	015b      	lsls	r3, r3, #5
 8005252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005256:	431a      	orrs	r2, r3
 8005258:	4b32      	ldr	r3, [pc, #200]	; (8005324 <fillRect+0x41c>)
 800525a:	619a      	str	r2, [r3, #24]
 800525c:	7abb      	ldrb	r3, [r7, #10]
 800525e:	105b      	asrs	r3, r3, #1
 8005260:	f003 0208 	and.w	r2, r3, #8
 8005264:	7abb      	ldrb	r3, [r7, #10]
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526c:	431a      	orrs	r2, r3
 800526e:	7abb      	ldrb	r3, [r7, #10]
 8005270:	105b      	asrs	r3, r3, #1
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	431a      	orrs	r2, r3
 8005278:	7abb      	ldrb	r3, [r7, #10]
 800527a:	10db      	asrs	r3, r3, #3
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	431a      	orrs	r2, r3
 8005282:	4b27      	ldr	r3, [pc, #156]	; (8005320 <fillRect+0x418>)
 8005284:	619a      	str	r2, [r3, #24]
 8005286:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800528a:	4825      	ldr	r0, [pc, #148]	; (8005320 <fillRect+0x418>)
 800528c:	f7fc fcd8 	bl	8001c40 <PIN_LOW>
 8005290:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005294:	4822      	ldr	r0, [pc, #136]	; (8005320 <fillRect+0x418>)
 8005296:	f7fc fce3 	bl	8001c60 <PIN_HIGH>
 800529a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800529e:	4820      	ldr	r0, [pc, #128]	; (8005320 <fillRect+0x418>)
 80052a0:	f7fc fcde 	bl	8001c60 <PIN_HIGH>
        } while (--end != 0);
 80052a4:	89fb      	ldrh	r3, [r7, #14]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	81fb      	strh	r3, [r7, #14]
 80052ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f47f af6b 	bne.w	800518c <fillRect+0x284>
    while (h-- > 0) {
 80052b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	3a01      	subs	r2, #1
 80052be:	b292      	uxth	r2, r2
 80052c0:	803a      	strh	r2, [r7, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f73f af60 	bgt.w	8005188 <fillRect+0x280>
#endif
    }
    CS_IDLE;
 80052c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052cc:	4817      	ldr	r0, [pc, #92]	; (800532c <fillRect+0x424>)
 80052ce:	f7fc fcc7 	bl	8001c60 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 80052d2:	4b17      	ldr	r3, [pc, #92]	; (8005330 <fillRect+0x428>)
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <fillRect+0x3ee>
 80052de:	4b15      	ldr	r3, [pc, #84]	; (8005334 <fillRect+0x42c>)
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	f241 5226 	movw	r2, #5414	; 0x1526
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d116      	bne.n	8005318 <fillRect+0x410>
 80052ea:	4b13      	ldr	r3, [pc, #76]	; (8005338 <fillRect+0x430>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d010      	beq.n	8005318 <fillRect+0x410>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 80052f6:	f7fc fcf1 	bl	8001cdc <width>
 80052fa:	4603      	mov	r3, r0
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29b      	uxth	r3, r3
 8005300:	b21c      	sxth	r4, r3
 8005302:	f7fc fcf7 	bl	8001cf4 <height>
 8005306:	4603      	mov	r3, r0
 8005308:	3b01      	subs	r3, #1
 800530a:	b29b      	uxth	r3, r3
 800530c:	b21b      	sxth	r3, r3
 800530e:	4622      	mov	r2, r4
 8005310:	2100      	movs	r1, #0
 8005312:	2000      	movs	r0, #0
 8005314:	f7ff faf6 	bl	8004904 <setAddrWindow>
}
 8005318:	bf00      	nop
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	bd90      	pop	{r4, r7, pc}
 8005320:	40021000 	.word	0x40021000
 8005324:	40021400 	.word	0x40021400
 8005328:	40021800 	.word	0x40021800
 800532c:	40020400 	.word	0x40020400
 8005330:	20000650 	.word	0x20000650
 8005334:	2000065e 	.word	0x2000065e
 8005338:	20000310 	.word	0x20000310

0800533c <fillTriangle>:
    drawLine(x2, y2, x0, y0, color);
}


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800533c:	b590      	push	{r4, r7, lr}
 800533e:	b08f      	sub	sp, #60	; 0x3c
 8005340:	af00      	add	r7, sp, #0
 8005342:	4604      	mov	r4, r0
 8005344:	4608      	mov	r0, r1
 8005346:	4611      	mov	r1, r2
 8005348:	461a      	mov	r2, r3
 800534a:	4623      	mov	r3, r4
 800534c:	80fb      	strh	r3, [r7, #6]
 800534e:	4603      	mov	r3, r0
 8005350:	80bb      	strh	r3, [r7, #4]
 8005352:	460b      	mov	r3, r1
 8005354:	807b      	strh	r3, [r7, #2]
 8005356:	4613      	mov	r3, r2
 8005358:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 800535a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800535e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005362:	429a      	cmp	r2, r3
 8005364:	dd0b      	ble.n	800537e <fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005366:	88bb      	ldrh	r3, [r7, #4]
 8005368:	84fb      	strh	r3, [r7, #38]	; 0x26
 800536a:	883b      	ldrh	r3, [r7, #0]
 800536c:	80bb      	strh	r3, [r7, #4]
 800536e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005370:	803b      	strh	r3, [r7, #0]
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005376:	887b      	ldrh	r3, [r7, #2]
 8005378:	80fb      	strh	r3, [r7, #6]
 800537a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800537c:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 800537e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005382:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005386:	429a      	cmp	r2, r3
 8005388:	dd0f      	ble.n	80053aa <fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 800538a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800538e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005390:	883b      	ldrh	r3, [r7, #0]
 8005392:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005396:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005398:	803b      	strh	r3, [r7, #0]
 800539a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800539e:	843b      	strh	r3, [r7, #32]
 80053a0:	887b      	ldrh	r3, [r7, #2]
 80053a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80053a6:	8c3b      	ldrh	r3, [r7, #32]
 80053a8:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 80053aa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80053ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	dd0b      	ble.n	80053ce <fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80053b6:	88bb      	ldrh	r3, [r7, #4]
 80053b8:	83fb      	strh	r3, [r7, #30]
 80053ba:	883b      	ldrh	r3, [r7, #0]
 80053bc:	80bb      	strh	r3, [r7, #4]
 80053be:	8bfb      	ldrh	r3, [r7, #30]
 80053c0:	803b      	strh	r3, [r7, #0]
 80053c2:	88fb      	ldrh	r3, [r7, #6]
 80053c4:	83bb      	strh	r3, [r7, #28]
 80053c6:	887b      	ldrh	r3, [r7, #2]
 80053c8:	80fb      	strh	r3, [r7, #6]
 80053ca:	8bbb      	ldrh	r3, [r7, #28]
 80053cc:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80053ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80053d2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d137      	bne.n	800544a <fillTriangle+0x10e>
        a = b = x0;
 80053da:	88fb      	ldrh	r3, [r7, #6]
 80053dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80053de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80053e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 80053e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80053e6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80053ea:	429a      	cmp	r2, r3
 80053ec:	da02      	bge.n	80053f4 <fillTriangle+0xb8>
 80053ee:	887b      	ldrh	r3, [r7, #2]
 80053f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80053f2:	e007      	b.n	8005404 <fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 80053f4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80053f8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80053fc:	429a      	cmp	r2, r3
 80053fe:	dd01      	ble.n	8005404 <fillTriangle+0xc8>
 8005400:	887b      	ldrh	r3, [r7, #2]
 8005402:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8005404:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005408:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800540c:	429a      	cmp	r2, r3
 800540e:	da03      	bge.n	8005418 <fillTriangle+0xdc>
 8005410:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005414:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005416:	e008      	b.n	800542a <fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8005418:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800541c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005420:	429a      	cmp	r2, r3
 8005422:	dd02      	ble.n	800542a <fillTriangle+0xee>
 8005424:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005428:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y0, b-a+1, color);
 800542a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800542c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	b29b      	uxth	r3, r3
 8005432:	3301      	adds	r3, #1
 8005434:	b29b      	uxth	r3, r3
 8005436:	b21a      	sxth	r2, r3
 8005438:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800543c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005440:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005444:	f7ff fd42 	bl	8004ecc <drawFastHLine>
        return;
 8005448:	e0d4      	b.n	80055f4 <fillTriangle+0x2b8>
    }

    int16_t
    dx01 = x1 - x0,
 800544a:	887a      	ldrh	r2, [r7, #2]
 800544c:	88fb      	ldrh	r3, [r7, #6]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	b29b      	uxth	r3, r3
 8005452:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8005454:	883a      	ldrh	r2, [r7, #0]
 8005456:	88bb      	ldrh	r3, [r7, #4]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	b29b      	uxth	r3, r3
 800545c:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 800545e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005462:	88fb      	ldrh	r3, [r7, #6]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	b29b      	uxth	r3, r3
 8005468:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 800546a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800546e:	88bb      	ldrh	r3, [r7, #4]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	b29b      	uxth	r3, r3
 8005474:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8005476:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800547a:	887b      	ldrh	r3, [r7, #2]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	b29b      	uxth	r3, r3
 8005480:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8005482:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005486:	883b      	ldrh	r3, [r7, #0]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	b29b      	uxth	r3, r3
 800548c:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 800548e:	2300      	movs	r3, #0
 8005490:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8005492:	2300      	movs	r3, #0
 8005494:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8005496:	f9b7 2000 	ldrsh.w	r2, [r7]
 800549a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800549e:	429a      	cmp	r2, r3
 80054a0:	d102      	bne.n	80054a8 <fillTriangle+0x16c>
 80054a2:	883b      	ldrh	r3, [r7, #0]
 80054a4:	863b      	strh	r3, [r7, #48]	; 0x30
 80054a6:	e003      	b.n	80054b0 <fillTriangle+0x174>
    else         last = y1-1; // Skip it
 80054a8:	883b      	ldrh	r3, [r7, #0]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 80054b0:	88bb      	ldrh	r3, [r7, #4]
 80054b2:	867b      	strh	r3, [r7, #50]	; 0x32
 80054b4:	e03e      	b.n	8005534 <fillTriangle+0x1f8>
        a   = x0 + sa / dy01;
 80054b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80054ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	4413      	add	r3, r2
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 80054ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80054ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	88fb      	ldrh	r3, [r7, #6]
 80054d8:	4413      	add	r3, r2
 80054da:	b29b      	uxth	r3, r3
 80054dc:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 80054de:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80054e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e4:	4413      	add	r3, r2
 80054e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80054e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80054ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ee:	4413      	add	r3, r2
 80054f0:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80054f2:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80054f6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80054fa:	429a      	cmp	r2, r3
 80054fc:	dd05      	ble.n	800550a <fillTriangle+0x1ce>
 80054fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005500:	81bb      	strh	r3, [r7, #12]
 8005502:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005504:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005506:	89bb      	ldrh	r3, [r7, #12]
 8005508:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 800550a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800550c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	b29b      	uxth	r3, r3
 8005512:	3301      	adds	r3, #1
 8005514:	b29b      	uxth	r3, r3
 8005516:	b21a      	sxth	r2, r3
 8005518:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800551c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005520:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005524:	f7ff fcd2 	bl	8004ecc <drawFastHLine>
    for(y=y0; y<=last; y++) {
 8005528:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800552c:	b29b      	uxth	r3, r3
 800552e:	3301      	adds	r3, #1
 8005530:	b29b      	uxth	r3, r3
 8005532:	867b      	strh	r3, [r7, #50]	; 0x32
 8005534:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005538:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800553c:	429a      	cmp	r2, r3
 800553e:	ddba      	ble.n	80054b6 <fillTriangle+0x17a>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8005540:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005544:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005548:	f9b7 2000 	ldrsh.w	r2, [r7]
 800554c:	1a8a      	subs	r2, r1, r2
 800554e:	fb02 f303 	mul.w	r3, r2, r3
 8005552:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8005554:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005558:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800555c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005560:	1a8a      	subs	r2, r1, r2
 8005562:	fb02 f303 	mul.w	r3, r2, r3
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8005568:	e03e      	b.n	80055e8 <fillTriangle+0x2ac>
        a   = x1 + sa / dy12;
 800556a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800556e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005570:	fb92 f3f3 	sdiv	r3, r2, r3
 8005574:	b29a      	uxth	r2, r3
 8005576:	887b      	ldrh	r3, [r7, #2]
 8005578:	4413      	add	r3, r2
 800557a:	b29b      	uxth	r3, r3
 800557c:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 800557e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005584:	fb92 f3f3 	sdiv	r3, r2, r3
 8005588:	b29a      	uxth	r2, r3
 800558a:	88fb      	ldrh	r3, [r7, #6]
 800558c:	4413      	add	r3, r2
 800558e:	b29b      	uxth	r3, r3
 8005590:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8005592:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005598:	4413      	add	r3, r2
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 800559c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80055a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055a2:	4413      	add	r3, r2
 80055a4:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80055a6:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80055aa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80055ae:	429a      	cmp	r2, r3
 80055b0:	dd05      	ble.n	80055be <fillTriangle+0x282>
 80055b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055b4:	81fb      	strh	r3, [r7, #14]
 80055b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80055b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80055ba:	89fb      	ldrh	r3, [r7, #14]
 80055bc:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 80055be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80055c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3301      	adds	r3, #1
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	b21a      	sxth	r2, r3
 80055cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80055d0:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80055d4:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80055d8:	f7ff fc78 	bl	8004ecc <drawFastHLine>
    for(; y<=y2; y++) {
 80055dc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	3301      	adds	r3, #1
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	867b      	strh	r3, [r7, #50]	; 0x32
 80055e8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80055ec:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80055f0:	429a      	cmp	r2, r3
 80055f2:	ddba      	ble.n	800556a <fillTriangle+0x22e>
    }
}
 80055f4:	373c      	adds	r7, #60	; 0x3c
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd90      	pop	{r4, r7, pc}
	...

080055fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80055fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005634 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005600:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005602:	e003      	b.n	800560c <LoopCopyDataInit>

08005604 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005604:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005606:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005608:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800560a:	3104      	adds	r1, #4

0800560c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800560c:	480b      	ldr	r0, [pc, #44]	; (800563c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800560e:	4b0c      	ldr	r3, [pc, #48]	; (8005640 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005610:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005612:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005614:	d3f6      	bcc.n	8005604 <CopyDataInit>
  ldr  r2, =_sbss
 8005616:	4a0b      	ldr	r2, [pc, #44]	; (8005644 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005618:	e002      	b.n	8005620 <LoopFillZerobss>

0800561a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800561a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800561c:	f842 3b04 	str.w	r3, [r2], #4

08005620 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005620:	4b09      	ldr	r3, [pc, #36]	; (8005648 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005622:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005624:	d3f9      	bcc.n	800561a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005626:	f7fc fadd 	bl	8001be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800562a:	f003 fd27 	bl	800907c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800562e:	f7fa ff83 	bl	8000538 <main>
  bx  lr    
 8005632:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005634:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8005638:	08009694 	.word	0x08009694
  ldr  r0, =_sdata
 800563c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005640:	200002dc 	.word	0x200002dc
  ldr  r2, =_sbss
 8005644:	200002dc 	.word	0x200002dc
  ldr  r3, = _ebss
 8005648:	2000066c 	.word	0x2000066c

0800564c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800564c:	e7fe      	b.n	800564c <ADC_IRQHandler>

0800564e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005652:	2003      	movs	r0, #3
 8005654:	f000 f94a 	bl	80058ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005658:	2000      	movs	r0, #0
 800565a:	f000 f805 	bl	8005668 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800565e:	f7fc f859 	bl	8001714 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005670:	4b12      	ldr	r3, [pc, #72]	; (80056bc <HAL_InitTick+0x54>)
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	4b12      	ldr	r3, [pc, #72]	; (80056c0 <HAL_InitTick+0x58>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	4619      	mov	r1, r3
 800567a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800567e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005682:	fbb2 f3f3 	udiv	r3, r2, r3
 8005686:	4618      	mov	r0, r3
 8005688:	f000 f965 	bl	8005956 <HAL_SYSTICK_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e00e      	b.n	80056b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b0f      	cmp	r3, #15
 800569a:	d80a      	bhi.n	80056b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800569c:	2200      	movs	r2, #0
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	f04f 30ff 	mov.w	r0, #4294967295
 80056a4:	f000 f92d 	bl	8005902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80056a8:	4a06      	ldr	r2, [pc, #24]	; (80056c4 <HAL_InitTick+0x5c>)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e000      	b.n	80056b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	200002cc 	.word	0x200002cc
 80056c0:	200002d8 	.word	0x200002d8
 80056c4:	200002d4 	.word	0x200002d4

080056c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056cc:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <HAL_IncTick+0x20>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	4b06      	ldr	r3, [pc, #24]	; (80056ec <HAL_IncTick+0x24>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4413      	add	r3, r2
 80056d8:	4a04      	ldr	r2, [pc, #16]	; (80056ec <HAL_IncTick+0x24>)
 80056da:	6013      	str	r3, [r2, #0]
}
 80056dc:	bf00      	nop
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	200002d8 	.word	0x200002d8
 80056ec:	20000668 	.word	0x20000668

080056f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
  return uwTick;
 80056f4:	4b03      	ldr	r3, [pc, #12]	; (8005704 <HAL_GetTick+0x14>)
 80056f6:	681b      	ldr	r3, [r3, #0]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	20000668 	.word	0x20000668

08005708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005710:	f7ff ffee 	bl	80056f0 <HAL_GetTick>
 8005714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005720:	d005      	beq.n	800572e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005722:	4b09      	ldr	r3, [pc, #36]	; (8005748 <HAL_Delay+0x40>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4413      	add	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800572e:	bf00      	nop
 8005730:	f7ff ffde 	bl	80056f0 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	429a      	cmp	r2, r3
 800573e:	d8f7      	bhi.n	8005730 <HAL_Delay+0x28>
  {
  }
}
 8005740:	bf00      	nop
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	200002d8 	.word	0x200002d8

0800574c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800575c:	4b0b      	ldr	r3, [pc, #44]	; (800578c <__NVIC_SetPriorityGrouping+0x40>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005768:	4013      	ands	r3, r2
 800576a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005774:	4b06      	ldr	r3, [pc, #24]	; (8005790 <__NVIC_SetPriorityGrouping+0x44>)
 8005776:	4313      	orrs	r3, r2
 8005778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800577a:	4a04      	ldr	r2, [pc, #16]	; (800578c <__NVIC_SetPriorityGrouping+0x40>)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	60d3      	str	r3, [r2, #12]
}
 8005780:	bf00      	nop
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	e000ed00 	.word	0xe000ed00
 8005790:	05fa0000 	.word	0x05fa0000

08005794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005798:	4b04      	ldr	r3, [pc, #16]	; (80057ac <__NVIC_GetPriorityGrouping+0x18>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	0a1b      	lsrs	r3, r3, #8
 800579e:	f003 0307 	and.w	r3, r3, #7
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	e000ed00 	.word	0xe000ed00

080057b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	db0b      	blt.n	80057da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	f003 021f 	and.w	r2, r3, #31
 80057c8:	4907      	ldr	r1, [pc, #28]	; (80057e8 <__NVIC_EnableIRQ+0x38>)
 80057ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ce:	095b      	lsrs	r3, r3, #5
 80057d0:	2001      	movs	r0, #1
 80057d2:	fa00 f202 	lsl.w	r2, r0, r2
 80057d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	e000e100 	.word	0xe000e100

080057ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	6039      	str	r1, [r7, #0]
 80057f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	db0a      	blt.n	8005816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	b2da      	uxtb	r2, r3
 8005804:	490c      	ldr	r1, [pc, #48]	; (8005838 <__NVIC_SetPriority+0x4c>)
 8005806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800580a:	0112      	lsls	r2, r2, #4
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	440b      	add	r3, r1
 8005810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005814:	e00a      	b.n	800582c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	b2da      	uxtb	r2, r3
 800581a:	4908      	ldr	r1, [pc, #32]	; (800583c <__NVIC_SetPriority+0x50>)
 800581c:	79fb      	ldrb	r3, [r7, #7]
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	3b04      	subs	r3, #4
 8005824:	0112      	lsls	r2, r2, #4
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	440b      	add	r3, r1
 800582a:	761a      	strb	r2, [r3, #24]
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	e000e100 	.word	0xe000e100
 800583c:	e000ed00 	.word	0xe000ed00

08005840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005840:	b480      	push	{r7}
 8005842:	b089      	sub	sp, #36	; 0x24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f1c3 0307 	rsb	r3, r3, #7
 800585a:	2b04      	cmp	r3, #4
 800585c:	bf28      	it	cs
 800585e:	2304      	movcs	r3, #4
 8005860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	3304      	adds	r3, #4
 8005866:	2b06      	cmp	r3, #6
 8005868:	d902      	bls.n	8005870 <NVIC_EncodePriority+0x30>
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	3b03      	subs	r3, #3
 800586e:	e000      	b.n	8005872 <NVIC_EncodePriority+0x32>
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005874:	f04f 32ff 	mov.w	r2, #4294967295
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43da      	mvns	r2, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	401a      	ands	r2, r3
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005888:	f04f 31ff 	mov.w	r1, #4294967295
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	fa01 f303 	lsl.w	r3, r1, r3
 8005892:	43d9      	mvns	r1, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005898:	4313      	orrs	r3, r2
         );
}
 800589a:	4618      	mov	r0, r3
 800589c:	3724      	adds	r7, #36	; 0x24
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
	...

080058a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058b8:	d301      	bcc.n	80058be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058ba:	2301      	movs	r3, #1
 80058bc:	e00f      	b.n	80058de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058be:	4a0a      	ldr	r2, [pc, #40]	; (80058e8 <SysTick_Config+0x40>)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058c6:	210f      	movs	r1, #15
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	f7ff ff8e 	bl	80057ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058d0:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <SysTick_Config+0x40>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058d6:	4b04      	ldr	r3, [pc, #16]	; (80058e8 <SysTick_Config+0x40>)
 80058d8:	2207      	movs	r2, #7
 80058da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	e000e010 	.word	0xe000e010

080058ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff ff29 	bl	800574c <__NVIC_SetPriorityGrouping>
}
 80058fa:	bf00      	nop
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005902:	b580      	push	{r7, lr}
 8005904:	b086      	sub	sp, #24
 8005906:	af00      	add	r7, sp, #0
 8005908:	4603      	mov	r3, r0
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	607a      	str	r2, [r7, #4]
 800590e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005910:	2300      	movs	r3, #0
 8005912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005914:	f7ff ff3e 	bl	8005794 <__NVIC_GetPriorityGrouping>
 8005918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	68b9      	ldr	r1, [r7, #8]
 800591e:	6978      	ldr	r0, [r7, #20]
 8005920:	f7ff ff8e 	bl	8005840 <NVIC_EncodePriority>
 8005924:	4602      	mov	r2, r0
 8005926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800592a:	4611      	mov	r1, r2
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff ff5d 	bl	80057ec <__NVIC_SetPriority>
}
 8005932:	bf00      	nop
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
 8005940:	4603      	mov	r3, r0
 8005942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff ff31 	bl	80057b0 <__NVIC_EnableIRQ>
}
 800594e:	bf00      	nop
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff ffa2 	bl	80058a8 <SysTick_Config>
 8005964:	4603      	mov	r3, r0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800596e:	b580      	push	{r7, lr}
 8005970:	b082      	sub	sp, #8
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e014      	b.n	80059aa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	791b      	ldrb	r3, [r3, #4]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d105      	bne.n	8005996 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7fb fee3 	bl	800175c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	795b      	ldrb	r3, [r3, #5]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_DAC_Start_DMA+0x1e>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e08e      	b.n	8005af0 <HAL_DAC_Start_DMA+0x13c>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2202      	movs	r2, #2
 80059dc:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d12a      	bne.n	8005a3a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	4a43      	ldr	r2, [pc, #268]	; (8005af8 <HAL_DAC_Start_DMA+0x144>)
 80059ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	4a42      	ldr	r2, [pc, #264]	; (8005afc <HAL_DAC_Start_DMA+0x148>)
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	4a41      	ldr	r2, [pc, #260]	; (8005b00 <HAL_DAC_Start_DMA+0x14c>)
 80059fa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a0a:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d009      	beq.n	8005a26 <HAL_DAC_Start_DMA+0x72>
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d00c      	beq.n	8005a30 <HAL_DAC_Start_DMA+0x7c>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d000      	beq.n	8005a1c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8005a1a:	e039      	b.n	8005a90 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3308      	adds	r3, #8
 8005a22:	617b      	str	r3, [r7, #20]
        break;
 8005a24:	e034      	b.n	8005a90 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	617b      	str	r3, [r7, #20]
        break;
 8005a2e:	e02f      	b.n	8005a90 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3310      	adds	r3, #16
 8005a36:	617b      	str	r3, [r7, #20]
        break;
 8005a38:	e02a      	b.n	8005a90 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	4a31      	ldr	r2, [pc, #196]	; (8005b04 <HAL_DAC_Start_DMA+0x150>)
 8005a40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	4a30      	ldr	r2, [pc, #192]	; (8005b08 <HAL_DAC_Start_DMA+0x154>)
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	4a2f      	ldr	r2, [pc, #188]	; (8005b0c <HAL_DAC_Start_DMA+0x158>)
 8005a50:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a60:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d009      	beq.n	8005a7c <HAL_DAC_Start_DMA+0xc8>
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d00c      	beq.n	8005a86 <HAL_DAC_Start_DMA+0xd2>
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d000      	beq.n	8005a72 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8005a70:	e00e      	b.n	8005a90 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3314      	adds	r3, #20
 8005a78:	617b      	str	r3, [r7, #20]
        break;
 8005a7a:	e009      	b.n	8005a90 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3318      	adds	r3, #24
 8005a82:	617b      	str	r3, [r7, #20]
        break;
 8005a84:	e004      	b.n	8005a90 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	331c      	adds	r3, #28
 8005a8c:	617b      	str	r3, [r7, #20]
        break;
 8005a8e:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10f      	bne.n	8005ab6 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aa4:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6898      	ldr	r0, [r3, #8]
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	f000 fa12 	bl	8005ed8 <HAL_DMA_Start_IT>
 8005ab4:	e00e      	b.n	8005ad4 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005ac4:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	68d8      	ldr	r0, [r3, #12]
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	f000 fa02 	bl	8005ed8 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6819      	ldr	r1, [r3, #0]
 8005ada:	2201      	movs	r2, #1
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	409a      	lsls	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	08005c69 	.word	0x08005c69
 8005afc:	08005c8b 	.word	0x08005c8b
 8005b00:	08005ca7 	.word	0x08005ca7
 8005b04:	08005d11 	.word	0x08005d11
 8005b08:	08005d33 	.word	0x08005d33
 8005b0c:	08005d4f 	.word	0x08005d4f

08005b10 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6819      	ldr	r1, [r3, #0]
 8005b24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	43da      	mvns	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	400a      	ands	r2, r1
 8005b36:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6819      	ldr	r1, [r3, #0]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	fa02 f303 	lsl.w	r3, r2, r3
 8005b46:	43da      	mvns	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	400a      	ands	r2, r1
 8005b4e:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d107      	bne.n	8005b66 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fa1c 	bl	8005f98 <HAL_DMA_Abort>
 8005b60:	4603      	mov	r3, r0
 8005b62:	73fb      	strb	r3, [r7, #15]
 8005b64:	e006      	b.n	8005b74 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fa14 	bl	8005f98 <HAL_DMA_Abort>
 8005b70:	4603      	mov	r3, r0
 8005b72:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	711a      	strb	r2, [r3, #4]
 8005b80:	e002      	b.n	8005b88 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
   
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b087      	sub	sp, #28
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	2300      	movs	r3, #0
 8005be0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	795b      	ldrb	r3, [r3, #5]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d101      	bne.n	8005bee <HAL_DAC_ConfigChannel+0x20>
 8005bea:	2302      	movs	r3, #2
 8005bec:	e036      	b.n	8005c5c <HAL_DAC_ConfigChannel+0x8e>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005c02:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4013      	ands	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6819      	ldr	r1, [r3, #0]
 8005c3c:	22c0      	movs	r2, #192	; 0xc0
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	fa02 f303 	lsl.w	r3, r2, r3
 8005c44:	43da      	mvns	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	400a      	ands	r2, r1
 8005c4c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	371c      	adds	r7, #28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <DAC_DMAConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f7ff ff8b 	bl	8005b92 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	711a      	strb	r2, [r3, #4]
}
 8005c82:	bf00      	nop
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f7ff ff84 	bl	8005ba6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005c9e:	bf00      	nop
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <DAC_DMAErrorCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb2:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f043 0204 	orr.w	r2, r3, #4
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f7ff ff7a 	bl	8005bba <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	711a      	strb	r2, [r3, #4]
}
 8005ccc:	bf00      	nop
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <DAC_DMAConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1c:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7ff ffd8 	bl	8005cd4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2201      	movs	r2, #1
 8005d28:	711a      	strb	r2, [r3, #4]
}
 8005d2a:	bf00      	nop
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f7ff ffd1 	bl	8005ce8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005d46:	bf00      	nop
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <DAC_DMAErrorCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f043 0204 	orr.w	r2, r3, #4
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f7ff ffc7 	bl	8005cfc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2201      	movs	r2, #1
 8005d72:	711a      	strb	r2, [r3, #4]
}
 8005d74:	bf00      	nop
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005d88:	f7ff fcb2 	bl	80056f0 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e099      	b.n	8005ecc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0201 	bic.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005db8:	e00f      	b.n	8005dda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dba:	f7ff fc99 	bl	80056f0 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b05      	cmp	r3, #5
 8005dc6:	d908      	bls.n	8005dda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2203      	movs	r2, #3
 8005dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e078      	b.n	8005ecc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e8      	bne.n	8005dba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4b38      	ldr	r3, [pc, #224]	; (8005ed4 <HAL_DMA_Init+0x158>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	d107      	bne.n	8005e44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f023 0307 	bic.w	r3, r3, #7
 8005e5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d117      	bne.n	8005e9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00e      	beq.n	8005e9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fae7 	bl	8006454 <DMA_CheckFifoParam>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2240      	movs	r2, #64	; 0x40
 8005e90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e016      	b.n	8005ecc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fa9e 	bl	80063e8 <DMA_CalcBaseAndBitshift>
 8005eac:	4603      	mov	r3, r0
 8005eae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb4:	223f      	movs	r2, #63	; 0x3f
 8005eb6:	409a      	lsls	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	e010803f 	.word	0xe010803f

08005ed8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d101      	bne.n	8005efe <HAL_DMA_Start_IT+0x26>
 8005efa:	2302      	movs	r3, #2
 8005efc:	e048      	b.n	8005f90 <HAL_DMA_Start_IT+0xb8>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d137      	bne.n	8005f82 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2202      	movs	r2, #2
 8005f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 fa30 	bl	800638c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f30:	223f      	movs	r2, #63	; 0x3f
 8005f32:	409a      	lsls	r2, r3
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0216 	orr.w	r2, r2, #22
 8005f46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695a      	ldr	r2, [r3, #20]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f56:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d007      	beq.n	8005f70 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0208 	orr.w	r2, r2, #8
 8005f6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0201 	orr.w	r2, r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	e005      	b.n	8005f8e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005fa6:	f7ff fba3 	bl	80056f0 <HAL_GetTick>
 8005faa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d008      	beq.n	8005fca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2280      	movs	r2, #128	; 0x80
 8005fbc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e052      	b.n	8006070 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0216 	bic.w	r2, r2, #22
 8005fd8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695a      	ldr	r2, [r3, #20]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fe8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d103      	bne.n	8005ffa <HAL_DMA_Abort+0x62>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0208 	bic.w	r2, r2, #8
 8006008:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0201 	bic.w	r2, r2, #1
 8006018:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800601a:	e013      	b.n	8006044 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800601c:	f7ff fb68 	bl	80056f0 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b05      	cmp	r3, #5
 8006028:	d90c      	bls.n	8006044 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2220      	movs	r2, #32
 800602e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2203      	movs	r2, #3
 800603c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e015      	b.n	8006070 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e4      	bne.n	800601c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006056:	223f      	movs	r2, #63	; 0x3f
 8006058:	409a      	lsls	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006080:	2300      	movs	r3, #0
 8006082:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006084:	4b92      	ldr	r3, [pc, #584]	; (80062d0 <HAL_DMA_IRQHandler+0x258>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a92      	ldr	r2, [pc, #584]	; (80062d4 <HAL_DMA_IRQHandler+0x25c>)
 800608a:	fba2 2303 	umull	r2, r3, r2, r3
 800608e:	0a9b      	lsrs	r3, r3, #10
 8006090:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006096:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a2:	2208      	movs	r2, #8
 80060a4:	409a      	lsls	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4013      	ands	r3, r2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d01a      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d013      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0204 	bic.w	r2, r2, #4
 80060ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d0:	2208      	movs	r2, #8
 80060d2:	409a      	lsls	r2, r3
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060dc:	f043 0201 	orr.w	r2, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e8:	2201      	movs	r2, #1
 80060ea:	409a      	lsls	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4013      	ands	r3, r2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d012      	beq.n	800611a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00b      	beq.n	800611a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006106:	2201      	movs	r2, #1
 8006108:	409a      	lsls	r2, r3
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006112:	f043 0202 	orr.w	r2, r3, #2
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800611e:	2204      	movs	r2, #4
 8006120:	409a      	lsls	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	4013      	ands	r3, r2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d012      	beq.n	8006150 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00b      	beq.n	8006150 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613c:	2204      	movs	r2, #4
 800613e:	409a      	lsls	r2, r3
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006148:	f043 0204 	orr.w	r2, r3, #4
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006154:	2210      	movs	r2, #16
 8006156:	409a      	lsls	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4013      	ands	r3, r2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d043      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d03c      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006172:	2210      	movs	r2, #16
 8006174:	409a      	lsls	r2, r3
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d018      	beq.n	80061ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d108      	bne.n	80061a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d024      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	4798      	blx	r3
 80061a6:	e01f      	b.n	80061e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01b      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	4798      	blx	r3
 80061b8:	e016      	b.n	80061e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d107      	bne.n	80061d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0208 	bic.w	r2, r2, #8
 80061d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ec:	2220      	movs	r2, #32
 80061ee:	409a      	lsls	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4013      	ands	r3, r2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 808e 	beq.w	8006316 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 8086 	beq.w	8006316 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800620e:	2220      	movs	r2, #32
 8006210:	409a      	lsls	r2, r3
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b05      	cmp	r3, #5
 8006220:	d136      	bne.n	8006290 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0216 	bic.w	r2, r2, #22
 8006230:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695a      	ldr	r2, [r3, #20]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006240:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d103      	bne.n	8006252 <HAL_DMA_IRQHandler+0x1da>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0208 	bic.w	r2, r2, #8
 8006260:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006266:	223f      	movs	r2, #63	; 0x3f
 8006268:	409a      	lsls	r2, r3
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006282:	2b00      	cmp	r3, #0
 8006284:	d07d      	beq.n	8006382 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	4798      	blx	r3
        }
        return;
 800628e:	e078      	b.n	8006382 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d01c      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d108      	bne.n	80062be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d030      	beq.n	8006316 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	4798      	blx	r3
 80062bc:	e02b      	b.n	8006316 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d027      	beq.n	8006316 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	4798      	blx	r3
 80062ce:	e022      	b.n	8006316 <HAL_DMA_IRQHandler+0x29e>
 80062d0:	200002cc 	.word	0x200002cc
 80062d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10f      	bne.n	8006306 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0210 	bic.w	r2, r2, #16
 80062f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631a:	2b00      	cmp	r3, #0
 800631c:	d032      	beq.n	8006384 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d022      	beq.n	8006370 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2205      	movs	r2, #5
 800632e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0201 	bic.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	3301      	adds	r3, #1
 8006346:	60bb      	str	r3, [r7, #8]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	429a      	cmp	r2, r3
 800634c:	d307      	bcc.n	800635e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1f2      	bne.n	8006342 <HAL_DMA_IRQHandler+0x2ca>
 800635c:	e000      	b.n	8006360 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800635e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d005      	beq.n	8006384 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	4798      	blx	r3
 8006380:	e000      	b.n	8006384 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006382:	bf00      	nop
    }
  }
}
 8006384:	3718      	adds	r7, #24
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop

0800638c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	2b40      	cmp	r3, #64	; 0x40
 80063b8:	d108      	bne.n	80063cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80063ca:	e007      	b.n	80063dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	60da      	str	r2, [r3, #12]
}
 80063dc:	bf00      	nop
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	3b10      	subs	r3, #16
 80063f8:	4a13      	ldr	r2, [pc, #76]	; (8006448 <DMA_CalcBaseAndBitshift+0x60>)
 80063fa:	fba2 2303 	umull	r2, r3, r2, r3
 80063fe:	091b      	lsrs	r3, r3, #4
 8006400:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006402:	4a12      	ldr	r2, [pc, #72]	; (800644c <DMA_CalcBaseAndBitshift+0x64>)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b03      	cmp	r3, #3
 8006414:	d908      	bls.n	8006428 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <DMA_CalcBaseAndBitshift+0x68>)
 800641e:	4013      	ands	r3, r2
 8006420:	1d1a      	adds	r2, r3, #4
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	659a      	str	r2, [r3, #88]	; 0x58
 8006426:	e006      	b.n	8006436 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	461a      	mov	r2, r3
 800642e:	4b08      	ldr	r3, [pc, #32]	; (8006450 <DMA_CalcBaseAndBitshift+0x68>)
 8006430:	4013      	ands	r3, r2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	aaaaaaab 	.word	0xaaaaaaab
 800644c:	0800967c 	.word	0x0800967c
 8006450:	fffffc00 	.word	0xfffffc00

08006454 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006464:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d11f      	bne.n	80064ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b03      	cmp	r3, #3
 8006472:	d855      	bhi.n	8006520 <DMA_CheckFifoParam+0xcc>
 8006474:	a201      	add	r2, pc, #4	; (adr r2, 800647c <DMA_CheckFifoParam+0x28>)
 8006476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647a:	bf00      	nop
 800647c:	0800648d 	.word	0x0800648d
 8006480:	0800649f 	.word	0x0800649f
 8006484:	0800648d 	.word	0x0800648d
 8006488:	08006521 	.word	0x08006521
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d045      	beq.n	8006524 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800649c:	e042      	b.n	8006524 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064a6:	d13f      	bne.n	8006528 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064ac:	e03c      	b.n	8006528 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064b6:	d121      	bne.n	80064fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d836      	bhi.n	800652c <DMA_CheckFifoParam+0xd8>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <DMA_CheckFifoParam+0x70>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064d5 	.word	0x080064d5
 80064c8:	080064db 	.word	0x080064db
 80064cc:	080064d5 	.word	0x080064d5
 80064d0:	080064ed 	.word	0x080064ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	73fb      	strb	r3, [r7, #15]
      break;
 80064d8:	e02f      	b.n	800653a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d024      	beq.n	8006530 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064ea:	e021      	b.n	8006530 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064f4:	d11e      	bne.n	8006534 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80064fa:	e01b      	b.n	8006534 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d902      	bls.n	8006508 <DMA_CheckFifoParam+0xb4>
 8006502:	2b03      	cmp	r3, #3
 8006504:	d003      	beq.n	800650e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006506:	e018      	b.n	800653a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	73fb      	strb	r3, [r7, #15]
      break;
 800650c:	e015      	b.n	800653a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00e      	beq.n	8006538 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	73fb      	strb	r3, [r7, #15]
      break;
 800651e:	e00b      	b.n	8006538 <DMA_CheckFifoParam+0xe4>
      break;
 8006520:	bf00      	nop
 8006522:	e00a      	b.n	800653a <DMA_CheckFifoParam+0xe6>
      break;
 8006524:	bf00      	nop
 8006526:	e008      	b.n	800653a <DMA_CheckFifoParam+0xe6>
      break;
 8006528:	bf00      	nop
 800652a:	e006      	b.n	800653a <DMA_CheckFifoParam+0xe6>
      break;
 800652c:	bf00      	nop
 800652e:	e004      	b.n	800653a <DMA_CheckFifoParam+0xe6>
      break;
 8006530:	bf00      	nop
 8006532:	e002      	b.n	800653a <DMA_CheckFifoParam+0xe6>
      break;   
 8006534:	bf00      	nop
 8006536:	e000      	b.n	800653a <DMA_CheckFifoParam+0xe6>
      break;
 8006538:	bf00      	nop
    }
  } 
  
  return status; 
 800653a:	7bfb      	ldrb	r3, [r7, #15]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006548:	b480      	push	{r7}
 800654a:	b089      	sub	sp, #36	; 0x24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006552:	2300      	movs	r3, #0
 8006554:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006556:	2300      	movs	r3, #0
 8006558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800655a:	2300      	movs	r3, #0
 800655c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800655e:	2300      	movs	r3, #0
 8006560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006562:	2300      	movs	r3, #0
 8006564:	61fb      	str	r3, [r7, #28]
 8006566:	e175      	b.n	8006854 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006568:	2201      	movs	r2, #1
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	fa02 f303 	lsl.w	r3, r2, r3
 8006570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4013      	ands	r3, r2
 800657a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	429a      	cmp	r2, r3
 8006582:	f040 8164 	bne.w	800684e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d00b      	beq.n	80065a6 <HAL_GPIO_Init+0x5e>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2b02      	cmp	r3, #2
 8006594:	d007      	beq.n	80065a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800659a:	2b11      	cmp	r3, #17
 800659c:	d003      	beq.n	80065a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b12      	cmp	r3, #18
 80065a4:	d130      	bne.n	8006608 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	2203      	movs	r2, #3
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	43db      	mvns	r3, r3
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	4013      	ands	r3, r2
 80065bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065dc:	2201      	movs	r2, #1
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	fa02 f303 	lsl.w	r3, r2, r3
 80065e4:	43db      	mvns	r3, r3
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	4013      	ands	r3, r2
 80065ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	f003 0201 	and.w	r2, r3, #1
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	fa02 f303 	lsl.w	r3, r2, r3
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	4313      	orrs	r3, r2
 8006600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	2203      	movs	r2, #3
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	43db      	mvns	r3, r3
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	4013      	ands	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	fa02 f303 	lsl.w	r3, r2, r3
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	4313      	orrs	r3, r2
 8006630:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2b02      	cmp	r3, #2
 800663e:	d003      	beq.n	8006648 <HAL_GPIO_Init+0x100>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b12      	cmp	r3, #18
 8006646:	d123      	bne.n	8006690 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	08da      	lsrs	r2, r3, #3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3208      	adds	r2, #8
 8006650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	220f      	movs	r2, #15
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	43db      	mvns	r3, r3
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	4013      	ands	r3, r2
 800666a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	fa02 f303 	lsl.w	r3, r2, r3
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	4313      	orrs	r3, r2
 8006680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	08da      	lsrs	r2, r3, #3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3208      	adds	r2, #8
 800668a:	69b9      	ldr	r1, [r7, #24]
 800668c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	2203      	movs	r2, #3
 800669c:	fa02 f303 	lsl.w	r3, r2, r3
 80066a0:	43db      	mvns	r3, r3
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	4013      	ands	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f003 0203 	and.w	r2, r3, #3
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	fa02 f303 	lsl.w	r3, r2, r3
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 80be 	beq.w	800684e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066d2:	4b65      	ldr	r3, [pc, #404]	; (8006868 <HAL_GPIO_Init+0x320>)
 80066d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d6:	4a64      	ldr	r2, [pc, #400]	; (8006868 <HAL_GPIO_Init+0x320>)
 80066d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066dc:	6453      	str	r3, [r2, #68]	; 0x44
 80066de:	4b62      	ldr	r3, [pc, #392]	; (8006868 <HAL_GPIO_Init+0x320>)
 80066e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80066ea:	4a60      	ldr	r2, [pc, #384]	; (800686c <HAL_GPIO_Init+0x324>)
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	089b      	lsrs	r3, r3, #2
 80066f0:	3302      	adds	r3, #2
 80066f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	220f      	movs	r2, #15
 8006702:	fa02 f303 	lsl.w	r3, r2, r3
 8006706:	43db      	mvns	r3, r3
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	4013      	ands	r3, r2
 800670c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a57      	ldr	r2, [pc, #348]	; (8006870 <HAL_GPIO_Init+0x328>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d037      	beq.n	8006786 <HAL_GPIO_Init+0x23e>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a56      	ldr	r2, [pc, #344]	; (8006874 <HAL_GPIO_Init+0x32c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d031      	beq.n	8006782 <HAL_GPIO_Init+0x23a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a55      	ldr	r2, [pc, #340]	; (8006878 <HAL_GPIO_Init+0x330>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d02b      	beq.n	800677e <HAL_GPIO_Init+0x236>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a54      	ldr	r2, [pc, #336]	; (800687c <HAL_GPIO_Init+0x334>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d025      	beq.n	800677a <HAL_GPIO_Init+0x232>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a53      	ldr	r2, [pc, #332]	; (8006880 <HAL_GPIO_Init+0x338>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d01f      	beq.n	8006776 <HAL_GPIO_Init+0x22e>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a52      	ldr	r2, [pc, #328]	; (8006884 <HAL_GPIO_Init+0x33c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d019      	beq.n	8006772 <HAL_GPIO_Init+0x22a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a51      	ldr	r2, [pc, #324]	; (8006888 <HAL_GPIO_Init+0x340>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d013      	beq.n	800676e <HAL_GPIO_Init+0x226>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a50      	ldr	r2, [pc, #320]	; (800688c <HAL_GPIO_Init+0x344>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d00d      	beq.n	800676a <HAL_GPIO_Init+0x222>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a4f      	ldr	r2, [pc, #316]	; (8006890 <HAL_GPIO_Init+0x348>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d007      	beq.n	8006766 <HAL_GPIO_Init+0x21e>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a4e      	ldr	r2, [pc, #312]	; (8006894 <HAL_GPIO_Init+0x34c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d101      	bne.n	8006762 <HAL_GPIO_Init+0x21a>
 800675e:	2309      	movs	r3, #9
 8006760:	e012      	b.n	8006788 <HAL_GPIO_Init+0x240>
 8006762:	230a      	movs	r3, #10
 8006764:	e010      	b.n	8006788 <HAL_GPIO_Init+0x240>
 8006766:	2308      	movs	r3, #8
 8006768:	e00e      	b.n	8006788 <HAL_GPIO_Init+0x240>
 800676a:	2307      	movs	r3, #7
 800676c:	e00c      	b.n	8006788 <HAL_GPIO_Init+0x240>
 800676e:	2306      	movs	r3, #6
 8006770:	e00a      	b.n	8006788 <HAL_GPIO_Init+0x240>
 8006772:	2305      	movs	r3, #5
 8006774:	e008      	b.n	8006788 <HAL_GPIO_Init+0x240>
 8006776:	2304      	movs	r3, #4
 8006778:	e006      	b.n	8006788 <HAL_GPIO_Init+0x240>
 800677a:	2303      	movs	r3, #3
 800677c:	e004      	b.n	8006788 <HAL_GPIO_Init+0x240>
 800677e:	2302      	movs	r3, #2
 8006780:	e002      	b.n	8006788 <HAL_GPIO_Init+0x240>
 8006782:	2301      	movs	r3, #1
 8006784:	e000      	b.n	8006788 <HAL_GPIO_Init+0x240>
 8006786:	2300      	movs	r3, #0
 8006788:	69fa      	ldr	r2, [r7, #28]
 800678a:	f002 0203 	and.w	r2, r2, #3
 800678e:	0092      	lsls	r2, r2, #2
 8006790:	4093      	lsls	r3, r2
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	4313      	orrs	r3, r2
 8006796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006798:	4934      	ldr	r1, [pc, #208]	; (800686c <HAL_GPIO_Init+0x324>)
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	089b      	lsrs	r3, r3, #2
 800679e:	3302      	adds	r3, #2
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067a6:	4b3c      	ldr	r3, [pc, #240]	; (8006898 <HAL_GPIO_Init+0x350>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	43db      	mvns	r3, r3
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	4013      	ands	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80067ca:	4a33      	ldr	r2, [pc, #204]	; (8006898 <HAL_GPIO_Init+0x350>)
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80067d0:	4b31      	ldr	r3, [pc, #196]	; (8006898 <HAL_GPIO_Init+0x350>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	43db      	mvns	r3, r3
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	4013      	ands	r3, r2
 80067de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80067f4:	4a28      	ldr	r2, [pc, #160]	; (8006898 <HAL_GPIO_Init+0x350>)
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067fa:	4b27      	ldr	r3, [pc, #156]	; (8006898 <HAL_GPIO_Init+0x350>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	43db      	mvns	r3, r3
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	4013      	ands	r3, r2
 8006808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800681e:	4a1e      	ldr	r2, [pc, #120]	; (8006898 <HAL_GPIO_Init+0x350>)
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006824:	4b1c      	ldr	r3, [pc, #112]	; (8006898 <HAL_GPIO_Init+0x350>)
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	43db      	mvns	r3, r3
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	4013      	ands	r3, r2
 8006832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	4313      	orrs	r3, r2
 8006846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006848:	4a13      	ldr	r2, [pc, #76]	; (8006898 <HAL_GPIO_Init+0x350>)
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	3301      	adds	r3, #1
 8006852:	61fb      	str	r3, [r7, #28]
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	2b0f      	cmp	r3, #15
 8006858:	f67f ae86 	bls.w	8006568 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800685c:	bf00      	nop
 800685e:	3724      	adds	r7, #36	; 0x24
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	40023800 	.word	0x40023800
 800686c:	40013800 	.word	0x40013800
 8006870:	40020000 	.word	0x40020000
 8006874:	40020400 	.word	0x40020400
 8006878:	40020800 	.word	0x40020800
 800687c:	40020c00 	.word	0x40020c00
 8006880:	40021000 	.word	0x40021000
 8006884:	40021400 	.word	0x40021400
 8006888:	40021800 	.word	0x40021800
 800688c:	40021c00 	.word	0x40021c00
 8006890:	40022000 	.word	0x40022000
 8006894:	40022400 	.word	0x40022400
 8006898:	40013c00 	.word	0x40013c00

0800689c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	691a      	ldr	r2, [r3, #16]
 80068ac:	887b      	ldrh	r3, [r7, #2]
 80068ae:	4013      	ands	r3, r2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068b4:	2301      	movs	r3, #1
 80068b6:	73fb      	strb	r3, [r7, #15]
 80068b8:	e001      	b.n	80068be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068be:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	807b      	strh	r3, [r7, #2]
 80068d8:	4613      	mov	r3, r2
 80068da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068dc:	787b      	ldrb	r3, [r7, #1]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80068e2:	887a      	ldrh	r2, [r7, #2]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80068e8:	e003      	b.n	80068f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80068ea:	887b      	ldrh	r3, [r7, #2]
 80068ec:	041a      	lsls	r2, r3, #16
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	619a      	str	r2, [r3, #24]
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
	...

08006900 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	4603      	mov	r3, r0
 8006908:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800690a:	4b08      	ldr	r3, [pc, #32]	; (800692c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800690c:	695a      	ldr	r2, [r3, #20]
 800690e:	88fb      	ldrh	r3, [r7, #6]
 8006910:	4013      	ands	r3, r2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d006      	beq.n	8006924 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006916:	4a05      	ldr	r2, [pc, #20]	; (800692c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006918:	88fb      	ldrh	r3, [r7, #6]
 800691a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800691c:	88fb      	ldrh	r3, [r7, #6]
 800691e:	4618      	mov	r0, r3
 8006920:	f7fa fda4 	bl	800146c <HAL_GPIO_EXTI_Callback>
  }
}
 8006924:	bf00      	nop
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	40013c00 	.word	0x40013c00

08006930 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006934:	4b05      	ldr	r3, [pc, #20]	; (800694c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a04      	ldr	r2, [pc, #16]	; (800694c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800693a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800693e:	6013      	str	r3, [r2, #0]
}
 8006940:	bf00      	nop
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40007000 	.word	0x40007000

08006950 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006958:	2300      	movs	r3, #0
 800695a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e29b      	b.n	8006e9e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 8087 	beq.w	8006a82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006974:	4b96      	ldr	r3, [pc, #600]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 030c 	and.w	r3, r3, #12
 800697c:	2b04      	cmp	r3, #4
 800697e:	d00c      	beq.n	800699a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006980:	4b93      	ldr	r3, [pc, #588]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 030c 	and.w	r3, r3, #12
 8006988:	2b08      	cmp	r3, #8
 800698a:	d112      	bne.n	80069b2 <HAL_RCC_OscConfig+0x62>
 800698c:	4b90      	ldr	r3, [pc, #576]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006998:	d10b      	bne.n	80069b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800699a:	4b8d      	ldr	r3, [pc, #564]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d06c      	beq.n	8006a80 <HAL_RCC_OscConfig+0x130>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d168      	bne.n	8006a80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e275      	b.n	8006e9e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ba:	d106      	bne.n	80069ca <HAL_RCC_OscConfig+0x7a>
 80069bc:	4b84      	ldr	r3, [pc, #528]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a83      	ldr	r2, [pc, #524]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 80069c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	e02e      	b.n	8006a28 <HAL_RCC_OscConfig+0xd8>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10c      	bne.n	80069ec <HAL_RCC_OscConfig+0x9c>
 80069d2:	4b7f      	ldr	r3, [pc, #508]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a7e      	ldr	r2, [pc, #504]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 80069d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	4b7c      	ldr	r3, [pc, #496]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a7b      	ldr	r2, [pc, #492]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 80069e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	e01d      	b.n	8006a28 <HAL_RCC_OscConfig+0xd8>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069f4:	d10c      	bne.n	8006a10 <HAL_RCC_OscConfig+0xc0>
 80069f6:	4b76      	ldr	r3, [pc, #472]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a75      	ldr	r2, [pc, #468]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 80069fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	4b73      	ldr	r3, [pc, #460]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a72      	ldr	r2, [pc, #456]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	e00b      	b.n	8006a28 <HAL_RCC_OscConfig+0xd8>
 8006a10:	4b6f      	ldr	r3, [pc, #444]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a6e      	ldr	r2, [pc, #440]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	4b6c      	ldr	r3, [pc, #432]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a6b      	ldr	r2, [pc, #428]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d013      	beq.n	8006a58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a30:	f7fe fe5e 	bl	80056f0 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a38:	f7fe fe5a 	bl	80056f0 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b64      	cmp	r3, #100	; 0x64
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e229      	b.n	8006e9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a4a:	4b61      	ldr	r3, [pc, #388]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0f0      	beq.n	8006a38 <HAL_RCC_OscConfig+0xe8>
 8006a56:	e014      	b.n	8006a82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a58:	f7fe fe4a 	bl	80056f0 <HAL_GetTick>
 8006a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a5e:	e008      	b.n	8006a72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a60:	f7fe fe46 	bl	80056f0 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2b64      	cmp	r3, #100	; 0x64
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e215      	b.n	8006e9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a72:	4b57      	ldr	r3, [pc, #348]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1f0      	bne.n	8006a60 <HAL_RCC_OscConfig+0x110>
 8006a7e:	e000      	b.n	8006a82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d069      	beq.n	8006b62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a8e:	4b50      	ldr	r3, [pc, #320]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 030c 	and.w	r3, r3, #12
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00b      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a9a:	4b4d      	ldr	r3, [pc, #308]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f003 030c 	and.w	r3, r3, #12
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d11c      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x190>
 8006aa6:	4b4a      	ldr	r3, [pc, #296]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d116      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ab2:	4b47      	ldr	r3, [pc, #284]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <HAL_RCC_OscConfig+0x17a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d001      	beq.n	8006aca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e1e9      	b.n	8006e9e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aca:	4b41      	ldr	r3, [pc, #260]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	493d      	ldr	r1, [pc, #244]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ade:	e040      	b.n	8006b62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d023      	beq.n	8006b30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ae8:	4b39      	ldr	r3, [pc, #228]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a38      	ldr	r2, [pc, #224]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006aee:	f043 0301 	orr.w	r3, r3, #1
 8006af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af4:	f7fe fdfc 	bl	80056f0 <HAL_GetTick>
 8006af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006afa:	e008      	b.n	8006b0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006afc:	f7fe fdf8 	bl	80056f0 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e1c7      	b.n	8006e9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b0e:	4b30      	ldr	r3, [pc, #192]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0f0      	beq.n	8006afc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b1a:	4b2d      	ldr	r3, [pc, #180]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	4929      	ldr	r1, [pc, #164]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	600b      	str	r3, [r1, #0]
 8006b2e:	e018      	b.n	8006b62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b30:	4b27      	ldr	r3, [pc, #156]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a26      	ldr	r2, [pc, #152]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006b36:	f023 0301 	bic.w	r3, r3, #1
 8006b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3c:	f7fe fdd8 	bl	80056f0 <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b44:	f7fe fdd4 	bl	80056f0 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e1a3      	b.n	8006e9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b56:	4b1e      	ldr	r3, [pc, #120]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1f0      	bne.n	8006b44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0308 	and.w	r3, r3, #8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d038      	beq.n	8006be0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d019      	beq.n	8006baa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b76:	4b16      	ldr	r3, [pc, #88]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b7a:	4a15      	ldr	r2, [pc, #84]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006b7c:	f043 0301 	orr.w	r3, r3, #1
 8006b80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b82:	f7fe fdb5 	bl	80056f0 <HAL_GetTick>
 8006b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b88:	e008      	b.n	8006b9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b8a:	f7fe fdb1 	bl	80056f0 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d901      	bls.n	8006b9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e180      	b.n	8006e9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b9c:	4b0c      	ldr	r3, [pc, #48]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0f0      	beq.n	8006b8a <HAL_RCC_OscConfig+0x23a>
 8006ba8:	e01a      	b.n	8006be0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006baa:	4b09      	ldr	r3, [pc, #36]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bae:	4a08      	ldr	r2, [pc, #32]	; (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006bb0:	f023 0301 	bic.w	r3, r3, #1
 8006bb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb6:	f7fe fd9b 	bl	80056f0 <HAL_GetTick>
 8006bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bbc:	e00a      	b.n	8006bd4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bbe:	f7fe fd97 	bl	80056f0 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d903      	bls.n	8006bd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e166      	b.n	8006e9e <HAL_RCC_OscConfig+0x54e>
 8006bd0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd4:	4b92      	ldr	r3, [pc, #584]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1ee      	bne.n	8006bbe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 80a4 	beq.w	8006d36 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bee:	4b8c      	ldr	r3, [pc, #560]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10d      	bne.n	8006c16 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bfa:	4b89      	ldr	r3, [pc, #548]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	4a88      	ldr	r2, [pc, #544]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c04:	6413      	str	r3, [r2, #64]	; 0x40
 8006c06:	4b86      	ldr	r3, [pc, #536]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c0e:	60bb      	str	r3, [r7, #8]
 8006c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c12:	2301      	movs	r3, #1
 8006c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c16:	4b83      	ldr	r3, [pc, #524]	; (8006e24 <HAL_RCC_OscConfig+0x4d4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d118      	bne.n	8006c54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006c22:	4b80      	ldr	r3, [pc, #512]	; (8006e24 <HAL_RCC_OscConfig+0x4d4>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a7f      	ldr	r2, [pc, #508]	; (8006e24 <HAL_RCC_OscConfig+0x4d4>)
 8006c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c2e:	f7fe fd5f 	bl	80056f0 <HAL_GetTick>
 8006c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c34:	e008      	b.n	8006c48 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c36:	f7fe fd5b 	bl	80056f0 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b64      	cmp	r3, #100	; 0x64
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e12a      	b.n	8006e9e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c48:	4b76      	ldr	r3, [pc, #472]	; (8006e24 <HAL_RCC_OscConfig+0x4d4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0f0      	beq.n	8006c36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d106      	bne.n	8006c6a <HAL_RCC_OscConfig+0x31a>
 8006c5c:	4b70      	ldr	r3, [pc, #448]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c60:	4a6f      	ldr	r2, [pc, #444]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006c62:	f043 0301 	orr.w	r3, r3, #1
 8006c66:	6713      	str	r3, [r2, #112]	; 0x70
 8006c68:	e02d      	b.n	8006cc6 <HAL_RCC_OscConfig+0x376>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10c      	bne.n	8006c8c <HAL_RCC_OscConfig+0x33c>
 8006c72:	4b6b      	ldr	r3, [pc, #428]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c76:	4a6a      	ldr	r2, [pc, #424]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006c78:	f023 0301 	bic.w	r3, r3, #1
 8006c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c7e:	4b68      	ldr	r3, [pc, #416]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c82:	4a67      	ldr	r2, [pc, #412]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006c84:	f023 0304 	bic.w	r3, r3, #4
 8006c88:	6713      	str	r3, [r2, #112]	; 0x70
 8006c8a:	e01c      	b.n	8006cc6 <HAL_RCC_OscConfig+0x376>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	2b05      	cmp	r3, #5
 8006c92:	d10c      	bne.n	8006cae <HAL_RCC_OscConfig+0x35e>
 8006c94:	4b62      	ldr	r3, [pc, #392]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c98:	4a61      	ldr	r2, [pc, #388]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006c9a:	f043 0304 	orr.w	r3, r3, #4
 8006c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006ca0:	4b5f      	ldr	r3, [pc, #380]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca4:	4a5e      	ldr	r2, [pc, #376]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006ca6:	f043 0301 	orr.w	r3, r3, #1
 8006caa:	6713      	str	r3, [r2, #112]	; 0x70
 8006cac:	e00b      	b.n	8006cc6 <HAL_RCC_OscConfig+0x376>
 8006cae:	4b5c      	ldr	r3, [pc, #368]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	4a5b      	ldr	r2, [pc, #364]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006cb4:	f023 0301 	bic.w	r3, r3, #1
 8006cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cba:	4b59      	ldr	r3, [pc, #356]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbe:	4a58      	ldr	r2, [pc, #352]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006cc0:	f023 0304 	bic.w	r3, r3, #4
 8006cc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d015      	beq.n	8006cfa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cce:	f7fe fd0f 	bl	80056f0 <HAL_GetTick>
 8006cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd4:	e00a      	b.n	8006cec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cd6:	f7fe fd0b 	bl	80056f0 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d901      	bls.n	8006cec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e0d8      	b.n	8006e9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cec:	4b4c      	ldr	r3, [pc, #304]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0ee      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x386>
 8006cf8:	e014      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cfa:	f7fe fcf9 	bl	80056f0 <HAL_GetTick>
 8006cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d00:	e00a      	b.n	8006d18 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d02:	f7fe fcf5 	bl	80056f0 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e0c2      	b.n	8006e9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d18:	4b41      	ldr	r3, [pc, #260]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1ee      	bne.n	8006d02 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d105      	bne.n	8006d36 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d2a:	4b3d      	ldr	r3, [pc, #244]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	4a3c      	ldr	r2, [pc, #240]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 80ae 	beq.w	8006e9c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d40:	4b37      	ldr	r3, [pc, #220]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 030c 	and.w	r3, r3, #12
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d06d      	beq.n	8006e28 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d14b      	bne.n	8006dec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d54:	4b32      	ldr	r3, [pc, #200]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a31      	ldr	r2, [pc, #196]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d60:	f7fe fcc6 	bl	80056f0 <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d68:	f7fe fcc2 	bl	80056f0 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e091      	b.n	8006e9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d7a:	4b29      	ldr	r3, [pc, #164]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1f0      	bne.n	8006d68 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	69da      	ldr	r2, [r3, #28]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	019b      	lsls	r3, r3, #6
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9c:	085b      	lsrs	r3, r3, #1
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	041b      	lsls	r3, r3, #16
 8006da2:	431a      	orrs	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	061b      	lsls	r3, r3, #24
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db0:	071b      	lsls	r3, r3, #28
 8006db2:	491b      	ldr	r1, [pc, #108]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006db8:	4b19      	ldr	r3, [pc, #100]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a18      	ldr	r2, [pc, #96]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc4:	f7fe fc94 	bl	80056f0 <HAL_GetTick>
 8006dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dcc:	f7fe fc90 	bl	80056f0 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e05f      	b.n	8006e9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dde:	4b10      	ldr	r3, [pc, #64]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0f0      	beq.n	8006dcc <HAL_RCC_OscConfig+0x47c>
 8006dea:	e057      	b.n	8006e9c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dec:	4b0c      	ldr	r3, [pc, #48]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a0b      	ldr	r2, [pc, #44]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df8:	f7fe fc7a 	bl	80056f0 <HAL_GetTick>
 8006dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dfe:	e008      	b.n	8006e12 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e00:	f7fe fc76 	bl	80056f0 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e045      	b.n	8006e9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e12:	4b03      	ldr	r3, [pc, #12]	; (8006e20 <HAL_RCC_OscConfig+0x4d0>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1f0      	bne.n	8006e00 <HAL_RCC_OscConfig+0x4b0>
 8006e1e:	e03d      	b.n	8006e9c <HAL_RCC_OscConfig+0x54c>
 8006e20:	40023800 	.word	0x40023800
 8006e24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006e28:	4b1f      	ldr	r3, [pc, #124]	; (8006ea8 <HAL_RCC_OscConfig+0x558>)
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d030      	beq.n	8006e98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d129      	bne.n	8006e98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d122      	bne.n	8006e98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e58:	4013      	ands	r3, r2
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e5e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d119      	bne.n	8006e98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	085b      	lsrs	r3, r3, #1
 8006e70:	3b01      	subs	r3, #1
 8006e72:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d10f      	bne.n	8006e98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e82:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d107      	bne.n	8006e98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e92:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d001      	beq.n	8006e9c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e000      	b.n	8006e9e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40023800 	.word	0x40023800

08006eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e0d0      	b.n	8007066 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ec4:	4b6a      	ldr	r3, [pc, #424]	; (8007070 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 030f 	and.w	r3, r3, #15
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d910      	bls.n	8006ef4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ed2:	4b67      	ldr	r3, [pc, #412]	; (8007070 <HAL_RCC_ClockConfig+0x1c4>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f023 020f 	bic.w	r2, r3, #15
 8006eda:	4965      	ldr	r1, [pc, #404]	; (8007070 <HAL_RCC_ClockConfig+0x1c4>)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ee2:	4b63      	ldr	r3, [pc, #396]	; (8007070 <HAL_RCC_ClockConfig+0x1c4>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d001      	beq.n	8006ef4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e0b8      	b.n	8007066 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d020      	beq.n	8006f42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f0c:	4b59      	ldr	r3, [pc, #356]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	4a58      	ldr	r2, [pc, #352]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 8006f12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d005      	beq.n	8006f30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f24:	4b53      	ldr	r3, [pc, #332]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	4a52      	ldr	r2, [pc, #328]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 8006f2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f30:	4b50      	ldr	r3, [pc, #320]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	494d      	ldr	r1, [pc, #308]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d040      	beq.n	8006fd0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d107      	bne.n	8006f66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f56:	4b47      	ldr	r3, [pc, #284]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d115      	bne.n	8006f8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e07f      	b.n	8007066 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d107      	bne.n	8006f7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f6e:	4b41      	ldr	r3, [pc, #260]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d109      	bne.n	8006f8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e073      	b.n	8007066 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f7e:	4b3d      	ldr	r3, [pc, #244]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e06b      	b.n	8007066 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f8e:	4b39      	ldr	r3, [pc, #228]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f023 0203 	bic.w	r2, r3, #3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	4936      	ldr	r1, [pc, #216]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fa0:	f7fe fba6 	bl	80056f0 <HAL_GetTick>
 8006fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fa6:	e00a      	b.n	8006fbe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fa8:	f7fe fba2 	bl	80056f0 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e053      	b.n	8007066 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fbe:	4b2d      	ldr	r3, [pc, #180]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 020c 	and.w	r2, r3, #12
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d1eb      	bne.n	8006fa8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fd0:	4b27      	ldr	r3, [pc, #156]	; (8007070 <HAL_RCC_ClockConfig+0x1c4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 030f 	and.w	r3, r3, #15
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d210      	bcs.n	8007000 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fde:	4b24      	ldr	r3, [pc, #144]	; (8007070 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f023 020f 	bic.w	r2, r3, #15
 8006fe6:	4922      	ldr	r1, [pc, #136]	; (8007070 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fee:	4b20      	ldr	r3, [pc, #128]	; (8007070 <HAL_RCC_ClockConfig+0x1c4>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d001      	beq.n	8007000 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e032      	b.n	8007066 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b00      	cmp	r3, #0
 800700a:	d008      	beq.n	800701e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800700c:	4b19      	ldr	r3, [pc, #100]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	4916      	ldr	r1, [pc, #88]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 800701a:	4313      	orrs	r3, r2
 800701c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0308 	and.w	r3, r3, #8
 8007026:	2b00      	cmp	r3, #0
 8007028:	d009      	beq.n	800703e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800702a:	4b12      	ldr	r3, [pc, #72]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	00db      	lsls	r3, r3, #3
 8007038:	490e      	ldr	r1, [pc, #56]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 800703a:	4313      	orrs	r3, r2
 800703c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800703e:	f000 f821 	bl	8007084 <HAL_RCC_GetSysClockFreq>
 8007042:	4601      	mov	r1, r0
 8007044:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <HAL_RCC_ClockConfig+0x1c8>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	091b      	lsrs	r3, r3, #4
 800704a:	f003 030f 	and.w	r3, r3, #15
 800704e:	4a0a      	ldr	r2, [pc, #40]	; (8007078 <HAL_RCC_ClockConfig+0x1cc>)
 8007050:	5cd3      	ldrb	r3, [r2, r3]
 8007052:	fa21 f303 	lsr.w	r3, r1, r3
 8007056:	4a09      	ldr	r2, [pc, #36]	; (800707c <HAL_RCC_ClockConfig+0x1d0>)
 8007058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800705a:	4b09      	ldr	r3, [pc, #36]	; (8007080 <HAL_RCC_ClockConfig+0x1d4>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe fb02 	bl	8005668 <HAL_InitTick>

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	40023c00 	.word	0x40023c00
 8007074:	40023800 	.word	0x40023800
 8007078:	080090f0 	.word	0x080090f0
 800707c:	200002cc 	.word	0x200002cc
 8007080:	200002d4 	.word	0x200002d4

08007084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800708a:	2300      	movs	r3, #0
 800708c:	607b      	str	r3, [r7, #4]
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	2300      	movs	r3, #0
 8007094:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800709a:	4b63      	ldr	r3, [pc, #396]	; (8007228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f003 030c 	and.w	r3, r3, #12
 80070a2:	2b04      	cmp	r3, #4
 80070a4:	d007      	beq.n	80070b6 <HAL_RCC_GetSysClockFreq+0x32>
 80070a6:	2b08      	cmp	r3, #8
 80070a8:	d008      	beq.n	80070bc <HAL_RCC_GetSysClockFreq+0x38>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f040 80b4 	bne.w	8007218 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070b0:	4b5e      	ldr	r3, [pc, #376]	; (800722c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80070b2:	60bb      	str	r3, [r7, #8]
      break;
 80070b4:	e0b3      	b.n	800721e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070b6:	4b5e      	ldr	r3, [pc, #376]	; (8007230 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80070b8:	60bb      	str	r3, [r7, #8]
      break;
 80070ba:	e0b0      	b.n	800721e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070bc:	4b5a      	ldr	r3, [pc, #360]	; (8007228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070c4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80070c6:	4b58      	ldr	r3, [pc, #352]	; (8007228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d04a      	beq.n	8007168 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070d2:	4b55      	ldr	r3, [pc, #340]	; (8007228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	099b      	lsrs	r3, r3, #6
 80070d8:	f04f 0400 	mov.w	r4, #0
 80070dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80070e0:	f04f 0200 	mov.w	r2, #0
 80070e4:	ea03 0501 	and.w	r5, r3, r1
 80070e8:	ea04 0602 	and.w	r6, r4, r2
 80070ec:	4629      	mov	r1, r5
 80070ee:	4632      	mov	r2, r6
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	f04f 0400 	mov.w	r4, #0
 80070f8:	0154      	lsls	r4, r2, #5
 80070fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80070fe:	014b      	lsls	r3, r1, #5
 8007100:	4619      	mov	r1, r3
 8007102:	4622      	mov	r2, r4
 8007104:	1b49      	subs	r1, r1, r5
 8007106:	eb62 0206 	sbc.w	r2, r2, r6
 800710a:	f04f 0300 	mov.w	r3, #0
 800710e:	f04f 0400 	mov.w	r4, #0
 8007112:	0194      	lsls	r4, r2, #6
 8007114:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007118:	018b      	lsls	r3, r1, #6
 800711a:	1a5b      	subs	r3, r3, r1
 800711c:	eb64 0402 	sbc.w	r4, r4, r2
 8007120:	f04f 0100 	mov.w	r1, #0
 8007124:	f04f 0200 	mov.w	r2, #0
 8007128:	00e2      	lsls	r2, r4, #3
 800712a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800712e:	00d9      	lsls	r1, r3, #3
 8007130:	460b      	mov	r3, r1
 8007132:	4614      	mov	r4, r2
 8007134:	195b      	adds	r3, r3, r5
 8007136:	eb44 0406 	adc.w	r4, r4, r6
 800713a:	f04f 0100 	mov.w	r1, #0
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	0262      	lsls	r2, r4, #9
 8007144:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007148:	0259      	lsls	r1, r3, #9
 800714a:	460b      	mov	r3, r1
 800714c:	4614      	mov	r4, r2
 800714e:	4618      	mov	r0, r3
 8007150:	4621      	mov	r1, r4
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f04f 0400 	mov.w	r4, #0
 8007158:	461a      	mov	r2, r3
 800715a:	4623      	mov	r3, r4
 800715c:	f7f9 f86c 	bl	8000238 <__aeabi_uldivmod>
 8007160:	4603      	mov	r3, r0
 8007162:	460c      	mov	r4, r1
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	e049      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007168:	4b2f      	ldr	r3, [pc, #188]	; (8007228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	099b      	lsrs	r3, r3, #6
 800716e:	f04f 0400 	mov.w	r4, #0
 8007172:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007176:	f04f 0200 	mov.w	r2, #0
 800717a:	ea03 0501 	and.w	r5, r3, r1
 800717e:	ea04 0602 	and.w	r6, r4, r2
 8007182:	4629      	mov	r1, r5
 8007184:	4632      	mov	r2, r6
 8007186:	f04f 0300 	mov.w	r3, #0
 800718a:	f04f 0400 	mov.w	r4, #0
 800718e:	0154      	lsls	r4, r2, #5
 8007190:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007194:	014b      	lsls	r3, r1, #5
 8007196:	4619      	mov	r1, r3
 8007198:	4622      	mov	r2, r4
 800719a:	1b49      	subs	r1, r1, r5
 800719c:	eb62 0206 	sbc.w	r2, r2, r6
 80071a0:	f04f 0300 	mov.w	r3, #0
 80071a4:	f04f 0400 	mov.w	r4, #0
 80071a8:	0194      	lsls	r4, r2, #6
 80071aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80071ae:	018b      	lsls	r3, r1, #6
 80071b0:	1a5b      	subs	r3, r3, r1
 80071b2:	eb64 0402 	sbc.w	r4, r4, r2
 80071b6:	f04f 0100 	mov.w	r1, #0
 80071ba:	f04f 0200 	mov.w	r2, #0
 80071be:	00e2      	lsls	r2, r4, #3
 80071c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80071c4:	00d9      	lsls	r1, r3, #3
 80071c6:	460b      	mov	r3, r1
 80071c8:	4614      	mov	r4, r2
 80071ca:	195b      	adds	r3, r3, r5
 80071cc:	eb44 0406 	adc.w	r4, r4, r6
 80071d0:	f04f 0100 	mov.w	r1, #0
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	02a2      	lsls	r2, r4, #10
 80071da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80071de:	0299      	lsls	r1, r3, #10
 80071e0:	460b      	mov	r3, r1
 80071e2:	4614      	mov	r4, r2
 80071e4:	4618      	mov	r0, r3
 80071e6:	4621      	mov	r1, r4
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f04f 0400 	mov.w	r4, #0
 80071ee:	461a      	mov	r2, r3
 80071f0:	4623      	mov	r3, r4
 80071f2:	f7f9 f821 	bl	8000238 <__aeabi_uldivmod>
 80071f6:	4603      	mov	r3, r0
 80071f8:	460c      	mov	r4, r1
 80071fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80071fc:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	0c1b      	lsrs	r3, r3, #16
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	3301      	adds	r3, #1
 8007208:	005b      	lsls	r3, r3, #1
 800720a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	fbb2 f3f3 	udiv	r3, r2, r3
 8007214:	60bb      	str	r3, [r7, #8]
      break;
 8007216:	e002      	b.n	800721e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007218:	4b04      	ldr	r3, [pc, #16]	; (800722c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800721a:	60bb      	str	r3, [r7, #8]
      break;
 800721c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800721e:	68bb      	ldr	r3, [r7, #8]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007228:	40023800 	.word	0x40023800
 800722c:	00f42400 	.word	0x00f42400
 8007230:	007a1200 	.word	0x007a1200

08007234 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007238:	4b03      	ldr	r3, [pc, #12]	; (8007248 <HAL_RCC_GetHCLKFreq+0x14>)
 800723a:	681b      	ldr	r3, [r3, #0]
}
 800723c:	4618      	mov	r0, r3
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	200002cc 	.word	0x200002cc

0800724c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007250:	f7ff fff0 	bl	8007234 <HAL_RCC_GetHCLKFreq>
 8007254:	4601      	mov	r1, r0
 8007256:	4b05      	ldr	r3, [pc, #20]	; (800726c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	0a9b      	lsrs	r3, r3, #10
 800725c:	f003 0307 	and.w	r3, r3, #7
 8007260:	4a03      	ldr	r2, [pc, #12]	; (8007270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007262:	5cd3      	ldrb	r3, [r2, r3]
 8007264:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007268:	4618      	mov	r0, r3
 800726a:	bd80      	pop	{r7, pc}
 800726c:	40023800 	.word	0x40023800
 8007270:	08009100 	.word	0x08009100

08007274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007278:	f7ff ffdc 	bl	8007234 <HAL_RCC_GetHCLKFreq>
 800727c:	4601      	mov	r1, r0
 800727e:	4b05      	ldr	r3, [pc, #20]	; (8007294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	0b5b      	lsrs	r3, r3, #13
 8007284:	f003 0307 	and.w	r3, r3, #7
 8007288:	4a03      	ldr	r2, [pc, #12]	; (8007298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800728a:	5cd3      	ldrb	r3, [r2, r3]
 800728c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007290:	4618      	mov	r0, r3
 8007292:	bd80      	pop	{r7, pc}
 8007294:	40023800 	.word	0x40023800
 8007298:	08009100 	.word	0x08009100

0800729c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80072a4:	2300      	movs	r3, #0
 80072a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80072a8:	2300      	movs	r3, #0
 80072aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d012      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80072c4:	4b69      	ldr	r3, [pc, #420]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	4a68      	ldr	r2, [pc, #416]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80072ce:	6093      	str	r3, [r2, #8]
 80072d0:	4b66      	ldr	r3, [pc, #408]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d8:	4964      	ldr	r1, [pc, #400]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80072e6:	2301      	movs	r3, #1
 80072e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d017      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072f6:	4b5d      	ldr	r3, [pc, #372]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007304:	4959      	ldr	r1, [pc, #356]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007306:	4313      	orrs	r3, r2
 8007308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007314:	d101      	bne.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007316:	2301      	movs	r3, #1
 8007318:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007322:	2301      	movs	r3, #1
 8007324:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d017      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007332:	4b4e      	ldr	r3, [pc, #312]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007338:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007340:	494a      	ldr	r1, [pc, #296]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007342:	4313      	orrs	r3, r2
 8007344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007350:	d101      	bne.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007352:	2301      	movs	r3, #1
 8007354:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800735e:	2301      	movs	r3, #1
 8007360:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800736e:	2301      	movs	r3, #1
 8007370:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0320 	and.w	r3, r3, #32
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 808b 	beq.w	8007496 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007380:	4b3a      	ldr	r3, [pc, #232]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007384:	4a39      	ldr	r2, [pc, #228]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800738a:	6413      	str	r3, [r2, #64]	; 0x40
 800738c:	4b37      	ldr	r3, [pc, #220]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007394:	60bb      	str	r3, [r7, #8]
 8007396:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007398:	4b35      	ldr	r3, [pc, #212]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a34      	ldr	r2, [pc, #208]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800739e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073a4:	f7fe f9a4 	bl	80056f0 <HAL_GetTick>
 80073a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80073aa:	e008      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ac:	f7fe f9a0 	bl	80056f0 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b64      	cmp	r3, #100	; 0x64
 80073b8:	d901      	bls.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e38d      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80073be:	4b2c      	ldr	r3, [pc, #176]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f0      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073ca:	4b28      	ldr	r3, [pc, #160]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d035      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d02e      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073e8:	4b20      	ldr	r3, [pc, #128]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073f2:	4b1e      	ldr	r3, [pc, #120]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f6:	4a1d      	ldr	r2, [pc, #116]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073fe:	4b1b      	ldr	r3, [pc, #108]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007402:	4a1a      	ldr	r2, [pc, #104]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007408:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800740a:	4a18      	ldr	r2, [pc, #96]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007410:	4b16      	ldr	r3, [pc, #88]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b01      	cmp	r3, #1
 800741a:	d114      	bne.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800741c:	f7fe f968 	bl	80056f0 <HAL_GetTick>
 8007420:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007422:	e00a      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007424:	f7fe f964 	bl	80056f0 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007432:	4293      	cmp	r3, r2
 8007434:	d901      	bls.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e34f      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800743a:	4b0c      	ldr	r3, [pc, #48]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800743c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d0ee      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800744e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007452:	d111      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007454:	4b05      	ldr	r3, [pc, #20]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007460:	4b04      	ldr	r3, [pc, #16]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007462:	400b      	ands	r3, r1
 8007464:	4901      	ldr	r1, [pc, #4]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007466:	4313      	orrs	r3, r2
 8007468:	608b      	str	r3, [r1, #8]
 800746a:	e00b      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800746c:	40023800 	.word	0x40023800
 8007470:	40007000 	.word	0x40007000
 8007474:	0ffffcff 	.word	0x0ffffcff
 8007478:	4bb3      	ldr	r3, [pc, #716]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	4ab2      	ldr	r2, [pc, #712]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800747e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007482:	6093      	str	r3, [r2, #8]
 8007484:	4bb0      	ldr	r3, [pc, #704]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007486:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007490:	49ad      	ldr	r1, [pc, #692]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007492:	4313      	orrs	r3, r2
 8007494:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0310 	and.w	r3, r3, #16
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d010      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074a2:	4ba9      	ldr	r3, [pc, #676]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074a8:	4aa7      	ldr	r2, [pc, #668]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80074b2:	4ba5      	ldr	r3, [pc, #660]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074bc:	49a2      	ldr	r1, [pc, #648]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00a      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074d0:	4b9d      	ldr	r3, [pc, #628]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074de:	499a      	ldr	r1, [pc, #616]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074f2:	4b95      	ldr	r3, [pc, #596]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007500:	4991      	ldr	r1, [pc, #580]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007502:	4313      	orrs	r3, r2
 8007504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00a      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007514:	4b8c      	ldr	r3, [pc, #560]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007522:	4989      	ldr	r1, [pc, #548]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007524:	4313      	orrs	r3, r2
 8007526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007536:	4b84      	ldr	r3, [pc, #528]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800753c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007544:	4980      	ldr	r1, [pc, #512]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00a      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007558:	4b7b      	ldr	r3, [pc, #492]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800755a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800755e:	f023 0203 	bic.w	r2, r3, #3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007566:	4978      	ldr	r1, [pc, #480]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007568:	4313      	orrs	r3, r2
 800756a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800757a:	4b73      	ldr	r3, [pc, #460]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800757c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007580:	f023 020c 	bic.w	r2, r3, #12
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007588:	496f      	ldr	r1, [pc, #444]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800758a:	4313      	orrs	r3, r2
 800758c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800759c:	4b6a      	ldr	r3, [pc, #424]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800759e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075aa:	4967      	ldr	r1, [pc, #412]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80075be:	4b62      	ldr	r3, [pc, #392]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075cc:	495e      	ldr	r1, [pc, #376]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00a      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80075e0:	4b59      	ldr	r3, [pc, #356]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ee:	4956      	ldr	r1, [pc, #344]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00a      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007602:	4b51      	ldr	r3, [pc, #324]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007608:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007610:	494d      	ldr	r1, [pc, #308]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007612:	4313      	orrs	r3, r2
 8007614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00a      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007624:	4b48      	ldr	r3, [pc, #288]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800762a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007632:	4945      	ldr	r1, [pc, #276]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007634:	4313      	orrs	r3, r2
 8007636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007646:	4b40      	ldr	r3, [pc, #256]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800764c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007654:	493c      	ldr	r1, [pc, #240]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007656:	4313      	orrs	r3, r2
 8007658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00a      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007668:	4b37      	ldr	r3, [pc, #220]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800766a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800766e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007676:	4934      	ldr	r1, [pc, #208]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007678:	4313      	orrs	r3, r2
 800767a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d011      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800768a:	4b2f      	ldr	r3, [pc, #188]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800768c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007690:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007698:	492b      	ldr	r1, [pc, #172]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800769a:	4313      	orrs	r3, r2
 800769c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076a8:	d101      	bne.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80076aa:	2301      	movs	r3, #1
 80076ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0308 	and.w	r3, r3, #8
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80076ba:	2301      	movs	r3, #1
 80076bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00a      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076ca:	4b1f      	ldr	r3, [pc, #124]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80076cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d8:	491b      	ldr	r1, [pc, #108]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80076ec:	4b16      	ldr	r3, [pc, #88]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80076ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076fc:	4912      	ldr	r1, [pc, #72]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00b      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007710:	4b0d      	ldr	r3, [pc, #52]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007716:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007720:	4909      	ldr	r1, [pc, #36]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007722:	4313      	orrs	r3, r2
 8007724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00f      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007734:	4b04      	ldr	r3, [pc, #16]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800773a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007744:	e002      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007746:	bf00      	nop
 8007748:	40023800 	.word	0x40023800
 800774c:	4985      	ldr	r1, [pc, #532]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800774e:	4313      	orrs	r3, r2
 8007750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00b      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007760:	4b80      	ldr	r3, [pc, #512]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007766:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007770:	497c      	ldr	r1, [pc, #496]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007772:	4313      	orrs	r3, r2
 8007774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d005      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007786:	f040 80d6 	bne.w	8007936 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800778a:	4b76      	ldr	r3, [pc, #472]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a75      	ldr	r2, [pc, #468]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007790:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007796:	f7fd ffab 	bl	80056f0 <HAL_GetTick>
 800779a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800779c:	e008      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800779e:	f7fd ffa7 	bl	80056f0 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b64      	cmp	r3, #100	; 0x64
 80077aa:	d901      	bls.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e194      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077b0:	4b6c      	ldr	r3, [pc, #432]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1f0      	bne.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d021      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d11d      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80077d0:	4b64      	ldr	r3, [pc, #400]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80077d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077d6:	0c1b      	lsrs	r3, r3, #16
 80077d8:	f003 0303 	and.w	r3, r3, #3
 80077dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80077de:	4b61      	ldr	r3, [pc, #388]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80077e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077e4:	0e1b      	lsrs	r3, r3, #24
 80077e6:	f003 030f 	and.w	r3, r3, #15
 80077ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	019a      	lsls	r2, r3, #6
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	041b      	lsls	r3, r3, #16
 80077f6:	431a      	orrs	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	061b      	lsls	r3, r3, #24
 80077fc:	431a      	orrs	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	071b      	lsls	r3, r3, #28
 8007804:	4957      	ldr	r1, [pc, #348]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007806:	4313      	orrs	r3, r2
 8007808:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d004      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007820:	d00a      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800782a:	2b00      	cmp	r3, #0
 800782c:	d02e      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007836:	d129      	bne.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007838:	4b4a      	ldr	r3, [pc, #296]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800783a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800783e:	0c1b      	lsrs	r3, r3, #16
 8007840:	f003 0303 	and.w	r3, r3, #3
 8007844:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007846:	4b47      	ldr	r3, [pc, #284]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800784c:	0f1b      	lsrs	r3, r3, #28
 800784e:	f003 0307 	and.w	r3, r3, #7
 8007852:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	019a      	lsls	r2, r3, #6
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	041b      	lsls	r3, r3, #16
 800785e:	431a      	orrs	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	061b      	lsls	r3, r3, #24
 8007866:	431a      	orrs	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	071b      	lsls	r3, r3, #28
 800786c:	493d      	ldr	r1, [pc, #244]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800786e:	4313      	orrs	r3, r2
 8007870:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007874:	4b3b      	ldr	r3, [pc, #236]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800787a:	f023 021f 	bic.w	r2, r3, #31
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	3b01      	subs	r3, #1
 8007884:	4937      	ldr	r1, [pc, #220]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007886:	4313      	orrs	r3, r2
 8007888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d01d      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007898:	4b32      	ldr	r3, [pc, #200]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800789a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800789e:	0e1b      	lsrs	r3, r3, #24
 80078a0:	f003 030f 	and.w	r3, r3, #15
 80078a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80078a6:	4b2f      	ldr	r3, [pc, #188]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80078a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ac:	0f1b      	lsrs	r3, r3, #28
 80078ae:	f003 0307 	and.w	r3, r3, #7
 80078b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	019a      	lsls	r2, r3, #6
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	041b      	lsls	r3, r3, #16
 80078c0:	431a      	orrs	r2, r3
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	061b      	lsls	r3, r3, #24
 80078c6:	431a      	orrs	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	071b      	lsls	r3, r3, #28
 80078cc:	4925      	ldr	r1, [pc, #148]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d011      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	019a      	lsls	r2, r3, #6
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	041b      	lsls	r3, r3, #16
 80078ec:	431a      	orrs	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	061b      	lsls	r3, r3, #24
 80078f4:	431a      	orrs	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	071b      	lsls	r3, r3, #28
 80078fc:	4919      	ldr	r1, [pc, #100]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007904:	4b17      	ldr	r3, [pc, #92]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a16      	ldr	r2, [pc, #88]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800790a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800790e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007910:	f7fd feee 	bl	80056f0 <HAL_GetTick>
 8007914:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007916:	e008      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007918:	f7fd feea 	bl	80056f0 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b64      	cmp	r3, #100	; 0x64
 8007924:	d901      	bls.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e0d7      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800792a:	4b0e      	ldr	r3, [pc, #56]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0f0      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	2b01      	cmp	r3, #1
 800793a:	f040 80cd 	bne.w	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800793e:	4b09      	ldr	r3, [pc, #36]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a08      	ldr	r2, [pc, #32]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800794a:	f7fd fed1 	bl	80056f0 <HAL_GetTick>
 800794e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007950:	e00a      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007952:	f7fd fecd 	bl	80056f0 <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	2b64      	cmp	r3, #100	; 0x64
 800795e:	d903      	bls.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e0ba      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007964:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007968:	4b5e      	ldr	r3, [pc, #376]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007974:	d0ed      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007986:	2b00      	cmp	r3, #0
 8007988:	d009      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007992:	2b00      	cmp	r3, #0
 8007994:	d02e      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d12a      	bne.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800799e:	4b51      	ldr	r3, [pc, #324]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80079a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a4:	0c1b      	lsrs	r3, r3, #16
 80079a6:	f003 0303 	and.w	r3, r3, #3
 80079aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80079ac:	4b4d      	ldr	r3, [pc, #308]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80079ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b2:	0f1b      	lsrs	r3, r3, #28
 80079b4:	f003 0307 	and.w	r3, r3, #7
 80079b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	019a      	lsls	r2, r3, #6
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	041b      	lsls	r3, r3, #16
 80079c4:	431a      	orrs	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	061b      	lsls	r3, r3, #24
 80079cc:	431a      	orrs	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	071b      	lsls	r3, r3, #28
 80079d2:	4944      	ldr	r1, [pc, #272]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80079da:	4b42      	ldr	r3, [pc, #264]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80079dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e8:	3b01      	subs	r3, #1
 80079ea:	021b      	lsls	r3, r3, #8
 80079ec:	493d      	ldr	r1, [pc, #244]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d022      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a08:	d11d      	bne.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a0a:	4b36      	ldr	r3, [pc, #216]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a10:	0e1b      	lsrs	r3, r3, #24
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a18:	4b32      	ldr	r3, [pc, #200]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a1e:	0f1b      	lsrs	r3, r3, #28
 8007a20:	f003 0307 	and.w	r3, r3, #7
 8007a24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	019a      	lsls	r2, r3, #6
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	041b      	lsls	r3, r3, #16
 8007a32:	431a      	orrs	r2, r3
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	061b      	lsls	r3, r3, #24
 8007a38:	431a      	orrs	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	071b      	lsls	r3, r3, #28
 8007a3e:	4929      	ldr	r1, [pc, #164]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007a40:	4313      	orrs	r3, r2
 8007a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0308 	and.w	r3, r3, #8
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d028      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a52:	4b24      	ldr	r3, [pc, #144]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a58:	0e1b      	lsrs	r3, r3, #24
 8007a5a:	f003 030f 	and.w	r3, r3, #15
 8007a5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a60:	4b20      	ldr	r3, [pc, #128]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a66:	0c1b      	lsrs	r3, r3, #16
 8007a68:	f003 0303 	and.w	r3, r3, #3
 8007a6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	019a      	lsls	r2, r3, #6
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	041b      	lsls	r3, r3, #16
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	061b      	lsls	r3, r3, #24
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	071b      	lsls	r3, r3, #28
 8007a86:	4917      	ldr	r1, [pc, #92]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007a8e:	4b15      	ldr	r3, [pc, #84]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	4911      	ldr	r1, [pc, #68]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007aa4:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a0e      	ldr	r2, [pc, #56]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ab0:	f7fd fe1e 	bl	80056f0 <HAL_GetTick>
 8007ab4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ab6:	e008      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ab8:	f7fd fe1a 	bl	80056f0 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b64      	cmp	r3, #100	; 0x64
 8007ac4:	d901      	bls.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e007      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007aca:	4b06      	ldr	r3, [pc, #24]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ad6:	d1ef      	bne.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3720      	adds	r7, #32
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	40023800 	.word	0x40023800

08007ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e01d      	b.n	8007b36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d106      	bne.n	8007b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7f9 fed0 	bl	80018b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3304      	adds	r3, #4
 8007b24:	4619      	mov	r1, r3
 8007b26:	4610      	mov	r0, r2
 8007b28:	f000 fa8c 	bl	8008044 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689a      	ldr	r2, [r3, #8]
 8007b56:	4b0e      	ldr	r3, [pc, #56]	; (8007b90 <HAL_TIM_Base_Start+0x50>)
 8007b58:	4013      	ands	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2b06      	cmp	r3, #6
 8007b60:	d00b      	beq.n	8007b7a <HAL_TIM_Base_Start+0x3a>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b68:	d007      	beq.n	8007b7a <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f042 0201 	orr.w	r2, r2, #1
 8007b78:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	00010007 	.word	0x00010007

08007b94 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6a1a      	ldr	r2, [r3, #32]
 8007baa:	f241 1311 	movw	r3, #4369	; 0x1111
 8007bae:	4013      	ands	r3, r2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10f      	bne.n	8007bd4 <HAL_TIM_Base_Stop+0x40>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6a1a      	ldr	r2, [r3, #32]
 8007bba:	f240 4344 	movw	r3, #1092	; 0x444
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d107      	bne.n	8007bd4 <HAL_TIM_Base_Stop+0x40>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 0201 	bic.w	r2, r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
	...

08007bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0201 	orr.w	r2, r2, #1
 8007c02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689a      	ldr	r2, [r3, #8]
 8007c0a:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <HAL_TIM_Base_Start_IT+0x50>)
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b06      	cmp	r3, #6
 8007c14:	d00b      	beq.n	8007c2e <HAL_TIM_Base_Start_IT+0x42>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c1c:	d007      	beq.n	8007c2e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f042 0201 	orr.w	r2, r2, #1
 8007c2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	00010007 	.word	0x00010007

08007c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	f003 0302 	and.w	r3, r3, #2
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d122      	bne.n	8007c9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f003 0302 	and.w	r3, r3, #2
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d11b      	bne.n	8007c9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f06f 0202 	mvn.w	r2, #2
 8007c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	f003 0303 	and.w	r3, r3, #3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f9c0 	bl	8008008 <HAL_TIM_IC_CaptureCallback>
 8007c88:	e005      	b.n	8007c96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f9b2 	bl	8007ff4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f9c3 	bl	800801c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	f003 0304 	and.w	r3, r3, #4
 8007ca6:	2b04      	cmp	r3, #4
 8007ca8:	d122      	bne.n	8007cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b04      	cmp	r3, #4
 8007cb6:	d11b      	bne.n	8007cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f06f 0204 	mvn.w	r2, #4
 8007cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f996 	bl	8008008 <HAL_TIM_IC_CaptureCallback>
 8007cdc:	e005      	b.n	8007cea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f988 	bl	8007ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f999 	bl	800801c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	f003 0308 	and.w	r3, r3, #8
 8007cfa:	2b08      	cmp	r3, #8
 8007cfc:	d122      	bne.n	8007d44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f003 0308 	and.w	r3, r3, #8
 8007d08:	2b08      	cmp	r3, #8
 8007d0a:	d11b      	bne.n	8007d44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f06f 0208 	mvn.w	r2, #8
 8007d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2204      	movs	r2, #4
 8007d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	f003 0303 	and.w	r3, r3, #3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f96c 	bl	8008008 <HAL_TIM_IC_CaptureCallback>
 8007d30:	e005      	b.n	8007d3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f95e 	bl	8007ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f96f 	bl	800801c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	f003 0310 	and.w	r3, r3, #16
 8007d4e:	2b10      	cmp	r3, #16
 8007d50:	d122      	bne.n	8007d98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f003 0310 	and.w	r3, r3, #16
 8007d5c:	2b10      	cmp	r3, #16
 8007d5e:	d11b      	bne.n	8007d98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f06f 0210 	mvn.w	r2, #16
 8007d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2208      	movs	r2, #8
 8007d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	69db      	ldr	r3, [r3, #28]
 8007d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f942 	bl	8008008 <HAL_TIM_IC_CaptureCallback>
 8007d84:	e005      	b.n	8007d92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f934 	bl	8007ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f945 	bl	800801c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d10e      	bne.n	8007dc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d107      	bne.n	8007dc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f06f 0201 	mvn.w	r2, #1
 8007dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7f9 fb7c 	bl	80014bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dce:	2b80      	cmp	r3, #128	; 0x80
 8007dd0:	d10e      	bne.n	8007df0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ddc:	2b80      	cmp	r3, #128	; 0x80
 8007dde:	d107      	bne.n	8007df0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fafc 	bl	80083e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dfe:	d10e      	bne.n	8007e1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e0a:	2b80      	cmp	r3, #128	; 0x80
 8007e0c:	d107      	bne.n	8007e1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 faef 	bl	80083fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e28:	2b40      	cmp	r3, #64	; 0x40
 8007e2a:	d10e      	bne.n	8007e4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e36:	2b40      	cmp	r3, #64	; 0x40
 8007e38:	d107      	bne.n	8007e4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f8f3 	bl	8008030 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	f003 0320 	and.w	r3, r3, #32
 8007e54:	2b20      	cmp	r3, #32
 8007e56:	d10e      	bne.n	8007e76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	f003 0320 	and.w	r3, r3, #32
 8007e62:	2b20      	cmp	r3, #32
 8007e64:	d107      	bne.n	8007e76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f06f 0220 	mvn.w	r2, #32
 8007e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 faaf 	bl	80083d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e76:	bf00      	nop
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
	...

08007e80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <HAL_TIM_ConfigClockSource+0x18>
 8007e94:	2302      	movs	r3, #2
 8007e96:	e0a6      	b.n	8007fe6 <HAL_TIM_ConfigClockSource+0x166>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	4b4f      	ldr	r3, [pc, #316]	; (8007ff0 <HAL_TIM_ConfigClockSource+0x170>)
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ebe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b40      	cmp	r3, #64	; 0x40
 8007ece:	d067      	beq.n	8007fa0 <HAL_TIM_ConfigClockSource+0x120>
 8007ed0:	2b40      	cmp	r3, #64	; 0x40
 8007ed2:	d80b      	bhi.n	8007eec <HAL_TIM_ConfigClockSource+0x6c>
 8007ed4:	2b10      	cmp	r3, #16
 8007ed6:	d073      	beq.n	8007fc0 <HAL_TIM_ConfigClockSource+0x140>
 8007ed8:	2b10      	cmp	r3, #16
 8007eda:	d802      	bhi.n	8007ee2 <HAL_TIM_ConfigClockSource+0x62>
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d06f      	beq.n	8007fc0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007ee0:	e078      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007ee2:	2b20      	cmp	r3, #32
 8007ee4:	d06c      	beq.n	8007fc0 <HAL_TIM_ConfigClockSource+0x140>
 8007ee6:	2b30      	cmp	r3, #48	; 0x30
 8007ee8:	d06a      	beq.n	8007fc0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007eea:	e073      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007eec:	2b70      	cmp	r3, #112	; 0x70
 8007eee:	d00d      	beq.n	8007f0c <HAL_TIM_ConfigClockSource+0x8c>
 8007ef0:	2b70      	cmp	r3, #112	; 0x70
 8007ef2:	d804      	bhi.n	8007efe <HAL_TIM_ConfigClockSource+0x7e>
 8007ef4:	2b50      	cmp	r3, #80	; 0x50
 8007ef6:	d033      	beq.n	8007f60 <HAL_TIM_ConfigClockSource+0xe0>
 8007ef8:	2b60      	cmp	r3, #96	; 0x60
 8007efa:	d041      	beq.n	8007f80 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007efc:	e06a      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f02:	d066      	beq.n	8007fd2 <HAL_TIM_ConfigClockSource+0x152>
 8007f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f08:	d017      	beq.n	8007f3a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007f0a:	e063      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6818      	ldr	r0, [r3, #0]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	6899      	ldr	r1, [r3, #8]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	685a      	ldr	r2, [r3, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f000 f9ac 	bl	8008278 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f2e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	609a      	str	r2, [r3, #8]
      break;
 8007f38:	e04c      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6818      	ldr	r0, [r3, #0]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	6899      	ldr	r1, [r3, #8]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f000 f995 	bl	8008278 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f5c:	609a      	str	r2, [r3, #8]
      break;
 8007f5e:	e039      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6818      	ldr	r0, [r3, #0]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	6859      	ldr	r1, [r3, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	f000 f909 	bl	8008184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2150      	movs	r1, #80	; 0x50
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 f962 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8007f7e:	e029      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6818      	ldr	r0, [r3, #0]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	6859      	ldr	r1, [r3, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	f000 f928 	bl	80081e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2160      	movs	r1, #96	; 0x60
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 f952 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8007f9e:	e019      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6818      	ldr	r0, [r3, #0]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	6859      	ldr	r1, [r3, #4]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	461a      	mov	r2, r3
 8007fae:	f000 f8e9 	bl	8008184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2140      	movs	r1, #64	; 0x40
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 f942 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8007fbe:	e009      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4610      	mov	r0, r2
 8007fcc:	f000 f939 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8007fd0:	e000      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007fd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	fffeff88 	.word	0xfffeff88

08007ff4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a40      	ldr	r2, [pc, #256]	; (8008158 <TIM_Base_SetConfig+0x114>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d013      	beq.n	8008084 <TIM_Base_SetConfig+0x40>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008062:	d00f      	beq.n	8008084 <TIM_Base_SetConfig+0x40>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a3d      	ldr	r2, [pc, #244]	; (800815c <TIM_Base_SetConfig+0x118>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d00b      	beq.n	8008084 <TIM_Base_SetConfig+0x40>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a3c      	ldr	r2, [pc, #240]	; (8008160 <TIM_Base_SetConfig+0x11c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d007      	beq.n	8008084 <TIM_Base_SetConfig+0x40>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a3b      	ldr	r2, [pc, #236]	; (8008164 <TIM_Base_SetConfig+0x120>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d003      	beq.n	8008084 <TIM_Base_SetConfig+0x40>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a3a      	ldr	r2, [pc, #232]	; (8008168 <TIM_Base_SetConfig+0x124>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d108      	bne.n	8008096 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	4313      	orrs	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a2f      	ldr	r2, [pc, #188]	; (8008158 <TIM_Base_SetConfig+0x114>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d02b      	beq.n	80080f6 <TIM_Base_SetConfig+0xb2>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080a4:	d027      	beq.n	80080f6 <TIM_Base_SetConfig+0xb2>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a2c      	ldr	r2, [pc, #176]	; (800815c <TIM_Base_SetConfig+0x118>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d023      	beq.n	80080f6 <TIM_Base_SetConfig+0xb2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a2b      	ldr	r2, [pc, #172]	; (8008160 <TIM_Base_SetConfig+0x11c>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d01f      	beq.n	80080f6 <TIM_Base_SetConfig+0xb2>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a2a      	ldr	r2, [pc, #168]	; (8008164 <TIM_Base_SetConfig+0x120>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d01b      	beq.n	80080f6 <TIM_Base_SetConfig+0xb2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a29      	ldr	r2, [pc, #164]	; (8008168 <TIM_Base_SetConfig+0x124>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d017      	beq.n	80080f6 <TIM_Base_SetConfig+0xb2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a28      	ldr	r2, [pc, #160]	; (800816c <TIM_Base_SetConfig+0x128>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d013      	beq.n	80080f6 <TIM_Base_SetConfig+0xb2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a27      	ldr	r2, [pc, #156]	; (8008170 <TIM_Base_SetConfig+0x12c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d00f      	beq.n	80080f6 <TIM_Base_SetConfig+0xb2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a26      	ldr	r2, [pc, #152]	; (8008174 <TIM_Base_SetConfig+0x130>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d00b      	beq.n	80080f6 <TIM_Base_SetConfig+0xb2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a25      	ldr	r2, [pc, #148]	; (8008178 <TIM_Base_SetConfig+0x134>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d007      	beq.n	80080f6 <TIM_Base_SetConfig+0xb2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a24      	ldr	r2, [pc, #144]	; (800817c <TIM_Base_SetConfig+0x138>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d003      	beq.n	80080f6 <TIM_Base_SetConfig+0xb2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a23      	ldr	r2, [pc, #140]	; (8008180 <TIM_Base_SetConfig+0x13c>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d108      	bne.n	8008108 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	4313      	orrs	r3, r2
 8008106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	4313      	orrs	r3, r2
 8008114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a0a      	ldr	r2, [pc, #40]	; (8008158 <TIM_Base_SetConfig+0x114>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d003      	beq.n	800813c <TIM_Base_SetConfig+0xf8>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a0c      	ldr	r2, [pc, #48]	; (8008168 <TIM_Base_SetConfig+0x124>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d103      	bne.n	8008144 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	691a      	ldr	r2, [r3, #16]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	615a      	str	r2, [r3, #20]
}
 800814a:	bf00      	nop
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	40010000 	.word	0x40010000
 800815c:	40000400 	.word	0x40000400
 8008160:	40000800 	.word	0x40000800
 8008164:	40000c00 	.word	0x40000c00
 8008168:	40010400 	.word	0x40010400
 800816c:	40014000 	.word	0x40014000
 8008170:	40014400 	.word	0x40014400
 8008174:	40014800 	.word	0x40014800
 8008178:	40001800 	.word	0x40001800
 800817c:	40001c00 	.word	0x40001c00
 8008180:	40002000 	.word	0x40002000

08008184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	f023 0201 	bic.w	r2, r3, #1
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	011b      	lsls	r3, r3, #4
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f023 030a 	bic.w	r3, r3, #10
 80081c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	621a      	str	r2, [r3, #32]
}
 80081d6:	bf00      	nop
 80081d8:	371c      	adds	r7, #28
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b087      	sub	sp, #28
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	60b9      	str	r1, [r7, #8]
 80081ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	f023 0210 	bic.w	r2, r3, #16
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800820c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	031b      	lsls	r3, r3, #12
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	4313      	orrs	r3, r2
 8008216:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800821e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	4313      	orrs	r3, r2
 8008228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	621a      	str	r2, [r3, #32]
}
 8008236:	bf00      	nop
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008242:	b480      	push	{r7}
 8008244:	b085      	sub	sp, #20
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008258:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4313      	orrs	r3, r2
 8008260:	f043 0307 	orr.w	r3, r3, #7
 8008264:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	609a      	str	r2, [r3, #8]
}
 800826c:	bf00      	nop
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	021a      	lsls	r2, r3, #8
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	431a      	orrs	r2, r3
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	4313      	orrs	r3, r2
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	609a      	str	r2, [r3, #8]
}
 80082ac:	bf00      	nop
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d101      	bne.n	80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082cc:	2302      	movs	r3, #2
 80082ce:	e06d      	b.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2202      	movs	r2, #2
 80082dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a30      	ldr	r2, [pc, #192]	; (80083b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d004      	beq.n	8008304 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a2f      	ldr	r2, [pc, #188]	; (80083bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d108      	bne.n	8008316 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800830a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	4313      	orrs	r3, r2
 8008314:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	4313      	orrs	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a20      	ldr	r2, [pc, #128]	; (80083b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d022      	beq.n	8008380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008342:	d01d      	beq.n	8008380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a1d      	ldr	r2, [pc, #116]	; (80083c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d018      	beq.n	8008380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a1c      	ldr	r2, [pc, #112]	; (80083c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d013      	beq.n	8008380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a1a      	ldr	r2, [pc, #104]	; (80083c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d00e      	beq.n	8008380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a15      	ldr	r2, [pc, #84]	; (80083bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d009      	beq.n	8008380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a16      	ldr	r2, [pc, #88]	; (80083cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d004      	beq.n	8008380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a15      	ldr	r2, [pc, #84]	; (80083d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d10c      	bne.n	800839a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008386:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	4313      	orrs	r3, r2
 8008390:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	40010000 	.word	0x40010000
 80083bc:	40010400 	.word	0x40010400
 80083c0:	40000400 	.word	0x40000400
 80083c4:	40000800 	.word	0x40000800
 80083c8:	40000c00 	.word	0x40000c00
 80083cc:	40014000 	.word	0x40014000
 80083d0:	40001800 	.word	0x40001800

080083d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e040      	b.n	80084a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008426:	2b00      	cmp	r3, #0
 8008428:	d106      	bne.n	8008438 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7f9 fa9e 	bl	8001974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2224      	movs	r2, #36	; 0x24
 800843c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 0201 	bic.w	r2, r2, #1
 800844c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f956 	bl	8008700 <UART_SetConfig>
 8008454:	4603      	mov	r3, r0
 8008456:	2b01      	cmp	r3, #1
 8008458:	d101      	bne.n	800845e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e022      	b.n	80084a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	2b00      	cmp	r3, #0
 8008464:	d002      	beq.n	800846c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fbf4 	bl	8008c54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800847a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689a      	ldr	r2, [r3, #8]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800848a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0201 	orr.w	r2, r2, #1
 800849a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fc7b 	bl	8008d98 <UART_CheckIdleState>
 80084a2:	4603      	mov	r3, r0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b08a      	sub	sp, #40	; 0x28
 80084b0:	af02      	add	r7, sp, #8
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	4613      	mov	r3, r2
 80084ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084c0:	2b20      	cmp	r3, #32
 80084c2:	d17f      	bne.n	80085c4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <HAL_UART_Transmit+0x24>
 80084ca:	88fb      	ldrh	r3, [r7, #6]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e078      	b.n	80085c6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d101      	bne.n	80084e2 <HAL_UART_Transmit+0x36>
 80084de:	2302      	movs	r3, #2
 80084e0:	e071      	b.n	80085c6 <HAL_UART_Transmit+0x11a>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2221      	movs	r2, #33	; 0x21
 80084f4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80084f6:	f7fd f8fb 	bl	80056f0 <HAL_GetTick>
 80084fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	88fa      	ldrh	r2, [r7, #6]
 8008500:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	88fa      	ldrh	r2, [r7, #6]
 8008508:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008514:	d108      	bne.n	8008528 <HAL_UART_Transmit+0x7c>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d104      	bne.n	8008528 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800851e:	2300      	movs	r3, #0
 8008520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	61bb      	str	r3, [r7, #24]
 8008526:	e003      	b.n	8008530 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800852c:	2300      	movs	r3, #0
 800852e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8008538:	e02c      	b.n	8008594 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2200      	movs	r2, #0
 8008542:	2180      	movs	r1, #128	; 0x80
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 fc6c 	bl	8008e22 <UART_WaitOnFlagUntilTimeout>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d001      	beq.n	8008554 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e038      	b.n	80085c6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10b      	bne.n	8008572 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008568:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	3302      	adds	r3, #2
 800856e:	61bb      	str	r3, [r7, #24]
 8008570:	e007      	b.n	8008582 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	781a      	ldrb	r2, [r3, #0]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	3301      	adds	r3, #1
 8008580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008588:	b29b      	uxth	r3, r3
 800858a:	3b01      	subs	r3, #1
 800858c:	b29a      	uxth	r2, r3
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800859a:	b29b      	uxth	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1cc      	bne.n	800853a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	2200      	movs	r2, #0
 80085a8:	2140      	movs	r1, #64	; 0x40
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f000 fc39 	bl	8008e22 <UART_WaitOnFlagUntilTimeout>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e005      	b.n	80085c6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2220      	movs	r2, #32
 80085be:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	e000      	b.n	80085c6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80085c4:	2302      	movs	r3, #2
  }
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3720      	adds	r7, #32
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
	...

080085d0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	4613      	mov	r3, r2
 80085dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085e2:	2b20      	cmp	r3, #32
 80085e4:	d16c      	bne.n	80086c0 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d002      	beq.n	80085f2 <HAL_UART_Receive_DMA+0x22>
 80085ec:	88fb      	ldrh	r3, [r7, #6]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e065      	b.n	80086c2 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d101      	bne.n	8008604 <HAL_UART_Receive_DMA+0x34>
 8008600:	2302      	movs	r3, #2
 8008602:	e05e      	b.n	80086c2 <HAL_UART_Receive_DMA+0xf2>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	88fa      	ldrh	r2, [r7, #6]
 8008616:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2222      	movs	r2, #34	; 0x22
 8008624:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800862a:	2b00      	cmp	r3, #0
 800862c:	d02a      	beq.n	8008684 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008632:	4a26      	ldr	r2, [pc, #152]	; (80086cc <HAL_UART_Receive_DMA+0xfc>)
 8008634:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800863a:	4a25      	ldr	r2, [pc, #148]	; (80086d0 <HAL_UART_Receive_DMA+0x100>)
 800863c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008642:	4a24      	ldr	r2, [pc, #144]	; (80086d4 <HAL_UART_Receive_DMA+0x104>)
 8008644:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800864a:	2200      	movs	r2, #0
 800864c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3324      	adds	r3, #36	; 0x24
 8008658:	4619      	mov	r1, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865e:	461a      	mov	r2, r3
 8008660:	88fb      	ldrh	r3, [r7, #6]
 8008662:	f7fd fc39 	bl	8005ed8 <HAL_DMA_Start_IT>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00b      	beq.n	8008684 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2210      	movs	r2, #16
 8008670:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2220      	movs	r2, #32
 800867e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e01e      	b.n	80086c2 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800869a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689a      	ldr	r2, [r3, #8]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f042 0201 	orr.w	r2, r2, #1
 80086aa:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	689a      	ldr	r2, [r3, #8]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086ba:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	e000      	b.n	80086c2 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80086c0:	2302      	movs	r3, #2
  }
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	08008f83 	.word	0x08008f83
 80086d0:	08008fe7 	.word	0x08008fe7
 80086d4:	08009003 	.word	0x08009003

080086d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b088      	sub	sp, #32
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008708:	2300      	movs	r3, #0
 800870a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	689a      	ldr	r2, [r3, #8]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	431a      	orrs	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	431a      	orrs	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	4313      	orrs	r3, r2
 8008726:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	4bb1      	ldr	r3, [pc, #708]	; (80089f4 <UART_SetConfig+0x2f4>)
 8008730:	4013      	ands	r3, r2
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	6812      	ldr	r2, [r2, #0]
 8008736:	6939      	ldr	r1, [r7, #16]
 8008738:	430b      	orrs	r3, r1
 800873a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68da      	ldr	r2, [r3, #12]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a1b      	ldr	r3, [r3, #32]
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	4313      	orrs	r3, r2
 8008760:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	430a      	orrs	r2, r1
 8008774:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a9f      	ldr	r2, [pc, #636]	; (80089f8 <UART_SetConfig+0x2f8>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d121      	bne.n	80087c4 <UART_SetConfig+0xc4>
 8008780:	4b9e      	ldr	r3, [pc, #632]	; (80089fc <UART_SetConfig+0x2fc>)
 8008782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008786:	f003 0303 	and.w	r3, r3, #3
 800878a:	2b03      	cmp	r3, #3
 800878c:	d816      	bhi.n	80087bc <UART_SetConfig+0xbc>
 800878e:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <UART_SetConfig+0x94>)
 8008790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008794:	080087a5 	.word	0x080087a5
 8008798:	080087b1 	.word	0x080087b1
 800879c:	080087ab 	.word	0x080087ab
 80087a0:	080087b7 	.word	0x080087b7
 80087a4:	2301      	movs	r3, #1
 80087a6:	77fb      	strb	r3, [r7, #31]
 80087a8:	e151      	b.n	8008a4e <UART_SetConfig+0x34e>
 80087aa:	2302      	movs	r3, #2
 80087ac:	77fb      	strb	r3, [r7, #31]
 80087ae:	e14e      	b.n	8008a4e <UART_SetConfig+0x34e>
 80087b0:	2304      	movs	r3, #4
 80087b2:	77fb      	strb	r3, [r7, #31]
 80087b4:	e14b      	b.n	8008a4e <UART_SetConfig+0x34e>
 80087b6:	2308      	movs	r3, #8
 80087b8:	77fb      	strb	r3, [r7, #31]
 80087ba:	e148      	b.n	8008a4e <UART_SetConfig+0x34e>
 80087bc:	2310      	movs	r3, #16
 80087be:	77fb      	strb	r3, [r7, #31]
 80087c0:	bf00      	nop
 80087c2:	e144      	b.n	8008a4e <UART_SetConfig+0x34e>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a8d      	ldr	r2, [pc, #564]	; (8008a00 <UART_SetConfig+0x300>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d134      	bne.n	8008838 <UART_SetConfig+0x138>
 80087ce:	4b8b      	ldr	r3, [pc, #556]	; (80089fc <UART_SetConfig+0x2fc>)
 80087d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087d4:	f003 030c 	and.w	r3, r3, #12
 80087d8:	2b0c      	cmp	r3, #12
 80087da:	d829      	bhi.n	8008830 <UART_SetConfig+0x130>
 80087dc:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <UART_SetConfig+0xe4>)
 80087de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e2:	bf00      	nop
 80087e4:	08008819 	.word	0x08008819
 80087e8:	08008831 	.word	0x08008831
 80087ec:	08008831 	.word	0x08008831
 80087f0:	08008831 	.word	0x08008831
 80087f4:	08008825 	.word	0x08008825
 80087f8:	08008831 	.word	0x08008831
 80087fc:	08008831 	.word	0x08008831
 8008800:	08008831 	.word	0x08008831
 8008804:	0800881f 	.word	0x0800881f
 8008808:	08008831 	.word	0x08008831
 800880c:	08008831 	.word	0x08008831
 8008810:	08008831 	.word	0x08008831
 8008814:	0800882b 	.word	0x0800882b
 8008818:	2300      	movs	r3, #0
 800881a:	77fb      	strb	r3, [r7, #31]
 800881c:	e117      	b.n	8008a4e <UART_SetConfig+0x34e>
 800881e:	2302      	movs	r3, #2
 8008820:	77fb      	strb	r3, [r7, #31]
 8008822:	e114      	b.n	8008a4e <UART_SetConfig+0x34e>
 8008824:	2304      	movs	r3, #4
 8008826:	77fb      	strb	r3, [r7, #31]
 8008828:	e111      	b.n	8008a4e <UART_SetConfig+0x34e>
 800882a:	2308      	movs	r3, #8
 800882c:	77fb      	strb	r3, [r7, #31]
 800882e:	e10e      	b.n	8008a4e <UART_SetConfig+0x34e>
 8008830:	2310      	movs	r3, #16
 8008832:	77fb      	strb	r3, [r7, #31]
 8008834:	bf00      	nop
 8008836:	e10a      	b.n	8008a4e <UART_SetConfig+0x34e>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a71      	ldr	r2, [pc, #452]	; (8008a04 <UART_SetConfig+0x304>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d120      	bne.n	8008884 <UART_SetConfig+0x184>
 8008842:	4b6e      	ldr	r3, [pc, #440]	; (80089fc <UART_SetConfig+0x2fc>)
 8008844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008848:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800884c:	2b10      	cmp	r3, #16
 800884e:	d00f      	beq.n	8008870 <UART_SetConfig+0x170>
 8008850:	2b10      	cmp	r3, #16
 8008852:	d802      	bhi.n	800885a <UART_SetConfig+0x15a>
 8008854:	2b00      	cmp	r3, #0
 8008856:	d005      	beq.n	8008864 <UART_SetConfig+0x164>
 8008858:	e010      	b.n	800887c <UART_SetConfig+0x17c>
 800885a:	2b20      	cmp	r3, #32
 800885c:	d005      	beq.n	800886a <UART_SetConfig+0x16a>
 800885e:	2b30      	cmp	r3, #48	; 0x30
 8008860:	d009      	beq.n	8008876 <UART_SetConfig+0x176>
 8008862:	e00b      	b.n	800887c <UART_SetConfig+0x17c>
 8008864:	2300      	movs	r3, #0
 8008866:	77fb      	strb	r3, [r7, #31]
 8008868:	e0f1      	b.n	8008a4e <UART_SetConfig+0x34e>
 800886a:	2302      	movs	r3, #2
 800886c:	77fb      	strb	r3, [r7, #31]
 800886e:	e0ee      	b.n	8008a4e <UART_SetConfig+0x34e>
 8008870:	2304      	movs	r3, #4
 8008872:	77fb      	strb	r3, [r7, #31]
 8008874:	e0eb      	b.n	8008a4e <UART_SetConfig+0x34e>
 8008876:	2308      	movs	r3, #8
 8008878:	77fb      	strb	r3, [r7, #31]
 800887a:	e0e8      	b.n	8008a4e <UART_SetConfig+0x34e>
 800887c:	2310      	movs	r3, #16
 800887e:	77fb      	strb	r3, [r7, #31]
 8008880:	bf00      	nop
 8008882:	e0e4      	b.n	8008a4e <UART_SetConfig+0x34e>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a5f      	ldr	r2, [pc, #380]	; (8008a08 <UART_SetConfig+0x308>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d120      	bne.n	80088d0 <UART_SetConfig+0x1d0>
 800888e:	4b5b      	ldr	r3, [pc, #364]	; (80089fc <UART_SetConfig+0x2fc>)
 8008890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008894:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008898:	2b40      	cmp	r3, #64	; 0x40
 800889a:	d00f      	beq.n	80088bc <UART_SetConfig+0x1bc>
 800889c:	2b40      	cmp	r3, #64	; 0x40
 800889e:	d802      	bhi.n	80088a6 <UART_SetConfig+0x1a6>
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d005      	beq.n	80088b0 <UART_SetConfig+0x1b0>
 80088a4:	e010      	b.n	80088c8 <UART_SetConfig+0x1c8>
 80088a6:	2b80      	cmp	r3, #128	; 0x80
 80088a8:	d005      	beq.n	80088b6 <UART_SetConfig+0x1b6>
 80088aa:	2bc0      	cmp	r3, #192	; 0xc0
 80088ac:	d009      	beq.n	80088c2 <UART_SetConfig+0x1c2>
 80088ae:	e00b      	b.n	80088c8 <UART_SetConfig+0x1c8>
 80088b0:	2300      	movs	r3, #0
 80088b2:	77fb      	strb	r3, [r7, #31]
 80088b4:	e0cb      	b.n	8008a4e <UART_SetConfig+0x34e>
 80088b6:	2302      	movs	r3, #2
 80088b8:	77fb      	strb	r3, [r7, #31]
 80088ba:	e0c8      	b.n	8008a4e <UART_SetConfig+0x34e>
 80088bc:	2304      	movs	r3, #4
 80088be:	77fb      	strb	r3, [r7, #31]
 80088c0:	e0c5      	b.n	8008a4e <UART_SetConfig+0x34e>
 80088c2:	2308      	movs	r3, #8
 80088c4:	77fb      	strb	r3, [r7, #31]
 80088c6:	e0c2      	b.n	8008a4e <UART_SetConfig+0x34e>
 80088c8:	2310      	movs	r3, #16
 80088ca:	77fb      	strb	r3, [r7, #31]
 80088cc:	bf00      	nop
 80088ce:	e0be      	b.n	8008a4e <UART_SetConfig+0x34e>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a4d      	ldr	r2, [pc, #308]	; (8008a0c <UART_SetConfig+0x30c>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d124      	bne.n	8008924 <UART_SetConfig+0x224>
 80088da:	4b48      	ldr	r3, [pc, #288]	; (80089fc <UART_SetConfig+0x2fc>)
 80088dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088e8:	d012      	beq.n	8008910 <UART_SetConfig+0x210>
 80088ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ee:	d802      	bhi.n	80088f6 <UART_SetConfig+0x1f6>
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d007      	beq.n	8008904 <UART_SetConfig+0x204>
 80088f4:	e012      	b.n	800891c <UART_SetConfig+0x21c>
 80088f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088fa:	d006      	beq.n	800890a <UART_SetConfig+0x20a>
 80088fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008900:	d009      	beq.n	8008916 <UART_SetConfig+0x216>
 8008902:	e00b      	b.n	800891c <UART_SetConfig+0x21c>
 8008904:	2300      	movs	r3, #0
 8008906:	77fb      	strb	r3, [r7, #31]
 8008908:	e0a1      	b.n	8008a4e <UART_SetConfig+0x34e>
 800890a:	2302      	movs	r3, #2
 800890c:	77fb      	strb	r3, [r7, #31]
 800890e:	e09e      	b.n	8008a4e <UART_SetConfig+0x34e>
 8008910:	2304      	movs	r3, #4
 8008912:	77fb      	strb	r3, [r7, #31]
 8008914:	e09b      	b.n	8008a4e <UART_SetConfig+0x34e>
 8008916:	2308      	movs	r3, #8
 8008918:	77fb      	strb	r3, [r7, #31]
 800891a:	e098      	b.n	8008a4e <UART_SetConfig+0x34e>
 800891c:	2310      	movs	r3, #16
 800891e:	77fb      	strb	r3, [r7, #31]
 8008920:	bf00      	nop
 8008922:	e094      	b.n	8008a4e <UART_SetConfig+0x34e>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a39      	ldr	r2, [pc, #228]	; (8008a10 <UART_SetConfig+0x310>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d124      	bne.n	8008978 <UART_SetConfig+0x278>
 800892e:	4b33      	ldr	r3, [pc, #204]	; (80089fc <UART_SetConfig+0x2fc>)
 8008930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008934:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800893c:	d012      	beq.n	8008964 <UART_SetConfig+0x264>
 800893e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008942:	d802      	bhi.n	800894a <UART_SetConfig+0x24a>
 8008944:	2b00      	cmp	r3, #0
 8008946:	d007      	beq.n	8008958 <UART_SetConfig+0x258>
 8008948:	e012      	b.n	8008970 <UART_SetConfig+0x270>
 800894a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800894e:	d006      	beq.n	800895e <UART_SetConfig+0x25e>
 8008950:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008954:	d009      	beq.n	800896a <UART_SetConfig+0x26a>
 8008956:	e00b      	b.n	8008970 <UART_SetConfig+0x270>
 8008958:	2301      	movs	r3, #1
 800895a:	77fb      	strb	r3, [r7, #31]
 800895c:	e077      	b.n	8008a4e <UART_SetConfig+0x34e>
 800895e:	2302      	movs	r3, #2
 8008960:	77fb      	strb	r3, [r7, #31]
 8008962:	e074      	b.n	8008a4e <UART_SetConfig+0x34e>
 8008964:	2304      	movs	r3, #4
 8008966:	77fb      	strb	r3, [r7, #31]
 8008968:	e071      	b.n	8008a4e <UART_SetConfig+0x34e>
 800896a:	2308      	movs	r3, #8
 800896c:	77fb      	strb	r3, [r7, #31]
 800896e:	e06e      	b.n	8008a4e <UART_SetConfig+0x34e>
 8008970:	2310      	movs	r3, #16
 8008972:	77fb      	strb	r3, [r7, #31]
 8008974:	bf00      	nop
 8008976:	e06a      	b.n	8008a4e <UART_SetConfig+0x34e>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a25      	ldr	r2, [pc, #148]	; (8008a14 <UART_SetConfig+0x314>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d124      	bne.n	80089cc <UART_SetConfig+0x2cc>
 8008982:	4b1e      	ldr	r3, [pc, #120]	; (80089fc <UART_SetConfig+0x2fc>)
 8008984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008988:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800898c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008990:	d012      	beq.n	80089b8 <UART_SetConfig+0x2b8>
 8008992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008996:	d802      	bhi.n	800899e <UART_SetConfig+0x29e>
 8008998:	2b00      	cmp	r3, #0
 800899a:	d007      	beq.n	80089ac <UART_SetConfig+0x2ac>
 800899c:	e012      	b.n	80089c4 <UART_SetConfig+0x2c4>
 800899e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089a2:	d006      	beq.n	80089b2 <UART_SetConfig+0x2b2>
 80089a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80089a8:	d009      	beq.n	80089be <UART_SetConfig+0x2be>
 80089aa:	e00b      	b.n	80089c4 <UART_SetConfig+0x2c4>
 80089ac:	2300      	movs	r3, #0
 80089ae:	77fb      	strb	r3, [r7, #31]
 80089b0:	e04d      	b.n	8008a4e <UART_SetConfig+0x34e>
 80089b2:	2302      	movs	r3, #2
 80089b4:	77fb      	strb	r3, [r7, #31]
 80089b6:	e04a      	b.n	8008a4e <UART_SetConfig+0x34e>
 80089b8:	2304      	movs	r3, #4
 80089ba:	77fb      	strb	r3, [r7, #31]
 80089bc:	e047      	b.n	8008a4e <UART_SetConfig+0x34e>
 80089be:	2308      	movs	r3, #8
 80089c0:	77fb      	strb	r3, [r7, #31]
 80089c2:	e044      	b.n	8008a4e <UART_SetConfig+0x34e>
 80089c4:	2310      	movs	r3, #16
 80089c6:	77fb      	strb	r3, [r7, #31]
 80089c8:	bf00      	nop
 80089ca:	e040      	b.n	8008a4e <UART_SetConfig+0x34e>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a11      	ldr	r2, [pc, #68]	; (8008a18 <UART_SetConfig+0x318>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d139      	bne.n	8008a4a <UART_SetConfig+0x34a>
 80089d6:	4b09      	ldr	r3, [pc, #36]	; (80089fc <UART_SetConfig+0x2fc>)
 80089d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80089e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089e4:	d027      	beq.n	8008a36 <UART_SetConfig+0x336>
 80089e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089ea:	d817      	bhi.n	8008a1c <UART_SetConfig+0x31c>
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d01c      	beq.n	8008a2a <UART_SetConfig+0x32a>
 80089f0:	e027      	b.n	8008a42 <UART_SetConfig+0x342>
 80089f2:	bf00      	nop
 80089f4:	efff69f3 	.word	0xefff69f3
 80089f8:	40011000 	.word	0x40011000
 80089fc:	40023800 	.word	0x40023800
 8008a00:	40004400 	.word	0x40004400
 8008a04:	40004800 	.word	0x40004800
 8008a08:	40004c00 	.word	0x40004c00
 8008a0c:	40005000 	.word	0x40005000
 8008a10:	40011400 	.word	0x40011400
 8008a14:	40007800 	.word	0x40007800
 8008a18:	40007c00 	.word	0x40007c00
 8008a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a20:	d006      	beq.n	8008a30 <UART_SetConfig+0x330>
 8008a22:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008a26:	d009      	beq.n	8008a3c <UART_SetConfig+0x33c>
 8008a28:	e00b      	b.n	8008a42 <UART_SetConfig+0x342>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	77fb      	strb	r3, [r7, #31]
 8008a2e:	e00e      	b.n	8008a4e <UART_SetConfig+0x34e>
 8008a30:	2302      	movs	r3, #2
 8008a32:	77fb      	strb	r3, [r7, #31]
 8008a34:	e00b      	b.n	8008a4e <UART_SetConfig+0x34e>
 8008a36:	2304      	movs	r3, #4
 8008a38:	77fb      	strb	r3, [r7, #31]
 8008a3a:	e008      	b.n	8008a4e <UART_SetConfig+0x34e>
 8008a3c:	2308      	movs	r3, #8
 8008a3e:	77fb      	strb	r3, [r7, #31]
 8008a40:	e005      	b.n	8008a4e <UART_SetConfig+0x34e>
 8008a42:	2310      	movs	r3, #16
 8008a44:	77fb      	strb	r3, [r7, #31]
 8008a46:	bf00      	nop
 8008a48:	e001      	b.n	8008a4e <UART_SetConfig+0x34e>
 8008a4a:	2310      	movs	r3, #16
 8008a4c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a56:	d17f      	bne.n	8008b58 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008a58:	7ffb      	ldrb	r3, [r7, #31]
 8008a5a:	2b08      	cmp	r3, #8
 8008a5c:	d85c      	bhi.n	8008b18 <UART_SetConfig+0x418>
 8008a5e:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <UART_SetConfig+0x364>)
 8008a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a64:	08008a89 	.word	0x08008a89
 8008a68:	08008aa9 	.word	0x08008aa9
 8008a6c:	08008ac9 	.word	0x08008ac9
 8008a70:	08008b19 	.word	0x08008b19
 8008a74:	08008ae1 	.word	0x08008ae1
 8008a78:	08008b19 	.word	0x08008b19
 8008a7c:	08008b19 	.word	0x08008b19
 8008a80:	08008b19 	.word	0x08008b19
 8008a84:	08008b01 	.word	0x08008b01
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a88:	f7fe fbe0 	bl	800724c <HAL_RCC_GetPCLK1Freq>
 8008a8c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	005a      	lsls	r2, r3, #1
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	085b      	lsrs	r3, r3, #1
 8008a98:	441a      	add	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	61bb      	str	r3, [r7, #24]
        break;
 8008aa6:	e03a      	b.n	8008b1e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008aa8:	f7fe fbe4 	bl	8007274 <HAL_RCC_GetPCLK2Freq>
 8008aac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	005a      	lsls	r2, r3, #1
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	085b      	lsrs	r3, r3, #1
 8008ab8:	441a      	add	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	61bb      	str	r3, [r7, #24]
        break;
 8008ac6:	e02a      	b.n	8008b1e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	085a      	lsrs	r2, r3, #1
 8008ace:	4b5f      	ldr	r3, [pc, #380]	; (8008c4c <UART_SetConfig+0x54c>)
 8008ad0:	4413      	add	r3, r2
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	6852      	ldr	r2, [r2, #4]
 8008ad6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	61bb      	str	r3, [r7, #24]
        break;
 8008ade:	e01e      	b.n	8008b1e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ae0:	f7fe fad0 	bl	8007084 <HAL_RCC_GetSysClockFreq>
 8008ae4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	005a      	lsls	r2, r3, #1
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	085b      	lsrs	r3, r3, #1
 8008af0:	441a      	add	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	61bb      	str	r3, [r7, #24]
        break;
 8008afe:	e00e      	b.n	8008b1e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	085b      	lsrs	r3, r3, #1
 8008b06:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	61bb      	str	r3, [r7, #24]
        break;
 8008b16:	e002      	b.n	8008b1e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	75fb      	strb	r3, [r7, #23]
        break;
 8008b1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	2b0f      	cmp	r3, #15
 8008b22:	d916      	bls.n	8008b52 <UART_SetConfig+0x452>
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b2a:	d212      	bcs.n	8008b52 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	f023 030f 	bic.w	r3, r3, #15
 8008b34:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	085b      	lsrs	r3, r3, #1
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	f003 0307 	and.w	r3, r3, #7
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	897b      	ldrh	r3, [r7, #10]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	897a      	ldrh	r2, [r7, #10]
 8008b4e:	60da      	str	r2, [r3, #12]
 8008b50:	e070      	b.n	8008c34 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	75fb      	strb	r3, [r7, #23]
 8008b56:	e06d      	b.n	8008c34 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008b58:	7ffb      	ldrb	r3, [r7, #31]
 8008b5a:	2b08      	cmp	r3, #8
 8008b5c:	d859      	bhi.n	8008c12 <UART_SetConfig+0x512>
 8008b5e:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <UART_SetConfig+0x464>)
 8008b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b64:	08008b89 	.word	0x08008b89
 8008b68:	08008ba7 	.word	0x08008ba7
 8008b6c:	08008bc5 	.word	0x08008bc5
 8008b70:	08008c13 	.word	0x08008c13
 8008b74:	08008bdd 	.word	0x08008bdd
 8008b78:	08008c13 	.word	0x08008c13
 8008b7c:	08008c13 	.word	0x08008c13
 8008b80:	08008c13 	.word	0x08008c13
 8008b84:	08008bfb 	.word	0x08008bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b88:	f7fe fb60 	bl	800724c <HAL_RCC_GetPCLK1Freq>
 8008b8c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	085a      	lsrs	r2, r3, #1
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	441a      	add	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	61bb      	str	r3, [r7, #24]
        break;
 8008ba4:	e038      	b.n	8008c18 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ba6:	f7fe fb65 	bl	8007274 <HAL_RCC_GetPCLK2Freq>
 8008baa:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	085a      	lsrs	r2, r3, #1
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	441a      	add	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	61bb      	str	r3, [r7, #24]
        break;
 8008bc2:	e029      	b.n	8008c18 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	085a      	lsrs	r2, r3, #1
 8008bca:	4b21      	ldr	r3, [pc, #132]	; (8008c50 <UART_SetConfig+0x550>)
 8008bcc:	4413      	add	r3, r2
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	6852      	ldr	r2, [r2, #4]
 8008bd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	61bb      	str	r3, [r7, #24]
        break;
 8008bda:	e01d      	b.n	8008c18 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bdc:	f7fe fa52 	bl	8007084 <HAL_RCC_GetSysClockFreq>
 8008be0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	085a      	lsrs	r2, r3, #1
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	441a      	add	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	61bb      	str	r3, [r7, #24]
        break;
 8008bf8:	e00e      	b.n	8008c18 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	085b      	lsrs	r3, r3, #1
 8008c00:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	61bb      	str	r3, [r7, #24]
        break;
 8008c10:	e002      	b.n	8008c18 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	75fb      	strb	r3, [r7, #23]
        break;
 8008c16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	2b0f      	cmp	r3, #15
 8008c1c:	d908      	bls.n	8008c30 <UART_SetConfig+0x530>
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c24:	d204      	bcs.n	8008c30 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	60da      	str	r2, [r3, #12]
 8008c2e:	e001      	b.n	8008c34 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3720      	adds	r7, #32
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	01e84800 	.word	0x01e84800
 8008c50:	00f42400 	.word	0x00f42400

08008c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00a      	beq.n	8008c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c82:	f003 0302 	and.w	r3, r3, #2
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00a      	beq.n	8008ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	f003 0304 	and.w	r3, r3, #4
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00a      	beq.n	8008cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc6:	f003 0308 	and.w	r3, r3, #8
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00a      	beq.n	8008ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	f003 0310 	and.w	r3, r3, #16
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00a      	beq.n	8008d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0a:	f003 0320 	and.w	r3, r3, #32
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00a      	beq.n	8008d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	430a      	orrs	r2, r1
 8008d26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d01a      	beq.n	8008d6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	430a      	orrs	r2, r1
 8008d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d52:	d10a      	bne.n	8008d6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	430a      	orrs	r2, r1
 8008d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00a      	beq.n	8008d8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	605a      	str	r2, [r3, #4]
  }
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af02      	add	r7, sp, #8
 8008d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008da6:	f7fc fca3 	bl	80056f0 <HAL_GetTick>
 8008daa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0308 	and.w	r3, r3, #8
 8008db6:	2b08      	cmp	r3, #8
 8008db8:	d10e      	bne.n	8008dd8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f82a 	bl	8008e22 <UART_WaitOnFlagUntilTimeout>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e020      	b.n	8008e1a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0304 	and.w	r3, r3, #4
 8008de2:	2b04      	cmp	r3, #4
 8008de4:	d10e      	bne.n	8008e04 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008de6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f814 	bl	8008e22 <UART_WaitOnFlagUntilTimeout>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e00a      	b.n	8008e1a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2220      	movs	r2, #32
 8008e08:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2220      	movs	r2, #32
 8008e0e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	60f8      	str	r0, [r7, #12]
 8008e2a:	60b9      	str	r1, [r7, #8]
 8008e2c:	603b      	str	r3, [r7, #0]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e32:	e05d      	b.n	8008ef0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3a:	d059      	beq.n	8008ef0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e3c:	f7fc fc58 	bl	80056f0 <HAL_GetTick>
 8008e40:	4602      	mov	r2, r0
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	69ba      	ldr	r2, [r7, #24]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d302      	bcc.n	8008e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d11b      	bne.n	8008e8a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008e60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	689a      	ldr	r2, [r3, #8]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f022 0201 	bic.w	r2, r2, #1
 8008e70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2220      	movs	r2, #32
 8008e76:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2220      	movs	r2, #32
 8008e7c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e042      	b.n	8008f10 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 0304 	and.w	r3, r3, #4
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d02b      	beq.n	8008ef0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ea6:	d123      	bne.n	8008ef0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008eb0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ec0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	689a      	ldr	r2, [r3, #8]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f022 0201 	bic.w	r2, r2, #1
 8008ed0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2220      	movs	r2, #32
 8008ed6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2220      	movs	r2, #32
 8008edc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e00f      	b.n	8008f10 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	69da      	ldr	r2, [r3, #28]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	4013      	ands	r3, r2
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	bf0c      	ite	eq
 8008f00:	2301      	moveq	r3, #1
 8008f02:	2300      	movne	r3, #0
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	461a      	mov	r2, r3
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d092      	beq.n	8008e34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008f2e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2220      	movs	r2, #32
 8008f34:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008f36:	bf00      	nop
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b083      	sub	sp, #12
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f58:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689a      	ldr	r2, [r3, #8]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f022 0201 	bic.w	r2, r2, #1
 8008f68:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008f76:	bf00      	nop
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f98:	d01e      	beq.n	8008fd8 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008fb0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689a      	ldr	r2, [r3, #8]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f022 0201 	bic.w	r2, r2, #1
 8008fc0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	689a      	ldr	r2, [r3, #8]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fd0:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2220      	movs	r2, #32
 8008fd6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f7f8 fac1 	bl	8001560 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fde:	bf00      	nop
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f7ff fb6f 	bl	80086d8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b086      	sub	sp, #24
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009014:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800901a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009026:	2b80      	cmp	r3, #128	; 0x80
 8009028:	d109      	bne.n	800903e <UART_DMAError+0x3c>
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	2b21      	cmp	r3, #33	; 0x21
 800902e:	d106      	bne.n	800903e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	2200      	movs	r2, #0
 8009034:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009038:	6978      	ldr	r0, [r7, #20]
 800903a:	f7ff ff6d 	bl	8008f18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009048:	2b40      	cmp	r3, #64	; 0x40
 800904a:	d109      	bne.n	8009060 <UART_DMAError+0x5e>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2b22      	cmp	r3, #34	; 0x22
 8009050:	d106      	bne.n	8009060 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	2200      	movs	r2, #0
 8009056:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800905a:	6978      	ldr	r0, [r7, #20]
 800905c:	f7ff ff71 	bl	8008f42 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009064:	f043 0210 	orr.w	r2, r3, #16
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800906c:	6978      	ldr	r0, [r7, #20]
 800906e:	f7ff fb3d 	bl	80086ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009072:	bf00      	nop
 8009074:	3718      	adds	r7, #24
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <__libc_init_array>:
 800907c:	b570      	push	{r4, r5, r6, lr}
 800907e:	4e0d      	ldr	r6, [pc, #52]	; (80090b4 <__libc_init_array+0x38>)
 8009080:	4c0d      	ldr	r4, [pc, #52]	; (80090b8 <__libc_init_array+0x3c>)
 8009082:	1ba4      	subs	r4, r4, r6
 8009084:	10a4      	asrs	r4, r4, #2
 8009086:	2500      	movs	r5, #0
 8009088:	42a5      	cmp	r5, r4
 800908a:	d109      	bne.n	80090a0 <__libc_init_array+0x24>
 800908c:	4e0b      	ldr	r6, [pc, #44]	; (80090bc <__libc_init_array+0x40>)
 800908e:	4c0c      	ldr	r4, [pc, #48]	; (80090c0 <__libc_init_array+0x44>)
 8009090:	f000 f820 	bl	80090d4 <_init>
 8009094:	1ba4      	subs	r4, r4, r6
 8009096:	10a4      	asrs	r4, r4, #2
 8009098:	2500      	movs	r5, #0
 800909a:	42a5      	cmp	r5, r4
 800909c:	d105      	bne.n	80090aa <__libc_init_array+0x2e>
 800909e:	bd70      	pop	{r4, r5, r6, pc}
 80090a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090a4:	4798      	blx	r3
 80090a6:	3501      	adds	r5, #1
 80090a8:	e7ee      	b.n	8009088 <__libc_init_array+0xc>
 80090aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090ae:	4798      	blx	r3
 80090b0:	3501      	adds	r5, #1
 80090b2:	e7f2      	b.n	800909a <__libc_init_array+0x1e>
 80090b4:	0800968c 	.word	0x0800968c
 80090b8:	0800968c 	.word	0x0800968c
 80090bc:	0800968c 	.word	0x0800968c
 80090c0:	08009690 	.word	0x08009690

080090c4 <memset>:
 80090c4:	4402      	add	r2, r0
 80090c6:	4603      	mov	r3, r0
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d100      	bne.n	80090ce <memset+0xa>
 80090cc:	4770      	bx	lr
 80090ce:	f803 1b01 	strb.w	r1, [r3], #1
 80090d2:	e7f9      	b.n	80090c8 <memset+0x4>

080090d4 <_init>:
 80090d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d6:	bf00      	nop
 80090d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090da:	bc08      	pop	{r3}
 80090dc:	469e      	mov	lr, r3
 80090de:	4770      	bx	lr

080090e0 <_fini>:
 80090e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e2:	bf00      	nop
 80090e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e6:	bc08      	pop	{r3}
 80090e8:	469e      	mov	lr, r3
 80090ea:	4770      	bx	lr
